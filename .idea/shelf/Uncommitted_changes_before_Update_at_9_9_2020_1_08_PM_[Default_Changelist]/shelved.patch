Index: initializers/file-manager.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class fileManager {\r\n\r\n    upload(file, file_name, options) {\r\n\r\n        let limited_size = 0;\r\n        switch(options.allowed_formats){\r\n\r\n            case 'image':\r\n            {\r\n\r\n                options.allowed_formats = ['.png', '.jpeg', '.jpg', '.gif', '.PNG', '.JPG', '.JPEG', '.GIF'];\r\n                limited_size = config.image_limited_size;\r\n                break;\r\n\r\n            }\r\n            case 'other':\r\n            {\r\n\r\n                options.allowed_formats = ['*'];\r\n                limited_size = config.other_limited_size;\r\n                break;\r\n\r\n            }\r\n            case 'video':\r\n            {\r\n\r\n                options.allowed_formats = ['.mp4', '.webm', '.ogg', '.mkv'];\r\n                limited_size = config.video_limited_size;\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        let file_extension = path.extname(file_name);\r\n\r\n        if(options.allowed_formats.includes(file_extension) || options.allowed_formats[0] == '*'){\r\n\r\n            if(file.size/1024 <= limited_size){\r\n\r\n                file.mv(options.file_path + `/${file_name}`, (err)=>{\r\n\r\n                    if(err){\r\n\r\n                        return 'آپلود فایل با مشکل مواجه شد.';\r\n\r\n                    }\r\n                    else{\r\n\r\n                        return null;\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n            else{\r\n\r\n                return 'سایز فایل انتخابی بیشتر از حد مجاز است.'\r\n\r\n            }\r\n\r\n        }\r\n        else{\r\n\r\n            return 'نوع فایل انتخابی معتبر نمی باشد.'\r\n\r\n        }\r\n\r\n    }\r\n\r\n    delete(file_path){\r\n\r\n        fs.unlink(file_path, function(err) {\r\n\r\n            if(err){\r\n\r\n                log(err)\r\n\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    getPathContent(file_path, root_path){\r\n\r\n        return new Promise((resolve, reject)=>{\r\n\r\n            fs.readdir(file_path, (err, files)=>{\r\n\r\n                if(err){\r\n\r\n                    reject(err);\r\n\r\n                }\r\n                else{\r\n\r\n                    let promise_array = [];\r\n\r\n                    for(let file_name of files){\r\n                        promise_array.push(this.getPathDetail(file_path + file_name, root_path, true));\r\n                    }\r\n\r\n                    Promise.all(promise_array).then((content)=>{\r\n\r\n                        let temp_parent_path_1 = file_path.replace(path.basename(file_path) + '/', '');\r\n                        let temp_parent_path_2 = temp_parent_path_1.replace(/\\/\\//g, '/');\r\n                        let temp_breadcrumb_2 = file_path.replace(/\\/\\//g, '/');\r\n\r\n                        resolve({\r\n                            breadcrumb : temp_breadcrumb_2.replace(root_path, ''),\r\n                            parent_directory : temp_parent_path_2.replace(root_path, ''),\r\n                            content : content.sort((a, b)=>{return (a.isFile === b.isFile)? 0 : a? -1 : 1;})\r\n                        });\r\n\r\n                    })\r\n\r\n                }\r\n\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    getPathDetail(file_path, root_path, convert_size){\r\n\r\n        return new Promise((resolve, reject)=>{\r\n\r\n            fs.stat(file_path, (err, stats)=>{\r\n\r\n                let new_modified = new JalaliDate(stats.mtime);\r\n                let new_created = new JalaliDate(stats.ctime);\r\n\r\n                resolve({\r\n\r\n                    name : path.basename(file_path),\r\n                    path : file_path.replace(root_path, ''),\r\n                    size : convert_size ? this.convertSize(stats.size) : stats.size,\r\n                    isFile : stats.isFile(),\r\n                    modified : new_modified.format('YYYY/MM/DD'),\r\n                    created : new_created.format('YYYY/MM/DD'),\r\n                    type : path.extname(file_path)\r\n\r\n                });\r\n\r\n            });\r\n\r\n        })\r\n\r\n    }\r\n\r\n    convertSize(size){\r\n\r\n        let result;\r\n\r\n        if(size < 1024){\r\n            result = size + ' B';\r\n        }\r\n        else if(size < 1024*1024){\r\n            result = (size/1024).toFixed(2) + ' KB';\r\n        }\r\n        else if(size < 1024*1024*1024){\r\n            result = (size/1024/1024).toFixed(2) + ' MB';\r\n        }\r\n        else{\r\n            result = (size/1024/1024/1024).toFixed(2) + ' GB';\r\n        }\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = new fileManager()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- initializers/file-manager.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ initializers/file-manager.js	(date 1599639507846)
@@ -83,7 +83,7 @@
 
     }
 
-    getPathContent(file_path, root_path){
+    getPathContent(file_path, root_path, page_number, page_limit){
 
         return new Promise((resolve, reject)=>{
 
@@ -107,11 +107,13 @@
                         let temp_parent_path_1 = file_path.replace(path.basename(file_path) + '/', '');
                         let temp_parent_path_2 = temp_parent_path_1.replace(/\/\//g, '/');
                         let temp_breadcrumb_2 = file_path.replace(/\/\//g, '/');
+                        let skip = page_number * page_limit - page_limit;
+                        let listed_content = content.slice(skip, skip + page_limit);
 
                         resolve({
                             breadcrumb : temp_breadcrumb_2.replace(root_path, ''),
                             parent_directory : temp_parent_path_2.replace(root_path, ''),
-                            content : content.sort((a, b)=>{return (a.isFile === b.isFile)? 0 : a? -1 : 1;})
+                            content : listed_content.sort((a, b)=>{return (a.isFile === b.isFile)? 0 : a? -1 : 1;})
                         });
 
                     })
@@ -151,6 +153,17 @@
 
     }
 
+    getDiskInfo(path) {
+
+        return disk(path).then((diskSpace) => {
+            return {
+                free : this.convertSize(diskSpace.free),
+                size : this.convertSize(diskSpace.size),
+            }
+        })
+
+    }
+
     convertSize(size){
 
         let result;
Index: backend/api/file-manager/content-load.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const router = express.Router();\r\n\r\nrouter.post('/', async (req, res, next)=>{\r\n\r\n    try{\r\n\r\n        let file_path = backend_upload_dir + req.body.path + '/';\r\n        let content_list = await fileManager.getPathContent(file_path, backend_upload_dir);\r\n\r\n        res.json(content_list);\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        next(error);\r\n\r\n    }\r\n\r\n})\r\n\r\nmodule.exports = router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/api/file-manager/content-load.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/api/file-manager/content-load.js	(date 1599640643370)
@@ -5,7 +5,7 @@
     try{
 
         let file_path = backend_upload_dir + req.body.path + '/';
-        let content_list = await fileManager.getPathContent(file_path, backend_upload_dir);
+        let content_list = await fileManager.getPathContent(file_path, backend_upload_dir, 1, 5);
 
         res.json(content_list);
 
Index: backend/branches/files/files.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const router = express.Router();\r\n\r\nrouter.get('/', async(req, res, next)=>{\r\n\r\n    try{\r\n\r\n        let data = {\r\n\r\n            content_list : await fileManager.getPathContent(backend_upload_dir, backend_upload_dir)\r\n\r\n        }\r\n\r\n        res.render('files/files', data);\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        next(error);\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/branches/files/files.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/branches/files/files.js	(date 1599640612342)
@@ -4,11 +4,28 @@
 
     try{
 
+        req.session.file_manager_page = 1;
+        let page_number = req.session.file_manager_page;
+        let page_limit = req.session.limit;
+
+        if(!req.session.limit){
+
+            page_limit = 10;
+
+        }
+
         let data = {
 
-            content_list : await fileManager.getPathContent(backend_upload_dir, backend_upload_dir)
+            content_list : await fileManager.getPathContent(backend_upload_dir, backend_upload_dir, page_number, page_limit),
+            disk_info : await fileManager.getDiskInfo(backend_upload_dir),
+            page_number : '',
+            page_limit : '',
+            rows_begin_number : '',
+            total_pages : '',
 
         }
+
+        log(data.disk_info)
 
         res.render('files/files', data);
 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM__Default_Changelist_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM__Default_Changelist_.xml	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM__Default_Changelist_.xml	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM_[Default_Changelist]" date="1598945647977" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 9/1/2020 12:04 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM_[Default_Changelist]/shelved.patch	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_9_1_2020_12_04_PM_[Default_Changelist]/shelved.patch	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
@@ -1,11 +0,0 @@
-Index: models/global.js
-===================================================================
---- models/global.js	(revision 804920ff5178372ee6c7bd901b889b5e0d287cb2)
-+++ models/global.js	(revision 804920ff5178372ee6c7bd901b889b5e0d287cb2)
-@@ -1,5 +0,0 @@
--module.exports = async function (schema, options){
--
--
--
--}
-\ No newline at end of file
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"quince\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Quince CMS created by Rush Team\",\r\n  \"main\": \"app.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"author\": \"Rush Team\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"adaro\": \"^1.0.4\",\r\n    \"body-parser\": \"^1.19.0\",\r\n    \"common-dustjs-helpers\": \"^1.5.1\",\r\n    \"compression\": \"^1.7.4\",\r\n    \"connect-mongo\": \"^3.2.0\",\r\n    \"dustjs-linkedin\": \"^2.7.5\",\r\n    \"express\": \"^4.17.1\",\r\n    \"express-fileupload\": \"^1.2.0\",\r\n    \"express-session\": \"^1.17.1\",\r\n    \"html-entities\": \"^1.3.1\",\r\n    \"jalali-date\": \"^1.1.1\",\r\n    \"mongoose\": \"^5.10.2\",\r\n    \"nodemailer\": \"^6.4.11\",\r\n    \"sha1\": \"^1.1.1\",\r\n    \"svg-captcha\": \"^1.4.0\"\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ package.json	(date 1599636091202)
@@ -11,6 +11,7 @@
   "dependencies": {
     "adaro": "^1.0.4",
     "body-parser": "^1.19.0",
+    "check-disk-space": "^2.1.0",
     "common-dustjs-helpers": "^1.5.1",
     "compression": "^1.7.4",
     "connect-mongo": "^3.2.0",
@@ -20,7 +21,7 @@
     "express-session": "^1.17.1",
     "html-entities": "^1.3.1",
     "jalali-date": "^1.1.1",
-    "mongoose": "^5.10.2",
+    "mongoose": "^5.10.3",
     "nodemailer": "^6.4.11",
     "sha1": "^1.1.1",
     "svg-captcha": "^1.4.0"
Index: node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\r\nconst handleTimestampOption = require('../schema/handleTimestampOption');\r\n\r\nmodule.exports = applyTimestampsToChildren;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction applyTimestampsToChildren(now, update, schema) {\r\n  if (update == null) {\r\n    return;\r\n  }\r\n\r\n  const keys = Object.keys(update);\r\n  const hasDollarKey = keys.length && keys[0].startsWith('$');\r\n\r\n  if (hasDollarKey) {\r\n    if (update.$push) {\r\n      for (const key of Object.keys(update.$push)) {\r\n        const $path = schema.path(key);\r\n        if (update.$push[key] &&\r\n            $path &&\r\n            $path.$isMongooseDocumentArray &&\r\n            $path.schema.options.timestamps) {\r\n          const timestamps = $path.schema.options.timestamps;\r\n          const createdAt = handleTimestampOption(timestamps, 'createdAt');\r\n          const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\r\n          if (update.$push[key].$each) {\r\n            update.$push[key].$each.forEach(function(subdoc) {\r\n              if (updatedAt != null) {\r\n                subdoc[updatedAt] = now;\r\n              }\r\n              if (createdAt != null) {\r\n                subdoc[createdAt] = now;\r\n              }\r\n            });\r\n          } else {\r\n            if (updatedAt != null) {\r\n              update.$push[key][updatedAt] = now;\r\n            }\r\n            if (createdAt != null) {\r\n              update.$push[key][createdAt] = now;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (update.$set != null) {\r\n      const keys = Object.keys(update.$set);\r\n      for (const key of keys) {\r\n        applyTimestampsToUpdateKey(schema, key, update.$set, now);\r\n      }\r\n    }\r\n  } else {\r\n    const keys = Object.keys(update).filter(key => !key.startsWith('$'));\r\n    for (const key of keys) {\r\n      applyTimestampsToUpdateKey(schema, key, update, now);\r\n    }\r\n  }\r\n}\r\n\r\nfunction applyTimestampsToDocumentArray(arr, schematype, now) {\r\n  const timestamps = schematype.schema.options.timestamps;\r\n\r\n  if (!timestamps) {\r\n    return;\r\n  }\r\n\r\n  const len = arr.length;\r\n\r\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\r\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\r\n  for (let i = 0; i < len; ++i) {\r\n    if (updatedAt != null) {\r\n      arr[i][updatedAt] = now;\r\n    }\r\n    if (createdAt != null) {\r\n      arr[i][createdAt] = now;\r\n    }\r\n\r\n    applyTimestampsToChildren(now, arr[i], schematype.schema);\r\n  }\r\n}\r\n\r\nfunction applyTimestampsToSingleNested(subdoc, schematype, now) {\r\n  const timestamps = schematype.schema.options.timestamps;\r\n  if (!timestamps) {\r\n    return;\r\n  }\r\n\r\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\r\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\r\n  if (updatedAt != null) {\r\n    subdoc[updatedAt] = now;\r\n  }\r\n  if (createdAt != null) {\r\n    subdoc[createdAt] = now;\r\n  }\r\n\r\n  applyTimestampsToChildren(now, subdoc, schematype.schema);\r\n}\r\n\r\nfunction applyTimestampsToUpdateKey(schema, key, update, now) {\r\n  // Replace positional operator `$` and array filters `$[]` and `$[.*]`\r\n  const keyToSearch = cleanPositionalOperators(key);\r\n  const path = schema.path(keyToSearch);\r\n  if (!path) {\r\n    return;\r\n  }\r\n\r\n  const parentSchemaTypes = [];\r\n  const pieces = keyToSearch.split('.');\r\n  for (let i = pieces.length - 1; i > 0; --i) {\r\n    const s = schema.path(pieces.slice(0, i).join('.'));\r\n    if (s != null &&\r\n      (s.$isMongooseDocumentArray || s.$isSingleNested)) {\r\n      parentSchemaTypes.push({ parentPath: key.split('.').slice(0, i).join('.'), parentSchemaType: s });\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(update[key]) && path.$isMongooseDocumentArray) {\r\n    applyTimestampsToDocumentArray(update[key], path, now);\r\n  } else if (update[key] && path.$isSingleNested) {\r\n    applyTimestampsToSingleNested(update[key], path, now);\r\n  } else if (parentSchemaTypes.length > 0) {\r\n    for (const item of parentSchemaTypes) {\r\n      const parentPath = item.parentPath;\r\n      const parentSchemaType = item.parentSchemaType;\r\n      const timestamps = parentSchemaType.schema.options.timestamps;\r\n      const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\r\n\r\n      if (!timestamps || updatedAt == null) {\r\n        continue;\r\n      }\r\n\r\n      if (parentSchemaType.$isSingleNested) {\r\n        // Single nested is easy\r\n        update[parentPath + '.' + updatedAt] = now;\r\n      } else if (parentSchemaType.$isMongooseDocumentArray) {\r\n        let childPath = key.substr(parentPath.length + 1);\r\n\r\n        if (/^\\d+$/.test(childPath)) {\r\n          update[parentPath + '.' + childPath][updatedAt] = now;\r\n          continue;\r\n        }\r\n\r\n        const firstDot = childPath.indexOf('.');\r\n        childPath = firstDot !== -1 ? childPath.substr(0, firstDot) : childPath;\r\n\r\n        update[parentPath + '.' + childPath + '.' + updatedAt] = now;\r\n      }\r\n    }\r\n  } else if (path.schema != null && path.schema != schema && update[key]) {\r\n    const timestamps = path.schema.options.timestamps;\r\n    const createdAt = handleTimestampOption(timestamps, 'createdAt');\r\n    const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\r\n\r\n    if (!timestamps) {\r\n      return;\r\n    }\r\n\r\n    if (updatedAt != null) {\r\n      update[key][updatedAt] = now;\r\n    }\r\n    if (createdAt != null) {\r\n      update[key][createdAt] = now;\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/helpers/update/applyTimestampsToChildren.js	(date 499162500000)
@@ -15,7 +15,7 @@
   }
 
   const keys = Object.keys(update);
-  const hasDollarKey = keys.length && keys[0].startsWith('$');
+  const hasDollarKey = keys.some(key => key.startsWith('$'));
 
   if (hasDollarKey) {
     if (update.$push) {
@@ -54,11 +54,11 @@
         applyTimestampsToUpdateKey(schema, key, update.$set, now);
       }
     }
-  } else {
-    const keys = Object.keys(update).filter(key => !key.startsWith('$'));
-    for (const key of keys) {
-      applyTimestampsToUpdateKey(schema, key, update, now);
-    }
+  }
+
+  const updateKeys = Object.keys(update).filter(key => !key.startsWith('$'));
+  for (const key of updateKeys) {
+    applyTimestampsToUpdateKey(schema, key, update, now);
   }
 }
 
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"name\": \"quince\",\r\n  \"version\": \"1.0.0\",\r\n  \"lockfileVersion\": 1,\r\n  \"requires\": true,\r\n  \"dependencies\": {\r\n    \"accepts\": {\r\n      \"version\": \"1.3.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/accepts/-/accepts-1.3.7.tgz\",\r\n      \"integrity\": \"sha512-Il80Qs2WjYlJIBNzNkK6KYqlVMTbZLXgHx2oT0pU/fjRHyEp+PEfEPY0R3WCwAGVOtauxh1hOxNgIf5bv7dQpA==\",\r\n      \"requires\": {\r\n        \"mime-types\": \"~2.1.24\",\r\n        \"negotiator\": \"0.6.2\"\r\n      }\r\n    },\r\n    \"adaro\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/adaro/-/adaro-1.0.4.tgz\",\r\n      \"integrity\": \"sha1-BXBqBU1NAJfOHD6jGSgbhcndiiQ=\",\r\n      \"requires\": {\r\n        \"aproba\": \"^1.0.1\",\r\n        \"core-util-is\": \"^1.0.0\",\r\n        \"debuglog\": \"^1.0.1\",\r\n        \"dustjs-helpers\": \"~1.7.0\",\r\n        \"dustjs-linkedin\": \"~2.7.1\",\r\n        \"freshy\": \"^1.0.0\",\r\n        \"path-is-absolute\": \"^1.0.0\",\r\n        \"verror\": \"^1.6.0\"\r\n      }\r\n    },\r\n    \"anymatch\": {\r\n      \"version\": \"1.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/anymatch/-/anymatch-1.3.2.tgz\",\r\n      \"integrity\": \"sha512-0XNayC8lTHQ2OI8aljNCN3sSx6hsr/1+rlcDAotXJR7C1oZZHCNsfpbKwMjRA3Uqb5tF1Rae2oloTr4xpq+WjA==\",\r\n      \"requires\": {\r\n        \"micromatch\": \"^2.1.5\",\r\n        \"normalize-path\": \"^2.0.0\"\r\n      }\r\n    },\r\n    \"aproba\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/aproba/-/aproba-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-Y9J6ZjXtoYh8RnXVCMOU/ttDmk1aBjunq9vO0ta5x85WDQiQfUF9sIPBITdbiiIVcBo03Hi3jMxigBtsddlXRw==\"\r\n    },\r\n    \"arr-diff\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/arr-diff/-/arr-diff-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-jzuCf5Vai9ZpaX5KQlasPOrjVs8=\",\r\n      \"requires\": {\r\n        \"arr-flatten\": \"^1.0.1\"\r\n      }\r\n    },\r\n    \"arr-flatten\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/arr-flatten/-/arr-flatten-1.1.0.tgz\",\r\n      \"integrity\": \"sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==\"\r\n    },\r\n    \"arr-union\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/arr-union/-/arr-union-3.1.0.tgz\",\r\n      \"integrity\": \"sha1-45sJrqne+Gao8gbiiK9jkZuuOcQ=\"\r\n    },\r\n    \"array-flatten\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-ml9pkFGx5wczKPKgCJaLZOopVdI=\"\r\n    },\r\n    \"array-unique\": {\r\n      \"version\": \"0.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/array-unique/-/array-unique-0.2.1.tgz\",\r\n      \"integrity\": \"sha1-odl8yvy8JiXMcPrc6zalDFiwGlM=\"\r\n    },\r\n    \"assert-plus\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=\"\r\n    },\r\n    \"assign-symbols\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/assign-symbols/-/assign-symbols-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c=\"\r\n    },\r\n    \"async-each\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/async-each/-/async-each-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-z/WhQ5FPySLdvREByI2vZiTWwCnF0moMJ1hK9YQwDTHKh6I7/uSckMetoRGb5UBZPC1z0jlw+n/XCgjeH7y1AQ==\"\r\n    },\r\n    \"atob\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/atob/-/atob-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==\"\r\n    },\r\n    \"balanced-match\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\"\r\n    },\r\n    \"base\": {\r\n      \"version\": \"0.11.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/base/-/base-0.11.2.tgz\",\r\n      \"integrity\": \"sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==\",\r\n      \"requires\": {\r\n        \"cache-base\": \"^1.0.1\",\r\n        \"class-utils\": \"^0.3.5\",\r\n        \"component-emitter\": \"^1.2.1\",\r\n        \"define-property\": \"^1.0.0\",\r\n        \"isobject\": \"^3.0.1\",\r\n        \"mixin-deep\": \"^1.2.0\",\r\n        \"pascalcase\": \"^0.1.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"define-property\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz\",\r\n          \"integrity\": \"sha1-dp66rz9KY6rTr56NMEybvnm/sOY=\",\r\n          \"requires\": {\r\n            \"is-descriptor\": \"^1.0.0\"\r\n          }\r\n        },\r\n        \"is-accessor-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-data-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-descriptor\": {\r\n          \"version\": \"1.0.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz\",\r\n          \"integrity\": \"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\r\n          \"requires\": {\r\n            \"is-accessor-descriptor\": \"^1.0.0\",\r\n            \"is-data-descriptor\": \"^1.0.0\",\r\n            \"kind-of\": \"^6.0.2\"\r\n          }\r\n        },\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        },\r\n        \"kind-of\": {\r\n          \"version\": \"6.0.3\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\r\n          \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\"\r\n        }\r\n      }\r\n    },\r\n    \"binary-extensions\": {\r\n      \"version\": \"1.13.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/binary-extensions/-/binary-extensions-1.13.1.tgz\",\r\n      \"integrity\": \"sha512-Un7MIEDdUC5gNpcGDV97op1Ywk748MpHcFTHoYs6qnj1Z3j7I53VG3nwZhKzoBZmbdRNnb6WRdFlwl7tSDuZGw==\"\r\n    },\r\n    \"bindings\": {\r\n      \"version\": \"1.5.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz\",\r\n      \"integrity\": \"sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==\",\r\n      \"optional\": true,\r\n      \"requires\": {\r\n        \"file-uri-to-path\": \"1.0.0\"\r\n      }\r\n    },\r\n    \"bl\": {\r\n      \"version\": \"2.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bl/-/bl-2.2.0.tgz\",\r\n      \"integrity\": \"sha512-wbgvOpqopSr7uq6fJrLH8EsvYMJf9gzfo2jCsL2eTy75qXPukA4pCgHamOQkZtY5vmfVtjB+P3LNlMHW5CEZXA==\",\r\n      \"requires\": {\r\n        \"readable-stream\": \"^2.3.5\",\r\n        \"safe-buffer\": \"^5.1.1\"\r\n      }\r\n    },\r\n    \"bluebird\": {\r\n      \"version\": \"3.5.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/bluebird/-/bluebird-3.5.1.tgz\",\r\n      \"integrity\": \"sha512-MKiLiV+I1AA596t9w1sQJ8jkiSr5+ZKi0WKrYGUn6d1Fx+Ij4tIj+m2WMQSGczs5jZVxV339chE8iwk6F64wjA==\"\r\n    },\r\n    \"body-parser\": {\r\n      \"version\": \"1.19.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/body-parser/-/body-parser-1.19.0.tgz\",\r\n      \"integrity\": \"sha512-dhEPs72UPbDnAQJ9ZKMNTP6ptJaionhP5cBb541nXPlW60Jepo9RV/a4fX4XWW9CuFNK22krhrj1+rgzifNCsw==\",\r\n      \"requires\": {\r\n        \"bytes\": \"3.1.0\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"http-errors\": \"1.7.2\",\r\n        \"iconv-lite\": \"0.4.24\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"qs\": \"6.7.0\",\r\n        \"raw-body\": \"2.4.0\",\r\n        \"type-is\": \"~1.6.17\"\r\n      }\r\n    },\r\n    \"brace-expansion\": {\r\n      \"version\": \"1.1.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\r\n      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\r\n      \"requires\": {\r\n        \"balanced-match\": \"^1.0.0\",\r\n        \"concat-map\": \"0.0.1\"\r\n      }\r\n    },\r\n    \"braces\": {\r\n      \"version\": \"1.8.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/braces/-/braces-1.8.5.tgz\",\r\n      \"integrity\": \"sha1-uneWLhLf+WnWt2cR6RS3N4V79qc=\",\r\n      \"requires\": {\r\n        \"expand-range\": \"^1.8.1\",\r\n        \"preserve\": \"^0.2.0\",\r\n        \"repeat-element\": \"^1.1.2\"\r\n      }\r\n    },\r\n    \"bson\": {\r\n      \"version\": \"1.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/bson/-/bson-1.1.3.tgz\",\r\n      \"integrity\": \"sha512-TdiJxMVnodVS7r0BdL42y/pqC9cL2iKynVwA0Ho3qbsQYr428veL3l7BQyuqiw+Q5SqqoT0m4srSY/BlZ9AxXg==\"\r\n    },\r\n    \"busboy\": {\r\n      \"version\": \"0.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/busboy/-/busboy-0.3.1.tgz\",\r\n      \"integrity\": \"sha512-y7tTxhGKXcyBxRKAni+awqx8uqaJKrSFSNFSeRG5CsWNdmy2BIK+6VGWEW7TZnIO/533mtMEA4rOevQV815YJw==\",\r\n      \"requires\": {\r\n        \"dicer\": \"0.3.0\"\r\n      }\r\n    },\r\n    \"bytes\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-zauLjrfCG+xvoyaqLoV8bLVXXNGC4JqlxFCutSDWA6fJrTo2ZuvLYTqZ7aHBLZSMOopbzwv8f+wZcVzfVTI2Dg==\"\r\n    },\r\n    \"cache-base\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cache-base/-/cache-base-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==\",\r\n      \"requires\": {\r\n        \"collection-visit\": \"^1.0.0\",\r\n        \"component-emitter\": \"^1.2.1\",\r\n        \"get-value\": \"^2.0.6\",\r\n        \"has-value\": \"^1.0.0\",\r\n        \"isobject\": \"^3.0.1\",\r\n        \"set-value\": \"^2.0.0\",\r\n        \"to-object-path\": \"^0.3.0\",\r\n        \"union-value\": \"^1.0.0\",\r\n        \"unset-value\": \"^1.0.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        }\r\n      }\r\n    },\r\n    \"caller\": {\r\n      \"version\": \"0.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/caller/-/caller-0.0.1.tgz\",\r\n      \"integrity\": \"sha1-83odbqEOgp2UchrimpC7T7Uqt2c=\",\r\n      \"requires\": {\r\n        \"tape\": \"~2.3.2\"\r\n      }\r\n    },\r\n    \"charenc\": {\r\n      \"version\": \"0.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/charenc/-/charenc-0.0.2.tgz\",\r\n      \"integrity\": \"sha1-wKHS86cJLgN3S/qD8UwPxXkKhmc=\"\r\n    },\r\n    \"chokidar\": {\r\n      \"version\": \"1.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/chokidar/-/chokidar-1.5.2.tgz\",\r\n      \"integrity\": \"sha1-KT5yhkDMk92Cd0JDNLPG1K06NIo=\",\r\n      \"requires\": {\r\n        \"anymatch\": \"^1.3.0\",\r\n        \"async-each\": \"^1.0.0\",\r\n        \"fsevents\": \"^1.0.0\",\r\n        \"glob-parent\": \"^2.0.0\",\r\n        \"inherits\": \"^2.0.1\",\r\n        \"is-binary-path\": \"^1.0.0\",\r\n        \"is-glob\": \"^2.0.0\",\r\n        \"path-is-absolute\": \"^1.0.0\",\r\n        \"readdirp\": \"^2.0.0\"\r\n      }\r\n    },\r\n    \"class-utils\": {\r\n      \"version\": \"0.3.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/class-utils/-/class-utils-0.3.6.tgz\",\r\n      \"integrity\": \"sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==\",\r\n      \"requires\": {\r\n        \"arr-union\": \"^3.1.0\",\r\n        \"define-property\": \"^0.2.5\",\r\n        \"isobject\": \"^3.0.0\",\r\n        \"static-extend\": \"^0.1.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"define-property\": {\r\n          \"version\": \"0.2.5\",\r\n          \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz\",\r\n          \"integrity\": \"sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=\",\r\n          \"requires\": {\r\n            \"is-descriptor\": \"^0.1.0\"\r\n          }\r\n        },\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        }\r\n      }\r\n    },\r\n    \"cli\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli/-/cli-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-IoF1NPJL+klQw01TLUjsvGIbjBQ=\",\r\n      \"requires\": {\r\n        \"exit\": \"0.1.2\",\r\n        \"glob\": \"^7.1.1\"\r\n      }\r\n    },\r\n    \"collection-visit\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/collection-visit/-/collection-visit-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-S8A3PBZLwykbTTaMgpzxqApZ3KA=\",\r\n      \"requires\": {\r\n        \"map-visit\": \"^1.0.0\",\r\n        \"object-visit\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"common-dustjs-helpers\": {\r\n      \"version\": \"1.5.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/common-dustjs-helpers/-/common-dustjs-helpers-1.5.1.tgz\",\r\n      \"integrity\": \"sha1-kLTwNCN9Vi+fx9pRz3IKKK7lOLw=\"\r\n    },\r\n    \"component-emitter\": {\r\n      \"version\": \"1.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz\",\r\n      \"integrity\": \"sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==\"\r\n    },\r\n    \"compressible\": {\r\n      \"version\": \"2.0.18\",\r\n      \"resolved\": \"https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz\",\r\n      \"integrity\": \"sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==\",\r\n      \"requires\": {\r\n        \"mime-db\": \">= 1.43.0 < 2\"\r\n      }\r\n    },\r\n    \"compression\": {\r\n      \"version\": \"1.7.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/compression/-/compression-1.7.4.tgz\",\r\n      \"integrity\": \"sha512-jaSIDzP9pZVS4ZfQ+TzvtiWhdpFhE2RDHz8QJkpX9SIpLq88VueF5jJw6t+6CUQcAoA6t+x89MLrWAqpfDE8iQ==\",\r\n      \"requires\": {\r\n        \"accepts\": \"~1.3.5\",\r\n        \"bytes\": \"3.0.0\",\r\n        \"compressible\": \"~2.0.16\",\r\n        \"debug\": \"2.6.9\",\r\n        \"on-headers\": \"~1.0.2\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"vary\": \"~1.1.2\"\r\n      },\r\n      \"dependencies\": {\r\n        \"bytes\": {\r\n          \"version\": \"3.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/bytes/-/bytes-3.0.0.tgz\",\r\n          \"integrity\": \"sha1-0ygVQE1olpn4Wk6k+odV3ROpYEg=\"\r\n        }\r\n      }\r\n    },\r\n    \"concat-map\": {\r\n      \"version\": \"0.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\r\n      \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\"\r\n    },\r\n    \"connect-mongo\": {\r\n      \"version\": \"3.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/connect-mongo/-/connect-mongo-3.2.0.tgz\",\r\n      \"integrity\": \"sha512-0Mx88079Z20CG909wCFlR3UxhMYGg6Ibn1hkIje1hwsqOLWtL9HJV+XD0DAjUvQScK6WqY/FA8tSVQM9rR64Rw==\",\r\n      \"requires\": {\r\n        \"mongodb\": \"^3.1.0\"\r\n      }\r\n    },\r\n    \"content-disposition\": {\r\n      \"version\": \"0.5.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.3.tgz\",\r\n      \"integrity\": \"sha512-ExO0774ikEObIAEV9kDo50o+79VCUdEB6n6lzKgGwupcVeRlhrj3qGAfwq8G6uBJjkqLrhT0qEYFcWng8z1z0g==\",\r\n      \"requires\": {\r\n        \"safe-buffer\": \"5.1.2\"\r\n      }\r\n    },\r\n    \"content-type\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA==\"\r\n    },\r\n    \"cookie\": {\r\n      \"version\": \"0.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie/-/cookie-0.4.0.tgz\",\r\n      \"integrity\": \"sha512-+Hp8fLp57wnUSt0tY0tHEXh4voZRDnoIrZPqlo3DPiI4y9lwg/jqx+1Om94/W6ZaPDOUbnjOt/99w66zk+l1Xg==\"\r\n    },\r\n    \"cookie-signature\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz\",\r\n      \"integrity\": \"sha1-4wOogrNCzD7oylE6eZmXNNqzriw=\"\r\n    },\r\n    \"copy-descriptor\": {\r\n      \"version\": \"0.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/copy-descriptor/-/copy-descriptor-0.1.1.tgz\",\r\n      \"integrity\": \"sha1-Z29us8OZl8LuGsOpJP1hJHSPV40=\"\r\n    },\r\n    \"core-util-is\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=\"\r\n    },\r\n    \"crypt\": {\r\n      \"version\": \"0.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/crypt/-/crypt-0.0.2.tgz\",\r\n      \"integrity\": \"sha1-iNf/fsDfuG9xPch7u0LQRNPmxBs=\"\r\n    },\r\n    \"debug\": {\r\n      \"version\": \"2.6.9\",\r\n      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\r\n      \"integrity\": \"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\r\n      \"requires\": {\r\n        \"ms\": \"2.0.0\"\r\n      }\r\n    },\r\n    \"debuglog\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/debuglog/-/debuglog-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-qiT/uaw9+aI1GDfPstJ5NgzXhJI=\"\r\n    },\r\n    \"decode-uri-component\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.0.tgz\",\r\n      \"integrity\": \"sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU=\"\r\n    },\r\n    \"deep-equal\": {\r\n      \"version\": \"0.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/deep-equal/-/deep-equal-0.1.2.tgz\",\r\n      \"integrity\": \"sha1-skbCuApXCkfBG+HZvRBw7IeLh84=\"\r\n    },\r\n    \"define-property\": {\r\n      \"version\": \"2.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-2.0.2.tgz\",\r\n      \"integrity\": \"sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==\",\r\n      \"requires\": {\r\n        \"is-descriptor\": \"^1.0.2\",\r\n        \"isobject\": \"^3.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"is-accessor-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-data-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-descriptor\": {\r\n          \"version\": \"1.0.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz\",\r\n          \"integrity\": \"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\r\n          \"requires\": {\r\n            \"is-accessor-descriptor\": \"^1.0.0\",\r\n            \"is-data-descriptor\": \"^1.0.0\",\r\n            \"kind-of\": \"^6.0.2\"\r\n          }\r\n        },\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        },\r\n        \"kind-of\": {\r\n          \"version\": \"6.0.3\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\r\n          \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\"\r\n        }\r\n      }\r\n    },\r\n    \"defined\": {\r\n      \"version\": \"0.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/defined/-/defined-0.0.0.tgz\",\r\n      \"integrity\": \"sha1-817qfXBekzuvE7LwOz+D2SFAOz4=\"\r\n    },\r\n    \"denque\": {\r\n      \"version\": \"1.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/denque/-/denque-1.4.1.tgz\",\r\n      \"integrity\": \"sha512-OfzPuSZKGcgr96rf1oODnfjqBFmr1DVoc/TrItj3Ohe0Ah1C5WX5Baquw/9U9KovnQ88EqmJbD66rKYUQYN1tQ==\"\r\n    },\r\n    \"depd\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/depd/-/depd-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=\"\r\n    },\r\n    \"destroy\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz\",\r\n      \"integrity\": \"sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=\"\r\n    },\r\n    \"dicer\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/dicer/-/dicer-0.3.0.tgz\",\r\n      \"integrity\": \"sha512-MdceRRWqltEG2dZqO769g27N/3PXfcKl04VhYnBlo2YhH7zPi88VebsjTKclaOyiuMaGU72hTfw3VkUitGcVCA==\",\r\n      \"requires\": {\r\n        \"streamsearch\": \"0.1.2\"\r\n      }\r\n    },\r\n    \"dustjs-helpers\": {\r\n      \"version\": \"1.7.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/dustjs-helpers/-/dustjs-helpers-1.7.4.tgz\",\r\n      \"integrity\": \"sha1-LkYrgOMXJirWwcWjwP7g6CqCYhk=\"\r\n    },\r\n    \"dustjs-linkedin\": {\r\n      \"version\": \"2.7.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/dustjs-linkedin/-/dustjs-linkedin-2.7.5.tgz\",\r\n      \"integrity\": \"sha1-YY8GP3LBm3jIBVrCMBx1t7a73Mw=\",\r\n      \"requires\": {\r\n        \"chokidar\": \"~1.5.1\",\r\n        \"cli\": \"^1.0.1\"\r\n      }\r\n    },\r\n    \"ee-first\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=\"\r\n    },\r\n    \"encodeurl\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=\"\r\n    },\r\n    \"escape-html\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\r\n      \"integrity\": \"sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=\"\r\n    },\r\n    \"etag\": {\r\n      \"version\": \"1.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\r\n      \"integrity\": \"sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=\"\r\n    },\r\n    \"exit\": {\r\n      \"version\": \"0.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/exit/-/exit-0.1.2.tgz\",\r\n      \"integrity\": \"sha1-BjJjj42HfMghB9MKD/8aF8uhzQw=\"\r\n    },\r\n    \"expand-brackets\": {\r\n      \"version\": \"0.1.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/expand-brackets/-/expand-brackets-0.1.5.tgz\",\r\n      \"integrity\": \"sha1-3wcoTjQqgHzXM6xa9yQR5YHRF3s=\",\r\n      \"requires\": {\r\n        \"is-posix-bracket\": \"^0.1.0\"\r\n      }\r\n    },\r\n    \"expand-range\": {\r\n      \"version\": \"1.8.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/expand-range/-/expand-range-1.8.2.tgz\",\r\n      \"integrity\": \"sha1-opnv/TNf4nIeuujiV+x5ZE/IUzc=\",\r\n      \"requires\": {\r\n        \"fill-range\": \"^2.1.0\"\r\n      }\r\n    },\r\n    \"express\": {\r\n      \"version\": \"4.17.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/express/-/express-4.17.1.tgz\",\r\n      \"integrity\": \"sha512-mHJ9O79RqluphRrcw2X/GTh3k9tVv8YcoyY4Kkh4WDMUYKRZUq0h1o0w2rrrxBqM7VoeUVqgb27xlEMXTnYt4g==\",\r\n      \"requires\": {\r\n        \"accepts\": \"~1.3.7\",\r\n        \"array-flatten\": \"1.1.1\",\r\n        \"body-parser\": \"1.19.0\",\r\n        \"content-disposition\": \"0.5.3\",\r\n        \"content-type\": \"~1.0.4\",\r\n        \"cookie\": \"0.4.0\",\r\n        \"cookie-signature\": \"1.0.6\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"finalhandler\": \"~1.1.2\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"merge-descriptors\": \"1.0.1\",\r\n        \"methods\": \"~1.1.2\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.3\",\r\n        \"path-to-regexp\": \"0.1.7\",\r\n        \"proxy-addr\": \"~2.0.5\",\r\n        \"qs\": \"6.7.0\",\r\n        \"range-parser\": \"~1.2.1\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"send\": \"0.17.1\",\r\n        \"serve-static\": \"1.14.1\",\r\n        \"setprototypeof\": \"1.1.1\",\r\n        \"statuses\": \"~1.5.0\",\r\n        \"type-is\": \"~1.6.18\",\r\n        \"utils-merge\": \"1.0.1\",\r\n        \"vary\": \"~1.1.2\"\r\n      }\r\n    },\r\n    \"express-fileupload\": {\r\n      \"version\": \"1.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/express-fileupload/-/express-fileupload-1.2.0.tgz\",\r\n      \"integrity\": \"sha512-oe4WpKcSppXnl5peornawWUa6tKmIc1/kJxMNRGJR1A0v4zyLL6VsFR6wZ8P2a4Iq3aGx8xae3Vlr+MOMQhFPw==\",\r\n      \"requires\": {\r\n        \"busboy\": \"^0.3.1\"\r\n      }\r\n    },\r\n    \"express-session\": {\r\n      \"version\": \"1.17.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/express-session/-/express-session-1.17.1.tgz\",\r\n      \"integrity\": \"sha512-UbHwgqjxQZJiWRTMyhvWGvjBQduGCSBDhhZXYenziMFjxst5rMV+aJZ6hKPHZnPyHGsrqRICxtX8jtEbm/z36Q==\",\r\n      \"requires\": {\r\n        \"cookie\": \"0.4.0\",\r\n        \"cookie-signature\": \"1.0.6\",\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~2.0.0\",\r\n        \"on-headers\": \"~1.0.2\",\r\n        \"parseurl\": \"~1.3.3\",\r\n        \"safe-buffer\": \"5.2.0\",\r\n        \"uid-safe\": \"~2.1.5\"\r\n      },\r\n      \"dependencies\": {\r\n        \"depd\": {\r\n          \"version\": \"2.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/depd/-/depd-2.0.0.tgz\",\r\n          \"integrity\": \"sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==\"\r\n        },\r\n        \"safe-buffer\": {\r\n          \"version\": \"5.2.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.0.tgz\",\r\n          \"integrity\": \"sha512-fZEwUGbVl7kouZs1jCdMLdt95hdIv0ZeHg6L7qPeciMZhZ+/gdesW4wgTARkrFWEpspjEATAzUGPG8N2jJiwbg==\"\r\n        }\r\n      }\r\n    },\r\n    \"extend-shallow\": {\r\n      \"version\": \"3.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-3.0.2.tgz\",\r\n      \"integrity\": \"sha1-Jqcarwc7OfshJxcnRhMcJwQCjbg=\",\r\n      \"requires\": {\r\n        \"assign-symbols\": \"^1.0.0\",\r\n        \"is-extendable\": \"^1.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"is-extendable\": {\r\n          \"version\": \"1.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz\",\r\n          \"integrity\": \"sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==\",\r\n          \"requires\": {\r\n            \"is-plain-object\": \"^2.0.4\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"extglob\": {\r\n      \"version\": \"0.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/extglob/-/extglob-0.3.2.tgz\",\r\n      \"integrity\": \"sha1-Lhj/PS9JqydlzskCPwEdqo2DSaE=\",\r\n      \"requires\": {\r\n        \"is-extglob\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"extsprintf\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/extsprintf/-/extsprintf-1.4.0.tgz\",\r\n      \"integrity\": \"sha1-4mifjzVvrWLMplo6kcXfX5VRaS8=\"\r\n    },\r\n    \"file-uri-to-path\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==\",\r\n      \"optional\": true\r\n    },\r\n    \"filename-regex\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/filename-regex/-/filename-regex-2.0.1.tgz\",\r\n      \"integrity\": \"sha1-wcS5vuPglyXdsQa3XB4wH+LxiyY=\"\r\n    },\r\n    \"fill-range\": {\r\n      \"version\": \"2.2.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-2.2.4.tgz\",\r\n      \"integrity\": \"sha512-cnrcCbj01+j2gTG921VZPnHbjmdAf8oQV/iGeV2kZxGSyfYjjTyY79ErsK1WJWMpw6DaApEX72binqJE+/d+5Q==\",\r\n      \"requires\": {\r\n        \"is-number\": \"^2.1.0\",\r\n        \"isobject\": \"^2.0.0\",\r\n        \"randomatic\": \"^3.0.0\",\r\n        \"repeat-element\": \"^1.1.2\",\r\n        \"repeat-string\": \"^1.5.2\"\r\n      }\r\n    },\r\n    \"finalhandler\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.2.tgz\",\r\n      \"integrity\": \"sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA==\",\r\n      \"requires\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"parseurl\": \"~1.3.3\",\r\n        \"statuses\": \"~1.5.0\",\r\n        \"unpipe\": \"~1.0.0\"\r\n      }\r\n    },\r\n    \"for-in\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/for-in/-/for-in-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-gQaNKVqBQuwKxybG4iAMMPttXoA=\"\r\n    },\r\n    \"for-own\": {\r\n      \"version\": \"0.1.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/for-own/-/for-own-0.1.5.tgz\",\r\n      \"integrity\": \"sha1-UmXGgaTylNq78XyVCbZ2OqhFEM4=\",\r\n      \"requires\": {\r\n        \"for-in\": \"^1.0.1\"\r\n      }\r\n    },\r\n    \"forwarded\": {\r\n      \"version\": \"0.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz\",\r\n      \"integrity\": \"sha1-mMI9qxF1ZXuMBXPozszZGw/xjIQ=\"\r\n    },\r\n    \"fragment-cache\": {\r\n      \"version\": \"0.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/fragment-cache/-/fragment-cache-0.2.1.tgz\",\r\n      \"integrity\": \"sha1-QpD60n8T6Jvn8zeZxrxaCr//DRk=\",\r\n      \"requires\": {\r\n        \"map-cache\": \"^0.2.2\"\r\n      }\r\n    },\r\n    \"fresh\": {\r\n      \"version\": \"0.5.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\r\n      \"integrity\": \"sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=\"\r\n    },\r\n    \"freshy\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/freshy/-/freshy-1.0.4.tgz\",\r\n      \"integrity\": \"sha1-0kjV9QtUz5qzorPE7uJpSeRMABM=\",\r\n      \"requires\": {\r\n        \"caller\": \"0.0.1\",\r\n        \"debuglog\": \"^1.0.1\",\r\n        \"path-is-absolute\": \"^1.0.0\",\r\n        \"resolve\": \"^1.1.6\"\r\n      }\r\n    },\r\n    \"fs.realpath\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-FQStJSMVjKpA20onh8sBQRmU6k8=\"\r\n    },\r\n    \"fsevents\": {\r\n      \"version\": \"1.2.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/fsevents/-/fsevents-1.2.11.tgz\",\r\n      \"integrity\": \"sha512-+ux3lx6peh0BpvY0JebGyZoiR4D+oYzdPZMKJwkZ+sFkNJzpL7tXc/wehS49gUAxg3tmMHPHZkA8JU2rhhgDHw==\",\r\n      \"optional\": true,\r\n      \"requires\": {\r\n        \"bindings\": \"^1.5.0\",\r\n        \"nan\": \"^2.12.1\",\r\n        \"node-pre-gyp\": \"*\"\r\n      },\r\n      \"dependencies\": {\r\n        \"abbrev\": {\r\n          \"version\": \"1.1.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"ansi-regex\": {\r\n          \"version\": \"2.1.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"aproba\": {\r\n          \"version\": \"1.2.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"are-we-there-yet\": {\r\n          \"version\": \"1.1.5\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"delegates\": \"^1.0.0\",\r\n            \"readable-stream\": \"^2.0.6\"\r\n          }\r\n        },\r\n        \"balanced-match\": {\r\n          \"version\": \"1.0.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"brace-expansion\": {\r\n          \"version\": \"1.1.11\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"balanced-match\": \"^1.0.0\",\r\n            \"concat-map\": \"0.0.1\"\r\n          }\r\n        },\r\n        \"chownr\": {\r\n          \"version\": \"1.1.3\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"code-point-at\": {\r\n          \"version\": \"1.1.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"concat-map\": {\r\n          \"version\": \"0.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"console-control-strings\": {\r\n          \"version\": \"1.1.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"core-util-is\": {\r\n          \"version\": \"1.0.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"debug\": {\r\n          \"version\": \"3.2.6\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"ms\": \"^2.1.1\"\r\n          }\r\n        },\r\n        \"deep-extend\": {\r\n          \"version\": \"0.6.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"delegates\": {\r\n          \"version\": \"1.0.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"detect-libc\": {\r\n          \"version\": \"1.0.3\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"fs-minipass\": {\r\n          \"version\": \"1.2.7\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"minipass\": \"^2.6.0\"\r\n          }\r\n        },\r\n        \"fs.realpath\": {\r\n          \"version\": \"1.0.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"gauge\": {\r\n          \"version\": \"2.7.4\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"aproba\": \"^1.0.3\",\r\n            \"console-control-strings\": \"^1.0.0\",\r\n            \"has-unicode\": \"^2.0.0\",\r\n            \"object-assign\": \"^4.1.0\",\r\n            \"signal-exit\": \"^3.0.0\",\r\n            \"string-width\": \"^1.0.1\",\r\n            \"strip-ansi\": \"^3.0.1\",\r\n            \"wide-align\": \"^1.1.0\"\r\n          }\r\n        },\r\n        \"glob\": {\r\n          \"version\": \"7.1.6\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"fs.realpath\": \"^1.0.0\",\r\n            \"inflight\": \"^1.0.4\",\r\n            \"inherits\": \"2\",\r\n            \"minimatch\": \"^3.0.4\",\r\n            \"once\": \"^1.3.0\",\r\n            \"path-is-absolute\": \"^1.0.0\"\r\n          }\r\n        },\r\n        \"has-unicode\": {\r\n          \"version\": \"2.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"iconv-lite\": {\r\n          \"version\": \"0.4.24\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"safer-buffer\": \">= 2.1.2 < 3\"\r\n          }\r\n        },\r\n        \"ignore-walk\": {\r\n          \"version\": \"3.0.3\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"minimatch\": \"^3.0.4\"\r\n          }\r\n        },\r\n        \"inflight\": {\r\n          \"version\": \"1.0.6\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"once\": \"^1.3.0\",\r\n            \"wrappy\": \"1\"\r\n          }\r\n        },\r\n        \"inherits\": {\r\n          \"version\": \"2.0.4\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"ini\": {\r\n          \"version\": \"1.3.5\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"is-fullwidth-code-point\": {\r\n          \"version\": \"1.0.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"number-is-nan\": \"^1.0.0\"\r\n          }\r\n        },\r\n        \"isarray\": {\r\n          \"version\": \"1.0.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"minimatch\": {\r\n          \"version\": \"3.0.4\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"brace-expansion\": \"^1.1.7\"\r\n          }\r\n        },\r\n        \"minimist\": {\r\n          \"version\": \"0.0.8\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"minipass\": {\r\n          \"version\": \"2.9.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"safe-buffer\": \"^5.1.2\",\r\n            \"yallist\": \"^3.0.0\"\r\n          }\r\n        },\r\n        \"minizlib\": {\r\n          \"version\": \"1.3.3\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"minipass\": \"^2.9.0\"\r\n          }\r\n        },\r\n        \"mkdirp\": {\r\n          \"version\": \"0.5.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"minimist\": \"0.0.8\"\r\n          }\r\n        },\r\n        \"ms\": {\r\n          \"version\": \"2.1.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"needle\": {\r\n          \"version\": \"2.4.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"debug\": \"^3.2.6\",\r\n            \"iconv-lite\": \"^0.4.4\",\r\n            \"sax\": \"^1.2.4\"\r\n          }\r\n        },\r\n        \"node-pre-gyp\": {\r\n          \"version\": \"0.14.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"detect-libc\": \"^1.0.2\",\r\n            \"mkdirp\": \"^0.5.1\",\r\n            \"needle\": \"^2.2.1\",\r\n            \"nopt\": \"^4.0.1\",\r\n            \"npm-packlist\": \"^1.1.6\",\r\n            \"npmlog\": \"^4.0.2\",\r\n            \"rc\": \"^1.2.7\",\r\n            \"rimraf\": \"^2.6.1\",\r\n            \"semver\": \"^5.3.0\",\r\n            \"tar\": \"^4.4.2\"\r\n          }\r\n        },\r\n        \"nopt\": {\r\n          \"version\": \"4.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"abbrev\": \"1\",\r\n            \"osenv\": \"^0.1.4\"\r\n          }\r\n        },\r\n        \"npm-bundled\": {\r\n          \"version\": \"1.1.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"npm-normalize-package-bin\": \"^1.0.1\"\r\n          }\r\n        },\r\n        \"npm-normalize-package-bin\": {\r\n          \"version\": \"1.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"npm-packlist\": {\r\n          \"version\": \"1.4.7\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"ignore-walk\": \"^3.0.1\",\r\n            \"npm-bundled\": \"^1.0.1\"\r\n          }\r\n        },\r\n        \"npmlog\": {\r\n          \"version\": \"4.1.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"are-we-there-yet\": \"~1.1.2\",\r\n            \"console-control-strings\": \"~1.1.0\",\r\n            \"gauge\": \"~2.7.3\",\r\n            \"set-blocking\": \"~2.0.0\"\r\n          }\r\n        },\r\n        \"number-is-nan\": {\r\n          \"version\": \"1.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"object-assign\": {\r\n          \"version\": \"4.1.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"once\": {\r\n          \"version\": \"1.4.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"wrappy\": \"1\"\r\n          }\r\n        },\r\n        \"os-homedir\": {\r\n          \"version\": \"1.0.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"os-tmpdir\": {\r\n          \"version\": \"1.0.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"osenv\": {\r\n          \"version\": \"0.1.5\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"os-homedir\": \"^1.0.0\",\r\n            \"os-tmpdir\": \"^1.0.0\"\r\n          }\r\n        },\r\n        \"path-is-absolute\": {\r\n          \"version\": \"1.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"process-nextick-args\": {\r\n          \"version\": \"2.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"rc\": {\r\n          \"version\": \"1.2.8\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"deep-extend\": \"^0.6.0\",\r\n            \"ini\": \"~1.3.0\",\r\n            \"minimist\": \"^1.2.0\",\r\n            \"strip-json-comments\": \"~2.0.1\"\r\n          },\r\n          \"dependencies\": {\r\n            \"minimist\": {\r\n              \"version\": \"1.2.0\",\r\n              \"bundled\": true,\r\n              \"optional\": true\r\n            }\r\n          }\r\n        },\r\n        \"readable-stream\": {\r\n          \"version\": \"2.3.6\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"core-util-is\": \"~1.0.0\",\r\n            \"inherits\": \"~2.0.3\",\r\n            \"isarray\": \"~1.0.0\",\r\n            \"process-nextick-args\": \"~2.0.0\",\r\n            \"safe-buffer\": \"~5.1.1\",\r\n            \"string_decoder\": \"~1.1.1\",\r\n            \"util-deprecate\": \"~1.0.1\"\r\n          }\r\n        },\r\n        \"rimraf\": {\r\n          \"version\": \"2.7.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"glob\": \"^7.1.3\"\r\n          }\r\n        },\r\n        \"safe-buffer\": {\r\n          \"version\": \"5.1.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"safer-buffer\": {\r\n          \"version\": \"2.1.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"sax\": {\r\n          \"version\": \"1.2.4\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"semver\": {\r\n          \"version\": \"5.7.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"set-blocking\": {\r\n          \"version\": \"2.0.0\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"signal-exit\": {\r\n          \"version\": \"3.0.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"string-width\": {\r\n          \"version\": \"1.0.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"code-point-at\": \"^1.0.0\",\r\n            \"is-fullwidth-code-point\": \"^1.0.0\",\r\n            \"strip-ansi\": \"^3.0.0\"\r\n          }\r\n        },\r\n        \"string_decoder\": {\r\n          \"version\": \"1.1.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"safe-buffer\": \"~5.1.0\"\r\n          }\r\n        },\r\n        \"strip-ansi\": {\r\n          \"version\": \"3.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"ansi-regex\": \"^2.0.0\"\r\n          }\r\n        },\r\n        \"strip-json-comments\": {\r\n          \"version\": \"2.0.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"tar\": {\r\n          \"version\": \"4.4.13\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"chownr\": \"^1.1.1\",\r\n            \"fs-minipass\": \"^1.2.5\",\r\n            \"minipass\": \"^2.8.6\",\r\n            \"minizlib\": \"^1.2.1\",\r\n            \"mkdirp\": \"^0.5.0\",\r\n            \"safe-buffer\": \"^5.1.2\",\r\n            \"yallist\": \"^3.0.3\"\r\n          }\r\n        },\r\n        \"util-deprecate\": {\r\n          \"version\": \"1.0.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"wide-align\": {\r\n          \"version\": \"1.1.3\",\r\n          \"bundled\": true,\r\n          \"optional\": true,\r\n          \"requires\": {\r\n            \"string-width\": \"^1.0.2 || 2\"\r\n          }\r\n        },\r\n        \"wrappy\": {\r\n          \"version\": \"1.0.2\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        },\r\n        \"yallist\": {\r\n          \"version\": \"3.1.1\",\r\n          \"bundled\": true,\r\n          \"optional\": true\r\n        }\r\n      }\r\n    },\r\n    \"get-value\": {\r\n      \"version\": \"2.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/get-value/-/get-value-2.0.6.tgz\",\r\n      \"integrity\": \"sha1-3BXKHGcjh8p2vTesCjlbogQqLCg=\"\r\n    },\r\n    \"glob\": {\r\n      \"version\": \"7.1.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.6.tgz\",\r\n      \"integrity\": \"sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==\",\r\n      \"requires\": {\r\n        \"fs.realpath\": \"^1.0.0\",\r\n        \"inflight\": \"^1.0.4\",\r\n        \"inherits\": \"2\",\r\n        \"minimatch\": \"^3.0.4\",\r\n        \"once\": \"^1.3.0\",\r\n        \"path-is-absolute\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"glob-base\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob-base/-/glob-base-0.3.0.tgz\",\r\n      \"integrity\": \"sha1-27Fk9iIbHAscz4Kuoyi0l98Oo8Q=\",\r\n      \"requires\": {\r\n        \"glob-parent\": \"^2.0.0\",\r\n        \"is-glob\": \"^2.0.0\"\r\n      }\r\n    },\r\n    \"glob-parent\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/glob-parent/-/glob-parent-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-gTg9ctsFT8zPUzbaqQLxgvbtuyg=\",\r\n      \"requires\": {\r\n        \"is-glob\": \"^2.0.0\"\r\n      }\r\n    },\r\n    \"graceful-fs\": {\r\n      \"version\": \"4.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.3.tgz\",\r\n      \"integrity\": \"sha512-a30VEBm4PEdx1dRB7MFK7BejejvCvBronbLjht+sHuGYj8PHs7M/5Z+rt5lw551vZ7yfTCj4Vuyy3mSJytDWRQ==\"\r\n    },\r\n    \"has-value\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-value/-/has-value-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-GLKB2lhbHFxR3vJMkw7SmgvmsXc=\",\r\n      \"requires\": {\r\n        \"get-value\": \"^2.0.6\",\r\n        \"has-values\": \"^1.0.0\",\r\n        \"isobject\": \"^3.0.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        }\r\n      }\r\n    },\r\n    \"has-values\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-values/-/has-values-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-lbC2P+whRmGab+V/51Yo1aOe/k8=\",\r\n      \"requires\": {\r\n        \"is-number\": \"^3.0.0\",\r\n        \"kind-of\": \"^4.0.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"is-number\": {\r\n          \"version\": \"3.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz\",\r\n          \"integrity\": \"sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^3.0.2\"\r\n          },\r\n          \"dependencies\": {\r\n            \"kind-of\": {\r\n              \"version\": \"3.2.2\",\r\n              \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz\",\r\n              \"integrity\": \"sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\",\r\n              \"requires\": {\r\n                \"is-buffer\": \"^1.1.5\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"kind-of\": {\r\n          \"version\": \"4.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-4.0.0.tgz\",\r\n          \"integrity\": \"sha1-IIE989cSkosgc3hpGkUGb65y3Vc=\",\r\n          \"requires\": {\r\n            \"is-buffer\": \"^1.1.5\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"html-entities\": {\r\n      \"version\": \"1.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/html-entities/-/html-entities-1.3.1.tgz\",\r\n      \"integrity\": \"sha512-rhE/4Z3hIhzHAUKbW8jVcCyuT5oJCXXqhN/6mXXVCpzTmvJnoH2HL/bt3EZ6p55jbFJBeAe1ZNpL5BugLujxNA==\"\r\n    },\r\n    \"http-errors\": {\r\n      \"version\": \"1.7.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/http-errors/-/http-errors-1.7.2.tgz\",\r\n      \"integrity\": \"sha512-uUQBt3H/cSIVfch6i1EuPNy/YsRSOUBXTVfZ+yR7Zjez3qjBz6i9+i4zjNaoqcoFVI4lQJ5plg63TvGfRSDCRg==\",\r\n      \"requires\": {\r\n        \"depd\": \"~1.1.2\",\r\n        \"inherits\": \"2.0.3\",\r\n        \"setprototypeof\": \"1.1.1\",\r\n        \"statuses\": \">= 1.5.0 < 2\",\r\n        \"toidentifier\": \"1.0.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"inherits\": {\r\n          \"version\": \"2.0.3\",\r\n          \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\r\n          \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\"\r\n        }\r\n      }\r\n    },\r\n    \"iconv-lite\": {\r\n      \"version\": \"0.4.24\",\r\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\r\n      \"integrity\": \"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\r\n      \"requires\": {\r\n        \"safer-buffer\": \">= 2.1.2 < 3\"\r\n      }\r\n    },\r\n    \"inflight\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\r\n      \"integrity\": \"sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=\",\r\n      \"requires\": {\r\n        \"once\": \"^1.3.0\",\r\n        \"wrappy\": \"1\"\r\n      }\r\n    },\r\n    \"inherits\": {\r\n      \"version\": \"2.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\r\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\r\n    },\r\n    \"ipaddr.js\": {\r\n      \"version\": \"1.9.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.0.tgz\",\r\n      \"integrity\": \"sha512-M4Sjn6N/+O6/IXSJseKqHoFc+5FdGJ22sXqnjTpdZweHK64MzEPAyQZyEU3R/KRv2GLoa7nNtg/C2Ev6m7z+eA==\"\r\n    },\r\n    \"is-accessor-descriptor\": {\r\n      \"version\": \"0.1.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz\",\r\n      \"integrity\": \"sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=\",\r\n      \"requires\": {\r\n        \"kind-of\": \"^3.0.2\"\r\n      }\r\n    },\r\n    \"is-binary-path\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-dfFmQrSA8YenEcgUFh/TpKdlWJg=\",\r\n      \"requires\": {\r\n        \"binary-extensions\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"is-buffer\": {\r\n      \"version\": \"1.1.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.6.tgz\",\r\n      \"integrity\": \"sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==\"\r\n    },\r\n    \"is-data-descriptor\": {\r\n      \"version\": \"0.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz\",\r\n      \"integrity\": \"sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=\",\r\n      \"requires\": {\r\n        \"kind-of\": \"^3.0.2\"\r\n      }\r\n    },\r\n    \"is-descriptor\": {\r\n      \"version\": \"0.1.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-descriptor/-/is-descriptor-0.1.6.tgz\",\r\n      \"integrity\": \"sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==\",\r\n      \"requires\": {\r\n        \"is-accessor-descriptor\": \"^0.1.6\",\r\n        \"is-data-descriptor\": \"^0.1.4\",\r\n        \"kind-of\": \"^5.0.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"kind-of\": {\r\n          \"version\": \"5.1.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-5.1.0.tgz\",\r\n          \"integrity\": \"sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==\"\r\n        }\r\n      }\r\n    },\r\n    \"is-dotfile\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-dotfile/-/is-dotfile-1.0.3.tgz\",\r\n      \"integrity\": \"sha1-pqLzL/0t+wT1yiXs0Pa4PPeYoeE=\"\r\n    },\r\n    \"is-equal-shallow\": {\r\n      \"version\": \"0.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-equal-shallow/-/is-equal-shallow-0.1.3.tgz\",\r\n      \"integrity\": \"sha1-IjgJj8Ih3gvPpdnqxMRdY4qhxTQ=\",\r\n      \"requires\": {\r\n        \"is-primitive\": \"^2.0.0\"\r\n      }\r\n    },\r\n    \"is-extendable\": {\r\n      \"version\": \"0.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz\",\r\n      \"integrity\": \"sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=\"\r\n    },\r\n    \"is-extglob\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-extglob/-/is-extglob-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-rEaBd8SUNAWgkvyPKXYMb/xiBsA=\"\r\n    },\r\n    \"is-glob\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-glob/-/is-glob-2.0.1.tgz\",\r\n      \"integrity\": \"sha1-0Jb5JqPe1WAPP9/ZEZjLCIjC2GM=\",\r\n      \"requires\": {\r\n        \"is-extglob\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"is-number\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-2.1.0.tgz\",\r\n      \"integrity\": \"sha1-Afy7s5NGOlSPL0ZszhbezknbkI8=\",\r\n      \"requires\": {\r\n        \"kind-of\": \"^3.0.2\"\r\n      }\r\n    },\r\n    \"is-plain-object\": {\r\n      \"version\": \"2.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz\",\r\n      \"integrity\": \"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\r\n      \"requires\": {\r\n        \"isobject\": \"^3.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        }\r\n      }\r\n    },\r\n    \"is-posix-bracket\": {\r\n      \"version\": \"0.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz\",\r\n      \"integrity\": \"sha1-MzTceXdDaOkvAW5vvAqI9c1ua8Q=\"\r\n    },\r\n    \"is-primitive\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-primitive/-/is-primitive-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-IHurkWOEmcB7Kt8kCkGochADRXU=\"\r\n    },\r\n    \"is-windows\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-windows/-/is-windows-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==\"\r\n    },\r\n    \"isarray\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=\"\r\n    },\r\n    \"isobject\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-2.1.0.tgz\",\r\n      \"integrity\": \"sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=\",\r\n      \"requires\": {\r\n        \"isarray\": \"1.0.0\"\r\n      }\r\n    },\r\n    \"jalali-date\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/jalali-date/-/jalali-date-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-0AMuXC2bH7W0YjcbJd5/gfBNiCJS1/2gIs+np17Vz6ukwIvrFfs5cS+N36lVUZxu1kKA5/k857IEp7ZZgTcU8g==\"\r\n    },\r\n    \"jsonify\": {\r\n      \"version\": \"0.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/jsonify/-/jsonify-0.0.0.tgz\",\r\n      \"integrity\": \"sha1-LHS27kHZPKUbe1qu6PUDYx0lKnM=\"\r\n    },\r\n    \"kareem\": {\r\n      \"version\": \"2.3.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/kareem/-/kareem-2.3.1.tgz\",\r\n      \"integrity\": \"sha512-l3hLhffs9zqoDe8zjmb/mAN4B8VT3L56EUvKNqLFVs9YlFA+zx7ke1DO8STAdDyYNkeSo1nKmjuvQeI12So8Xw==\"\r\n    },\r\n    \"kind-of\": {\r\n      \"version\": \"3.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz\",\r\n      \"integrity\": \"sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\",\r\n      \"requires\": {\r\n        \"is-buffer\": \"^1.1.5\"\r\n      }\r\n    },\r\n    \"map-cache\": {\r\n      \"version\": \"0.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/map-cache/-/map-cache-0.2.2.tgz\",\r\n      \"integrity\": \"sha1-wyq9C9ZSXZsFFkW7TyasXcmKDb8=\"\r\n    },\r\n    \"map-visit\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/map-visit/-/map-visit-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-7Nyo8TFE5mDxtb1B8S80edmN+48=\",\r\n      \"requires\": {\r\n        \"object-visit\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"math-random\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/math-random/-/math-random-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-rUxjysqif/BZQH2yhd5Aaq7vXMSx9NdEsQcyA07uEzIvxgI7zIr33gGsh+RU0/XjmQpCW7RsVof1vlkvQVCK5A==\"\r\n    },\r\n    \"media-typer\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz\",\r\n      \"integrity\": \"sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g=\"\r\n    },\r\n    \"memory-pager\": {\r\n      \"version\": \"1.5.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/memory-pager/-/memory-pager-1.5.0.tgz\",\r\n      \"integrity\": \"sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==\",\r\n      \"optional\": true\r\n    },\r\n    \"merge-descriptors\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E=\"\r\n    },\r\n    \"methods\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/methods/-/methods-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4=\"\r\n    },\r\n    \"micromatch\": {\r\n      \"version\": \"2.3.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-2.3.11.tgz\",\r\n      \"integrity\": \"sha1-hmd8l9FyCzY0MdBNDRUpO9OMFWU=\",\r\n      \"requires\": {\r\n        \"arr-diff\": \"^2.0.0\",\r\n        \"array-unique\": \"^0.2.1\",\r\n        \"braces\": \"^1.8.2\",\r\n        \"expand-brackets\": \"^0.1.4\",\r\n        \"extglob\": \"^0.3.1\",\r\n        \"filename-regex\": \"^2.0.0\",\r\n        \"is-extglob\": \"^1.0.0\",\r\n        \"is-glob\": \"^2.0.1\",\r\n        \"kind-of\": \"^3.0.2\",\r\n        \"normalize-path\": \"^2.0.1\",\r\n        \"object.omit\": \"^2.0.0\",\r\n        \"parse-glob\": \"^3.0.4\",\r\n        \"regex-cache\": \"^0.4.2\"\r\n      }\r\n    },\r\n    \"mime\": {\r\n      \"version\": \"1.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime/-/mime-1.6.0.tgz\",\r\n      \"integrity\": \"sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\"\r\n    },\r\n    \"mime-db\": {\r\n      \"version\": \"1.43.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-db/-/mime-db-1.43.0.tgz\",\r\n      \"integrity\": \"sha512-+5dsGEEovYbT8UY9yD7eE4XTc4UwJ1jBYlgaQQF38ENsKR3wj/8q8RFZrF9WIZpB2V1ArTVFUva8sAul1NzRzQ==\"\r\n    },\r\n    \"mime-types\": {\r\n      \"version\": \"2.1.26\",\r\n      \"resolved\": \"https://registry.npmjs.org/mime-types/-/mime-types-2.1.26.tgz\",\r\n      \"integrity\": \"sha512-01paPWYgLrkqAyrlDorC1uDwl2p3qZT7yl806vW7DvDoxwXi46jsjFbg+WdwotBIk6/MbEhO/dh5aZ5sNj/dWQ==\",\r\n      \"requires\": {\r\n        \"mime-db\": \"1.43.0\"\r\n      }\r\n    },\r\n    \"minimatch\": {\r\n      \"version\": \"3.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",\r\n      \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",\r\n      \"requires\": {\r\n        \"brace-expansion\": \"^1.1.7\"\r\n      }\r\n    },\r\n    \"mixin-deep\": {\r\n      \"version\": \"1.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/mixin-deep/-/mixin-deep-1.3.2.tgz\",\r\n      \"integrity\": \"sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==\",\r\n      \"requires\": {\r\n        \"for-in\": \"^1.0.2\",\r\n        \"is-extendable\": \"^1.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"is-extendable\": {\r\n          \"version\": \"1.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz\",\r\n          \"integrity\": \"sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==\",\r\n          \"requires\": {\r\n            \"is-plain-object\": \"^2.0.4\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"mongodb\": {\r\n      \"version\": \"3.5.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/mongodb/-/mongodb-3.5.3.tgz\",\r\n      \"integrity\": \"sha512-II7P7A3XUdPiXRgcN96qIoRa1oesM6qLNZkzfPluNZjVkgQk3jnQwOT6/uDk4USRDTTLjNFw2vwfmbRGTA7msg==\",\r\n      \"requires\": {\r\n        \"bl\": \"^2.2.0\",\r\n        \"bson\": \"^1.1.1\",\r\n        \"denque\": \"^1.4.1\",\r\n        \"require_optional\": \"^1.0.1\",\r\n        \"safe-buffer\": \"^5.1.2\",\r\n        \"saslprep\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"mongoose\": {\r\n      \"version\": \"5.10.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/mongoose/-/mongoose-5.10.2.tgz\",\r\n      \"integrity\": \"sha512-VO5eZawEMFh2gx9XPg9ZafzFg5eIVs4R7PW6kK1MFqBq34YD7GomkalYWVt02HctvTPDI1mkXsm52LXNZR1NxA==\",\r\n      \"requires\": {\r\n        \"bson\": \"^1.1.4\",\r\n        \"kareem\": \"2.3.1\",\r\n        \"mongodb\": \"3.6.0\",\r\n        \"mongoose-legacy-pluralize\": \"1.0.2\",\r\n        \"mpath\": \"0.7.0\",\r\n        \"mquery\": \"3.2.2\",\r\n        \"ms\": \"2.1.2\",\r\n        \"regexp-clone\": \"1.0.0\",\r\n        \"safe-buffer\": \"5.2.1\",\r\n        \"sift\": \"7.0.1\",\r\n        \"sliced\": \"1.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"bson\": {\r\n          \"version\": \"1.1.5\",\r\n          \"resolved\": \"https://registry.npmjs.org/bson/-/bson-1.1.5.tgz\",\r\n          \"integrity\": \"sha512-kDuEzldR21lHciPQAIulLs1LZlCXdLziXI6Mb/TDkwXhb//UORJNPXgcRs2CuO4H0DcMkpfT3/ySsP3unoZjBg==\"\r\n        },\r\n        \"mongodb\": {\r\n          \"version\": \"3.6.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/mongodb/-/mongodb-3.6.0.tgz\",\r\n          \"integrity\": \"sha512-/XWWub1mHZVoqEsUppE0GV7u9kanLvHxho6EvBxQbShXTKYF9trhZC2NzbulRGeG7xMJHD8IOWRcdKx5LPjAjQ==\",\r\n          \"requires\": {\r\n            \"bl\": \"^2.2.0\",\r\n            \"bson\": \"^1.1.4\",\r\n            \"denque\": \"^1.4.1\",\r\n            \"require_optional\": \"^1.0.1\",\r\n            \"safe-buffer\": \"^5.1.2\",\r\n            \"saslprep\": \"^1.0.0\"\r\n          }\r\n        },\r\n        \"ms\": {\r\n          \"version\": \"2.1.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\r\n          \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\"\r\n        },\r\n        \"safe-buffer\": {\r\n          \"version\": \"5.2.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\r\n          \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\"\r\n        }\r\n      }\r\n    },\r\n    \"mongoose-legacy-pluralize\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/mongoose-legacy-pluralize/-/mongoose-legacy-pluralize-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-Yo/7qQU4/EyIS8YDFSeenIvXxZN+ld7YdV9LqFVQJzTLye8unujAWPZ4NWKfFA+RNjh+wvTWKY9Z3E5XM6ZZiQ==\"\r\n    },\r\n    \"mpath\": {\r\n      \"version\": \"0.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mpath/-/mpath-0.7.0.tgz\",\r\n      \"integrity\": \"sha512-Aiq04hILxhz1L+f7sjGyn7IxYzWm1zLNNXcfhDtx04kZ2Gk7uvFdgZ8ts1cWa/6d0TQmag2yR8zSGZUmp0tFNg==\"\r\n    },\r\n    \"mquery\": {\r\n      \"version\": \"3.2.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/mquery/-/mquery-3.2.2.tgz\",\r\n      \"integrity\": \"sha512-XB52992COp0KP230I3qloVUbkLUxJIu328HBP2t2EsxSFtf4W1HPSOBWOXf1bqxK4Xbb66lfMJ+Bpfd9/yZE1Q==\",\r\n      \"requires\": {\r\n        \"bluebird\": \"3.5.1\",\r\n        \"debug\": \"3.1.0\",\r\n        \"regexp-clone\": \"^1.0.0\",\r\n        \"safe-buffer\": \"5.1.2\",\r\n        \"sliced\": \"1.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"debug\": {\r\n          \"version\": \"3.1.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\r\n          \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\r\n          \"requires\": {\r\n            \"ms\": \"2.0.0\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"ms\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\"\r\n    },\r\n    \"nan\": {\r\n      \"version\": \"2.14.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/nan/-/nan-2.14.0.tgz\",\r\n      \"integrity\": \"sha512-INOFj37C7k3AfaNTtX8RhsTw7qRy7eLET14cROi9+5HAVbbHuIWUHEauBv5qT4Av2tWasiTY1Jw6puUNqRJXQg==\",\r\n      \"optional\": true\r\n    },\r\n    \"nanomatch\": {\r\n      \"version\": \"1.2.13\",\r\n      \"resolved\": \"https://registry.npmjs.org/nanomatch/-/nanomatch-1.2.13.tgz\",\r\n      \"integrity\": \"sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==\",\r\n      \"requires\": {\r\n        \"arr-diff\": \"^4.0.0\",\r\n        \"array-unique\": \"^0.3.2\",\r\n        \"define-property\": \"^2.0.2\",\r\n        \"extend-shallow\": \"^3.0.2\",\r\n        \"fragment-cache\": \"^0.2.1\",\r\n        \"is-windows\": \"^1.0.2\",\r\n        \"kind-of\": \"^6.0.2\",\r\n        \"object.pick\": \"^1.3.0\",\r\n        \"regex-not\": \"^1.0.0\",\r\n        \"snapdragon\": \"^0.8.1\",\r\n        \"to-regex\": \"^3.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"arr-diff\": {\r\n          \"version\": \"4.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/arr-diff/-/arr-diff-4.0.0.tgz\",\r\n          \"integrity\": \"sha1-1kYQdP6/7HHn4VI1dhoyml3HxSA=\"\r\n        },\r\n        \"array-unique\": {\r\n          \"version\": \"0.3.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/array-unique/-/array-unique-0.3.2.tgz\",\r\n          \"integrity\": \"sha1-qJS3XUvE9s1nnvMkSp/Y9Gri1Cg=\"\r\n        },\r\n        \"kind-of\": {\r\n          \"version\": \"6.0.3\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\r\n          \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\"\r\n        }\r\n      }\r\n    },\r\n    \"negotiator\": {\r\n      \"version\": \"0.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/negotiator/-/negotiator-0.6.2.tgz\",\r\n      \"integrity\": \"sha512-hZXc7K2e+PgeI1eDBe/10Ard4ekbfrrqG8Ep+8Jmf4JID2bNg7NvCPOZN+kfF574pFQI7mum2AUqDidoKqcTOw==\"\r\n    },\r\n    \"nodemailer\": {\r\n      \"version\": \"6.4.11\",\r\n      \"resolved\": \"https://registry.npmjs.org/nodemailer/-/nodemailer-6.4.11.tgz\",\r\n      \"integrity\": \"sha512-BVZBDi+aJV4O38rxsUh164Dk1NCqgh6Cm0rQSb9SK/DHGll/DrCMnycVDD7msJgZCnmVa8ASo8EZzR7jsgTukQ==\"\r\n    },\r\n    \"normalize-path\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-2.1.1.tgz\",\r\n      \"integrity\": \"sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=\",\r\n      \"requires\": {\r\n        \"remove-trailing-separator\": \"^1.0.1\"\r\n      }\r\n    },\r\n    \"object-copy\": {\r\n      \"version\": \"0.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/object-copy/-/object-copy-0.1.0.tgz\",\r\n      \"integrity\": \"sha1-fn2Fi3gb18mRpBupde04EnVOmYw=\",\r\n      \"requires\": {\r\n        \"copy-descriptor\": \"^0.1.0\",\r\n        \"define-property\": \"^0.2.5\",\r\n        \"kind-of\": \"^3.0.3\"\r\n      },\r\n      \"dependencies\": {\r\n        \"define-property\": {\r\n          \"version\": \"0.2.5\",\r\n          \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz\",\r\n          \"integrity\": \"sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=\",\r\n          \"requires\": {\r\n            \"is-descriptor\": \"^0.1.0\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"object-visit\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/object-visit/-/object-visit-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-95xEk68MU3e1n+OdOV5BBC3QRbs=\",\r\n      \"requires\": {\r\n        \"isobject\": \"^3.0.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        }\r\n      }\r\n    },\r\n    \"object.omit\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/object.omit/-/object.omit-2.0.1.tgz\",\r\n      \"integrity\": \"sha1-Gpx0SCnznbuFjHbKNXmuKlTr0fo=\",\r\n      \"requires\": {\r\n        \"for-own\": \"^0.1.4\",\r\n        \"is-extendable\": \"^0.1.1\"\r\n      }\r\n    },\r\n    \"object.pick\": {\r\n      \"version\": \"1.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/object.pick/-/object.pick-1.3.0.tgz\",\r\n      \"integrity\": \"sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=\",\r\n      \"requires\": {\r\n        \"isobject\": \"^3.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        }\r\n      }\r\n    },\r\n    \"on-finished\": {\r\n      \"version\": \"2.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",\r\n      \"integrity\": \"sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=\",\r\n      \"requires\": {\r\n        \"ee-first\": \"1.1.1\"\r\n      }\r\n    },\r\n    \"on-headers\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==\"\r\n    },\r\n    \"once\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\r\n      \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\",\r\n      \"requires\": {\r\n        \"wrappy\": \"1\"\r\n      }\r\n    },\r\n    \"opentype.js\": {\r\n      \"version\": \"0.7.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/opentype.js/-/opentype.js-0.7.3.tgz\",\r\n      \"integrity\": \"sha1-QPuM4Yv9YOdESO/f5EKDQJg5eqs=\",\r\n      \"requires\": {\r\n        \"tiny-inflate\": \"^1.0.2\"\r\n      }\r\n    },\r\n    \"parse-glob\": {\r\n      \"version\": \"3.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/parse-glob/-/parse-glob-3.0.4.tgz\",\r\n      \"integrity\": \"sha1-ssN2z7EfNVE7rdFz7wu246OIORw=\",\r\n      \"requires\": {\r\n        \"glob-base\": \"^0.3.0\",\r\n        \"is-dotfile\": \"^1.0.0\",\r\n        \"is-extglob\": \"^1.0.0\",\r\n        \"is-glob\": \"^2.0.0\"\r\n      }\r\n    },\r\n    \"parseurl\": {\r\n      \"version\": \"1.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\r\n      \"integrity\": \"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\"\r\n    },\r\n    \"pascalcase\": {\r\n      \"version\": \"0.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/pascalcase/-/pascalcase-0.1.1.tgz\",\r\n      \"integrity\": \"sha1-s2PlXoAGym/iF4TS2yK9FdeRfxQ=\"\r\n    },\r\n    \"path-is-absolute\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\"\r\n    },\r\n    \"path-parse\": {\r\n      \"version\": \"1.0.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.6.tgz\",\r\n      \"integrity\": \"sha512-GSmOT2EbHrINBf9SR7CDELwlJ8AENk3Qn7OikK4nFYAu3Ote2+JYNVvkpAEQm3/TLNEJFD/xZJjzyxg3KBWOzw==\"\r\n    },\r\n    \"path-to-regexp\": {\r\n      \"version\": \"0.1.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz\",\r\n      \"integrity\": \"sha1-32BBeABfUi8V60SQ5yR6G/qmf4w=\"\r\n    },\r\n    \"posix-character-classes\": {\r\n      \"version\": \"0.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/posix-character-classes/-/posix-character-classes-0.1.1.tgz\",\r\n      \"integrity\": \"sha1-AerA/jta9xoqbAL+q7jB/vfgDqs=\"\r\n    },\r\n    \"preserve\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/preserve/-/preserve-0.2.0.tgz\",\r\n      \"integrity\": \"sha1-gV7R9uvGWSb4ZbMQwHE7yzMVzks=\"\r\n    },\r\n    \"process-nextick-args\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\"\r\n    },\r\n    \"proxy-addr\": {\r\n      \"version\": \"2.0.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.5.tgz\",\r\n      \"integrity\": \"sha512-t/7RxHXPH6cJtP0pRG6smSr9QJidhB+3kXu0KgXnbGYMgzEnUxRQ4/LDdfOwZEMyIh3/xHb8PX3t+lfL9z+YVQ==\",\r\n      \"requires\": {\r\n        \"forwarded\": \"~0.1.2\",\r\n        \"ipaddr.js\": \"1.9.0\"\r\n      }\r\n    },\r\n    \"qs\": {\r\n      \"version\": \"6.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.7.0.tgz\",\r\n      \"integrity\": \"sha512-VCdBRNFTX1fyE7Nb6FYoURo/SPe62QCaAyzJvUjwRaIsc+NePBEniHlvxFmmX56+HZphIGtV0XeCirBtpDrTyQ==\"\r\n    },\r\n    \"random-bytes\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/random-bytes/-/random-bytes-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-T2ih3Arli9P7lYSMMDJNt11kNgs=\"\r\n    },\r\n    \"randomatic\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/randomatic/-/randomatic-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-TuDE5KxZ0J461RVjrJZCJc+J+zCkTb1MbH9AQUq68sMhOMcy9jLcb3BrZKgp9q9Ncltdg4QVqWrH02W2EFFVYw==\",\r\n      \"requires\": {\r\n        \"is-number\": \"^4.0.0\",\r\n        \"kind-of\": \"^6.0.0\",\r\n        \"math-random\": \"^1.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"is-number\": {\r\n          \"version\": \"4.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-4.0.0.tgz\",\r\n          \"integrity\": \"sha512-rSklcAIlf1OmFdyAqbnWTLVelsQ58uvZ66S/ZyawjWqIviTWCjg2PzVGw8WUA+nNuPTqb4wgA+NszrJ+08LlgQ==\"\r\n        },\r\n        \"kind-of\": {\r\n          \"version\": \"6.0.3\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\r\n          \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\"\r\n        }\r\n      }\r\n    },\r\n    \"range-parser\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\"\r\n    },\r\n    \"raw-body\": {\r\n      \"version\": \"2.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/raw-body/-/raw-body-2.4.0.tgz\",\r\n      \"integrity\": \"sha512-4Oz8DUIwdvoa5qMJelxipzi/iJIi40O5cGV1wNYp5hvZP8ZN0T+jiNkL0QepXs+EsQ9XJ8ipEDoiH70ySUJP3Q==\",\r\n      \"requires\": {\r\n        \"bytes\": \"3.1.0\",\r\n        \"http-errors\": \"1.7.2\",\r\n        \"iconv-lite\": \"0.4.24\",\r\n        \"unpipe\": \"1.0.0\"\r\n      }\r\n    },\r\n    \"readable-stream\": {\r\n      \"version\": \"2.3.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz\",\r\n      \"integrity\": \"sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==\",\r\n      \"requires\": {\r\n        \"core-util-is\": \"~1.0.0\",\r\n        \"inherits\": \"~2.0.3\",\r\n        \"isarray\": \"~1.0.0\",\r\n        \"process-nextick-args\": \"~2.0.0\",\r\n        \"safe-buffer\": \"~5.1.1\",\r\n        \"string_decoder\": \"~1.1.1\",\r\n        \"util-deprecate\": \"~1.0.1\"\r\n      }\r\n    },\r\n    \"readdirp\": {\r\n      \"version\": \"2.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/readdirp/-/readdirp-2.2.1.tgz\",\r\n      \"integrity\": \"sha512-1JU/8q+VgFZyxwrJ+SVIOsh+KywWGpds3NTqikiKpDMZWScmAYyKIgqkO+ARvNWJfXeXR1zxz7aHF4u4CyH6vQ==\",\r\n      \"requires\": {\r\n        \"graceful-fs\": \"^4.1.11\",\r\n        \"micromatch\": \"^3.1.10\",\r\n        \"readable-stream\": \"^2.0.2\"\r\n      },\r\n      \"dependencies\": {\r\n        \"arr-diff\": {\r\n          \"version\": \"4.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/arr-diff/-/arr-diff-4.0.0.tgz\",\r\n          \"integrity\": \"sha1-1kYQdP6/7HHn4VI1dhoyml3HxSA=\"\r\n        },\r\n        \"array-unique\": {\r\n          \"version\": \"0.3.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/array-unique/-/array-unique-0.3.2.tgz\",\r\n          \"integrity\": \"sha1-qJS3XUvE9s1nnvMkSp/Y9Gri1Cg=\"\r\n        },\r\n        \"braces\": {\r\n          \"version\": \"2.3.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/braces/-/braces-2.3.2.tgz\",\r\n          \"integrity\": \"sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==\",\r\n          \"requires\": {\r\n            \"arr-flatten\": \"^1.1.0\",\r\n            \"array-unique\": \"^0.3.2\",\r\n            \"extend-shallow\": \"^2.0.1\",\r\n            \"fill-range\": \"^4.0.0\",\r\n            \"isobject\": \"^3.0.1\",\r\n            \"repeat-element\": \"^1.1.2\",\r\n            \"snapdragon\": \"^0.8.1\",\r\n            \"snapdragon-node\": \"^2.0.1\",\r\n            \"split-string\": \"^3.0.2\",\r\n            \"to-regex\": \"^3.0.1\"\r\n          },\r\n          \"dependencies\": {\r\n            \"extend-shallow\": {\r\n              \"version\": \"2.0.1\",\r\n              \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\r\n              \"integrity\": \"sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\",\r\n              \"requires\": {\r\n                \"is-extendable\": \"^0.1.0\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"expand-brackets\": {\r\n          \"version\": \"2.1.4\",\r\n          \"resolved\": \"https://registry.npmjs.org/expand-brackets/-/expand-brackets-2.1.4.tgz\",\r\n          \"integrity\": \"sha1-t3c14xXOMPa27/D4OwQVGiJEliI=\",\r\n          \"requires\": {\r\n            \"debug\": \"^2.3.3\",\r\n            \"define-property\": \"^0.2.5\",\r\n            \"extend-shallow\": \"^2.0.1\",\r\n            \"posix-character-classes\": \"^0.1.0\",\r\n            \"regex-not\": \"^1.0.0\",\r\n            \"snapdragon\": \"^0.8.1\",\r\n            \"to-regex\": \"^3.0.1\"\r\n          },\r\n          \"dependencies\": {\r\n            \"define-property\": {\r\n              \"version\": \"0.2.5\",\r\n              \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz\",\r\n              \"integrity\": \"sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=\",\r\n              \"requires\": {\r\n                \"is-descriptor\": \"^0.1.0\"\r\n              }\r\n            },\r\n            \"extend-shallow\": {\r\n              \"version\": \"2.0.1\",\r\n              \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\r\n              \"integrity\": \"sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\",\r\n              \"requires\": {\r\n                \"is-extendable\": \"^0.1.0\"\r\n              }\r\n            },\r\n            \"is-accessor-descriptor\": {\r\n              \"version\": \"0.1.6\",\r\n              \"resolved\": \"https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz\",\r\n              \"integrity\": \"sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=\",\r\n              \"requires\": {\r\n                \"kind-of\": \"^3.0.2\"\r\n              },\r\n              \"dependencies\": {\r\n                \"kind-of\": {\r\n                  \"version\": \"3.2.2\",\r\n                  \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz\",\r\n                  \"integrity\": \"sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\",\r\n                  \"requires\": {\r\n                    \"is-buffer\": \"^1.1.5\"\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            \"is-data-descriptor\": {\r\n              \"version\": \"0.1.4\",\r\n              \"resolved\": \"https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz\",\r\n              \"integrity\": \"sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=\",\r\n              \"requires\": {\r\n                \"kind-of\": \"^3.0.2\"\r\n              },\r\n              \"dependencies\": {\r\n                \"kind-of\": {\r\n                  \"version\": \"3.2.2\",\r\n                  \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz\",\r\n                  \"integrity\": \"sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\",\r\n                  \"requires\": {\r\n                    \"is-buffer\": \"^1.1.5\"\r\n                  }\r\n                }\r\n              }\r\n            },\r\n            \"is-descriptor\": {\r\n              \"version\": \"0.1.6\",\r\n              \"resolved\": \"https://registry.npmjs.org/is-descriptor/-/is-descriptor-0.1.6.tgz\",\r\n              \"integrity\": \"sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==\",\r\n              \"requires\": {\r\n                \"is-accessor-descriptor\": \"^0.1.6\",\r\n                \"is-data-descriptor\": \"^0.1.4\",\r\n                \"kind-of\": \"^5.0.0\"\r\n              }\r\n            },\r\n            \"kind-of\": {\r\n              \"version\": \"5.1.0\",\r\n              \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-5.1.0.tgz\",\r\n              \"integrity\": \"sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==\"\r\n            }\r\n          }\r\n        },\r\n        \"extglob\": {\r\n          \"version\": \"2.0.4\",\r\n          \"resolved\": \"https://registry.npmjs.org/extglob/-/extglob-2.0.4.tgz\",\r\n          \"integrity\": \"sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==\",\r\n          \"requires\": {\r\n            \"array-unique\": \"^0.3.2\",\r\n            \"define-property\": \"^1.0.0\",\r\n            \"expand-brackets\": \"^2.1.4\",\r\n            \"extend-shallow\": \"^2.0.1\",\r\n            \"fragment-cache\": \"^0.2.1\",\r\n            \"regex-not\": \"^1.0.0\",\r\n            \"snapdragon\": \"^0.8.1\",\r\n            \"to-regex\": \"^3.0.1\"\r\n          },\r\n          \"dependencies\": {\r\n            \"define-property\": {\r\n              \"version\": \"1.0.0\",\r\n              \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz\",\r\n              \"integrity\": \"sha1-dp66rz9KY6rTr56NMEybvnm/sOY=\",\r\n              \"requires\": {\r\n                \"is-descriptor\": \"^1.0.0\"\r\n              }\r\n            },\r\n            \"extend-shallow\": {\r\n              \"version\": \"2.0.1\",\r\n              \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\r\n              \"integrity\": \"sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\",\r\n              \"requires\": {\r\n                \"is-extendable\": \"^0.1.0\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"fill-range\": {\r\n          \"version\": \"4.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/fill-range/-/fill-range-4.0.0.tgz\",\r\n          \"integrity\": \"sha1-1USBHUKPmOsGpj3EAtJAPDKMOPc=\",\r\n          \"requires\": {\r\n            \"extend-shallow\": \"^2.0.1\",\r\n            \"is-number\": \"^3.0.0\",\r\n            \"repeat-string\": \"^1.6.1\",\r\n            \"to-regex-range\": \"^2.1.0\"\r\n          },\r\n          \"dependencies\": {\r\n            \"extend-shallow\": {\r\n              \"version\": \"2.0.1\",\r\n              \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\r\n              \"integrity\": \"sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\",\r\n              \"requires\": {\r\n                \"is-extendable\": \"^0.1.0\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"is-accessor-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-data-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-descriptor\": {\r\n          \"version\": \"1.0.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz\",\r\n          \"integrity\": \"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\r\n          \"requires\": {\r\n            \"is-accessor-descriptor\": \"^1.0.0\",\r\n            \"is-data-descriptor\": \"^1.0.0\",\r\n            \"kind-of\": \"^6.0.2\"\r\n          }\r\n        },\r\n        \"is-number\": {\r\n          \"version\": \"3.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz\",\r\n          \"integrity\": \"sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^3.0.2\"\r\n          },\r\n          \"dependencies\": {\r\n            \"kind-of\": {\r\n              \"version\": \"3.2.2\",\r\n              \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz\",\r\n              \"integrity\": \"sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=\",\r\n              \"requires\": {\r\n                \"is-buffer\": \"^1.1.5\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        },\r\n        \"kind-of\": {\r\n          \"version\": \"6.0.3\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\r\n          \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\"\r\n        },\r\n        \"micromatch\": {\r\n          \"version\": \"3.1.10\",\r\n          \"resolved\": \"https://registry.npmjs.org/micromatch/-/micromatch-3.1.10.tgz\",\r\n          \"integrity\": \"sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==\",\r\n          \"requires\": {\r\n            \"arr-diff\": \"^4.0.0\",\r\n            \"array-unique\": \"^0.3.2\",\r\n            \"braces\": \"^2.3.1\",\r\n            \"define-property\": \"^2.0.2\",\r\n            \"extend-shallow\": \"^3.0.2\",\r\n            \"extglob\": \"^2.0.4\",\r\n            \"fragment-cache\": \"^0.2.1\",\r\n            \"kind-of\": \"^6.0.2\",\r\n            \"nanomatch\": \"^1.2.9\",\r\n            \"object.pick\": \"^1.3.0\",\r\n            \"regex-not\": \"^1.0.0\",\r\n            \"snapdragon\": \"^0.8.1\",\r\n            \"to-regex\": \"^3.0.2\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"regex-cache\": {\r\n      \"version\": \"0.4.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/regex-cache/-/regex-cache-0.4.4.tgz\",\r\n      \"integrity\": \"sha512-nVIZwtCjkC9YgvWkpM55B5rBhBYRZhAaJbgcFYXXsHnbZ9UZI9nnVWYZpBlCqv9ho2eZryPnWrZGsOdPwVWXWQ==\",\r\n      \"requires\": {\r\n        \"is-equal-shallow\": \"^0.1.3\"\r\n      }\r\n    },\r\n    \"regex-not\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/regex-not/-/regex-not-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==\",\r\n      \"requires\": {\r\n        \"extend-shallow\": \"^3.0.2\",\r\n        \"safe-regex\": \"^1.1.0\"\r\n      }\r\n    },\r\n    \"regexp-clone\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/regexp-clone/-/regexp-clone-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-TuAasHQNamyyJ2hb97IuBEif4qBHGjPHBS64sZwytpLEqtBQ1gPJTnOaQ6qmpET16cK14kkjbazl6+p0RRv0yw==\"\r\n    },\r\n    \"remove-trailing-separator\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",\r\n      \"integrity\": \"sha1-wkvOKig62tW8P1jg1IJJuSN52O8=\"\r\n    },\r\n    \"repeat-element\": {\r\n      \"version\": \"1.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/repeat-element/-/repeat-element-1.1.3.tgz\",\r\n      \"integrity\": \"sha512-ahGq0ZnV5m5XtZLMb+vP76kcAM5nkLqk0lpqAuojSKGgQtn4eRi4ZZGm2olo2zKFH+sMsWaqOCW1dqAnOru72g==\"\r\n    },\r\n    \"repeat-string\": {\r\n      \"version\": \"1.6.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz\",\r\n      \"integrity\": \"sha1-jcrkcOHIirwtYA//Sndihtp15jc=\"\r\n    },\r\n    \"require_optional\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/require_optional/-/require_optional-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-qhM/y57enGWHAe3v/NcwML6a3/vfESLe/sGM2dII+gEO0BpKRUkWZow/tyloNqJyN6kXSl3RyyM8Ll5D/sJP8g==\",\r\n      \"requires\": {\r\n        \"resolve-from\": \"^2.0.0\",\r\n        \"semver\": \"^5.1.0\"\r\n      }\r\n    },\r\n    \"resolve\": {\r\n      \"version\": \"1.15.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.15.1.tgz\",\r\n      \"integrity\": \"sha512-84oo6ZTtoTUpjgNEr5SJyzQhzL72gaRodsSfyxC/AXRvwu0Yse9H8eF9IpGo7b8YetZhlI6v7ZQ6bKBFV/6S7w==\",\r\n      \"requires\": {\r\n        \"path-parse\": \"^1.0.6\"\r\n      }\r\n    },\r\n    \"resolve-from\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve-from/-/resolve-from-2.0.0.tgz\",\r\n      \"integrity\": \"sha1-lICrIOlP+h2egKgEx+oUdhGWa1c=\"\r\n    },\r\n    \"resolve-url\": {\r\n      \"version\": \"0.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/resolve-url/-/resolve-url-0.2.1.tgz\",\r\n      \"integrity\": \"sha1-LGN/53yJOv0qZj/iGqkIAGjiBSo=\"\r\n    },\r\n    \"resumer\": {\r\n      \"version\": \"0.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/resumer/-/resumer-0.0.0.tgz\",\r\n      \"integrity\": \"sha1-8ej0YeQGS6Oegq883CqMiT0HZ1k=\",\r\n      \"requires\": {\r\n        \"through\": \"~2.3.4\"\r\n      }\r\n    },\r\n    \"ret\": {\r\n      \"version\": \"0.1.15\",\r\n      \"resolved\": \"https://registry.npmjs.org/ret/-/ret-0.1.15.tgz\",\r\n      \"integrity\": \"sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==\"\r\n    },\r\n    \"safe-buffer\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\"\r\n    },\r\n    \"safe-regex\": {\r\n      \"version\": \"1.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-regex/-/safe-regex-1.1.0.tgz\",\r\n      \"integrity\": \"sha1-QKNmnzsHfR6UPURinhV91IAjvy4=\",\r\n      \"requires\": {\r\n        \"ret\": \"~0.1.10\"\r\n      }\r\n    },\r\n    \"safer-buffer\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\"\r\n    },\r\n    \"saslprep\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/saslprep/-/saslprep-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==\",\r\n      \"optional\": true,\r\n      \"requires\": {\r\n        \"sparse-bitfield\": \"^3.0.3\"\r\n      }\r\n    },\r\n    \"semver\": {\r\n      \"version\": \"5.7.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.1.tgz\",\r\n      \"integrity\": \"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\"\r\n    },\r\n    \"send\": {\r\n      \"version\": \"0.17.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/send/-/send-0.17.1.tgz\",\r\n      \"integrity\": \"sha512-BsVKsiGcQMFwT8UxypobUKyv7irCNRHk1T0G680vk88yf6LBByGcZJOTJCrTP2xVN6yI+XjPJcNuE3V4fT9sAg==\",\r\n      \"requires\": {\r\n        \"debug\": \"2.6.9\",\r\n        \"depd\": \"~1.1.2\",\r\n        \"destroy\": \"~1.0.4\",\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"etag\": \"~1.8.1\",\r\n        \"fresh\": \"0.5.2\",\r\n        \"http-errors\": \"~1.7.2\",\r\n        \"mime\": \"1.6.0\",\r\n        \"ms\": \"2.1.1\",\r\n        \"on-finished\": \"~2.3.0\",\r\n        \"range-parser\": \"~1.2.1\",\r\n        \"statuses\": \"~1.5.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"ms\": {\r\n          \"version\": \"2.1.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.1.tgz\",\r\n          \"integrity\": \"sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg==\"\r\n        }\r\n      }\r\n    },\r\n    \"serve-static\": {\r\n      \"version\": \"1.14.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/serve-static/-/serve-static-1.14.1.tgz\",\r\n      \"integrity\": \"sha512-JMrvUwE54emCYWlTI+hGrGv5I8dEwmco/00EvkzIIsR7MqrHonbD9pO2MOfFnpFntl7ecpZs+3mW+XbQZu9QCg==\",\r\n      \"requires\": {\r\n        \"encodeurl\": \"~1.0.2\",\r\n        \"escape-html\": \"~1.0.3\",\r\n        \"parseurl\": \"~1.3.3\",\r\n        \"send\": \"0.17.1\"\r\n      }\r\n    },\r\n    \"set-value\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/set-value/-/set-value-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==\",\r\n      \"requires\": {\r\n        \"extend-shallow\": \"^2.0.1\",\r\n        \"is-extendable\": \"^0.1.1\",\r\n        \"is-plain-object\": \"^2.0.3\",\r\n        \"split-string\": \"^3.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"extend-shallow\": {\r\n          \"version\": \"2.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\r\n          \"integrity\": \"sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\",\r\n          \"requires\": {\r\n            \"is-extendable\": \"^0.1.0\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"setprototypeof\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-JvdAWfbXeIGaZ9cILp38HntZSFSo3mWg6xGcJJsd+d4aRMOqauag1C63dJfDw7OaMYwEbHMOxEZ1lqVRYP2OAw==\"\r\n    },\r\n    \"sha1\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/sha1/-/sha1-1.1.1.tgz\",\r\n      \"integrity\": \"sha1-rdqnqTFo85PxnrKxUJFhjicA+Eg=\",\r\n      \"requires\": {\r\n        \"charenc\": \">= 0.0.1\",\r\n        \"crypt\": \">= 0.0.1\"\r\n      }\r\n    },\r\n    \"sift\": {\r\n      \"version\": \"7.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/sift/-/sift-7.0.1.tgz\",\r\n      \"integrity\": \"sha512-oqD7PMJ+uO6jV9EQCl0LrRw1OwsiPsiFQR5AR30heR+4Dl7jBBbDLnNvWiak20tzZlSE1H7RB30SX/1j/YYT7g==\"\r\n    },\r\n    \"sliced\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/sliced/-/sliced-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-CzpmK10Ewxd7GSa+qCsD+Dei70E=\"\r\n    },\r\n    \"snapdragon\": {\r\n      \"version\": \"0.8.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/snapdragon/-/snapdragon-0.8.2.tgz\",\r\n      \"integrity\": \"sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==\",\r\n      \"requires\": {\r\n        \"base\": \"^0.11.1\",\r\n        \"debug\": \"^2.2.0\",\r\n        \"define-property\": \"^0.2.5\",\r\n        \"extend-shallow\": \"^2.0.1\",\r\n        \"map-cache\": \"^0.2.2\",\r\n        \"source-map\": \"^0.5.6\",\r\n        \"source-map-resolve\": \"^0.5.0\",\r\n        \"use\": \"^3.1.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"define-property\": {\r\n          \"version\": \"0.2.5\",\r\n          \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz\",\r\n          \"integrity\": \"sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=\",\r\n          \"requires\": {\r\n            \"is-descriptor\": \"^0.1.0\"\r\n          }\r\n        },\r\n        \"extend-shallow\": {\r\n          \"version\": \"2.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\r\n          \"integrity\": \"sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=\",\r\n          \"requires\": {\r\n            \"is-extendable\": \"^0.1.0\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"snapdragon-node\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/snapdragon-node/-/snapdragon-node-2.1.1.tgz\",\r\n      \"integrity\": \"sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==\",\r\n      \"requires\": {\r\n        \"define-property\": \"^1.0.0\",\r\n        \"isobject\": \"^3.0.0\",\r\n        \"snapdragon-util\": \"^3.0.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"define-property\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz\",\r\n          \"integrity\": \"sha1-dp66rz9KY6rTr56NMEybvnm/sOY=\",\r\n          \"requires\": {\r\n            \"is-descriptor\": \"^1.0.0\"\r\n          }\r\n        },\r\n        \"is-accessor-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-data-descriptor\": {\r\n          \"version\": \"1.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\r\n          \"integrity\": \"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^6.0.0\"\r\n          }\r\n        },\r\n        \"is-descriptor\": {\r\n          \"version\": \"1.0.2\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz\",\r\n          \"integrity\": \"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\r\n          \"requires\": {\r\n            \"is-accessor-descriptor\": \"^1.0.0\",\r\n            \"is-data-descriptor\": \"^1.0.0\",\r\n            \"kind-of\": \"^6.0.2\"\r\n          }\r\n        },\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        },\r\n        \"kind-of\": {\r\n          \"version\": \"6.0.3\",\r\n          \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz\",\r\n          \"integrity\": \"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\"\r\n        }\r\n      }\r\n    },\r\n    \"snapdragon-util\": {\r\n      \"version\": \"3.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/snapdragon-util/-/snapdragon-util-3.0.1.tgz\",\r\n      \"integrity\": \"sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==\",\r\n      \"requires\": {\r\n        \"kind-of\": \"^3.2.0\"\r\n      }\r\n    },\r\n    \"source-map\": {\r\n      \"version\": \"0.5.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz\",\r\n      \"integrity\": \"sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w=\"\r\n    },\r\n    \"source-map-resolve\": {\r\n      \"version\": \"0.5.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map-resolve/-/source-map-resolve-0.5.3.tgz\",\r\n      \"integrity\": \"sha512-Htz+RnsXWk5+P2slx5Jh3Q66vhQj1Cllm0zvnaY98+NFx+Dv2CF/f5O/t8x+KaNdrdIAsruNzoh/KpialbqAnw==\",\r\n      \"requires\": {\r\n        \"atob\": \"^2.1.2\",\r\n        \"decode-uri-component\": \"^0.2.0\",\r\n        \"resolve-url\": \"^0.2.1\",\r\n        \"source-map-url\": \"^0.4.0\",\r\n        \"urix\": \"^0.1.0\"\r\n      }\r\n    },\r\n    \"source-map-url\": {\r\n      \"version\": \"0.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/source-map-url/-/source-map-url-0.4.0.tgz\",\r\n      \"integrity\": \"sha1-PpNdfd1zYxuXZZlW1VEo6HtQhKM=\"\r\n    },\r\n    \"sparse-bitfield\": {\r\n      \"version\": \"3.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz\",\r\n      \"integrity\": \"sha1-/0rm5oZWBWuks+eSqzM004JzyhE=\",\r\n      \"optional\": true,\r\n      \"requires\": {\r\n        \"memory-pager\": \"^1.0.2\"\r\n      }\r\n    },\r\n    \"split-string\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/split-string/-/split-string-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==\",\r\n      \"requires\": {\r\n        \"extend-shallow\": \"^3.0.0\"\r\n      }\r\n    },\r\n    \"static-extend\": {\r\n      \"version\": \"0.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/static-extend/-/static-extend-0.1.2.tgz\",\r\n      \"integrity\": \"sha1-YICcOcv/VTNyJv1eC1IPNB8ftcY=\",\r\n      \"requires\": {\r\n        \"define-property\": \"^0.2.5\",\r\n        \"object-copy\": \"^0.1.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"define-property\": {\r\n          \"version\": \"0.2.5\",\r\n          \"resolved\": \"https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz\",\r\n          \"integrity\": \"sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=\",\r\n          \"requires\": {\r\n            \"is-descriptor\": \"^0.1.0\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"statuses\": {\r\n      \"version\": \"1.5.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz\",\r\n      \"integrity\": \"sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=\"\r\n    },\r\n    \"streamsearch\": {\r\n      \"version\": \"0.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/streamsearch/-/streamsearch-0.1.2.tgz\",\r\n      \"integrity\": \"sha1-gIudDlb8Jz2Am6VzOOkpkZoanxo=\"\r\n    },\r\n    \"string_decoder\": {\r\n      \"version\": \"1.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\r\n      \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\r\n      \"requires\": {\r\n        \"safe-buffer\": \"~5.1.0\"\r\n      }\r\n    },\r\n    \"svg-captcha\": {\r\n      \"version\": \"1.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/svg-captcha/-/svg-captcha-1.4.0.tgz\",\r\n      \"integrity\": \"sha512-/fkkhavXPE57zRRCjNqAP3txRCSncpMx3NnNZL7iEoyAtYwUjPhJxW6FQTQPG5UPEmCrbFoXS10C3YdJlW7PDg==\",\r\n      \"requires\": {\r\n        \"opentype.js\": \"^0.7.3\"\r\n      }\r\n    },\r\n    \"tape\": {\r\n      \"version\": \"2.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/tape/-/tape-2.3.3.tgz\",\r\n      \"integrity\": \"sha1-Lnzgox3wn41oUWZKcYQuDKUFevc=\",\r\n      \"requires\": {\r\n        \"deep-equal\": \"~0.1.0\",\r\n        \"defined\": \"~0.0.0\",\r\n        \"inherits\": \"~2.0.1\",\r\n        \"jsonify\": \"~0.0.0\",\r\n        \"resumer\": \"~0.0.0\",\r\n        \"through\": \"~2.3.4\"\r\n      }\r\n    },\r\n    \"through\": {\r\n      \"version\": \"2.3.8\",\r\n      \"resolved\": \"https://registry.npmjs.org/through/-/through-2.3.8.tgz\",\r\n      \"integrity\": \"sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=\"\r\n    },\r\n    \"tiny-inflate\": {\r\n      \"version\": \"1.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/tiny-inflate/-/tiny-inflate-1.0.3.tgz\",\r\n      \"integrity\": \"sha512-pkY1fj1cKHb2seWDy0B16HeWyczlJA9/WW3u3c4z/NiWDsO3DOU5D7nhTLE9CF0yXv/QZFY7sEJmj24dK+Rrqw==\"\r\n    },\r\n    \"to-object-path\": {\r\n      \"version\": \"0.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/to-object-path/-/to-object-path-0.3.0.tgz\",\r\n      \"integrity\": \"sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=\",\r\n      \"requires\": {\r\n        \"kind-of\": \"^3.0.2\"\r\n      }\r\n    },\r\n    \"to-regex\": {\r\n      \"version\": \"3.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/to-regex/-/to-regex-3.0.2.tgz\",\r\n      \"integrity\": \"sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==\",\r\n      \"requires\": {\r\n        \"define-property\": \"^2.0.2\",\r\n        \"extend-shallow\": \"^3.0.2\",\r\n        \"regex-not\": \"^1.0.2\",\r\n        \"safe-regex\": \"^1.1.0\"\r\n      }\r\n    },\r\n    \"to-regex-range\": {\r\n      \"version\": \"2.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/to-regex-range/-/to-regex-range-2.1.1.tgz\",\r\n      \"integrity\": \"sha1-fIDBe53+vlmeJzZ+DU3VWQFB2zg=\",\r\n      \"requires\": {\r\n        \"is-number\": \"^3.0.0\",\r\n        \"repeat-string\": \"^1.6.1\"\r\n      },\r\n      \"dependencies\": {\r\n        \"is-number\": {\r\n          \"version\": \"3.0.0\",\r\n          \"resolved\": \"https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz\",\r\n          \"integrity\": \"sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=\",\r\n          \"requires\": {\r\n            \"kind-of\": \"^3.0.2\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"toidentifier\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-yaOH/Pk/VEhBWWTlhI+qXxDFXlejDGcQipMlyxda9nthulaxLZUNcUqFxokp0vcYnvteJln5FNQDRrxj3YcbVw==\"\r\n    },\r\n    \"type-is\": {\r\n      \"version\": \"1.6.18\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz\",\r\n      \"integrity\": \"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\r\n      \"requires\": {\r\n        \"media-typer\": \"0.3.0\",\r\n        \"mime-types\": \"~2.1.24\"\r\n      }\r\n    },\r\n    \"uid-safe\": {\r\n      \"version\": \"2.1.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/uid-safe/-/uid-safe-2.1.5.tgz\",\r\n      \"integrity\": \"sha512-KPHm4VL5dDXKz01UuEd88Df+KzynaohSL9fBh096KWAxSKZQDI2uBrVqtvRM4rwrIrRRKsdLNML/lnaaVSRioA==\",\r\n      \"requires\": {\r\n        \"random-bytes\": \"~1.0.0\"\r\n      }\r\n    },\r\n    \"union-value\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/union-value/-/union-value-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==\",\r\n      \"requires\": {\r\n        \"arr-union\": \"^3.1.0\",\r\n        \"get-value\": \"^2.0.6\",\r\n        \"is-extendable\": \"^0.1.1\",\r\n        \"set-value\": \"^2.0.1\"\r\n      }\r\n    },\r\n    \"unpipe\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=\"\r\n    },\r\n    \"unset-value\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/unset-value/-/unset-value-1.0.0.tgz\",\r\n      \"integrity\": \"sha1-g3aHP30jNRef+x5vw6jtDfyKtVk=\",\r\n      \"requires\": {\r\n        \"has-value\": \"^0.3.1\",\r\n        \"isobject\": \"^3.0.0\"\r\n      },\r\n      \"dependencies\": {\r\n        \"has-value\": {\r\n          \"version\": \"0.3.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/has-value/-/has-value-0.3.1.tgz\",\r\n          \"integrity\": \"sha1-ex9YutpiyoJ+wKIHgCVlSEWZXh8=\",\r\n          \"requires\": {\r\n            \"get-value\": \"^2.0.3\",\r\n            \"has-values\": \"^0.1.4\",\r\n            \"isobject\": \"^2.0.0\"\r\n          },\r\n          \"dependencies\": {\r\n            \"isobject\": {\r\n              \"version\": \"2.1.0\",\r\n              \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-2.1.0.tgz\",\r\n              \"integrity\": \"sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=\",\r\n              \"requires\": {\r\n                \"isarray\": \"1.0.0\"\r\n              }\r\n            }\r\n          }\r\n        },\r\n        \"has-values\": {\r\n          \"version\": \"0.1.4\",\r\n          \"resolved\": \"https://registry.npmjs.org/has-values/-/has-values-0.1.4.tgz\",\r\n          \"integrity\": \"sha1-bWHeldkd/Km5oCCJrThL/49it3E=\"\r\n        },\r\n        \"isobject\": {\r\n          \"version\": \"3.0.1\",\r\n          \"resolved\": \"https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz\",\r\n          \"integrity\": \"sha1-TkMekrEalzFjaqH5yNHMvP2reN8=\"\r\n        }\r\n      }\r\n    },\r\n    \"urix\": {\r\n      \"version\": \"0.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/urix/-/urix-0.1.0.tgz\",\r\n      \"integrity\": \"sha1-2pN/emLiH+wf0Y1Js1wpNQZ6bHI=\"\r\n    },\r\n    \"use\": {\r\n      \"version\": \"3.1.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/use/-/use-3.1.1.tgz\",\r\n      \"integrity\": \"sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==\"\r\n    },\r\n    \"util-deprecate\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=\"\r\n    },\r\n    \"utils-merge\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\r\n      \"integrity\": \"sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=\"\r\n    },\r\n    \"vary\": {\r\n      \"version\": \"1.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/vary/-/vary-1.1.2.tgz\",\r\n      \"integrity\": \"sha1-IpnwLG3tMNSllhsLn3RSShj2NPw=\"\r\n    },\r\n    \"verror\": {\r\n      \"version\": \"1.10.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/verror/-/verror-1.10.0.tgz\",\r\n      \"integrity\": \"sha1-OhBcoXBTr1XW4nDB+CiGguGNpAA=\",\r\n      \"requires\": {\r\n        \"assert-plus\": \"^1.0.0\",\r\n        \"core-util-is\": \"1.0.2\",\r\n        \"extsprintf\": \"^1.2.0\"\r\n      }\r\n    },\r\n    \"wrappy\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\r\n      \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\"\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package-lock.json	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ package-lock.json	(date 1599636142771)
@@ -170,9 +170,9 @@
       }
     },
     "bl": {
-      "version": "2.2.0",
-      "resolved": "https://registry.npmjs.org/bl/-/bl-2.2.0.tgz",
-      "integrity": "sha512-wbgvOpqopSr7uq6fJrLH8EsvYMJf9gzfo2jCsL2eTy75qXPukA4pCgHamOQkZtY5vmfVtjB+P3LNlMHW5CEZXA==",
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/bl/-/bl-2.2.1.tgz",
+      "integrity": "sha512-6Pesp1w0DEX1N550i/uGV/TqucVL4AM/pgThFSN/Qq9si1/DF9aIHs1BxD8V/QU0HoeHO6cQRTAuYnLPKq1e4g==",
       "requires": {
         "readable-stream": "^2.3.5",
         "safe-buffer": "^5.1.1"
@@ -273,6 +273,11 @@
       "resolved": "https://registry.npmjs.org/charenc/-/charenc-0.0.2.tgz",
       "integrity": "sha1-wKHS86cJLgN3S/qD8UwPxXkKhmc="
     },
+    "check-disk-space": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/check-disk-space/-/check-disk-space-2.1.0.tgz",
+      "integrity": "sha512-f0nx9oJF/AVF8nhSYlF1EBvMNnO+CXyLwKhPvN1943iOMI9TWhQigLZm80jAf0wzQhwKkzA8XXjyvuVUeGGcVQ=="
+    },
     "chokidar": {
       "version": "1.5.2",
       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-1.5.2.tgz",
@@ -1668,13 +1673,13 @@
       }
     },
     "mongoose": {
-      "version": "5.10.2",
-      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-5.10.2.tgz",
-      "integrity": "sha512-VO5eZawEMFh2gx9XPg9ZafzFg5eIVs4R7PW6kK1MFqBq34YD7GomkalYWVt02HctvTPDI1mkXsm52LXNZR1NxA==",
+      "version": "5.10.3",
+      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-5.10.3.tgz",
+      "integrity": "sha512-FLemltuzcsCHlFpEZ3bYOiNhJfHful+GoS+3uRgdEWGlY0HKfOjm9xsISM/tql8vRvhjr7qveuRfoBBGO3xNtw==",
       "requires": {
         "bson": "^1.1.4",
         "kareem": "2.3.1",
-        "mongodb": "3.6.0",
+        "mongodb": "3.6.1",
         "mongoose-legacy-pluralize": "1.0.2",
         "mpath": "0.7.0",
         "mquery": "3.2.2",
@@ -1691,9 +1696,9 @@
           "integrity": "sha512-kDuEzldR21lHciPQAIulLs1LZlCXdLziXI6Mb/TDkwXhb//UORJNPXgcRs2CuO4H0DcMkpfT3/ySsP3unoZjBg=="
         },
         "mongodb": {
-          "version": "3.6.0",
-          "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-3.6.0.tgz",
-          "integrity": "sha512-/XWWub1mHZVoqEsUppE0GV7u9kanLvHxho6EvBxQbShXTKYF9trhZC2NzbulRGeG7xMJHD8IOWRcdKx5LPjAjQ==",
+          "version": "3.6.1",
+          "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-3.6.1.tgz",
+          "integrity": "sha512-uH76Zzr5wPptnjEKJRQnwTsomtFOU/kQEU8a9hKHr2M7y9qVk7Q4Pkv0EQVp88742z9+RwvsdTw6dRjDZCNu1g==",
           "requires": {
             "bl": "^2.2.0",
             "bson": "^1.1.4",
Index: node_modules/mongoose/node_modules/mongodb/lib/cmap/connection.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst EventEmitter = require('events');\r\nconst MessageStream = require('./message_stream');\r\nconst MongoError = require('../core/error').MongoError;\r\nconst MongoNetworkError = require('../core/error').MongoNetworkError;\r\nconst MongoNetworkTimeoutError = require('../core/error').MongoNetworkTimeoutError;\r\nconst MongoWriteConcernError = require('../core/error').MongoWriteConcernError;\r\nconst CommandResult = require('../core/connection/command_result');\r\nconst StreamDescription = require('./stream_description').StreamDescription;\r\nconst wp = require('../core/wireprotocol');\r\nconst apm = require('../core/connection/apm');\r\nconst updateSessionFromResponse = require('../core/sessions').updateSessionFromResponse;\r\nconst uuidV4 = require('../core/utils').uuidV4;\r\nconst now = require('../utils').now;\r\nconst calculateDurationInMs = require('../utils').calculateDurationInMs;\r\n\r\nconst kStream = Symbol('stream');\r\nconst kQueue = Symbol('queue');\r\nconst kMessageStream = Symbol('messageStream');\r\nconst kGeneration = Symbol('generation');\r\nconst kLastUseTime = Symbol('lastUseTime');\r\nconst kClusterTime = Symbol('clusterTime');\r\nconst kDescription = Symbol('description');\r\nconst kIsMaster = Symbol('ismaster');\r\nconst kAutoEncrypter = Symbol('autoEncrypter');\r\n\r\nclass Connection extends EventEmitter {\r\n  constructor(stream, options) {\r\n    super(options);\r\n\r\n    this.id = options.id;\r\n    this.address = streamIdentifier(stream);\r\n    this.bson = options.bson;\r\n    this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\r\n    this.monitorCommands =\r\n      typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false;\r\n    this.closed = false;\r\n    this.destroyed = false;\r\n\r\n    this[kDescription] = new StreamDescription(this.address, options);\r\n    this[kGeneration] = options.generation;\r\n    this[kLastUseTime] = now();\r\n\r\n    // retain a reference to an `AutoEncrypter` if present\r\n    if (options.autoEncrypter) {\r\n      this[kAutoEncrypter] = options.autoEncrypter;\r\n    }\r\n\r\n    // setup parser stream and message handling\r\n    this[kQueue] = new Map();\r\n    this[kMessageStream] = new MessageStream(options);\r\n    this[kMessageStream].on('message', messageHandler(this));\r\n    this[kStream] = stream;\r\n    stream.on('error', () => {\r\n      /* ignore errors, listen to `close` instead */\r\n    });\r\n\r\n    stream.on('close', () => {\r\n      if (this.closed) {\r\n        return;\r\n      }\r\n\r\n      this.closed = true;\r\n      this[kQueue].forEach(op =>\r\n        op.cb(new MongoNetworkError(`connection ${this.id} to ${this.address} closed`))\r\n      );\r\n      this[kQueue].clear();\r\n\r\n      this.emit('close');\r\n    });\r\n\r\n    stream.on('timeout', () => {\r\n      if (this.closed) {\r\n        return;\r\n      }\r\n\r\n      stream.destroy();\r\n      this.closed = true;\r\n      this[kQueue].forEach(op =>\r\n        op.cb(\r\n          new MongoNetworkTimeoutError(`connection ${this.id} to ${this.address} timed out`, {\r\n            beforeHandshake: this[kIsMaster] == null\r\n          })\r\n        )\r\n      );\r\n\r\n      this[kQueue].clear();\r\n      this.emit('close');\r\n    });\r\n\r\n    // hook the message stream up to the passed in stream\r\n    stream.pipe(this[kMessageStream]);\r\n    this[kMessageStream].pipe(stream);\r\n  }\r\n\r\n  get description() {\r\n    return this[kDescription];\r\n  }\r\n\r\n  get ismaster() {\r\n    return this[kIsMaster];\r\n  }\r\n\r\n  // the `connect` method stores the result of the handshake ismaster on the connection\r\n  set ismaster(response) {\r\n    this[kDescription].receiveResponse(response);\r\n\r\n    // TODO: remove this, and only use the `StreamDescription` in the future\r\n    this[kIsMaster] = response;\r\n  }\r\n\r\n  get generation() {\r\n    return this[kGeneration] || 0;\r\n  }\r\n\r\n  get idleTime() {\r\n    return calculateDurationInMs(this[kLastUseTime]);\r\n  }\r\n\r\n  get clusterTime() {\r\n    return this[kClusterTime];\r\n  }\r\n\r\n  get stream() {\r\n    return this[kStream];\r\n  }\r\n\r\n  markAvailable() {\r\n    this[kLastUseTime] = now();\r\n  }\r\n\r\n  destroy(options, callback) {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = {};\r\n    }\r\n\r\n    options = Object.assign({ force: false }, options);\r\n    if (this[kStream] == null || this.destroyed) {\r\n      this.destroyed = true;\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (options.force) {\r\n      this[kStream].destroy();\r\n      this.destroyed = true;\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this[kStream].end(err => {\r\n      this.destroyed = true;\r\n      if (typeof callback === 'function') {\r\n        callback(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Wire protocol methods\r\n  command(ns, cmd, options, callback) {\r\n    wp.command(makeServerTrampoline(this), ns, cmd, options, callback);\r\n  }\r\n\r\n  query(ns, cmd, cursorState, options, callback) {\r\n    wp.query(makeServerTrampoline(this), ns, cmd, cursorState, options, callback);\r\n  }\r\n\r\n  getMore(ns, cursorState, batchSize, options, callback) {\r\n    wp.getMore(makeServerTrampoline(this), ns, cursorState, batchSize, options, callback);\r\n  }\r\n\r\n  killCursors(ns, cursorState, callback) {\r\n    wp.killCursors(makeServerTrampoline(this), ns, cursorState, callback);\r\n  }\r\n\r\n  insert(ns, ops, options, callback) {\r\n    wp.insert(makeServerTrampoline(this), ns, ops, options, callback);\r\n  }\r\n\r\n  update(ns, ops, options, callback) {\r\n    wp.update(makeServerTrampoline(this), ns, ops, options, callback);\r\n  }\r\n\r\n  remove(ns, ops, options, callback) {\r\n    wp.remove(makeServerTrampoline(this), ns, ops, options, callback);\r\n  }\r\n}\r\n\r\n/// This lets us emulate a legacy `Server` instance so we can work with the existing wire\r\n/// protocol methods. Eventually, the operation executor will return a `Connection` to execute\r\n/// against.\r\nfunction makeServerTrampoline(connection) {\r\n  const server = {\r\n    description: connection.description,\r\n    clusterTime: connection[kClusterTime],\r\n    s: {\r\n      bson: connection.bson,\r\n      pool: { write: write.bind(connection), isConnected: () => true }\r\n    }\r\n  };\r\n\r\n  if (connection[kAutoEncrypter]) {\r\n    server.autoEncrypter = connection[kAutoEncrypter];\r\n  }\r\n\r\n  return server;\r\n}\r\n\r\nfunction messageHandler(conn) {\r\n  return function messageHandler(message) {\r\n    // always emit the message, in case we are streaming\r\n    conn.emit('message', message);\r\n    if (!conn[kQueue].has(message.responseTo)) {\r\n      return;\r\n    }\r\n\r\n    const operationDescription = conn[kQueue].get(message.responseTo);\r\n    const callback = operationDescription.cb;\r\n\r\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\r\n    // track response, however the server currently synthetically produces remote requests\r\n    // making the `responseTo` change on each response\r\n    conn[kQueue].delete(message.responseTo);\r\n    if (message.moreToCome) {\r\n      // requeue the callback for next synthetic request\r\n      conn[kQueue].set(message.requestId, operationDescription);\r\n    } else if (operationDescription.socketTimeoutOverride) {\r\n      conn[kStream].setTimeout(conn.socketTimeout);\r\n    }\r\n\r\n    try {\r\n      // Pass in the entire description because it has BSON parsing options\r\n      message.parse(operationDescription);\r\n    } catch (err) {\r\n      callback(new MongoError(err));\r\n      return;\r\n    }\r\n\r\n    if (message.documents[0]) {\r\n      const document = message.documents[0];\r\n      const session = operationDescription.session;\r\n      if (session) {\r\n        updateSessionFromResponse(session, document);\r\n      }\r\n\r\n      if (document.$clusterTime) {\r\n        conn[kClusterTime] = document.$clusterTime;\r\n        conn.emit('clusterTimeReceived', document.$clusterTime);\r\n      }\r\n\r\n      if (operationDescription.command) {\r\n        if (document.writeConcernError) {\r\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\r\n          return;\r\n        }\r\n\r\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\r\n          callback(new MongoError(document));\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // NODE-2382: reenable in our glorious non-leaky abstraction future\r\n    // callback(null, operationDescription.fullResult ? message : message.documents[0]);\r\n\r\n    callback(\r\n      undefined,\r\n      new CommandResult(\r\n        operationDescription.fullResult ? message : message.documents[0],\r\n        conn,\r\n        message\r\n      )\r\n    );\r\n  };\r\n}\r\n\r\nfunction streamIdentifier(stream) {\r\n  if (typeof stream.address === 'function') {\r\n    return `${stream.remoteAddress}:${stream.remotePort}`;\r\n  }\r\n\r\n  return uuidV4().toString('hex');\r\n}\r\n\r\n// Not meant to be called directly, the wire protocol methods call this assuming it is a `Pool` instance\r\nfunction write(command, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n  }\r\n\r\n  options = options || {};\r\n  const operationDescription = {\r\n    requestId: command.requestId,\r\n    cb: callback,\r\n    session: options.session,\r\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false,\r\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\r\n    documentsReturnedIn: options.documentsReturnedIn,\r\n    command: !!options.command,\r\n\r\n    // for BSON parsing\r\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\r\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\r\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\r\n    raw: typeof options.raw === 'boolean' ? options.raw : false\r\n  };\r\n\r\n  if (this[kDescription] && this[kDescription].compressor) {\r\n    operationDescription.agreedCompressor = this[kDescription].compressor;\r\n\r\n    if (this[kDescription].zlibCompressionLevel) {\r\n      operationDescription.zlibCompressionLevel = this[kDescription].zlibCompressionLevel;\r\n    }\r\n  }\r\n\r\n  if (typeof options.socketTimeout === 'number') {\r\n    operationDescription.socketTimeoutOverride = true;\r\n    this[kStream].setTimeout(options.socketTimeout);\r\n  }\r\n\r\n  // if command monitoring is enabled we need to modify the callback here\r\n  if (this.monitorCommands) {\r\n    this.emit('commandStarted', new apm.CommandStartedEvent(this, command));\r\n\r\n    operationDescription.started = now();\r\n    operationDescription.cb = (err, reply) => {\r\n      if (err) {\r\n        this.emit(\r\n          'commandFailed',\r\n          new apm.CommandFailedEvent(this, command, err, operationDescription.started)\r\n        );\r\n      } else {\r\n        if (reply && reply.result && (reply.result.ok === 0 || reply.result.$err)) {\r\n          this.emit(\r\n            'commandFailed',\r\n            new apm.CommandFailedEvent(this, command, reply.result, operationDescription.started)\r\n          );\r\n        } else {\r\n          this.emit(\r\n            'commandSucceeded',\r\n            new apm.CommandSucceededEvent(this, command, reply, operationDescription.started)\r\n          );\r\n        }\r\n      }\r\n\r\n      if (typeof callback === 'function') {\r\n        callback(err, reply);\r\n      }\r\n    };\r\n  }\r\n\r\n  if (!operationDescription.noResponse) {\r\n    this[kQueue].set(operationDescription.requestId, operationDescription);\r\n  }\r\n\r\n  try {\r\n    this[kMessageStream].writeCommand(command, operationDescription);\r\n  } catch (e) {\r\n    if (!operationDescription.noResponse) {\r\n      this[kQueue].delete(operationDescription.requestId);\r\n      operationDescription.cb(e);\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (operationDescription.noResponse) {\r\n    operationDescription.cb();\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  Connection\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/node_modules/mongodb/lib/cmap/connection.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/node_modules/mongodb/lib/cmap/connection.js	(date 499162500000)
@@ -33,6 +33,8 @@
     this.address = streamIdentifier(stream);
     this.bson = options.bson;
     this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;
+    this.host = options.host || 'localhost';
+    this.port = options.port || 27017;
     this.monitorCommands =
       typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false;
     this.closed = false;
Index: node_modules/mongoose/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"mongoose@5.10.2\",\r\n  \"_id\": \"mongoose@5.10.2\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha512-VO5eZawEMFh2gx9XPg9ZafzFg5eIVs4R7PW6kK1MFqBq34YD7GomkalYWVt02HctvTPDI1mkXsm52LXNZR1NxA==\",\r\n  \"_location\": \"/mongoose\",\r\n  \"_phantomChildren\": {\r\n    \"bl\": \"2.2.0\",\r\n    \"denque\": \"1.4.1\",\r\n    \"require_optional\": \"1.0.1\",\r\n    \"saslprep\": \"1.0.3\"\r\n  },\r\n  \"_requested\": {\r\n    \"type\": \"version\",\r\n    \"registry\": true,\r\n    \"raw\": \"mongoose@5.10.2\",\r\n    \"name\": \"mongoose\",\r\n    \"escapedName\": \"mongoose\",\r\n    \"rawSpec\": \"5.10.2\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"5.10.2\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"#USER\",\r\n    \"/\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/mongoose/-/mongoose-5.10.2.tgz\",\r\n  \"_shasum\": \"3a6770affa8c05c4198515616fd555a5c9bc74d6\",\r\n  \"_spec\": \"mongoose@5.10.2\",\r\n  \"_where\": \"F:\\\\Programming\\\\Node Js Projects\\\\Quince\",\r\n  \"author\": {\r\n    \"name\": \"Guillermo Rauch\",\r\n    \"email\": \"guillermo@learnboost.com\"\r\n  },\r\n  \"browser\": \"./dist/browser.umd.js\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/Automattic/mongoose/issues/new\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"dependencies\": {\r\n    \"bson\": \"^1.1.4\",\r\n    \"kareem\": \"2.3.1\",\r\n    \"mongodb\": \"3.6.0\",\r\n    \"mongoose-legacy-pluralize\": \"1.0.2\",\r\n    \"mpath\": \"0.7.0\",\r\n    \"mquery\": \"3.2.2\",\r\n    \"ms\": \"2.1.2\",\r\n    \"regexp-clone\": \"1.0.0\",\r\n    \"safe-buffer\": \"5.2.1\",\r\n    \"sift\": \"7.0.1\",\r\n    \"sliced\": \"1.0.1\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"Mongoose MongoDB ODM\",\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"7.10.5\",\r\n    \"@babel/preset-env\": \"7.10.4\",\r\n    \"acquit\": \"1.x\",\r\n    \"acquit-ignore\": \"0.1.x\",\r\n    \"acquit-require\": \"0.1.x\",\r\n    \"async\": \"2.6.2\",\r\n    \"babel-loader\": \"8.1.0\",\r\n    \"benchmark\": \"2.1.4\",\r\n    \"bluebird\": \"3.5.5\",\r\n    \"chalk\": \"2.4.2\",\r\n    \"cheerio\": \"1.0.0-rc.2\",\r\n    \"co\": \"4.6.0\",\r\n    \"dox\": \"0.3.1\",\r\n    \"eslint\": \"7.1.0\",\r\n    \"eslint-plugin-mocha-no-only\": \"1.1.0\",\r\n    \"highlight.js\": \"9.1.0\",\r\n    \"lodash.isequal\": \"4.5.0\",\r\n    \"lodash.isequalwith\": \"4.4.0\",\r\n    \"marked\": \"0.6.2\",\r\n    \"mocha\": \"5.x\",\r\n    \"moment\": \"2.x\",\r\n    \"mongodb-topology-manager\": \"1.0.11\",\r\n    \"mongoose-long\": \"0.2.1\",\r\n    \"node-static\": \"0.7.11\",\r\n    \"object-sizeof\": \"1.3.0\",\r\n    \"pug\": \"2.0.3\",\r\n    \"q\": \"1.5.1\",\r\n    \"semver\": \"5.5.0\",\r\n    \"uuid\": \"2.0.3\",\r\n    \"uuid-parse\": \"1.0.0\",\r\n    \"validator\": \"10.8.0\",\r\n    \"webpack\": \"4.44.0\"\r\n  },\r\n  \"directories\": {\r\n    \"lib\": \"./lib/mongoose\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=4.0.0\"\r\n  },\r\n  \"eslintConfig\": {\r\n    \"extends\": [\r\n      \"eslint:recommended\"\r\n    ],\r\n    \"plugins\": [\r\n      \"mocha-no-only\"\r\n    ],\r\n    \"parserOptions\": {\r\n      \"ecmaVersion\": 2015\r\n    },\r\n    \"env\": {\r\n      \"node\": true,\r\n      \"es6\": true\r\n    },\r\n    \"rules\": {\r\n      \"comma-style\": \"error\",\r\n      \"indent\": [\r\n        \"error\",\r\n        2,\r\n        {\r\n          \"SwitchCase\": 1,\r\n          \"VariableDeclarator\": 2\r\n        }\r\n      ],\r\n      \"keyword-spacing\": \"error\",\r\n      \"no-whitespace-before-property\": \"error\",\r\n      \"no-buffer-constructor\": \"warn\",\r\n      \"no-console\": \"off\",\r\n      \"no-multi-spaces\": \"error\",\r\n      \"no-constant-condition\": \"off\",\r\n      \"func-call-spacing\": \"error\",\r\n      \"no-trailing-spaces\": \"error\",\r\n      \"no-undef\": \"error\",\r\n      \"no-unneeded-ternary\": \"error\",\r\n      \"no-const-assign\": \"error\",\r\n      \"no-useless-rename\": \"error\",\r\n      \"no-dupe-keys\": \"error\",\r\n      \"space-in-parens\": [\r\n        \"error\",\r\n        \"never\"\r\n      ],\r\n      \"spaced-comment\": [\r\n        \"error\",\r\n        \"always\",\r\n        {\r\n          \"block\": {\r\n            \"markers\": [\r\n              \"!\"\r\n            ],\r\n            \"balanced\": true\r\n          }\r\n        }\r\n      ],\r\n      \"key-spacing\": [\r\n        \"error\",\r\n        {\r\n          \"beforeColon\": false,\r\n          \"afterColon\": true\r\n        }\r\n      ],\r\n      \"comma-spacing\": [\r\n        \"error\",\r\n        {\r\n          \"before\": false,\r\n          \"after\": true\r\n        }\r\n      ],\r\n      \"array-bracket-spacing\": 1,\r\n      \"arrow-spacing\": [\r\n        \"error\",\r\n        {\r\n          \"before\": true,\r\n          \"after\": true\r\n        }\r\n      ],\r\n      \"object-curly-spacing\": [\r\n        \"error\",\r\n        \"always\"\r\n      ],\r\n      \"comma-dangle\": [\r\n        \"error\",\r\n        \"never\"\r\n      ],\r\n      \"no-unreachable\": \"error\",\r\n      \"quotes\": [\r\n        \"error\",\r\n        \"single\"\r\n      ],\r\n      \"quote-props\": [\r\n        \"error\",\r\n        \"as-needed\"\r\n      ],\r\n      \"semi\": \"error\",\r\n      \"no-extra-semi\": \"error\",\r\n      \"semi-spacing\": \"error\",\r\n      \"no-spaced-func\": \"error\",\r\n      \"no-throw-literal\": \"error\",\r\n      \"space-before-blocks\": \"error\",\r\n      \"space-before-function-paren\": [\r\n        \"error\",\r\n        \"never\"\r\n      ],\r\n      \"space-infix-ops\": \"error\",\r\n      \"space-unary-ops\": \"error\",\r\n      \"no-var\": \"warn\",\r\n      \"prefer-const\": \"warn\",\r\n      \"strict\": [\r\n        \"error\",\r\n        \"global\"\r\n      ],\r\n      \"no-restricted-globals\": [\r\n        \"error\",\r\n        {\r\n          \"name\": \"context\",\r\n          \"message\": \"Don't use Mocha's global context\"\r\n        }\r\n      ],\r\n      \"no-prototype-builtins\": \"off\",\r\n      \"mocha-no-only/mocha-no-only\": [\r\n        \"error\"\r\n      ]\r\n    }\r\n  },\r\n  \"funding\": {\r\n    \"type\": \"opencollective\",\r\n    \"url\": \"https://opencollective.com/mongoose\"\r\n  },\r\n  \"homepage\": \"https://mongoosejs.com\",\r\n  \"keywords\": [\r\n    \"mongodb\",\r\n    \"document\",\r\n    \"model\",\r\n    \"schema\",\r\n    \"database\",\r\n    \"odm\",\r\n    \"data\",\r\n    \"datastore\",\r\n    \"query\",\r\n    \"nosql\",\r\n    \"orm\",\r\n    \"db\"\r\n  ],\r\n  \"license\": \"MIT\",\r\n  \"main\": \"./index.js\",\r\n  \"mocha\": {\r\n    \"extension\": [\r\n      \"test.js\"\r\n    ],\r\n    \"watch-files\": [\r\n      \"test/**/*.js\"\r\n    ]\r\n  },\r\n  \"name\": \"mongoose\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/Automattic/mongoose.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"build-browser\": \"node build-browser.js\",\r\n    \"lint\": \"eslint .\",\r\n    \"prepublishOnly\": \"npm run build-browser\",\r\n    \"release\": \"git pull && git push origin master --tags && npm publish\",\r\n    \"release-legacy\": \"git pull origin 4.x && git push origin 4.x --tags && npm publish --tag legacy\",\r\n    \"test\": \"mocha --exit\",\r\n    \"test-cov\": \"nyc --reporter=html --reporter=text npm test\"\r\n  },\r\n  \"version\": \"5.10.2\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/package.json	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/package.json	(date 1599636090922)
@@ -1,8 +1,8 @@
 {
-  "_from": "mongoose@5.10.2",
-  "_id": "mongoose@5.10.2",
+  "_from": "mongoose@5.10.3",
+  "_id": "mongoose@5.10.3",
   "_inBundle": false,
-  "_integrity": "sha512-VO5eZawEMFh2gx9XPg9ZafzFg5eIVs4R7PW6kK1MFqBq34YD7GomkalYWVt02HctvTPDI1mkXsm52LXNZR1NxA==",
+  "_integrity": "sha512-FLemltuzcsCHlFpEZ3bYOiNhJfHful+GoS+3uRgdEWGlY0HKfOjm9xsISM/tql8vRvhjr7qveuRfoBBGO3xNtw==",
   "_location": "/mongoose",
   "_phantomChildren": {
     "bl": "2.2.0",
@@ -13,20 +13,20 @@
   "_requested": {
     "type": "version",
     "registry": true,
-    "raw": "mongoose@5.10.2",
+    "raw": "mongoose@5.10.3",
     "name": "mongoose",
     "escapedName": "mongoose",
-    "rawSpec": "5.10.2",
+    "rawSpec": "5.10.3",
     "saveSpec": null,
-    "fetchSpec": "5.10.2"
+    "fetchSpec": "5.10.3"
   },
   "_requiredBy": [
     "#USER",
     "/"
   ],
-  "_resolved": "https://registry.npmjs.org/mongoose/-/mongoose-5.10.2.tgz",
-  "_shasum": "3a6770affa8c05c4198515616fd555a5c9bc74d6",
-  "_spec": "mongoose@5.10.2",
+  "_resolved": "https://registry.npmjs.org/mongoose/-/mongoose-5.10.3.tgz",
+  "_shasum": "ef28cda3f11e5bf75a309a25e9899f856a5a5370",
+  "_spec": "mongoose@5.10.3",
   "_where": "F:\\Programming\\Node Js Projects\\Quince",
   "author": {
     "name": "Guillermo Rauch",
@@ -40,7 +40,7 @@
   "dependencies": {
     "bson": "^1.1.4",
     "kareem": "2.3.1",
-    "mongodb": "3.6.0",
+    "mongodb": "3.6.1",
     "mongoose-legacy-pluralize": "1.0.2",
     "mpath": "0.7.0",
     "mquery": "3.2.2",
@@ -258,5 +258,5 @@
     "test": "mocha --exit",
     "test-cov": "nyc --reporter=html --reporter=text npm test"
   },
-  "version": "5.10.2"
+  "version": "5.10.3"
 }
Index: node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst MongooseError = require('../../error/index');\r\nconst SkipPopulateValue = require('./SkipPopulateValue');\r\nconst get = require('../get');\r\nconst getDiscriminatorByValue = require('../discriminator/getDiscriminatorByValue');\r\nconst isPathExcluded = require('../projection/isPathExcluded');\r\nconst getSchemaTypes = require('./getSchemaTypes');\r\nconst getVirtual = require('./getVirtual');\r\nconst normalizeRefPath = require('./normalizeRefPath');\r\nconst util = require('util');\r\nconst utils = require('../../utils');\r\n\r\nconst modelSymbol = require('../symbols').modelSymbol;\r\nconst populateModelSymbol = require('../symbols').populateModelSymbol;\r\nconst schemaMixedSymbol = require('../../schema/symbols').schemaMixedSymbol;\r\n\r\nmodule.exports = function getModelsMapForPopulate(model, docs, options) {\r\n  let i;\r\n  let doc;\r\n  const len = docs.length;\r\n  const available = {};\r\n  const map = [];\r\n  const modelNameFromQuery = options.model && options.model.modelName || options.model;\r\n  let schema;\r\n  let refPath;\r\n  let Model;\r\n  let currentOptions;\r\n  let modelNames;\r\n  let modelName;\r\n  let modelForFindSchema;\r\n\r\n  const originalModel = options.model;\r\n  let isVirtual = false;\r\n  const modelSchema = model.schema;\r\n\r\n  let allSchemaTypes = getSchemaTypes(modelSchema, null, options.path);\r\n  allSchemaTypes = Array.isArray(allSchemaTypes) ? allSchemaTypes : [allSchemaTypes].filter(v => v != null);\r\n  const _firstWithRefPath = allSchemaTypes.find(schematype => get(schematype, 'options.refPath', null) != null);\r\n\r\n  for (i = 0; i < len; i++) {\r\n    doc = docs[i];\r\n    let justOne = null;\r\n\r\n    schema = getSchemaTypes(modelSchema, doc, options.path);\r\n    // Special case: populating a path that's a DocumentArray unless\r\n    // there's an explicit `ref` or `refPath` re: gh-8946\r\n    if (schema != null &&\r\n        schema.$isMongooseDocumentArray &&\r\n        schema.options.ref == null &&\r\n        schema.options.refPath == null) {\r\n      continue;\r\n    }\r\n    // Populating a nested path should always be a no-op re: #9073.\r\n    // People shouldn't do this, but apparently they do.\r\n    if (modelSchema.nested[options.path]) {\r\n      continue;\r\n    }\r\n    const isUnderneathDocArray = schema && schema.$isUnderneathDocArray;\r\n    if (isUnderneathDocArray && get(options, 'options.sort') != null) {\r\n      return new MongooseError('Cannot populate with `sort` on path ' + options.path +\r\n        ' because it is a subproperty of a document array');\r\n    }\r\n\r\n    modelNames = null;\r\n    let isRefPath = !!_firstWithRefPath;\r\n    let normalizedRefPath = _firstWithRefPath ? get(_firstWithRefPath, 'options.refPath', null) : null;\r\n\r\n    if (Array.isArray(schema)) {\r\n      const schemasArray = schema;\r\n      for (const _schema of schemasArray) {\r\n        let _modelNames;\r\n        let res;\r\n        try {\r\n          res = _getModelNames(doc, _schema);\r\n          _modelNames = res.modelNames;\r\n          isRefPath = isRefPath || res.isRefPath;\r\n          normalizedRefPath = normalizeRefPath(normalizedRefPath, doc, options.path) ||\r\n            res.refPath;\r\n          justOne = res.justOne;\r\n        } catch (error) {\r\n          return error;\r\n        }\r\n\r\n        if (isRefPath && !res.isRefPath) {\r\n          continue;\r\n        }\r\n        if (!_modelNames) {\r\n          continue;\r\n        }\r\n        modelNames = modelNames || [];\r\n        for (const modelName of _modelNames) {\r\n          if (modelNames.indexOf(modelName) === -1) {\r\n            modelNames.push(modelName);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      try {\r\n        const res = _getModelNames(doc, schema);\r\n        modelNames = res.modelNames;\r\n        isRefPath = res.isRefPath;\r\n        normalizedRefPath = res.refPath;\r\n        justOne = res.justOne;\r\n      } catch (error) {\r\n        return error;\r\n      }\r\n\r\n      if (!modelNames) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    const _virtualRes = getVirtual(model.schema, options.path);\r\n    const virtual = _virtualRes == null ? null : _virtualRes.virtual;\r\n\r\n    let localField;\r\n    let count = false;\r\n    if (virtual && virtual.options) {\r\n      const virtualPrefix = _virtualRes.nestedSchemaPath ?\r\n        _virtualRes.nestedSchemaPath + '.' : '';\r\n      if (typeof virtual.options.localField === 'function') {\r\n        localField = virtualPrefix + virtual.options.localField.call(doc, doc);\r\n      } else {\r\n        localField = virtualPrefix + virtual.options.localField;\r\n      }\r\n      count = virtual.options.count;\r\n\r\n      if (virtual.options.skip != null && !options.hasOwnProperty('skip')) {\r\n        options.skip = virtual.options.skip;\r\n      }\r\n      if (virtual.options.limit != null && !options.hasOwnProperty('limit')) {\r\n        options.limit = virtual.options.limit;\r\n      }\r\n      if (virtual.options.perDocumentLimit != null && !options.hasOwnProperty('perDocumentLimit')) {\r\n        options.perDocumentLimit = virtual.options.perDocumentLimit;\r\n      }\r\n    } else {\r\n      localField = options.path;\r\n    }\r\n    let foreignField = virtual && virtual.options ?\r\n      virtual.options.foreignField :\r\n      '_id';\r\n\r\n    // `justOne = null` means we don't know from the schema whether the end\r\n    // result should be an array or a single doc. This can result from\r\n    // populating a POJO using `Model.populate()`\r\n    if ('justOne' in options && options.justOne !== void 0) {\r\n      justOne = options.justOne;\r\n    } else if (virtual && virtual.options && virtual.options.refPath) {\r\n      const normalizedRefPath =\r\n        normalizeRefPath(virtual.options.refPath, doc, options.path);\r\n      justOne = !!virtual.options.justOne;\r\n      isVirtual = true;\r\n      const refValue = utils.getValue(normalizedRefPath, doc);\r\n      modelNames = Array.isArray(refValue) ? refValue : [refValue];\r\n    } else if (virtual && virtual.options && virtual.options.ref) {\r\n      let normalizedRef;\r\n      if (typeof virtual.options.ref === 'function') {\r\n        normalizedRef = virtual.options.ref.call(doc, doc);\r\n      } else {\r\n        normalizedRef = virtual.options.ref;\r\n      }\r\n      justOne = !!virtual.options.justOne;\r\n      isVirtual = true;\r\n      if (!modelNames) {\r\n        modelNames = [].concat(normalizedRef);\r\n      }\r\n    } else if (schema && !schema[schemaMixedSymbol]) {\r\n      // Skip Mixed types because we explicitly don't do casting on those.\r\n      justOne = Array.isArray(schema) ?\r\n        schema.every(schema => !schema.$isMongooseArray) :\r\n        !schema.$isMongooseArray;\r\n    }\r\n\r\n    if (!modelNames) {\r\n      continue;\r\n    }\r\n\r\n    if (virtual && (!localField || !foreignField)) {\r\n      return new MongooseError('If you are populating a virtual, you must set the ' +\r\n        'localField and foreignField options');\r\n    }\r\n\r\n    options.isVirtual = isVirtual;\r\n    options.virtual = virtual;\r\n    if (typeof localField === 'function') {\r\n      localField = localField.call(doc, doc);\r\n    }\r\n    if (typeof foreignField === 'function') {\r\n      foreignField = foreignField.call(doc);\r\n    }\r\n\r\n    const localFieldPathType = modelSchema._getPathType(localField);\r\n    const localFieldPath = localFieldPathType === 'real' ? modelSchema.path(localField) : localFieldPathType.schema;\r\n    const localFieldGetters = localFieldPath && localFieldPath.getters ? localFieldPath.getters : [];\r\n    let ret;\r\n\r\n    const _populateOptions = get(options, 'options', {});\r\n\r\n    const getters = 'getters' in _populateOptions ?\r\n      _populateOptions.getters :\r\n      options.isVirtual && get(virtual, 'options.getters', false);\r\n    if (localFieldGetters.length > 0 && getters) {\r\n      const hydratedDoc = (doc.$__ != null) ? doc : model.hydrate(doc);\r\n      const localFieldValue = utils.getValue(localField, doc);\r\n      if (Array.isArray(localFieldValue)) {\r\n        const localFieldHydratedValue = utils.getValue(localField.split('.').slice(0, -1), hydratedDoc);\r\n        ret = localFieldValue.map((localFieldArrVal, localFieldArrIndex) =>\r\n          localFieldPath.applyGetters(localFieldArrVal, localFieldHydratedValue[localFieldArrIndex]));\r\n      } else {\r\n        ret = localFieldPath.applyGetters(localFieldValue, hydratedDoc);\r\n      }\r\n    } else {\r\n      ret = convertTo_id(utils.getValue(localField, doc), schema);\r\n    }\r\n\r\n    const id = String(utils.getValue(foreignField, doc));\r\n    options._docs[id] = Array.isArray(ret) ? ret.slice() : ret;\r\n\r\n    let match = get(options, 'match', null) ||\r\n      get(currentOptions, 'match', null) ||\r\n      get(options, 'virtual.options.match', null) ||\r\n      get(options, 'virtual.options.options.match', null);\r\n\r\n    const hasMatchFunction = typeof match === 'function';\r\n    if (hasMatchFunction) {\r\n      match = match.call(doc, doc);\r\n    }\r\n\r\n    // Re: gh-8452. Embedded discriminators may not have `refPath`, so clear\r\n    // out embedded discriminator docs that don't have a `refPath` on the\r\n    // populated path.\r\n    if (isRefPath && normalizedRefPath != null) {\r\n      const pieces = normalizedRefPath.split('.');\r\n      let cur = '';\r\n      for (let j = 0; j < pieces.length; ++j) {\r\n        const piece = pieces[j];\r\n        cur = cur + (cur.length === 0 ? '' : '.') + piece;\r\n        const schematype = modelSchema.path(cur);\r\n        if (schematype != null &&\r\n            schematype.$isMongooseArray &&\r\n            schematype.caster.discriminators != null &&\r\n            Object.keys(schematype.caster.discriminators).length > 0) {\r\n          const subdocs = utils.getValue(cur, doc);\r\n          const remnant = options.path.substr(cur.length + 1);\r\n          const discriminatorKey = schematype.caster.schema.options.discriminatorKey;\r\n          modelNames = [];\r\n          for (const subdoc of subdocs) {\r\n            const discriminatorName = utils.getValue(discriminatorKey, subdoc);\r\n            const discriminator = schematype.caster.discriminators[discriminatorName];\r\n            const discriminatorSchema = discriminator && discriminator.schema;\r\n            if (discriminatorSchema == null) {\r\n              continue;\r\n            }\r\n            const _path = discriminatorSchema.path(remnant);\r\n            if (_path == null || _path.options.refPath == null) {\r\n              const docValue = utils.getValue(localField.substr(cur.length + 1), subdoc);\r\n              ret = ret.map(v => v === docValue ? SkipPopulateValue(v) : v);\r\n              continue;\r\n            }\r\n            const modelName = utils.getValue(pieces.slice(j + 1).join('.'), subdoc);\r\n            modelNames.push(modelName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let k = modelNames.length;\r\n    while (k--) {\r\n      modelName = modelNames[k];\r\n      if (modelName == null) {\r\n        continue;\r\n      }\r\n\r\n      // `PopulateOptions#connection`: if the model is passed as a string, the\r\n      // connection matters because different connections have different models.\r\n      const connection = options.connection != null ? options.connection : model.db;\r\n\r\n      try {\r\n        Model = originalModel && originalModel[modelSymbol] ?\r\n          originalModel :\r\n          modelName[modelSymbol] ? modelName : connection.model(modelName);\r\n      } catch (error) {\r\n        // If `ret` is undefined, we'll add an empty entry to modelsMap. We shouldn't\r\n        // execute a query, but it is necessary to make sure `justOne` gets handled\r\n        // correctly for setting an empty array (see gh-8455)\r\n        if (ret !== undefined) {\r\n          return error;\r\n        }\r\n      }\r\n\r\n      let ids = ret;\r\n      const flat = Array.isArray(ret) ? utils.array.flatten(ret) : [];\r\n\r\n      if (isRefPath && Array.isArray(ret) && flat.length === modelNames.length) {\r\n        ids = flat.filter((val, i) => modelNames[i] === modelName);\r\n      }\r\n\r\n      if (!available[modelName] || currentOptions.perDocumentLimit != null) {\r\n        currentOptions = {\r\n          model: Model\r\n        };\r\n\r\n        if (isVirtual && get(virtual, 'options.options')) {\r\n          currentOptions.options = utils.clone(virtual.options.options);\r\n        }\r\n        utils.merge(currentOptions, options);\r\n\r\n        // Used internally for checking what model was used to populate this\r\n        // path.\r\n        options[populateModelSymbol] = Model;\r\n\r\n        available[modelName] = {\r\n          model: Model,\r\n          options: currentOptions,\r\n          match: hasMatchFunction ? [match] : match,\r\n          docs: [doc],\r\n          ids: [ids],\r\n          allIds: [ret],\r\n          localField: new Set([localField]),\r\n          foreignField: new Set([foreignField]),\r\n          justOne: justOne,\r\n          isVirtual: isVirtual,\r\n          virtual: virtual,\r\n          count: count,\r\n          [populateModelSymbol]: Model\r\n        };\r\n        map.push(available[modelName]);\r\n      } else {\r\n        available[modelName].localField.add(localField);\r\n        available[modelName].foreignField.add(foreignField);\r\n        available[modelName].docs.push(doc);\r\n        available[modelName].ids.push(ids);\r\n        available[modelName].allIds.push(ret);\r\n        if (hasMatchFunction) {\r\n          available[modelName].match.push(match);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return map;\r\n\r\n  function _getModelNames(doc, schema) {\r\n    let modelNames;\r\n    let discriminatorKey;\r\n    let isRefPath = false;\r\n    let justOne = null;\r\n\r\n    if (schema && schema.caster) {\r\n      schema = schema.caster;\r\n    }\r\n    if (schema && schema.$isSchemaMap) {\r\n      schema = schema.$__schemaType;\r\n    }\r\n\r\n    if (!schema && model.discriminators) {\r\n      discriminatorKey = model.schema.discriminatorMapping.key;\r\n    }\r\n\r\n    refPath = schema && schema.options && schema.options.refPath;\r\n\r\n    const normalizedRefPath = normalizeRefPath(refPath, doc, options.path);\r\n\r\n    if (modelNameFromQuery) {\r\n      modelNames = [modelNameFromQuery]; // query options\r\n    } else if (normalizedRefPath) {\r\n      if (options._queryProjection != null && isPathExcluded(options._queryProjection, normalizedRefPath)) {\r\n        throw new MongooseError('refPath `' + normalizedRefPath +\r\n          '` must not be excluded in projection, got ' +\r\n          util.inspect(options._queryProjection));\r\n      }\r\n\r\n      if (modelSchema.virtuals.hasOwnProperty(normalizedRefPath) && doc.$__ == null) {\r\n        modelNames = [modelSchema.virtuals[normalizedRefPath].applyGetters(void 0, doc)];\r\n      } else {\r\n        modelNames = utils.getValue(normalizedRefPath, doc);\r\n      }\r\n\r\n      if (Array.isArray(modelNames)) {\r\n        modelNames = utils.array.flatten(modelNames);\r\n      }\r\n\r\n      isRefPath = true;\r\n    } else {\r\n      let modelForCurrentDoc = model;\r\n      let schemaForCurrentDoc;\r\n\r\n      if (!schema && discriminatorKey) {\r\n        modelForFindSchema = utils.getValue(discriminatorKey, doc);\r\n        if (modelForFindSchema) {\r\n          // `modelForFindSchema` is the discriminator value, so we might need\r\n          // find the discriminated model name\r\n          const discriminatorModel = getDiscriminatorByValue(model, modelForFindSchema);\r\n          if (discriminatorModel != null) {\r\n            modelForCurrentDoc = discriminatorModel;\r\n          } else {\r\n            try {\r\n              modelForCurrentDoc = model.db.model(modelForFindSchema);\r\n            } catch (error) {\r\n              return error;\r\n            }\r\n          }\r\n\r\n          schemaForCurrentDoc = modelForCurrentDoc.schema._getSchema(options.path);\r\n\r\n          if (schemaForCurrentDoc && schemaForCurrentDoc.caster) {\r\n            schemaForCurrentDoc = schemaForCurrentDoc.caster;\r\n          }\r\n        }\r\n      } else {\r\n        schemaForCurrentDoc = schema;\r\n      }\r\n      const _virtualRes = getVirtual(modelForCurrentDoc.schema, options.path);\r\n      const virtual = _virtualRes == null ? null : _virtualRes.virtual;\r\n\r\n      if (schemaForCurrentDoc != null) {\r\n        justOne = !schemaForCurrentDoc.$isMongooseArray && !schemaForCurrentDoc._arrayPath;\r\n      }\r\n\r\n      let ref;\r\n      let refPath;\r\n\r\n      if ((ref = get(schemaForCurrentDoc, 'options.ref')) != null) {\r\n        ref = handleRefFunction(ref, doc);\r\n        modelNames = [ref];\r\n      } else if ((ref = get(virtual, 'options.ref')) != null) {\r\n        ref = handleRefFunction(ref, doc);\r\n\r\n        // When referencing nested arrays, the ref should be an Array\r\n        // of modelNames.\r\n        if (Array.isArray(ref)) {\r\n          modelNames = ref;\r\n        } else {\r\n          modelNames = [ref];\r\n        }\r\n\r\n        isVirtual = true;\r\n      } else if ((refPath = get(schemaForCurrentDoc, 'options.refPath')) != null) {\r\n        isRefPath = true;\r\n        refPath = normalizeRefPath(refPath, doc, options.path);\r\n        modelNames = utils.getValue(refPath, doc);\r\n        if (Array.isArray(modelNames)) {\r\n          modelNames = utils.array.flatten(modelNames);\r\n        }\r\n      } else {\r\n        // We may have a discriminator, in which case we don't want to\r\n        // populate using the base model by default\r\n        modelNames = discriminatorKey ? null : [model.modelName];\r\n      }\r\n    }\r\n\r\n    if (!modelNames) {\r\n      return { modelNames: modelNames, isRefPath: isRefPath, refPath: normalizedRefPath, justOne: justOne };\r\n    }\r\n\r\n    if (!Array.isArray(modelNames)) {\r\n      modelNames = [modelNames];\r\n    }\r\n\r\n    return { modelNames: modelNames, isRefPath: isRefPath, refPath: normalizedRefPath, justOne: justOne };\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction handleRefFunction(ref, doc) {\r\n  if (typeof ref === 'function' && !ref[modelSymbol]) {\r\n    return ref.call(doc, doc);\r\n  }\r\n  return ref;\r\n}\r\n\r\n/*!\r\n * Retrieve the _id of `val` if a Document or Array of Documents.\r\n *\r\n * @param {Array|Document|Any} val\r\n * @return {Array|Document|Any}\r\n */\r\n\r\nfunction convertTo_id(val, schema) {\r\n  if (val != null && val.$__ != null) return val._id;\r\n\r\n  if (Array.isArray(val)) {\r\n    for (let i = 0; i < val.length; ++i) {\r\n      if (val[i] != null && val[i].$__ != null) {\r\n        val[i] = val[i]._id;\r\n      }\r\n    }\r\n    if (val.isMongooseArray && val.$schema()) {\r\n      return val.$schema().cast(val, val.$parent());\r\n    }\r\n\r\n    return [].concat(val);\r\n  }\r\n\r\n  // `populate('map')` may be an object if populating on a doc that hasn't\r\n  // been hydrated yet\r\n  if (val != null &&\r\n      val.constructor.name === 'Object' &&\r\n      // The intent here is we should only flatten the object if we expect\r\n      // to get a Map in the end. Avoid doing this for mixed types.\r\n      (schema == null || schema[schemaMixedSymbol] == null)) {\r\n    const ret = [];\r\n    for (const key of Object.keys(val)) {\r\n      ret.push(val[key]);\r\n    }\r\n    return ret;\r\n  }\r\n  // If doc has already been hydrated, e.g. `doc.populate('map').execPopulate()`\r\n  // then `val` will already be a map\r\n  if (val instanceof Map) {\r\n    return Array.from(val.values());\r\n  }\r\n\r\n  return val;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js	(date 499162500000)
@@ -7,6 +7,8 @@
 const isPathExcluded = require('../projection/isPathExcluded');
 const getSchemaTypes = require('./getSchemaTypes');
 const getVirtual = require('./getVirtual');
+const lookupLocalFields = require('./lookupLocalFields');
+const mpath = require('mpath');
 const normalizeRefPath = require('./normalizeRefPath');
 const util = require('util');
 const utils = require('../../utils');
@@ -203,16 +205,16 @@
       options.isVirtual && get(virtual, 'options.getters', false);
     if (localFieldGetters.length > 0 && getters) {
       const hydratedDoc = (doc.$__ != null) ? doc : model.hydrate(doc);
-      const localFieldValue = utils.getValue(localField, doc);
+      const localFieldValue = mpath.get(localField, doc, lookupLocalFields);
       if (Array.isArray(localFieldValue)) {
-        const localFieldHydratedValue = utils.getValue(localField.split('.').slice(0, -1), hydratedDoc);
+        const localFieldHydratedValue = mpath.get(localField.split('.').slice(0, -1), hydratedDoc, lookupLocalFields);
         ret = localFieldValue.map((localFieldArrVal, localFieldArrIndex) =>
           localFieldPath.applyGetters(localFieldArrVal, localFieldHydratedValue[localFieldArrIndex]));
       } else {
         ret = localFieldPath.applyGetters(localFieldValue, hydratedDoc);
       }
     } else {
-      ret = convertTo_id(utils.getValue(localField, doc), schema);
+      ret = convertTo_id(mpath.get(localField, doc, lookupLocalFields), schema);
     }
 
     const id = String(utils.getValue(foreignField, doc));
Index: backend/templates/quince/views/files/files.dust
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{>\"layouts/dashboard-layout\"/}\r\n{<css}\r\n\r\n    <link rel=\"stylesheet\" href=\"css/files/files.css\">\r\n\r\n{/css}\r\n{<js}\r\n\r\n    <script src=\"js/files/files.js\"></script>\r\n    <script src=\"js/general/fingerprint.js\"></script>\r\n    <script src=\"js/custom/checkbox.js\"></script>\r\n    <script src=\"js/custom/error-handler.js\"></script>\r\n    <script src=\"js/custom/main-error.js\"></script>\r\n\r\n{/js}\r\n{<body}\r\n\r\n<section>\r\n    <div class=\"error_info warning_error\">\r\n        <i class=\"fal fa-exclamation-circle\"></i>\r\n        <p></p>\r\n        <i class=\"fal fa-times\"></i>\r\n    </div>\r\n    <div class=\"main_body\">\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12 main_col\">\r\n                    <header class=\"header_field\">\r\n                        <div class=\"container-fluid\">\r\n                            <div class=\"row\">\r\n                                <div class=\"col-12 col-lg-7\">\r\n                                    <div class=\"d-inline-block field_of_ht\">\r\n                                        <h1>مدیریت فایل ها</h1>\r\n                                        <h2>لیست فایل های موجود در سرور</h2>\r\n                                    </div>\r\n                                    <div class=\"Breadcrumb_field\">\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"col-12 col-lg-5\">\r\n                                    <div class=\"table_header\">\r\n                                        <div class=\"input-group mb-3 t_search\">\r\n                                            <div class=\"input-group-prepend\">\r\n                                                <button class=\"input-group-text btn search_btn\" id=\"basic-addon1\">\r\n                                                    <i class=\"fal fa-search\"></i>\r\n                                                </button>\r\n                                            </div>\r\n                                            <input type=\"text\" class=\"form-control search_table\" placeholder=\"جستجو ...\" aria-describedby=\"basic-addon1\" value=\"{search_value}\">\r\n                                            {@eq key=\"{search}\" value=\"true\"}\r\n                                                <i class=\"fal fa-times search_btn_cancel\"></i>\r\n                                            {/eq}\r\n                                        </div>\r\n                                          <div class=\"form-group tr_select\">\r\n                                            <label for=\"t_row_select\" class=\"d-inline-block select_lable\">تعداد ردیف ها :</label>\r\n                                              <select class=\"form-control limit_row\" id=\"t_row_select\">\r\n                                                  {#page_limit_slot}\r\n                                                      {@eq key=\"{.}\" value=\"{page_limit}\"}\r\n                                                          <option selected>{.}</option>\r\n                                                      {:else}\r\n                                                          <option>{.}</option>\r\n                                                      {/eq}\r\n                                                  {/page_limit_slot}\r\n                                              </select>\r\n                                        </div>\r\n                                        <button class=\"btn table_delete_btn\">\r\n                                            <i class=\"fal fa-trash-alt\"></i>\r\n                                        </button>\r\n                                        <button class=\"btn blue_btn table_backward_btn\">\r\n                                            <i class=\"far fa-reply\"></i>\r\n                                        </button>\r\n                                        <button class=\"btn blue_btn table_home_btn\">\r\n                                            <i class=\"far fa-home-alt\"></i>\r\n                                        </button>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </header>\r\n                    <div class=\"QTR\">\r\n                        <table class=\"Q_table\">\r\n                            <tr class=\"TQ_hr\">\r\n                                <th class=\"FM_check_box\">\r\n                                    <label class=\"checkbox_of_category\">\r\n                                        <input type=\"checkbox\" class=\"option-input checkbox\" id=\"selectall\" name=\"select_all\">\r\n                                    </label>\r\n                                </th>\r\n                                <th class=\"FM_name\">نام</th>\r\n                                <th></th>\r\n                                <th>آخرین تغییرات</th>\r\n                                <th>حجم</th>\r\n                                <th>تنظیمات</th>\r\n                            </tr>\r\n                                {#content_list.content}\r\n                                    <tr class=\"content_row\" path=\"{path}\" is-file=\"{isFile}\">\r\n                                    <td class=\"FM_check_box\">\r\n                                        <label class=\"checkbox_of_category\">\r\n                                            <input type=\"checkbox\" name=\"delete_checkbox[]\" class=\"table_checkbox option-input checkbox\"\r\n                                                   value=\"{path}\">\r\n                                        </label>\r\n                                    </td>\r\n                                    <td class=\"FM_icons\">\r\n                                        {@eq key=\"{isFile}\" value=\"true\"}\r\n                                            <i class=\"fad fa-file\"></i>\r\n                                        {:else}\r\n                                            <i class=\"fas fa-folder\"></i>\r\n                                        {/eq}\r\n                                    </td>\r\n                                    <td class=\"text-right pr-0\">\r\n                                        {name}\r\n                                    </td>\r\n                                    <td class=\"FM_info\">\r\n                                        {modified}\r\n                                    </td>\r\n                                    <td class=\"FM_info\">\r\n                                        {@eq key=\"{isFile}\" value=\"true\"}\r\n                                            {size}\r\n                                        {:else}\r\n\r\n                                        {/eq}\r\n                                    </td>\r\n\r\n                                    <td class=\"table_option FM_info\">\r\n                                        <div class=\"dropdown\">\r\n                                            <button class=\"btn  dropdown-toggle\" type=\"button\" id=\"table_option\" data-toggle=\"dropdown\"\r\n                                                    aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                <i class=\"fas fa-ellipsis-v\"></i>\r\n                                            </button>\r\n                                            <div class=\"dropdown-menu\" aria-labelledby=\"table_option\">\r\n                                                <a class=\"dropdown-item\" href=\"#\">\r\n                                                    <i class=\"fal fa-align-slash\"></i>\r\n                                                    غیر فعال کردن\r\n                                                </a>\r\n                                                <a class=\"dropdown-item\" href=\"#\">\r\n                                                    <i class=\"fal fa-asterisk\"></i>\r\n                                                    افزودن وی ای پی\r\n                                                </a>\r\n                                                <a class=\"dropdown-item\" href=\"#\">\r\n                                                    <i class=\"fal fa-assistive-listening-systems\"></i>\r\n                                                    افزودن گوش و چشم\r\n                                                </a>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                                {/content_list.content}\r\n                        </table>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</section>\r\n\r\n\r\n{/body}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/templates/quince/views/files/files.dust	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/templates/quince/views/files/files.dust	(date 1599625194382)
@@ -34,7 +34,7 @@
                                         <h2>لیست فایل های موجود در سرور</h2>
                                     </div>
                                     <div class="Breadcrumb_field">
-
+                                        شاخه اصلی/
                                     </div>
                                 </div>
                                 <div class="col-12 col-lg-5">
Index: node_modules/mongoose/lib/helpers/populate/assignVals.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst SkipPopulateValue = require('./SkipPopulateValue');\r\nconst assignRawDocsToIdStructure = require('./assignRawDocsToIdStructure');\r\nconst get = require('../get');\r\nconst getVirtual = require('./getVirtual');\r\nconst leanPopulateMap = require('./leanPopulateMap');\r\nconst mpath = require('mpath');\r\nconst sift = require('sift').default;\r\nconst utils = require('../../utils');\r\n\r\nmodule.exports = function assignVals(o) {\r\n  // Options that aren't explicitly listed in `populateOptions`\r\n  const userOptions = get(o, 'allOptions.options.options');\r\n  // `o.options` contains options explicitly listed in `populateOptions`, like\r\n  // `match` and `limit`.\r\n  const populateOptions = Object.assign({}, o.options, userOptions, {\r\n    justOne: o.justOne\r\n  });\r\n  populateOptions.$nullIfNotFound = o.isVirtual;\r\n  const populatedModel = o.populatedModel;\r\n\r\n  const originalIds = [].concat(o.rawIds);\r\n\r\n  // replace the original ids in our intermediate _ids structure\r\n  // with the documents found by query\r\n  assignRawDocsToIdStructure(o.rawIds, o.rawDocs, o.rawOrder, populateOptions);\r\n\r\n  // now update the original documents being populated using the\r\n  // result structure that contains real documents.\r\n  const docs = o.docs;\r\n  const rawIds = o.rawIds;\r\n  const options = o.options;\r\n  const count = o.count && o.isVirtual;\r\n\r\n  function setValue(val) {\r\n    if (count) {\r\n      return val;\r\n    }\r\n    if (val instanceof SkipPopulateValue) {\r\n      return val.val;\r\n    }\r\n\r\n    if (o.justOne === true && Array.isArray(val)) {\r\n      // Might be an embedded discriminator (re: gh-9244) with multiple models, so make sure to pick the right\r\n      // model before assigning.\r\n      const ret = [];\r\n      for (const doc of val) {\r\n        const _docPopulatedModel = leanPopulateMap.get(doc);\r\n        if (_docPopulatedModel == null || _docPopulatedModel === populatedModel) {\r\n          ret.push(doc);\r\n        }\r\n      }\r\n      // Since we don't want to have to create a new mongoosearray, make sure to\r\n      // modify the array in place\r\n      while (val.length > ret.length) {\r\n        Array.prototype.pop.apply(val, []);\r\n      }\r\n      for (let i = 0; i < ret.length; ++i) {\r\n        val[i] = ret[i];\r\n      }\r\n\r\n      return valueFilter(val[0], options, populateOptions, populatedModel);\r\n    } else if (o.justOne === false && !Array.isArray(val)) {\r\n      return valueFilter([val], options, populateOptions, populatedModel);\r\n    }\r\n    return valueFilter(val, options, populateOptions, populatedModel);\r\n  }\r\n\r\n  for (let i = 0; i < docs.length; ++i) {\r\n    const existingVal = utils.getValue(o.path, docs[i]);\r\n    if (existingVal == null && !getVirtual(o.originalModel.schema, o.path)) {\r\n      continue;\r\n    }\r\n\r\n    let valueToSet;\r\n    if (count) {\r\n      valueToSet = numDocs(rawIds[i]);\r\n    } else if (Array.isArray(o.match)) {\r\n      valueToSet = Array.isArray(rawIds[i]) ?\r\n        sift(o.match[i], rawIds[i]) :\r\n        sift(o.match[i], [rawIds[i]])[0];\r\n    } else {\r\n      valueToSet = rawIds[i];\r\n    }\r\n\r\n    // If we're populating a map, the existing value will be an object, so\r\n    // we need to transform again\r\n    const originalSchema = o.originalModel.schema;\r\n    const isDoc = get(docs[i], '$__', null) != null;\r\n    let isMap = isDoc ?\r\n      existingVal instanceof Map :\r\n      utils.isPOJO(existingVal);\r\n    // If we pass the first check, also make sure the local field's schematype\r\n    // is map (re: gh-6460)\r\n    isMap = isMap && get(originalSchema._getSchema(o.path), '$isSchemaMap');\r\n    if (!o.isVirtual && isMap) {\r\n      const _keys = existingVal instanceof Map ?\r\n        Array.from(existingVal.keys()) :\r\n        Object.keys(existingVal);\r\n      valueToSet = valueToSet.reduce((cur, v, i) => {\r\n        cur.set(_keys[i], v);\r\n        return cur;\r\n      }, new Map());\r\n    }\r\n\r\n    if (isDoc && Array.isArray(valueToSet)) {\r\n      for (const val of valueToSet) {\r\n        if (val != null && val.$__ != null) {\r\n          val.$__.parent = docs[i];\r\n        }\r\n      }\r\n    } else if (isDoc && valueToSet != null && valueToSet.$__ != null) {\r\n      valueToSet.$__.parent = docs[i];\r\n    }\r\n\r\n    if (o.isVirtual && isDoc) {\r\n      docs[i].populated(o.path, o.justOne ? originalIds[0] : originalIds, o.allOptions);\r\n      // If virtual populate and doc is already init-ed, need to walk through\r\n      // the actual doc to set rather than setting `_doc` directly\r\n      mpath.set(o.path, valueToSet, docs[i], setValue);\r\n      continue;\r\n    }\r\n\r\n    const parts = o.path.split('.');\r\n    let cur = docs[i];\r\n    const curPath = parts[0];\r\n    for (let j = 0; j < parts.length - 1; ++j) {\r\n      // If we get to an array with a dotted path, like `arr.foo`, don't set\r\n      // `foo` on the array.\r\n      if (Array.isArray(cur) && !utils.isArrayIndex(parts[j])) {\r\n        break;\r\n      }\r\n\r\n      if (cur[parts[j]] == null) {\r\n        // If nothing to set, avoid creating an unnecessary array. Otherwise\r\n        // we'll end up with a single doc in the array with only defaults.\r\n        // See gh-8342, gh-8455\r\n        const schematype = originalSchema._getSchema(curPath);\r\n        if (valueToSet == null && schematype != null && schematype.$isMongooseArray) {\r\n          return;\r\n        }\r\n        cur[parts[j]] = {};\r\n      }\r\n      cur = cur[parts[j]];\r\n      // If the property in MongoDB is a primitive, we won't be able to populate\r\n      // the nested path, so skip it. See gh-7545\r\n      if (typeof cur !== 'object') {\r\n        return;\r\n      }\r\n    }\r\n    if (docs[i].$__) {\r\n      docs[i].populated(o.path, o.allIds[i], o.allOptions);\r\n    }\r\n\r\n    // If lean, need to check that each individual virtual respects\r\n    // `justOne`, because you may have a populated virtual with `justOne`\r\n    // underneath an array. See gh-6867\r\n    utils.setValue(o.path, valueToSet, docs[i], setValue, false);\r\n  }\r\n};\r\n\r\nfunction numDocs(v) {\r\n  if (Array.isArray(v)) {\r\n    // If setting underneath an array of populated subdocs, we may have an\r\n    // array of arrays. See gh-7573\r\n    if (v.some(el => Array.isArray(el))) {\r\n      return v.map(el => numDocs(el));\r\n    }\r\n    return v.length;\r\n  }\r\n  return v == null ? 0 : 1;\r\n}\r\n\r\n/*!\r\n * 1) Apply backwards compatible find/findOne behavior to sub documents\r\n *\r\n *    find logic:\r\n *      a) filter out non-documents\r\n *      b) remove _id from sub docs when user specified\r\n *\r\n *    findOne\r\n *      a) if no doc found, set to null\r\n *      b) remove _id from sub docs when user specified\r\n *\r\n * 2) Remove _ids when specified by users query.\r\n *\r\n * background:\r\n * _ids are left in the query even when user excludes them so\r\n * that population mapping can occur.\r\n */\r\n\r\nfunction valueFilter(val, assignmentOpts, populateOptions) {\r\n  if (Array.isArray(val)) {\r\n    // find logic\r\n    const ret = [];\r\n    const numValues = val.length;\r\n    for (let i = 0; i < numValues; ++i) {\r\n      const subdoc = val[i];\r\n      if (!isPopulatedObject(subdoc) && (!populateOptions.retainNullValues || subdoc != null)) {\r\n        continue;\r\n      }\r\n      maybeRemoveId(subdoc, assignmentOpts);\r\n      ret.push(subdoc);\r\n      if (assignmentOpts.originalLimit &&\r\n          ret.length >= assignmentOpts.originalLimit) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Since we don't want to have to create a new mongoosearray, make sure to\r\n    // modify the array in place\r\n    while (val.length > ret.length) {\r\n      Array.prototype.pop.apply(val, []);\r\n    }\r\n    for (let i = 0; i < ret.length; ++i) {\r\n      val[i] = ret[i];\r\n    }\r\n    return val;\r\n  }\r\n\r\n  // findOne\r\n  if (isPopulatedObject(val)) {\r\n    maybeRemoveId(val, assignmentOpts);\r\n    return val;\r\n  }\r\n\r\n  if (val instanceof Map) {\r\n    return val;\r\n  }\r\n\r\n  if (populateOptions.justOne === true) {\r\n    return (val == null ? val : null);\r\n  }\r\n  if (populateOptions.justOne === false) {\r\n    return [];\r\n  }\r\n  return val;\r\n}\r\n\r\n/*!\r\n * Remove _id from `subdoc` if user specified \"lean\" query option\r\n */\r\n\r\nfunction maybeRemoveId(subdoc, assignmentOpts) {\r\n  if (subdoc != null && assignmentOpts.excludeId) {\r\n    if (typeof subdoc.$__setValue === 'function') {\r\n      delete subdoc._doc._id;\r\n    } else {\r\n      delete subdoc._id;\r\n    }\r\n  }\r\n}\r\n\r\n/*!\r\n * Determine if `obj` is something we can set a populated path to. Can be a\r\n * document, a lean document, or an array/map that contains docs.\r\n */\r\n\r\nfunction isPopulatedObject(obj) {\r\n  if (obj == null) {\r\n    return false;\r\n  }\r\n\r\n  return Array.isArray(obj) ||\r\n    obj.$isMongooseMap ||\r\n    obj.$__ != null ||\r\n    leanPopulateMap.has(obj);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/helpers/populate/assignVals.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/helpers/populate/assignVals.js	(date 499162500000)
@@ -5,6 +5,7 @@
 const get = require('../get');
 const getVirtual = require('./getVirtual');
 const leanPopulateMap = require('./leanPopulateMap');
+const lookupLocalFields = require('./lookupLocalFields');
 const mpath = require('mpath');
 const sift = require('sift').default;
 const utils = require('../../utils');
@@ -68,7 +69,7 @@
   }
 
   for (let i = 0; i < docs.length; ++i) {
-    const existingVal = utils.getValue(o.path, docs[i]);
+    const existingVal = mpath.get(o.path, docs[i], lookupLocalFields);
     if (existingVal == null && !getVirtual(o.originalModel.schema, o.path)) {
       continue;
     }
@@ -132,6 +133,10 @@
         break;
       }
 
+      if (parts[j] === '$*') {
+        break;
+      }
+
       if (cur[parts[j]] == null) {
         // If nothing to set, avoid creating an unnecessary array. Otherwise
         // we'll end up with a single doc in the array with only defaults.
@@ -156,7 +161,7 @@
     // If lean, need to check that each individual virtual respects
     // `justOne`, because you may have a populated virtual with `justOne`
     // underneath an array. See gh-6867
-    utils.setValue(o.path, valueToSet, docs[i], setValue, false);
+    mpath.set(o.path, valueToSet, docs[i], lookupLocalFields, setValue, false);
   }
 };
 
Index: node_modules/bl/bl.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict'\r\nvar DuplexStream = require('readable-stream').Duplex\r\n  , util         = require('util')\r\n  , Buffer       = require('safe-buffer').Buffer\r\n\r\nfunction BufferList (callback) {\r\n  if (!(this instanceof BufferList))\r\n    return new BufferList(callback)\r\n\r\n  this._bufs  = []\r\n  this.length = 0\r\n\r\n  if (typeof callback == 'function') {\r\n    this._callback = callback\r\n\r\n    var piper = function piper (err) {\r\n      if (this._callback) {\r\n        this._callback(err)\r\n        this._callback = null\r\n      }\r\n    }.bind(this)\r\n\r\n    this.on('pipe', function onPipe (src) {\r\n      src.on('error', piper)\r\n    })\r\n    this.on('unpipe', function onUnpipe (src) {\r\n      src.removeListener('error', piper)\r\n    })\r\n  } else {\r\n    this.append(callback)\r\n  }\r\n\r\n  DuplexStream.call(this)\r\n}\r\n\r\n\r\nutil.inherits(BufferList, DuplexStream)\r\n\r\n\r\nBufferList.prototype._offset = function _offset (offset) {\r\n  var tot = 0, i = 0, _t\r\n  if (offset === 0) return [ 0, 0 ]\r\n  for (; i < this._bufs.length; i++) {\r\n    _t = tot + this._bufs[i].length\r\n    if (offset < _t || i == this._bufs.length - 1) {\r\n      return [ i, offset - tot ]\r\n    }\r\n    tot = _t\r\n  }\r\n}\r\n\r\nBufferList.prototype._reverseOffset = function (blOffset) {\r\n  var bufferId = blOffset[0]\r\n  var offset = blOffset[1]\r\n  for (var i = 0; i < bufferId; i++) {\r\n    offset += this._bufs[i].length\r\n  }\r\n  return offset\r\n}\r\n\r\nBufferList.prototype.append = function append (buf) {\r\n  var i = 0\r\n\r\n  if (Buffer.isBuffer(buf)) {\r\n    this._appendBuffer(buf)\r\n  } else if (Array.isArray(buf)) {\r\n    for (; i < buf.length; i++)\r\n      this.append(buf[i])\r\n  } else if (buf instanceof BufferList) {\r\n    // unwrap argument into individual BufferLists\r\n    for (; i < buf._bufs.length; i++)\r\n      this.append(buf._bufs[i])\r\n  } else if (buf != null) {\r\n    // coerce number arguments to strings, since Buffer(number) does\r\n    // uninitialized memory allocation\r\n    if (typeof buf == 'number')\r\n      buf = buf.toString()\r\n\r\n    this._appendBuffer(Buffer.from(buf))\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n\r\nBufferList.prototype._appendBuffer = function appendBuffer (buf) {\r\n  this._bufs.push(buf)\r\n  this.length += buf.length\r\n}\r\n\r\n\r\nBufferList.prototype._write = function _write (buf, encoding, callback) {\r\n  this._appendBuffer(buf)\r\n\r\n  if (typeof callback == 'function')\r\n    callback()\r\n}\r\n\r\n\r\nBufferList.prototype._read = function _read (size) {\r\n  if (!this.length)\r\n    return this.push(null)\r\n\r\n  size = Math.min(size, this.length)\r\n  this.push(this.slice(0, size))\r\n  this.consume(size)\r\n}\r\n\r\n\r\nBufferList.prototype.end = function end (chunk) {\r\n  DuplexStream.prototype.end.call(this, chunk)\r\n\r\n  if (this._callback) {\r\n    this._callback(null, this.slice())\r\n    this._callback = null\r\n  }\r\n}\r\n\r\n\r\nBufferList.prototype.get = function get (index) {\r\n  if (index > this.length || index < 0) {\r\n    return undefined\r\n  }\r\n  var offset = this._offset(index)\r\n  return this._bufs[offset[0]][offset[1]]\r\n}\r\n\r\n\r\nBufferList.prototype.slice = function slice (start, end) {\r\n  if (typeof start == 'number' && start < 0)\r\n    start += this.length\r\n  if (typeof end == 'number' && end < 0)\r\n    end += this.length\r\n  return this.copy(null, 0, start, end)\r\n}\r\n\r\n\r\nBufferList.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {\r\n  if (typeof srcStart != 'number' || srcStart < 0)\r\n    srcStart = 0\r\n  if (typeof srcEnd != 'number' || srcEnd > this.length)\r\n    srcEnd = this.length\r\n  if (srcStart >= this.length)\r\n    return dst || Buffer.alloc(0)\r\n  if (srcEnd <= 0)\r\n    return dst || Buffer.alloc(0)\r\n\r\n  var copy   = !!dst\r\n    , off    = this._offset(srcStart)\r\n    , len    = srcEnd - srcStart\r\n    , bytes  = len\r\n    , bufoff = (copy && dstStart) || 0\r\n    , start  = off[1]\r\n    , l\r\n    , i\r\n\r\n  // copy/slice everything\r\n  if (srcStart === 0 && srcEnd == this.length) {\r\n    if (!copy) { // slice, but full concat if multiple buffers\r\n      return this._bufs.length === 1\r\n        ? this._bufs[0]\r\n        : Buffer.concat(this._bufs, this.length)\r\n    }\r\n\r\n    // copy, need to copy individual buffers\r\n    for (i = 0; i < this._bufs.length; i++) {\r\n      this._bufs[i].copy(dst, bufoff)\r\n      bufoff += this._bufs[i].length\r\n    }\r\n\r\n    return dst\r\n  }\r\n\r\n  // easy, cheap case where it's a subset of one of the buffers\r\n  if (bytes <= this._bufs[off[0]].length - start) {\r\n    return copy\r\n      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)\r\n      : this._bufs[off[0]].slice(start, start + bytes)\r\n  }\r\n\r\n  if (!copy) // a slice, we need something to copy in to\r\n    dst = Buffer.allocUnsafe(len)\r\n\r\n  for (i = off[0]; i < this._bufs.length; i++) {\r\n    l = this._bufs[i].length - start\r\n\r\n    if (bytes > l) {\r\n      this._bufs[i].copy(dst, bufoff, start)\r\n    } else {\r\n      this._bufs[i].copy(dst, bufoff, start, start + bytes)\r\n      break\r\n    }\r\n\r\n    bufoff += l\r\n    bytes -= l\r\n\r\n    if (start)\r\n      start = 0\r\n  }\r\n\r\n  return dst\r\n}\r\n\r\nBufferList.prototype.shallowSlice = function shallowSlice (start, end) {\r\n  start = start || 0\r\n  end = typeof end !== 'number' ? this.length : end\r\n\r\n  if (start < 0)\r\n    start += this.length\r\n  if (end < 0)\r\n    end += this.length\r\n\r\n  if (start === end) {\r\n    return new BufferList()\r\n  }\r\n  var startOffset = this._offset(start)\r\n    , endOffset = this._offset(end)\r\n    , buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1)\r\n\r\n  if (endOffset[1] == 0)\r\n    buffers.pop()\r\n  else\r\n    buffers[buffers.length-1] = buffers[buffers.length-1].slice(0, endOffset[1])\r\n\r\n  if (startOffset[1] != 0)\r\n    buffers[0] = buffers[0].slice(startOffset[1])\r\n\r\n  return new BufferList(buffers)\r\n}\r\n\r\nBufferList.prototype.toString = function toString (encoding, start, end) {\r\n  return this.slice(start, end).toString(encoding)\r\n}\r\n\r\nBufferList.prototype.consume = function consume (bytes) {\r\n  while (this._bufs.length) {\r\n    if (bytes >= this._bufs[0].length) {\r\n      bytes -= this._bufs[0].length\r\n      this.length -= this._bufs[0].length\r\n      this._bufs.shift()\r\n    } else {\r\n      this._bufs[0] = this._bufs[0].slice(bytes)\r\n      this.length -= bytes\r\n      break\r\n    }\r\n  }\r\n  return this\r\n}\r\n\r\n\r\nBufferList.prototype.duplicate = function duplicate () {\r\n  var i = 0\r\n    , copy = new BufferList()\r\n\r\n  for (; i < this._bufs.length; i++)\r\n    copy.append(this._bufs[i])\r\n\r\n  return copy\r\n}\r\n\r\n\r\nBufferList.prototype.destroy = function destroy () {\r\n  this._bufs.length = 0\r\n  this.length = 0\r\n  this.push(null)\r\n}\r\n\r\n\r\nBufferList.prototype.indexOf = function (search, offset, encoding) {\r\n  if (encoding === undefined && typeof offset === 'string') {\r\n    encoding = offset\r\n    offset = undefined\r\n  }\r\n  if (typeof search === 'function' || Array.isArray(search)) {\r\n    throw new TypeError('The \"value\" argument must be one of type string, Buffer, BufferList, or Uint8Array.')\r\n  } else if (typeof search === 'number') {\r\n      search = Buffer.from([search])\r\n  } else if (typeof search === 'string') {\r\n    search = Buffer.from(search, encoding)\r\n  } else if (search instanceof BufferList) {\r\n    search = search.slice()\r\n  } else if (!Buffer.isBuffer(search)) {\r\n    search = Buffer.from(search)\r\n  }\r\n\r\n  offset = Number(offset || 0)\r\n  if (isNaN(offset)) {\r\n    offset = 0\r\n  }\r\n\r\n  if (offset < 0) {\r\n    offset = this.length + offset\r\n  }\r\n\r\n  if (offset < 0) {\r\n    offset = 0\r\n  }\r\n\r\n  if (search.length === 0) {\r\n    return offset > this.length ? this.length : offset\r\n  }\r\n\r\n  var blOffset = this._offset(offset)\r\n  var blIndex = blOffset[0] // index of which internal buffer we're working on\r\n  var buffOffset = blOffset[1] // offset of the internal buffer we're working on\r\n\r\n  // scan over each buffer\r\n  for (blIndex; blIndex < this._bufs.length; blIndex++) {\r\n    var buff = this._bufs[blIndex]\r\n    while(buffOffset < buff.length) {\r\n      var availableWindow = buff.length - buffOffset\r\n      if (availableWindow >= search.length) {\r\n        var nativeSearchResult = buff.indexOf(search, buffOffset)\r\n        if (nativeSearchResult !== -1) {\r\n          return this._reverseOffset([blIndex, nativeSearchResult])\r\n        }\r\n        buffOffset = buff.length - search.length + 1 // end of native search window\r\n      } else {\r\n        var revOffset = this._reverseOffset([blIndex, buffOffset])\r\n        if (this._match(revOffset, search)) {\r\n          return revOffset\r\n        }\r\n        buffOffset++\r\n      }\r\n    }\r\n    buffOffset = 0\r\n  }\r\n  return -1\r\n}\r\n\r\nBufferList.prototype._match = function(offset, search) {\r\n  if (this.length - offset < search.length) {\r\n    return false\r\n  }\r\n  for (var searchOffset = 0; searchOffset < search.length ; searchOffset++) {\r\n    if(this.get(offset + searchOffset) !== search[searchOffset]){\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\n\r\n;(function () {\r\n  var methods = {\r\n      'readDoubleBE' : 8\r\n    , 'readDoubleLE' : 8\r\n    , 'readFloatBE'  : 4\r\n    , 'readFloatLE'  : 4\r\n    , 'readInt32BE'  : 4\r\n    , 'readInt32LE'  : 4\r\n    , 'readUInt32BE' : 4\r\n    , 'readUInt32LE' : 4\r\n    , 'readInt16BE'  : 2\r\n    , 'readInt16LE'  : 2\r\n    , 'readUInt16BE' : 2\r\n    , 'readUInt16LE' : 2\r\n    , 'readInt8'     : 1\r\n    , 'readUInt8'    : 1\r\n    , 'readIntBE'    : null\r\n    , 'readIntLE'    : null\r\n    , 'readUIntBE'   : null\r\n    , 'readUIntLE'   : null\r\n  }\r\n\r\n  for (var m in methods) {\r\n    (function (m) {\r\n      if (methods[m] === null) {\r\n        BufferList.prototype[m] = function (offset, byteLength) {\r\n          return this.slice(offset, offset + byteLength)[m](0, byteLength)\r\n        }\r\n      }\r\n      else {\r\n        BufferList.prototype[m] = function (offset) {\r\n          return this.slice(offset, offset + methods[m])[m](0)\r\n        }\r\n      }\r\n    }(m))\r\n  }\r\n}())\r\n\r\n\r\nmodule.exports = BufferList\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/bl/bl.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/bl/bl.js	(date 499162500000)
@@ -186,18 +186,22 @@
 
     if (bytes > l) {
       this._bufs[i].copy(dst, bufoff, start)
+      bufoff += l
     } else {
       this._bufs[i].copy(dst, bufoff, start, start + bytes)
+      bufoff += l
       break
     }
 
-    bufoff += l
     bytes -= l
 
     if (start)
       start = 0
   }
 
+  // safeguard so that we don't return uninitialized memory
+  if (dst.length > bufoff) return dst.slice(0, bufoff)
+
   return dst
 }
 
@@ -233,6 +237,11 @@
 }
 
 BufferList.prototype.consume = function consume (bytes) {
+  // first, normalize the argument, in accordance with how Buffer does it
+  bytes = Math.trunc(bytes)
+  // do nothing if not a positive number
+  if (Number.isNaN(bytes) || bytes <= 0) return this
+
   while (this._bufs.length) {
     if (bytes >= this._bufs[0].length) {
       bytes -= this._bufs[0].length
Index: node_modules/mongoose/lib/types/subdocument.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst Document = require('../document');\r\nconst immediate = require('../helpers/immediate');\r\nconst internalToObjectOptions = require('../options').internalToObjectOptions;\r\nconst promiseOrCallback = require('../helpers/promiseOrCallback');\r\n\r\nconst documentArrayParent = require('../helpers/symbols').documentArrayParent;\r\n\r\nmodule.exports = Subdocument;\r\n\r\n/**\r\n * Subdocument constructor.\r\n *\r\n * @inherits Document\r\n * @api private\r\n */\r\n\r\nfunction Subdocument(value, fields, parent, skipId, options) {\r\n  this.$isSingleNested = true;\r\n\r\n  const hasPriorDoc = options != null && options.priorDoc;\r\n  let initedPaths = null;\r\n  if (hasPriorDoc) {\r\n    this._doc = Object.assign({}, options.priorDoc._doc);\r\n    delete this._doc[this.schema.options.discriminatorKey];\r\n    initedPaths = Object.keys(options.priorDoc._doc || {}).\r\n      filter(key => key !== this.schema.options.discriminatorKey);\r\n  }\r\n  if (parent != null) {\r\n    // If setting a nested path, should copy isNew from parent re: gh-7048\r\n    options = Object.assign({}, options, {\r\n      isNew: parent.isNew,\r\n      defaults: parent.$__.$options.defaults\r\n    });\r\n  }\r\n  Document.call(this, value, fields, skipId, options);\r\n\r\n  if (hasPriorDoc) {\r\n    for (const key of initedPaths) {\r\n      if (!this.$__.activePaths.states.modify[key] &&\r\n          !this.$__.activePaths.states.default[key] &&\r\n          !this.$__.$setCalled.has(key)) {\r\n        const schematype = this.schema.path(key);\r\n        const def = schematype == null ? void 0 : schematype.getDefault(this);\r\n        if (def === void 0) {\r\n          delete this._doc[key];\r\n        } else {\r\n          this._doc[key] = def;\r\n          this.$__.activePaths.default(key);\r\n        }\r\n      }\r\n    }\r\n\r\n    delete options.priorDoc;\r\n    delete this.$__.$options.priorDoc;\r\n  }\r\n}\r\n\r\nSubdocument.prototype = Object.create(Document.prototype);\r\n\r\nSubdocument.prototype.toBSON = function() {\r\n  return this.toObject(internalToObjectOptions);\r\n};\r\n\r\n/**\r\n * Used as a stub for middleware\r\n *\r\n * ####NOTE:\r\n *\r\n * _This is a no-op. Does not actually save the doc to the db._\r\n *\r\n * @param {Function} [fn]\r\n * @return {Promise} resolved Promise\r\n * @api private\r\n */\r\n\r\nSubdocument.prototype.save = function(options, fn) {\r\n  if (typeof options === 'function') {\r\n    fn = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n\r\n  if (!options.suppressWarning) {\r\n    console.warn('mongoose: calling `save()` on a subdoc does **not** save ' +\r\n      'the document to MongoDB, it only runs save middleware. ' +\r\n      'Use `subdoc.save({ suppressWarning: true })` to hide this warning ' +\r\n      'if you\\'re sure this behavior is right for your app.');\r\n  }\r\n\r\n  return promiseOrCallback(fn, cb => {\r\n    this.$__save(cb);\r\n  });\r\n};\r\n\r\n/**\r\n * Used as a stub for middleware\r\n *\r\n * ####NOTE:\r\n *\r\n * _This is a no-op. Does not actually save the doc to the db._\r\n *\r\n * @param {Function} [fn]\r\n * @method $__save\r\n * @api private\r\n */\r\n\r\nSubdocument.prototype.$__save = function(fn) {\r\n  return immediate(() => fn(null, this));\r\n};\r\n\r\nSubdocument.prototype.$isValid = function(path) {\r\n  if (this.$parent && this.$basePath) {\r\n    return this.$parent.$isValid([this.$basePath, path].join('.'));\r\n  }\r\n  return Document.prototype.$isValid.call(this, path);\r\n};\r\n\r\nSubdocument.prototype.markModified = function(path) {\r\n  Document.prototype.markModified.call(this, path);\r\n\r\n  if (this.$parent && this.$basePath) {\r\n    if (this.$parent.isDirectModified(this.$basePath)) {\r\n      return;\r\n    }\r\n    this.$parent.markModified([this.$basePath, path].join('.'), this);\r\n  }\r\n};\r\n\r\nSubdocument.prototype.isModified = function(paths, modifiedPaths) {\r\n  if (this.$parent && this.$basePath) {\r\n    if (Array.isArray(paths) || typeof paths === 'string') {\r\n      paths = (Array.isArray(paths) ? paths : paths.split(' '));\r\n      paths = paths.map(p => [this.$basePath, p].join('.'));\r\n    }\r\n\r\n    return this.$parent.isModified(paths, modifiedPaths);\r\n  }\r\n\r\n  return Document.prototype.isModified.call(this, paths, modifiedPaths);\r\n};\r\n\r\n/**\r\n * Marks a path as valid, removing existing validation errors.\r\n *\r\n * @param {String} path the field to mark as valid\r\n * @api private\r\n * @method $markValid\r\n * @receiver Subdocument\r\n */\r\n\r\nSubdocument.prototype.$markValid = function(path) {\r\n  Document.prototype.$markValid.call(this, path);\r\n  if (this.$parent && this.$basePath) {\r\n    this.$parent.$markValid([this.$basePath, path].join('.'));\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSubdocument.prototype.invalidate = function(path, err, val) {\r\n  // Hack: array subdocuments' validationError is equal to the owner doc's,\r\n  // so validating an array subdoc gives the top-level doc back. Temporary\r\n  // workaround for #5208 so we don't have circular errors.\r\n  if (err !== this.ownerDocument().$__.validationError) {\r\n    Document.prototype.invalidate.call(this, path, err, val);\r\n  }\r\n\r\n  if (this.$parent && this.$basePath) {\r\n    this.$parent.invalidate([this.$basePath, path].join('.'), err, val);\r\n  } else if (err.kind === 'cast' || err.name === 'CastError') {\r\n    throw err;\r\n  }\r\n\r\n  return this.ownerDocument().$__.validationError;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSubdocument.prototype.$ignore = function(path) {\r\n  Document.prototype.$ignore.call(this, path);\r\n  if (this.$parent && this.$basePath) {\r\n    this.$parent.$ignore([this.$basePath, path].join('.'));\r\n  }\r\n};\r\n\r\n/**\r\n * Returns the top level document of this sub-document.\r\n *\r\n * @return {Document}\r\n */\r\n\r\nSubdocument.prototype.ownerDocument = function() {\r\n  if (this.$__.ownerDocument) {\r\n    return this.$__.ownerDocument;\r\n  }\r\n\r\n  let parent = this.$parent;\r\n  if (!parent) {\r\n    return this;\r\n  }\r\n\r\n  while (parent.$parent || parent[documentArrayParent]) {\r\n    parent = parent.$parent || parent[documentArrayParent];\r\n  }\r\n\r\n  this.$__.ownerDocument = parent;\r\n  return this.$__.ownerDocument;\r\n};\r\n\r\n/**\r\n * Returns this sub-documents parent document.\r\n *\r\n * @api public\r\n */\r\n\r\nSubdocument.prototype.parent = function() {\r\n  return this.$parent;\r\n};\r\n\r\n/*!\r\n * no-op for hooks\r\n */\r\n\r\nSubdocument.prototype.$__remove = function(cb) {\r\n  return cb(null, this);\r\n};\r\n\r\n/**\r\n * Null-out this subdoc\r\n *\r\n * @param {Object} [options]\r\n * @param {Function} [callback] optional callback for compatibility with Document.prototype.remove\r\n */\r\n\r\nSubdocument.prototype.remove = function(options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n\r\n  registerRemoveListener(this);\r\n\r\n  // If removing entire doc, no need to remove subdoc\r\n  if (!options || !options.noop) {\r\n    this.$parent.set(this.$basePath, null);\r\n  }\r\n\r\n  if (typeof callback === 'function') {\r\n    callback(null);\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSubdocument.prototype.populate = function() {\r\n  throw new Error('Mongoose does not support calling populate() on nested ' +\r\n    'docs. Instead of `doc.nested.populate(\"path\")`, use ' +\r\n    '`doc.populate(\"nested.path\")`');\r\n};\r\n\r\n/*!\r\n * Registers remove event listeners for triggering\r\n * on subdocuments.\r\n *\r\n * @param {Subdocument} sub\r\n * @api private\r\n */\r\n\r\nfunction registerRemoveListener(sub) {\r\n  let owner = sub.ownerDocument();\r\n\r\n  function emitRemove() {\r\n    owner.removeListener('save', emitRemove);\r\n    owner.removeListener('remove', emitRemove);\r\n    sub.emit('remove', sub);\r\n    sub.constructor.emit('remove', sub);\r\n    owner = sub = null;\r\n  }\r\n\r\n  owner.on('save', emitRemove);\r\n  owner.on('remove', emitRemove);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/types/subdocument.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/types/subdocument.js	(date 499162500000)
@@ -133,11 +133,13 @@
     if (Array.isArray(paths) || typeof paths === 'string') {
       paths = (Array.isArray(paths) ? paths : paths.split(' '));
       paths = paths.map(p => [this.$basePath, p].join('.'));
-    }
 
-    return this.$parent.isModified(paths, modifiedPaths);
-  }
+      return this.$parent.isModified(paths, modifiedPaths);
+    }
 
+    return this.$parent.isModified(this.$basePath);
+  }
+
   return Document.prototype.isModified.call(this, paths, modifiedPaths);
 };
 
Index: backend/branches/article/add.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const router = express.Router();\r\n\r\nrouter.get('/', async(req, res, next)=>{\r\n\r\n    try{\r\n\r\n        let data = {\r\n\r\n            parent_list : await category_model.getParent(),\r\n\r\n        }\r\n\r\n        req.session.temp_files = [];\r\n\r\n        res.render('article/article-add', data);\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        next(error);\r\n\r\n    }\r\n\r\n});\r\n\r\nrouter.post('/', async(req, res, next)=>{\r\n\r\n   try{\r\n\r\n       let {title_inp, parent_inp, child_inp, summary_inp, describe_inp, meta_describe_inp, type_inp} = req.body;\r\n       let tags_inp = req.body['tags_inp[]'];\r\n\r\n       let validation_result = new validation([\r\n           {value : title_inp},\r\n           {value : parent_inp, type : 'objectId'},\r\n           {value : child_inp, type : 'objectId'},\r\n           {value : describe_inp},\r\n           {value : meta_describe_inp},\r\n           {value : type_inp},\r\n           {value : tags_inp , type : 'array'},\r\n       ]).valid();\r\n\r\n       if(validation_result){\r\n\r\n           return res.json(validation_result)\r\n\r\n       }\r\n\r\n       let article_url = title_inp.split(' ').join('-').toLowerCase()\r\n\r\n       let article_data = {\r\n\r\n           title : title_inp,\r\n           category_parent : (parent_inp == '0') ? null : parent_inp,\r\n           category_child : (child_inp == '0') ? null : child_inp,\r\n           describe : describe_inp,\r\n           meta_describe : meta_describe_inp,\r\n           url : article_url,\r\n           internal_files : req.session.temp_files,\r\n           summary : summary_inp,\r\n           tags : tags_inp,\r\n           status : (type_inp == '0') ? true : false,\r\n\r\n       }\r\n\r\n       log(article_data.status)\r\n\r\n       if (req.files) {\r\n\r\n           let main_image = req.files.main_image;\r\n           let file_name = `${randomSha1String()}.${main_image.name.split(\".\").pop()}`;\r\n           let upload_result = fileManager.upload(main_image, file_name,{\r\n\r\n               allowed_formats : `image`,\r\n               file_path : `${backend_upload_dir}images/`,\r\n\r\n           });\r\n\r\n           if(upload_result){\r\n\r\n               return res.json(upload_result)\r\n\r\n           }\r\n\r\n           article_data.main_image = file_name;\r\n\r\n       }\r\n       else{\r\n\r\n           return res.json('یک تصویر به عنوان تصویر اصلی مقاله انتخاب کنید.')\r\n\r\n       }\r\n\r\n       let result = await article_model.add(article_data, req.session.admin_id);\r\n\r\n       if(result){\r\n\r\n           return res.json({\r\n               status : 'success',\r\n               url : `${config.backend_url}article/list`,\r\n               msg : `مقاله جدید با موفقیت ثبت شد.`\r\n           })\r\n\r\n       }\r\n       else{\r\n\r\n           return res.json('این نام تکراری می باشد، لطفا از نام دیگری استفاده کنید.')\r\n\r\n       }\r\n\r\n   }\r\n   catch (error) {\r\n\r\n       next(error);\r\n\r\n   }\r\n\r\n});\r\n\r\nmodule.exports = router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/branches/article/add.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/branches/article/add.js	(date 1599624296435)
@@ -29,7 +29,6 @@
 
        let {title_inp, parent_inp, child_inp, summary_inp, describe_inp, meta_describe_inp, type_inp} = req.body;
        let tags_inp = req.body['tags_inp[]'];
-
        let validation_result = new validation([
            {value : title_inp},
            {value : parent_inp, type : 'objectId'},
@@ -37,7 +36,6 @@
            {value : describe_inp},
            {value : meta_describe_inp},
            {value : type_inp},
-           {value : tags_inp , type : 'array'},
        ]).valid();
 
        if(validation_result){
Index: node_modules/mongoose/History.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>5.10.2 / 2020-08-28\r\n===================\r\n * fix(model): avoid uncaught error if `insertMany()` fails due to server selection error #9355\r\n * fix(aggregate): automatically convert accumulator function options to strings #9364\r\n * fix(document): handle `pull()` on a document array when `_id` is an alias #9319\r\n * fix(queryhelpers): avoid path collision error when projecting in discriminator key with `.$` #9361\r\n * fix: fix typo in error message thrown by unimplemented createIndex #9367 [timhaley94](https://github.com/timhaley94)\r\n * docs(plugins): note that plugins should be applied before you call `mongoose.model()` #7723\r\n\r\n5.10.1 / 2020-08-26\r\n===================\r\n * fix(mongoose): fix `.then()` is not a function error when calling `mongoose.connect()` multiple times #9358 #9335 #9331\r\n * fix: allow calling `create()` after `bulkWrite()` by clearing internal casting context #9350\r\n * fix(model): dont wipe out changes made while `save()` is in-flight #9327\r\n * fix(populate): skip checking `refPath` if the path to populate is undefined #9340\r\n * fix(document): allow accessing document values from function `default` on array #9351\r\n * fix(model): skip applying init hook if called with `schema.pre(..., { document: false })` #9316\r\n * fix(populate): support `retainNullValues` when setting `_id` to `false` for subdocument #9337 #9336 [FelixRe0](https://github.com/FelixRe0)\r\n * docs: update connect example to avoid deprecation warnings #9332 [moander](https://github.com/moander)\r\n\r\n5.10.0 / 2020-08-14\r\n===================\r\n * feat: upgrade to MongoDB driver 3.6 for full MongoDB 4.4 support\r\n * feat(connection): add `Connection#transaction()` helper that handles resetting Mongoose document state if the transaction fails #8380\r\n * feat(connection): make transaction() helper reset array atomics after failed transaction\r\n * feat(schema+model): add `optimisticConcurrency` option to use OCC for `save()` #9001 #5424\r\n * feat(aggregate): add `Aggregate#search()` for Atlas Text Search #9115\r\n * feat(mongoose): add support for setting `setDefaultsOnInsert` as a global option #9036 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * feat(mongoose): add support for setting `returnOriginal` as a global option #9189 #9183 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * feat(mongoose): allow global option mongoose.set('strictQuery', true) #9016 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * feat(document): add Document#getChanges #9097 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * feat(document): support `defaults` option to disable adding defaults to a single document #8271\r\n * feat(SingleNestedPath+DocumentArray): add static `set()` function for global options, support setting `_id` globally #8883\r\n * feat(query): handle casting `$or` when each clause contains a different discriminator key #9018\r\n * feat(query): add overwriteDiscriminatorKey option that allows changing the discriminator key in `findOneAndUpdate()`, `updateOne()`, etc. #6087\r\n * fix(connection): make calling `mongoose.connect()` while already connected a no-op #9203\r\n * feat(connection): add `getClient()` and `setClient()` function for interacting with a connection's underlying MongoClient instance #9164\r\n * feat(document+populate): add `parent()` function that allows you to get the parent document for populated docs #8092\r\n * feat(document): add `useProjection` option to `toObject()` and `toJSON()` for hiding deselected fields on newly created documents #9118\r\n\r\n5.9.29 / 2020-08-13\r\n===================\r\n * fix(document): support setting nested path to itself when it has nested subpaths #9313\r\n * fix(model): make `syncIndexes()` report error if it can't create an index #9303\r\n * fix: handle auth error when Atlas username is incorrect #9300\r\n\r\n5.9.28 / 2020-08-07\r\n===================\r\n * fix(connection): consistently stop buffering when \"reconnected\" is emitted #9295\r\n * fix(error): ensure `name` and `message` show up on individual ValidatorErrors when calling JSON.stringify() on a ValidationError #9296\r\n * fix(document): keeps manually populated paths when setting a nested path to itself #9293\r\n * fix(document): allow saving after setting document array to itself #9266\r\n * fix(schema): handle `match` schema validator with `/g` flag #9287\r\n * docs(guide): refactor transactions examples to async/await #9204\r\n\r\n5.9.27 / 2020-07-31\r\n===================\r\n * fix: upgrade mongodb driver -> 3.5.10 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(transactions): make transactions docs use async/await for readability #9204\r\n\r\n5.9.26 / 2020-07-27\r\n===================\r\n * fix(document): allow unsetting boolean field by setting the field to `undefined` #9275\r\n * fix(document): throw error when overwriting a single nested subdoc changes an immutable path within the subdoc #9281\r\n * fix(timestamps): apply timestamps to `bulkWrite()` updates when not using `$set` #9268\r\n * fix(browser): upgrade babel to v7 to work around an issue with `extends Error` #9273\r\n * fix: make subdocument's `invalidate()` methods have the same return value as top-level document #9271\r\n * docs(model): make `create()` docs use async/await, and add another warning about how `create()` with options requires array syntax #9280\r\n * docs(connections): clarify that Mongoose can emit 'connected' when reconnecting after losing connectivity #9240\r\n * docs(populate): clarify that you can't filter based on foreign document properties when populating #9279\r\n * docs(document+model): clarify how `validateModifiedOnly` option works #9263\r\n * docs: remove extra poolSize option in comment #9270 [shahvicky](https://github.com/shahvicky)\r\n * docs: point bulkWrite() link to mongoose docs instead of localhost #9284\r\n\r\n5.9.25 / 2020-07-17\r\n===================\r\n * fix(discriminator): allow passing a compiled model's schema as a parameter to `discriminator()` #9238\r\n * fix(connection): throw more readable error when querying db before initial connection when `bufferCommands = false` #9239\r\n * fix(indexes): don't unnecessarily drop text indexes when running `syncIndexes()` #9225\r\n * fix: make Boolean _castNullish respect omitUndefined #9242 [ehpc](https://github.com/ehpc)\r\n * fix(populate): populate single nested discriminator underneath doc array when populated docs have different model but same id #9244\r\n * docs(mongoose): correct formatting typo #9247 [JNa0](https://github.com/JNa0)\r\n\r\n5.9.24 / 2020-07-13\r\n===================\r\n * fix(connection): respect connection-level `bufferCommands` option if `mongoose.connect()` is called after `mongoose.model()` #9179\r\n * fix(document): clear out `priorDoc` after overwriting single nested subdoc so changes after overwrite get persisted correctly #9208\r\n * fix(connection): dont overwrite user-specified `bufferMaxEntries` when setting `bufferCommands` #9218\r\n * fix(model): allow passing projection to `Model.hydrate()` #9209\r\n * fix(schema+document): support adding `null` to schema boolean's `convertToFalse` set #9223\r\n * docs(model): make `find` and `findOne()` examples use async/await and clarify `find({})` is find all #9210\r\n\r\n4.13.21 / 2020-07-12\r\n====================\r\n * fix(query): delete top-level `_bsontype` property in queries to prevent silent empty queries #8222\r\n\r\n5.9.23 / 2020-07-10\r\n===================\r\n * fix(model): fix `syncIndexes()` error when db index has a collation but Mongoose index does not #9224 [clhuang](https://github.com/clhuang)\r\n * fix(array): only cast array to proper depth if it contains an non-array value #9217 #9215 [cyrilgandon](https://github.com/cyrilgandon)\r\n * docs(schematype): document the `transform` option #9211\r\n * docs(mongoose): fix typo #9212 [JNa0](https://github.com/JNa0)\r\n\r\n5.9.22 / 2020-07-06\r\n===================\r\n * fix(schema): treat `{ type: mongoose.Schema.Types.Array }` as equivalent to `{ type: Array }` #9194\r\n * fix: revert fix for #9107 to avoid issues when calling `connect()` multiple times #9167\r\n * fix(update): respect storeSubdocValidationError option with update validators #9172\r\n * fix: upgrade to safe-buffer 5.2 #9198\r\n * docs: add a note about SSL validation to migration guide #9147\r\n * docs(schemas): fix inconsistent header #9196 [samtsai15](https://github.com/samtsai15)\r\n\r\n5.9.21 / 2020-07-01\r\n===================\r\n * fix: propagate `typeKey` option to implicitly created schemas from `typePojoToMixed` #9185 [joaoritter](https://github.com/joaoritter)\r\n * fix(populate): handle embedded discriminator `refPath` with multiple documents #9153\r\n * fix(populate): handle deselected foreign field with `perDocumentLimit` and multiple documents #9175\r\n * fix(document): disallow `transform` functions that return promises #9176 #9163 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(document): use strict equality when checking mixed paths for modifications #9165\r\n * docs: add target=\"_blank\" to all edit links #9058\r\n\r\n5.9.20 / 2020-06-22\r\n===================\r\n * fix(populate): handle populating primitive array under document array discriminator #9148\r\n * fix(connection): make sure to close previous connection when calling `openUri()` on an already open connection #9107\r\n * fix(model): fix conflicting $setOnInsert default values with `update` values in bulkWrite #9160 #9157 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(validation): add note about validateBeforeSave and invalidate #9144 [dandv](https://github.com/dandv)\r\n * docs: specify the array field syntax for invalidate #9137 [dandv](https://github.com/dandv)\r\n * docs: fix several typos and broken references #9024 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: fix minor typo #9143 [dandv](https://github.com/dandv)\r\n\r\n5.9.19 / 2020-06-15\r\n===================\r\n * fix: upgrade mongodb driver -> 3.5.9 #9124 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix: copy `required` validator on single nested subdoc correctly when calling `Schema#clone()` #8819\r\n * fix(discriminator): handle `tiedValue` when casting update on nested paths #9108\r\n * fix(model): allow empty arrays for bulkWrite #9132 #9131 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(schema): correctly set partialFilterExpression for nested schema indexes #9091\r\n * fix(castArrayFilters): handle casting on all fields of array filter #9122 [lafeuil](https://github.com/lafeuil)\r\n * fix(update): handle nested path createdAt when overwriting parent path #9105\r\n * docs(subdocs): add some notes on the difference between single nested subdocs and nested paths #9085\r\n * docs(subdocs): improve docs on `typePojoToMixed` #9085\r\n * docs: add note about connections in `globalSetup` with Jest #9063\r\n * docs: add schema and how to set default sub-schema to schematype options #9111 [dfle](https://github.com/dfle)\r\n * docs(index): use `const` instead of `var` in examples #9125 [dmcgrouther](https://github.com/dmcgrouther)\r\n * docs: corrected markdown typo #9117\r\n\r\n5.9.18 / 2020-06-05\r\n===================\r\n * fix: improve atlas error in the event of incorrect password #9095\r\n * docs: add edit link for all docs pages #9058\r\n * fix(document): allow accessing `$locals` when initializing document #9099 #9098 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(query): make `setDefaultsOnInsert` a mongoose option so it doesn't end up in debug output #9086\r\n * docs(connection+index): add serverSelectionTimeoutMS and heartbeatFrequencyMS to `connect()` and `openUri()` options #9071\r\n * docs(geojson): add notes about geojson 2dsphere indexes #9044\r\n * docs: make active page bold in navbar #9062\r\n * docs: correct a typo in a code snippet #9089 [Elvis-Sarfo](https://github.com/Elvis-Sarfo)\r\n\r\n5.9.17 / 2020-06-02\r\n===================\r\n * fix(document): avoid tracking changes like `splice()` on slice()-ed arrays #9011\r\n * fix(populate): make populating a nested path a no-op #9073\r\n * fix(document): clear nested cast errors when overwriting an array path #9080\r\n * fix: upgrade mongodb to v3.5.8 #9069 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(document): add validateModifiedOnly to Document#save(), Document#validateSync() and Document#validate() #9078 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(faq): fix typo #9075 [tigransimonyan](https://github.com/tigransimonyan)\r\n * docs: document all parameters to .debug #9029 [dandv](https://github.com/dandv)\r\n * docs: fix property value in Getters example #9061 [ismet](https://github.com/ismet)\r\n\r\n5.9.16 / 2020-05-25\r\n===================\r\n * perf(error): convert errors to classes extending Error for lower CPU overhead #9021 [zbjornson](https://github.com/zbjornson)\r\n * fix(query): throw CastError if filter `$and`, `$or`, `$nor` contain non-object values #8948\r\n * fix(bulkwrite): cast filter & update to schema after applying timestamps #9030 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(document): don't overwrite defaults with undefined keys in nested documents #9039 [vitorhnn](https://github.com/vitorhnn)\r\n * fix(discriminator): remove discriminator schema nested paths pulled from base schema underneath a mixed path in discriminator schema #9042\r\n * fix(model): make syncIndexes() not drop index if all user-specified collation options are the same #8994\r\n * fix(document): make internal `$__.scope` property a symbol instead to work around a bug with fast-safe-stringify #8955\r\n * docs: model.findByIdAndUpdate() 'new' param fix #9026 [dandv](https://github.com/dandv)\r\n\r\n5.9.15 / 2020-05-18\r\n===================\r\n * fix(schema): treat creating dotted path with no parent as creating a nested path #9020\r\n * fix(documentarray): make sure you can call `unshift()` after `map()` #9012 [philippejer](https://github.com/philippejer)\r\n * fix(model): cast bulkwrite according to discriminator schema if discriminator key is present #8982 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(schema): remove `db` from reserved keywords #8940\r\n * fix(populate): treat populating a doc array that doesn't have a `ref` as a no-op #8946\r\n * fix(timestamps): set createdAt and updatedAt on doubly nested subdocs when upserting #8894\r\n * fix(model): allow POJOs as schemas for model.discriminator(...) #8991 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(model): report `insertedDocs` on `insertMany()` errors #8938\r\n * fix(model): ensure consistent `writeErrors` property on insertMany error with `ordered: false`, even if only one op failed #8938\r\n * docs: add anchor tag to strictQuery and strict #9014 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(faq): remove faq ipv6 #9004\r\n * docs: add note about throwing error only after validation and fix broken reference to api/CastError #8993 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: fix typos in documents.pug #9005 [dandv](https://github.com/dandv)\r\n\r\n5.9.14 / 2020-05-13\r\n===================\r\n * fix(cursor): add index as second parameter to eachAsync callback #8972 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(query): cast filter according to discriminator schema if discriminator key in filter #8881\r\n * fix(model): fix throwing error when populating virtual path defined on child discriminator #8924 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(errors): handle case when user has make `Error.prototype.toJSON` read only #8986 [osher](https://github.com/osher)\r\n * fix(model): add `kind` to cast errors thrown by query execution #8953 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(update): use child schema strict on single nested updates if useNestedStrict not set #8922\r\n * docs(model): improve `save()` docs #8956 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: add immutable type to Schema Types #8987 [Andrew5569](https://github.com/Andrew5569)\r\n * docs: sort schema reserved keys in documentation #8966 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n\r\n5.9.13 / 2020-05-08\r\n===================\r\n * fix(schema): mark correct path as modified when setting a path underneath a nested array of documents #8926\r\n * fix(query): Query#select({ field: false }) should not overwrite schema selection options #8929 #8923\r\n * fix(update): handle immutable properties are ignored in bulk upserts #8952 [philippejer](https://github.com/philippejer)\r\n * docs(browser): add back sample webpack config #8890\r\n * docs(faq): fix broken reference in limit vs perDocumentLimit #8937\r\n\r\n5.9.12 / 2020-05-04\r\n===================\r\n * fix(document): report cast error on array elements with array index instead of just being a cast error for the whole array #8888\r\n * fix(connection): throw more helpful error in case of IP whitelisting issue with Atlas #8846\r\n * fix(schema): throw error on schema with reserved key with type of object #8869 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(connection): inherit config for useDB from default connection #8267 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(query): set mongodb options for `distinct()` #8906 [clhuang](https://github.com/clhuang)\r\n * fix(schema): allow adding descending indexes on schema #8895 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(document): set defaults if setting nested path to empty object with `minimize: false` #8829\r\n * fix(populate): check discriminator existence before accessing schema in getModelsMapForPopulate #8837 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: fix broken references to Mongoose#Document API, and prefer mongoose.model(...) over Document#model(...) #8914 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(model): adds options.limit to Model.insertMany(...) #8864 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: add flattenMaps and aliases to Document#toObject() #8901 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(model): add options.overwrite to findOneAndUpdate #8865 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(populate+faq): separate limit-vs-perDocumentLimit into its own section, add FAQ for populate and limit #8917 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n\r\n5.9.11 / 2020-04-30\r\n===================\r\n * fix: upgrade mongodb driver -> 3.5.7 #8842 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix: validate nested paths on Model.validate(...) #8848 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(populate): make doc.execPopulate(options) a shorthand for doc.populate(options).execPopulate() #8840 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(model): return validation errors when all docs are invalid & rawResult set #8853 [tusharf5](https://github.com/tusharf5)\r\n * fix(schemaType): treat select: null or select: undefined as not specified #8850 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix: fix stream close event listener being called multiple times in Node 14 #8835 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(populate): handle `clone` with `lean` when setting a path to `null` #8807\r\n * docs(faq): clarify setting paths under document arrays with `markModified()` #8854\r\n * docs: fix race condition in creating connection for lambda #8845 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: add options.path for Model.populate(...) #8833 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: use ES6 classes for custom schema type example #8802\r\n\r\n5.9.10 / 2020-04-20\r\n===================\r\n * fix: upgrade mongodb -> 3.5.6, bson -> 1.1.4 #8719\r\n * fix(document): avoid calling `$set()` on object keys if object path isn't in schema #8751\r\n * fix(timestamps): handle timestamps on doubly nested subdocuments #8799\r\n * fix(schematype): throw error if default is set to a schema instance #8751\r\n * fix: handle $elemMatch projection with `select: false` in schema #8818 #8806 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs: make FAQ questions more linkable #8825 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(validation): use `init()` as opposed to `once('index')` in `unique` example #8816\r\n * docs: clarify `insertMany()` return value #8820 [dandv](https://github.com/dandv)\r\n * docs(populate+query): fix typos #8793 #8794 [dandv](https://github.com/dandv)\r\n * docs(model): document skipId parameter #8791 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n\r\n5.9.9 / 2020-04-13\r\n==================\r\n * fix(model): make Model.bulkWrite accept `strict` option #8782 #8788 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(virtual): make populated virtual getter return value when it is passed in #8775 #8774 [makinde](https://github.com/makinde)\r\n * fix(document): handle validating document array whose docs contain maps and nested paths #8767\r\n * fix(document): skip discriminator key when overwriting a document #8765\r\n * fix(populate): support `clone` option with `lean` #8761 #8760\r\n * docs(transactions): use `endSession()` in all transactions examples #8741\r\n * docs(queries): expand streaming section to include async iterators, cursor timeouts, and sesssion idle timeouts #8720\r\n * docs(model+query+findoneandupdate): add docs for `returnOriginal` option #8766\r\n * docs(model): fix punctuation #8788 [dandv](https://github.com/dandv)\r\n * docs: fix typos #8780 #8799 [dandv](https://github.com/dandv)\r\n\r\n5.9.8 / 2020-04-06\r\n==================\r\n * fix(map): run getters when calling `Map#get()` #8730\r\n * fix(populate): handle `refPath` function in embedded discriminator #8731\r\n * fix(model): allow setting timestamps to false for bulkWrite #8758 #8745 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(model): pass custom options to `exists()` when no changes to save #8764 #8739 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(update): respect `useNestedStrict: false` when updating a single nested path #8735\r\n * fix(schema): allow `modelName` as a schema path, since `modelName` is a static property on models #7967\r\n * docs(promises): add section about using `exec()` with queries and `await` #8747\r\n * docs(connections): clarify that `connectTimeoutMS` doesn't do anything with `useUnifiedTopology`, should use `serverSelectionTimeoutMS` #8721\r\n * chore: upgrade mpath -> 0.7.0 #8762 [roja548](https://github.com/roja548)\r\n\r\n5.9.7 / 2020-03-30\r\n==================\r\n * fix(map): avoid infinite loop when setting a map of documents to a document copied using spread operator #8722\r\n * fix(query): clean stack trace for filter cast errors so they include the calling file #8691\r\n * fix(model): make bulkWrite updates error if `strict` and `upsert` are set and `filter` contains a non-schema path #8698\r\n * fix(cast): make internal `castToNumber()` allow undefined #8725 [p3x-robot](https://github.com/p3x-robot)\r\n\r\n5.9.6 / 2020-03-23\r\n==================\r\n * fix(document): allow saving document with nested document array after setting `nestedArr.0` #8689\r\n * docs(connections): expand section about multiple connections to describe patterns for exporting schemas #8679\r\n * docs(populate): add note about `execPopulate()` to \"populate an existing document\" section #8671 #8275\r\n * docs: fix broken links #8690 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(guide): fix typos #8704 [MateRyze](https://github.com/MateRyze)\r\n * docs(guide): fix minor typo #8683 [pkellz](https://github.com/pkellz)\r\n\r\n5.9.5 / 2020-03-16\r\n==================\r\n * fix: upgrade mongodb driver -> 3.5.5 #8667 #8664 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(connection): emit \"disconnected\" after losing connectivity to every member of a replica set with `useUnifiedTopology: true` #8643\r\n * fix(array): allow calling `slice()` after `push()` #8668 #8655 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(map): avoid marking map as modified if setting `key` to the same value #8652\r\n * fix(updateValidators): don't run `Mixed` update validator on dotted path underneath mixed type #8659\r\n * fix(populate): ensure top-level `limit` applies if one document being populated has more than `limit` results #8657\r\n * fix(populate): throw error if both `limit` and `perDocumentLimit` are set #8661 #8658 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(findOneAndUpdate): add a section about the `rawResult` option #8662\r\n * docs(guide): add section about `loadClass()` #8623\r\n * docs(query): improve `Query#populate()` example to clarify that `sort` doesn't affect the original result's order #8647\r\n\r\n5.9.4 / 2020-03-09\r\n==================\r\n * fix(document): allow `new Model(doc)` to set immutable properties when doc is a mongoose document #8642\r\n * fix(array): make sure you can call `unshift()` after `slice()` #8482\r\n * fix(schema): propagate `typePojoToMixed` to implicitly created arrays #8627\r\n * fix(schema): also propagate `typePojoToMixed` option to schemas implicitly created because of `typePojoToMixed` #8627\r\n * fix(model): support passing `background` option to `syncIndexes()` #8645\r\n * docs(schema): add a section about the `_id` path in schemas #8625\r\n * docs(virtualtype+populate): document using `match` with virtual populate #8616\r\n * docs(guide): fix typo #8648 [sauzy34](https://github.com/sauzy34)\r\n\r\n5.9.3 / 2020-03-02\r\n==================\r\n * fix: upgrade mongodb driver -> 3.5.4 #8620\r\n * fix(document): set subpath defaults when overwriting single nested subdoc #8603\r\n * fix(document): make calling `validate()` with single nested subpath only validate that single nested subpath #8626\r\n * fix(browser): make `mongoose.model()` return a class in the browser to allow hydrating populated data in the browser #8605\r\n * fix(model): make `syncIndexes()` and `cleanIndexes()` drop compound indexes with `_id` that aren't in the schema #8559\r\n * docs(connection+index): add warnings to explain that bufferMaxEntries does nothing with `useUnifiedTopology` #8604\r\n * docs(document+model+query): add `options.timestamps` parameter docs to `findOneAndUpdate()` and `findByIdAndUpdate()` #8619\r\n * docs: fix out of date links to tumblr #8599\r\n\r\n5.9.2 / 2020-02-21\r\n==================\r\n * fix(model): add discriminator key to bulkWrite filters #8590\r\n * fix(document): when setting nested array path to non-nested array, wrap values top-down rather than bottom up when possible #8544\r\n * fix(document): dont leave nested key as undefined when setting nested key to empty object with minimize #8565\r\n * fix(document): avoid throwing error if setting path to Mongoose document with nullish `_doc` #8565\r\n * fix(update): handle Binary type correctly with `runValidators` #8580\r\n * fix(query): run `deleteOne` hooks only on `Document#deleteOne()` when setting `options.document = true` for `Schema#pre()` #8555\r\n * fix(document): allow calling `validate()` in post validate hook without causing parallel validation error #8597\r\n * fix(virtualtype): correctly copy options when cloning #8587\r\n * fix(collection): skip creating capped collection if `autoCreate` set to `false` #8566\r\n * docs(middleware): clarify that updateOne and deleteOne hooks are query middleware by default, not document middleware #8581\r\n * docs(aggregate): clarify that `Aggregate#unwind()` can take object parameters as well as strings #8594\r\n\r\n5.9.1 / 2020-02-14\r\n==================\r\n * fix(model): set session when calling `save()` with no changes #8571\r\n * fix(schema): return correct pathType when single nested path is embedded under a nested path with a numeric name #8583\r\n * fix(queryhelpers): remove `Object.values()` for Node.js 4.x-6.x support #8596\r\n * fix(cursor): respect sort order when using `eachAsync()` with `parallel` and a sync callback #8577\r\n * docs: update documentation of custom _id overriding in discriminators #8591 [sam-mfb](https://github.com/sam-mfb)\r\n\r\n5.9.0 / 2020-02-13\r\n==================\r\n * fix: upgrade to MongoDB driver 3.5 #8520 #8563\r\n * feat(schematype): support setting default options for schema type (`trim` on all strings, etc.) #8487\r\n * feat(populate): add `perDocumentLimit` option that limits per document in `find()` result, rather than across all documents #7318\r\n * feat(schematype): enable setting `transform` option on individual schematypes #8403\r\n * feat(timestamps): allow setting `currentTime` option for setting custom function to get the current time #3957\r\n * feat(connection): add `Connection#watch()` to watch for changes on an entire database #8425\r\n * feat(document): add `Document#$op` property to make it easier to tell what operation is running in middleware #8439\r\n * feat(populate): support `limit` as top-level populate option #8445\r\n\r\n5.8.13 / 2020-02-13\r\n===================\r\n * fix(populate): use safe get to avoid crash if schematype doesn't have options #8586\r\n\r\n5.8.12 / 2020-02-12\r\n===================\r\n * fix(query): correctly cast dbref `$id` with `$elemMatch` #8577\r\n * fix(populate): handle populating when some embedded discriminator schemas have `refPath` but none of the subdocs have `refPath` #8553\r\n * docs: add useUnifiedTopology to homepage example #8558 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * refactor(utils): moving promiseOrCallback to helpers/promiseOrCallback #8573 [hugosenari](https://github.com/hugosenari)\r\n\r\n5.8.11 / 2020-01-31\r\n===================\r\n * fix(document): allow calling `validate()` multiple times in parallel on subdocs to avoid errors if Mongoose double-validates [taxilian](https://github.com/taxilian) #8548 #8539\r\n * fix(connection): allow calling initial `mongoose.connect()` after connection helpers on the same tick #8534\r\n * fix(connection): throw helpful error when callback param to `mongoose.connect()` or `mongoose.createConnection()` is not a function #8556\r\n * fix(drivers): avoid unnecessary caught error when importing #8528\r\n * fix(discriminator): remove unnecessary `utils.merge()` [samgladstone](https://github.com/samgladstone) #8542\r\n * docs: add \"built with mongoose\" page #8540\r\n\r\n5.8.10 / 2020-01-27\r\n===================\r\n * perf(document): improve performance of document creation by skipping unnecessary split() calls #8533 [igrunert-atlassian](https://github.com/igrunert-atlassian)\r\n * fix(document): only call validate once for deeply nested subdocuments #8532 #8531 [taxilian](https://github.com/taxilian)\r\n * fix(document): create document array defaults in forward order, not reverse #8514\r\n * fix(document): allow function as message for date min/max validator #8512\r\n * fix(populate): don't try to populate embedded discriminator that has populated path but no `refPath` #8527\r\n * fix(document): plugins from base schema when creating a discriminator #8536 [samgladstone](https://github.com/samgladstone)\r\n * fix(document): ensure parent and ownerDocument are set for subdocs in document array defaults #8509\r\n * fix(document): dont set undefined keys to null if minimize is false #8504\r\n * fix(update): bump timestamps when using update aggregation pipelines #8524\r\n * fix(model): ensure `cleanIndexes()` drops indexes with different collations #8521\r\n * docs(model): document `insertMany` `lean` option #8522\r\n * docs(connections): document `authSource` option #8517\r\n\r\n5.8.9 / 2020-01-17\r\n==================\r\n * fix(populate): skip populating embedded discriminator array values that don't have a `refPath` #8499\r\n * docs(queries): clarify when to use queries versus aggregations #8494\r\n\r\n5.8.8 / 2020-01-14\r\n==================\r\n * fix(model): allow using `lean` with `insertMany()` #8507 #8234 [ntsekouras](https://github.com/ntsekouras)\r\n * fix(document): don't throw parallel validate error when validating subdoc underneath modified nested path #8486\r\n * fix: allow `typePojoToMixed` as top-level option #8501 #8500 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(populate+schematypes): make note of `_id` getter for ObjectIds in populate docs #8483\r\n\r\n5.8.7 / 2020-01-10\r\n==================\r\n * fix(documentarray): modify ownerDocument when setting doc array to a doc array thats part of another document #8479\r\n * fix(document): ensure that you can call `splice()` after `slice()` on an array #8482\r\n * docs(populate): improve cross-db populate docs to include model refs #8497\r\n\r\n5.8.6 / 2020-01-07\r\n====================\r\n * chore: merge changes from 4.13.20 and override mistaken publish to latest tag\r\n\r\n4.13.20 / 2020-01-07\r\n====================\r\n * fix(schema): make aliases handle mongoose-lean-virtuals #6069\r\n\r\n5.8.5 / 2020-01-06\r\n==================\r\n * fix(document): throw error when running `validate()` multiple times on the same document #8468\r\n * fix(model): ensure deleteOne() and deleteMany() set discriminator filter even if no conditions passed #8471\r\n * fix(document): allow pre('validate') hooks to throw errors with `name = 'ValidationError'` #8466\r\n * fix(update): move top level $set of immutable properties to $setOnInsert so upserting with immutable properties actually sets the property #8467\r\n * fix(document): avoid double-running validators on single nested subdocs within single nested subdocs #8468\r\n * fix(populate): support top-level match option for virtual populate #8475\r\n * fix(model): avoid applying skip when populating virtual with count #8476\r\n\r\n5.8.4 / 2020-01-02\r\n==================\r\n * fix(populate): ensure populate virtual gets set to empty array if `localField` is undefined in the database #8455\r\n * fix(connection): wrap `mongoose.connect()` server selection timeouts in MongooseTimeoutError for more readable stack traces #8451\r\n * fix(populate): allow deselecting `foreignField` from projection by prefixing with `-` #8460\r\n * fix(populate): support embedded discriminators with `refPath` when not all discriminator schemas have `refPath` #8452\r\n * fix(array): allow defining `enum` on array if an array of numbers #8449\r\n\r\n5.8.3 / 2019-12-23\r\n==================\r\n * fix: upgrade mongodb -> 3.4.1 #8430 [jaschaio](https://github.com/jaschaio)\r\n * fix(populate): don't add empty subdocument to array when populating path underneath a non-existent document array #8432\r\n * fix(schema): handle `_id` option for document array schematypes #8450\r\n * fix(update): call setters when updating mixed type #8444\r\n * docs(connections): add note about MongoTimeoutError.reason #8402\r\n\r\n5.8.2 / 2019-12-20\r\n==================\r\n * fix(schema): copy `.add()`-ed paths when calling `.add()` with schema argument #8429\r\n * fix(cursor): pull schema-level readPreference when using `Query#cursor()` #8421\r\n * fix(cursor): wait for all promises to resolve if `parallel` is greater than number of documents #8422\r\n * fix(document): depopulate entire array when setting array path to a partially populated array #8443\r\n * fix: handle setDefaultsOnInsert with deeply nested subdocs #8392\r\n * fix(document): report `DocumentNotFoundError` if underlying document deleted but no changes made #8428 #8371 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(populate): clarify limitations of `limit` option for populate and suggest workaround #8409\r\n * docs(deprecations): explain which connection options are no longer relevant with useUnifiedTopology #8411\r\n * chore: allow browser build to be published #8435 #8427 [captaincaius](https://github.com/captaincaius)\r\n\r\n5.8.1 / 2019-12-12\r\n==================\r\n * fix(documentarray): dont attempt to cast when modifying array returned from map() #8399\r\n * fix(document): update single nested subdoc parent when setting to existing single nested doc #8400\r\n * fix(schema): add `$embeddedSchemaType` property to arrays for consistency with document arrays #8389\r\n\r\n5.8.0 / 2019-12-09\r\n==================\r\n * feat: wrap server selection timeout errors in `MongooseTimeoutError` to retain original stack trace #8259\r\n * feat(model): add `Model.validate()` function that validates a POJO against the model's schema #7587\r\n * feat(schema): add `Schema#pick()` function to create a new schema with a picked subset of the original schema's paths #8207\r\n * feat(schema): add ability to change CastError message using `cast` option to SchemaType #8300\r\n * feat(schema): group indexes defined in schema path with the same name #6499\r\n * fix(model): build all indexes even if one index fails #8185 [unusualbob](https://github.com/unusualbob)\r\n * feat(browser): pre-compile mongoose/browser #8350 [captaincaius](https://github.com/captaincaius)\r\n * fix(connection): throw error when setting unsupported option #8335 #6899 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * feat(schema): support `enum` validator for number type #8139\r\n * feat(update): allow using MongoDB 4.2 update aggregation pipelines, with no Mongoose casting #8225\r\n * fix(update): make update validators run on all subpaths when setting a nested path, even omitted subpaths #3587\r\n * feat(schema): support setting `_id` as an option to single nested schema paths #8137\r\n * feat(query): add Query#mongooseOptions() function #8296\r\n * feat(array): make `MongooseArray#push()` support using `$position` #4322\r\n * feat(schema): make pojo paths optionally become subdoc instead of Mixed #8228 [captaincaius](https://github.com/captaincaius)\r\n * feat(model): add Model.cleanIndexes() to drop non-schema indexes #6676\r\n * feat(document): make `updateOne()` document middleware pass `this` to post hooks #8262\r\n * feat(aggregate): run pre/post aggregate hooks on `explain()` #5887\r\n * docs(model+query): add `session` option to docs for findOneAndX() methods #8396\r\n\r\n5.7.14 / 2019-12-06\r\n===================\r\n * fix(cursor): wait until all `eachAsync()` functions finish before resolving the promise #8352\r\n * fix(update): handle embedded discriminator paths when discriminator key is defined in the update #8378\r\n * fix(schematype): handle passing `message` function to `SchemaType#validate()` as positional arg #8360\r\n * fix(map): handle cloning a schema that has a map of subdocuments #8357\r\n * docs(schema): clarify that `uppercase`, `lowercase`, and `trim` options for SchemaString don't affect RegExp queries #8333\r\n\r\n5.7.13 / 2019-11-29\r\n===================\r\n * fix: upgrade mongodb driver -> 3.3.5 #8383\r\n * fix(model): catch the error when insertMany fails to initialize the document #8365 #8363 [Fonger](https://github.com/Fonger)\r\n * fix(schema): add array.$, array.$.$ subpaths for nested arrays #6405\r\n * docs(error): add more detail about the ValidatorError class, including properties #8346\r\n * docs(connection): document `Connection#models` property #8314\r\n\r\n5.7.12 / 2019-11-19\r\n===================\r\n * fix: avoid throwing error if calling `push()` on a doc array with no parent #8351 #8317 #8312 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(connection): only buffer for \"open\" events when calling connection helper while connecting #8319\r\n * fix(connection): pull default database from connection string if specified #8355 #8354 [zachazar](https://github.com/zachazar)\r\n * fix(populate+discriminator): handle populating document whose discriminator value is different from discriminator model name #8324\r\n * fix: add `mongoose.isValidObjectId()` function to test whether Mongoose can cast a value to an objectid #3823\r\n * fix(model): support setting `excludeIndexes` as schema option for subdocs #8343\r\n * fix: add SchemaMapOptions class for options to map schematype #8318\r\n * docs(query): remove duplicate omitUndefined options #8349 [mdumandag](https://github.com/mdumandag)\r\n * docs(schema): add Schema#paths docs to public API docs #8340\r\n\r\n5.7.11 / 2019-11-14\r\n===================\r\n * fix: update mongodb driver -> 3.3.4 #8276\r\n * fix(model): throw readable error when casting bulkWrite update without a 'filter' or 'update' #8332 #8331 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(connection): bubble up connected/disconnected events with unified topology #8338 #8337\r\n * fix(model): delete $versionError after saving #8326 #8048 [Fonger](https://github.com/Fonger)\r\n * test(model): add test for issue #8040 #8341 [Fonger](https://github.com/Fonger)\r\n\r\n5.7.10 / 2019-11-11\r\n===================\r\n * perf(cursor): remove unnecessary `setTimeout()` in `eachAsync()`, 4x speedup in basic benchmarks #8310\r\n * docs(README): re-order sections for better readability #8321 [dandv](https://github.com/dandv)\r\n * chore: make npm test not hard-code file paths #8322 [stieg](https://github.com/stieg)\r\n\r\n5.7.9 / 2019-11-08\r\n==================\r\n * fix(schema): support setting schema path to an instance of SchemaTypeOptions to fix integration with mongoose-i18n-localize #8297 #8292\r\n * fix(populate): make `retainNullValues` set array element to `null` if foreign doc with that id was not found #8293\r\n * fix(document): support getter setting virtual on manually populated doc when calling toJSON() #8295\r\n * fix(model): allow objects with `toBSON()` to make it to `save()` #8299\r\n\r\n5.7.8 / 2019-11-04\r\n==================\r\n * fix(document): allow manually populating path within document array #8273\r\n * fix(populate): update top-level `populated()` when updating document array with populated subpaths #8265\r\n * fix(cursor): throw error when using aggregation cursor as async iterator #8280\r\n * fix(schema): retain `_id: false` in schema after nesting in another schema #8274\r\n * fix(document): make Document class an event emitter to support defining documents without models in node #8272\r\n * docs: document return types for `.discriminator()` #8287\r\n * docs(connection): add note about exporting schemas, not models, in multi connection paradigm #8275\r\n * docs: clarify that transforms defined in `toObject()` options are applied to subdocs #8260\r\n\r\n5.7.7 / 2019-10-24\r\n==================\r\n * fix(populate): make populate virtual consistently an empty array if local field is only empty arrays #8230\r\n * fix(query): allow findOne(objectid) and find(objectid) #8268\r\n\r\n5.7.6 / 2019-10-21\r\n==================\r\n * fix: upgrade mongodb driver -> 3.3.3 to fix issue with failing to connect to a replica set if one member is down #8209\r\n * fix(document): fix TypeError when setting a single nested subdoc with timestamps #8251\r\n * fix(cursor): fix issue with long-running `eachAsync()` cursor #8249 #8235\r\n * fix(connection): ensure repeated `close` events from useUnifiedTopology don't disconnect Mongoose from replica set #8224\r\n * fix(document): support calling `Document` constructor directly in Node.js #8237\r\n * fix(populate): add document array subpaths to parent doc `populated()` when calling `DocumentArray#push()` #8247\r\n * fix(options): add missing minlength and maxlength to SchemaStringOptions #8256\r\n * docs: add documentarraypath to API docs, including DocumentArrayPath#discriminator() #8164\r\n * docs(schematypes): add a section about the `type` property #8227\r\n * docs(api): fix Connection.close return param #8258 [gosuhiman](https://github.com/gosuhiman)\r\n * docs: update link to broken image on home page #8253 [krosenk729](https://github.com/krosenk729)\r\n\r\n5.7.5 / 2019-10-14\r\n==================\r\n * fix(query): delete top-level `_bsontype` property in queries to prevent silent empty queries #8222\r\n * fix(update): handle subdocument pre('validate') errors in update validation #7187\r\n * fix(subdocument): make subdocument#isModified use parent document's isModified #8223\r\n * docs(index): add favicon to home page #8226\r\n * docs: add schema options to API docs #8012\r\n * docs(middleware): add note about accessing the document being updated in pre('findOneAndUpdate') #8218\r\n * refactor: remove redundant code in ValidationError #8244 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n\r\n5.7.4 / 2019-10-09\r\n==================\r\n * fix(schema): handle `required: null` and `required: undefined` as `required: false` #8219\r\n * fix(update): support updating array embedded discriminator props if discriminator key in $elemMatch #8063\r\n * fix(populate): allow accessing populate virtual prop underneath array when virtual defined on top level #8198\r\n * fix(model): support passing `options` to `Model.remove()` #8211\r\n * fix(document): handle `Document#set()` merge option when setting underneath single nested schema #8201\r\n * fix: use options constructor class for all schematypes #8012\r\n\r\n5.7.3 / 2019-09-30\r\n==================\r\n * fix: make CoreMongooseArray#includes() handle `fromIndex` parameter #8203\r\n * fix(update): cast right hand side of `$pull` as a query instead of an update for document arrays #8166\r\n * fix(populate): handle virtual populate of an embedded discriminator nested path #8173\r\n * docs(validation): remove deprecated `isAsync` from validation docs in favor of emphasizing promises #8184\r\n * docs(documents): add overwriting section #8178\r\n * docs(promises): add note about queries being thenable #8110\r\n * perf: avoid update validators going into Mixed types #8192 [birdofpreyru](https://github.com/birdofpreyru)\r\n * refactor: remove async as a prod dependency #8073\r\n\r\n5.7.2 / 2019-09-23\r\n==================\r\n * fix(mongoose): support `mongoose.set('autoIndex', false)` #8158\r\n * fix(discriminator): support `tiedValue` parameter for embedded discriminators analagous to top-level discriminators #8164\r\n * fix(query): handle `toConstructor()` with entries-style sort syntax #8159\r\n * fix(populate): avoid converting mixed paths into arrays if populating an object path under `Mixed` #8157\r\n * fix: use $wrapCallback when using promises for mongoose-async-hooks\r\n * fix: handle queries with setter that converts value to Number instance #8150\r\n * docs: add mongoosejs-cli to readme #8142\r\n * docs: fix example typo for Schema.prototype.plugin() #8175 [anaethoss](https://github.com/anaethoss)\r\n\r\n5.7.1 / 2019-09-13\r\n==================\r\n * fix(query): fix TypeError when calling `findOneAndUpdate()` with `runValidators` #8151 [fernandolguevara](https://github.com/fernandolguevara)\r\n * fix(document): throw strict mode error if setting an immutable path with strict mode: false #8149\r\n * fix(mongoose): support passing options object to Mongoose constructor #8144\r\n * fix(model): make syncIndexes() handle changes in index key order #8135\r\n * fix(error): export StrictModeError as a static property of MongooseError #8148 [ouyuran](https://github.com/ouyuran)\r\n * docs(connection+mongoose): add `useUnifiedTopology` option to `connect()` and `openUri()` docs #8146\r\n\r\n5.7.0 / 2019-09-09\r\n==================\r\n * feat(document+query): support conditionally immutable schema paths #8001\r\n * perf(documentarray): refactor to use ES6 classes instead of mixins, ~30% speedup #7895\r\n * feat: use MongoDB driver 3.3.x for MongoDB 4.2 support #8083 #8078\r\n * feat(schema+query): add pre('validate') and post('validate') hooks for update validation #7984\r\n * fix(timestamps): ensure updatedAt gets incremented consistently using update with and without $set #4768\r\n * feat(query): add `Query#get()` to make writing custom setters that handle both queries and documents easier #7312\r\n * feat(document): run setters on defaults #8012\r\n * feat(document): add `aliases: false` option to `Document#toObject()` #7548\r\n * feat(timestamps): support skipping updatedAt and createdAt for individual save() and update() #3934\r\n * docs: fix index creation link in guide #8138 [joebowbeer](https://github.com/joebowbeer)\r\n\r\n5.6.13 / 2019-09-04\r\n===================\r\n * fix(parallel): fix parallelLimit when fns is empty #8130 #8128 [sibelius](https://github.com/sibelius)\r\n * fix(document): ensure nested mixed validator gets called exactly once #8117\r\n * fix(populate): handle `justOne = undefined` #8125 [taxilian](https://github.com/taxilian)\r\n\r\n5.6.12 / 2019-09-03\r\n===================\r\n * fix(schema): handle required validator correctly with `clone()` #8111\r\n * fix(schema): copy schematype getters and setters when cloning #8124 [StphnDamon](https://github.com/StphnDamon)\r\n * fix(discriminator): avoid unnecessarily cloning schema to avoid leaking memory on repeated `discriminator()` calls #2874\r\n * docs(schematypes): clarify when Mongoose uses `toString()` to convert an object to a string #8112 [TheTrueRandom](https://github.com/TheTrueRandom)\r\n * docs(plugins): fix out of date link to npm docs #8100\r\n * docs(deprecations): fix typo #8109 [jgcmarins](https://github.com/jgcmarins)\r\n * refactor(model): remove dependency on `async.parallelLimit()` for `insertMany()` #8073\r\n\r\n5.6.11 / 2019-08-25\r\n===================\r\n * fix(model): allow passing options to `exists()` #8075\r\n * fix(document): make `validateUpdatedOnly` option handle pre-existing errors #8091\r\n * fix: throw readable error if middleware callback isnt a function #8087\r\n * fix: don't throw error if calling `find()` on a nested array #8089\r\n * docs(middleware): clarify that you must add middleware before compiling your model #5087\r\n * docs(query): add missing options to `setOptions()` #8099\r\n\r\n5.6.10 / 2019-08-20\r\n===================\r\n * fix(schema): fix require() path to work around yet another bug in Jest #8053\r\n * fix(document): skip casting when initing a populated path #8062\r\n * fix(document): prevent double-calling validators on mixed objects with nested properties #8067\r\n * fix(query): handle schematype with `null` options when checking immutability #8070 [rich-earth](https://github.com/rich-earth)\r\n * fix(schema): support `Schema#path()` to get schema path underneath doc array #8057\r\n * docs(faq): add disable color instruction #8066\r\n\r\n5.6.9 / 2019-08-07\r\n==================\r\n * fix(model): delete versionError after saving to prevent memory leak #8048\r\n * fix(cursor): correctly handle batchSize option with query cursor #8039\r\n * fix(populate): handle virtual populate with count = 0 if virtual embedded in doc array #7573\r\n * fix(schema): allow declaring ObjectId array with `{ type: 'ObjectID' }`, last 'D' case insensitive #8034\r\n\r\n5.6.8 / 2019-08-02\r\n==================\r\n * fix(aggregate): allow modifying pipeline in pre('aggregate') hooks #8017\r\n * fix(query): make `findOneAndReplace()` work with `orFail()` #8030\r\n * fix(document): allow saving an unchanged document if required populated path is null #8018\r\n * fix(debug): support disabling colors in debug mode #8033 [Mangosteen-Yang](https://github.com/Mangosteen-Yang)\r\n * docs: add async-await guide #8028 [Rossh87](https://github.com/Rossh87)\r\n * docs(plugins): rewrite plugins docs to be more modern and not use strange `= exports` syntax #8026\r\n * docs(transactions): clarify relationship between `session` in docs and MongoDB driver ClientSession class, link to driver docs #8009\r\n\r\n5.6.7 / 2019-07-26\r\n==================\r\n * fix(document): support validators on nested arrays #7926\r\n * fix(timestamps): handle `timestamps: false` in child schema #8007\r\n * fix(query): consistently support `new` option to `findOneAndX()` as an alternative to `returnOriginal` #7846\r\n * fix(document): make `inspect()` never return `null`, because a document or nested path is never `== null` #7942\r\n * docs(query+lean): add links to mongoose-lean-virtuals, mongoose-lean-getters, mongoose-lean-defaults #5606\r\n * docs: add example for `Schema#pre(Array)` #8022 [Mangosteen-Yang](https://github.com/Mangosteen-Yang)\r\n * docs(schematype): updated comment from Schema.path to proper s.path #8013 [chrisweilacker](https://github.com/chrisweilacker)\r\n * chore: upgrade nyc #8015 [kolya182](https://github.com/kolya182)\r\n\r\n5.6.6 / 2019-07-22\r\n==================\r\n * fix(populate): handle refPath returning a virtual with `Query#populate()` #7341\r\n * fix(populate): handle `refPath` in discriminator when populating top-level model #5109\r\n * fix(mongoose): ensure destucturing and named imports work for Mongoose singleton methods like `set()`, etc. #6039\r\n * fix(query): add missing options for deleteOne and deleteMany in Query #8004 [Fonger](https://github.com/Fonger)\r\n * fix(schema): make embedded discriminators `instanceof` their parent types #5005\r\n * fix(array): make `validators` a private property that doesn't show up in for/in #6572\r\n * docs(api): fix array API docs that vanished because of #7798 #7979\r\n * docs(discriminators+api): add single nested discriminator to discriminator docs and API docs #7983\r\n * docs(connection+mongoose): make option lists consistent between `mongoose.connect()`, `mongoose.createConnection()`, and `conn.openUri()` #7976\r\n * docs(validation): clarify resolve(false) vs reject() for promise-based async custom validators #7761\r\n * docs(guide): use correct `mongoose.set()` instead of `mongoose.use()` #7998\r\n * docs: add redis cache example #7997 [usama-asfar](https://github.com/usama-asfar)\r\n\r\n5.6.5 / 2019-07-17\r\n==================\r\n * fix(document): handle setting non-schema path to ObjectId or Decimal128 if strict: false #7973\r\n * fix(connection): remove backwards-breaking multiple mongoose.connect() call for now #7977\r\n * fix(schema): print invalid value in error message when a schema path is set to undefined or null #7956\r\n * fix(model): throw readable error if calling `new Model.discriminator()` #7957\r\n * fix(mongoose): export `cast()` function #7975 [perfectstorm88](https://github.com/perfectstorm88)\r\n * docs(model): fix link to Model.inspect() and add example #7990\r\n * docs: fix broken anchor links on validation tutorial #7966\r\n * docs(api): fix broken links to split API pages #7978\r\n * chore: create LICENSE.md #7989 [Fonger](https://github.com/Fonger)\r\n\r\n5.6.4 / 2019-07-08\r\n==================\r\n * fix(schema): support pre(Array, Function) and post(Array, Function) #7803\r\n * fix(document): load docs with a `once` property successfully #7958\r\n * fix(queryhelpers): ensure parent `select` overwrites child path `select` if parent is nested #7945\r\n * fix(schema): make `clone()` correctly copy array embedded discriminators #7954\r\n * fix(update): fix error when update property gets casted to null #7949\r\n * fix(connection): bubble up attemptReconnect event for now #7872\r\n * docs(tutorials): add virtuals tutorial #7965\r\n * docs(connection): add section on connection handling #6997\r\n\r\n5.6.3 / 2019-07-03\r\n==================\r\n * fix(document): respect projection when running getters #7940\r\n * fix(model): call createCollection() in syncIndexes() to ensure the collection exists #7931\r\n * fix(document): consistently use post-order traversal for gathering subdocs for hooks #7929\r\n * fix(schema): ensure `Schema#pathType()` returns correct path type given non-existent positional path #7935\r\n * fix(ChangeStream): set `closed` if emitting close event #7930\r\n * fix(connection): bubble up 'attemptReconnect' event from MongoDB connection #7872\r\n * docs: fix broken .jade links on search page #7932\r\n * docs: correct link to `Query#select()` #7953 [rayhatfield](https://github.com/rayhatfield)\r\n * docs(README): add list of related projects #7773\r\n\r\n4.13.19 / 2019-07-02\r\n====================\r\n * fix(aggregate): make `setOptions()` work as advertised #7950 #6011 [cdimitroulas](https://github.com/cdimitroulas)\r\n\r\n5.6.2 / 2019-06-28\r\n==================\r\n * fix(update): allow using `update()` with immutable `createdAt` #7917\r\n * fix(model): pass `doc` parameter to save() error handling middleware #7832\r\n * fix(mongoose): add applyPluginsToChildSchemas option to allow opting out of global plugins for child schemas #7916\r\n * docs(connection): document `useCache` option for `useDb()` #7923\r\n * docs: fix broken link in FAQ #7925 [christophergeiger3](https://github.com/christophergeiger3)\r\n\r\n5.6.1 / 2019-06-24\r\n==================\r\n * fix(update): skip setting defaults for single embedded subdocs underneath maps #7909\r\n * fix(document): copy date objects correctly when strict = false #7907\r\n * feat(mongoose): throw an error if calling `mongoose.connect()` multiple times while connected #7905 [Fonger](https://github.com/Fonger)\r\n * fix(document): copies virtuals from array subdocs when casting array of docs with same schema #7898\r\n * fix(schema): ensure clone() copies single embedded discriminators correctly #7894\r\n * fix(discriminator): merge instead of overwriting conflicting nested schemas in discriminator schema #7884\r\n * fix(populate): ignore nullish arguments when calling `populate()` #7913 [rayhatfield](https://github.com/rayhatfield)\r\n * docs: add getters/setters tutorial #7919\r\n * docs: clean up error docs so they refer to `Error` rather than `MongooseError` #7867\r\n * docs: fix a couple broken links #7921 [kizmo04](https://github.com/kizmo04)\r\n * refactor: remove unnecessary if #7911 [rayhatfield](https://github.com/rayhatfield)\r\n\r\n5.6.0 / 2019-06-14\r\n==================\r\n * feat(schematype): add `immutable` option to disallow changing a given field #7671\r\n * docs: split API docs into separate pages to make API documentation more Google-able #7812\r\n * perf(array): remove all mixins in favor of ES6 classes, ~20% faster in basic benchmarks #7798\r\n * feat(document): use promise rejection error message when async custom validator throws an error #4913\r\n * feat(virtual): pass document as 3rd parameter to virtual getters and setters to enable using arrow functions #4143\r\n * feat(model): add `Model.exists()` function to quickly check whether a document matching `filter` exists #6872\r\n * feat(index+connection): support setting global and connection-level `maxTimeMS`\r\n * feat(populate): support setting `ref` to a function for conventional populate #7669\r\n * feat(document): add overwrite() function that overwrites all values in a document #7830\r\n * feat(populate): support `PopulateOptions#connection` option to allow cross-db populate with refPath #6520\r\n * feat(populate): add skipInvalidIds option to silently skip population if id is invalid, instead of throwing #7706\r\n * feat(array): skip empty array default if there's a 2dsphere index on a geojson path #3233\r\n * feat(query): add `getFilter()` as an alias of `getQuery()` to be more in line with API docs #7839\r\n * feat(model): add Model.inspect() to make models not clutter `util.inspect()` #7836\r\n * perf(discriminator): skip calling `createIndex()` on indexes that are defined in the base schema #7379\r\n * docs: upgrade from Jade to latest Pug #7812\r\n * docs(README): update reference to example schema.js #7899 [sharils](https://github.com/sharils)\r\n * docs(README): improve variable name #7900 [sharils](https://github.com/sharils)\r\n * chore: replace charAt(0) with startsWith #7897 [Fonger](https://github.com/Fonger)\r\n * chore: replace indexOf with includes, startsWith and endsWith for String #7897 [Fonger](https://github.com/Fonger)\r\n\r\n5.5.15 / 2019-06-12\r\n===================\r\n * fix(connection): reject initial connect promise even if there is an on('error') listener #7850\r\n * fix(map): make `of` automatically convert POJOs to schemas unless typeKey is set #7859\r\n * fix(update): use discriminator schema to cast update if discriminator key specified in filter #7843\r\n * fix(array): copy atomics from source array #7891 #7889 [jyrkive](https://github.com/jyrkive)\r\n * fix(schema): return this when Schema.prototype.add is called with Schema #7887 [Mickael-van-der-Beek](https://github.com/Mickael-van-der-Beek)\r\n * fix(document): add `numAffected` and `result` to DocumentNotFoundError for better debugging #7892 #7844\r\n\r\n5.5.14 / 2019-06-08\r\n===================\r\n * fix(query): correct this scope of setters in update query #7876 [Fonger](https://github.com/Fonger)\r\n * fix(model): reset modifiedPaths after successful insertMany #7852 #7873 [Fonger](https://github.com/Fonger)\r\n * fix(populate): allow using `refPath` with virtual populate #7848\r\n * fix(document): prepend private methods getValue and setValue with $ #7870 [Fonger](https://github.com/Fonger)\r\n * fix: update mongodb driver -> 3.2.7 #7871 [Fonger](https://github.com/Fonger)\r\n * docs(tutorials): add tutorial about custom casting functions #7045\r\n * docs(connection): fix outdated events document #7874 [Fonger](https://github.com/Fonger)\r\n * docs: fix typo in lean docs #7875 [tannakartikey](https://github.com/tannakartikey)\r\n * docs: move off of KeenIO for tracking and use self-hosted analytics instead\r\n\r\n5.5.13 / 2019-06-05\r\n===================\r\n * fix(model): support passing deleteOne options #7860 #7857 [Fonger](https://github.com/Fonger)\r\n * fix(update): run setters on array elements when doing $addToSet, $push, etc #4185\r\n * fix(model): support getting discriminator by value when creating a new model #7851\r\n * docs(transactions): add section about the `withTransaction()` helper #7598\r\n * docs(schema): clarify relationship between Schema#static() and Schema#statics #7827\r\n * docs(model): fix typo `projetion` to `projection` #7868 [dfdeagle47](https://github.com/dfdeagle47)\r\n * docs(schema): correct schema options lists #7828\r\n\r\n5.5.12 / 2019-05-31\r\n===================\r\n * fix(document): fix unexpected error when loading a document with a nested property named `schema` #7831\r\n * fix(model): skip applying static hooks by default if static name conflicts with query middleware (re: mongoose-delete plugin) #7790\r\n * fix(query): apply schema-level projections to the result of `findOneAndReplace()` #7654\r\n * fix: upgrade mongodb driver -> 3.2.6\r\n * docs(tutorials): add findOneAndUpdate() tutorial #7847\r\n * docs(validation): add `updateOne()` and `updateMany()` to list of update validator operations #7845\r\n * docs(model): make sure options lists in `update()` API line up #7842\r\n\r\n5.5.11 / 2019-05-23\r\n===================\r\n * fix(discriminator): allow numeric discriminator keys for embedded discriminators #7808\r\n * chore: add Node.js 12 to travis build matrix #7784\r\n\r\n5.5.10 / 2019-05-20\r\n===================\r\n * fix(discriminator): allow user-defined discriminator path in schema #7807\r\n * fix(query): ensure `findOneAndReplace()` sends `replacement` to server #7654\r\n * fix(cast): allow `[]` as a value when casting `$nin` #7806\r\n * docs(model): clarify that setters do run on `update()` by default #7801\r\n * docs: fix typo in FAQ #7821 [jaona](https://github.com/jaona)\r\n\r\n5.5.9 / 2019-05-16\r\n==================\r\n * fix(query): skip schema setters when casting $regexp $options #7802 [Fonger](https://github.com/Fonger)\r\n * fix(populate): don't skip populating doc array properties whose name conflicts with an array method #7782\r\n * fix(populate): make populated virtual return undefined if not populated #7795\r\n * fix(schema): handle custom setters in arrays of document arrays #7804 [Fonger](https://github.com/Fonger)\r\n * docs(tutorials): add query casting tutorial #7789\r\n\r\n5.5.8 / 2019-05-13\r\n==================\r\n * fix(document): run pre save hooks on nested child schemas #7792\r\n * fix(model): set $session() before validation middleware for bulkWrite/insertMany #7785 #7769 [Fonger](https://github.com/Fonger)\r\n * fix(query): make `getPopulatedPaths()` return deeply populated paths #7757\r\n * fix(query): suppress findAndModify deprecation warning when using `Model.findOneAndUpdate()` #7794\r\n * fix: upgrade mongodb -> 3.2.4 #7794\r\n * fix(document): handle a couple edge cases with atomics that happen when schema defines an array property named 'undefined' #7756\r\n * docs(discriminator): correct function parameters #7786 [gfpacheco](https://github.com/gfpacheco)\r\n\r\n5.5.7 / 2019-05-09\r\n==================\r\n * fix(model): set $session() before pre save middleware runs when calling save() with options #7742\r\n * fix(model): set $session before pre remove hooks run when calling remove() with options #7742\r\n * fix(schema): support `remove()` on nested path #2398\r\n * fix(map): handle setting populated map element to doc #7745\r\n * fix(query): return rawResult when inserting with options `{new:false,upsert:true,rawResult:true}` #7774 #7770 [LiaanM](https://github.com/LiaanM)\r\n * fix(schematype): remove internal `validators` option because it conflicts with Backbone #7720\r\n\r\n5.5.6 / 2019-05-06\r\n==================\r\n * fix(document): stop converting arrays to objects when setting non-schema path to array with strict: false #7733\r\n * fix(array): make two Mongoose arrays `assert.deepEqual()` each other if they have the same values #7700\r\n * fix(populate): support populating a path in a document array embedded in an array #7647\r\n * fix(populate): set populate virtual count to 0 if local field is empty #7731\r\n * fix(update): avoid throwing cast error if casting array filter that isn't in schema with strictQuery = false #7728\r\n * docs: fix typo in `distinct()` description #7767 [phil-r](https://github.com/phil-r)\r\n\r\n5.5.5 / 2019-04-30\r\n==================\r\n * fix(document): ensure nested properties within single nested subdocs get set correctly when overwriting single nested subdoc #7748\r\n * fix(document): skip non-object `validators` in schema types #7720\r\n * fix: bump mongodb driver -> 3.2.3 #7752\r\n * fix(map): disallow setting map key with special properties #7750 [Fonger](https://github.com/Fonger)\r\n\r\n5.5.4 / 2019-04-25\r\n==================\r\n * fix(document): avoid calling custom getters when saving #7719\r\n * fix(timestamps): handle child schema timestamps correctly when reusing child schemas #7712\r\n * fix(query): pass correct callback for _legacyFindAndModify #7736 [Fonger](https://github.com/Fonger)\r\n * fix(model+query): allow setting `replacement` parameter for `findOneAndReplace()` #7654\r\n * fix(map): make `delete()` unset the key in the database #7746 [Fonger](https://github.com/Fonger)\r\n * fix(array): use symbol for `_schema` property to avoid confusing deep equality checks #7700\r\n * fix(document): prevent `depopulate()` from removing fields with empty array #7741 #7740 [Fonger](https://github.com/Fonger)\r\n * fix: make `MongooseArray#includes` support ObjectIds #7732 #6354 [hansemannn](https://github.com/hansemannn)\r\n * fix(document): report correct validation error index when pushing onto doc array #7744 [Fonger](https://github.com/Fonger)\r\n\r\n5.5.3 / 2019-04-22\r\n==================\r\n * fix: add findAndModify deprecation warning that references the useFindAndModify option #7644\r\n * fix(document): handle pushing a doc onto a discriminator that contains a doc array #7704\r\n * fix(update): run setters on array elements when doing $set #7679\r\n * fix: correct usage of arguments while buffering commands #7718 [rzymek](https://github.com/rzymek)\r\n * fix(document): avoid error clearing modified subpaths if doc not defined #7715 [bitflower](https://github.com/bitflower)\r\n * refactor(array): move `_parent` property behind a symbol #7726 #7700\r\n * docs(model): list out all operations and options for `bulkWrite()` #7055\r\n * docs(aggregate): use `eachAsync()` instead of nonexistent `each()` #7699\r\n * docs(validation): add CastError validation example #7514\r\n * docs(query+model): list out all options and callback details for Model.updateX() and Query#updateX() #7646\r\n\r\n5.5.2 / 2019-04-16\r\n==================\r\n * fix(document): support setting nested path to non-POJO object #7639\r\n * perf(connection): remove leaked event handler in `Model.init()` so `deleteModel()` frees all memory #7682\r\n * fix(timestamps): handle custom statics that conflict with built-in functions (like mongoose-delete plugin) #7698\r\n * fix(populate): make `Document#populated()` work for populated subdocs #7685\r\n * fix(document): support `.set()` on document array underneath embedded discriminator path #7656\r\n\r\n5.5.1 / 2019-04-11\r\n==================\r\n * fix(document): correctly overwrite all properties when setting a single nested subdoc #7660 #7681\r\n * fix(array): allow customization of array required validator #7696 [freewil](https://github.com/freewil)\r\n * fix(discriminator): handle embedded discriminators when casting array defaults #7687\r\n * fix(collection): ensure collection functions return a promise even if disconnected #7676\r\n * fix(schematype): avoid indexing properties with `{ unique: false, index: false }` #7620\r\n * fix(aggregate): make `Aggregate#model()` with no arguments return the aggregation's model #7608\r\n\r\n5.5.0 / 2019-04-08\r\n==================\r\n * feat(model): support applying hooks to custom static functions #5982\r\n * feat(populate): support specifying a function as `match` #7397\r\n * perf(buffer): avoid calling `defineProperties()` in Buffer constructor #7331\r\n * feat(connection): add `plugin()` for connection-scoped plugins #7378\r\n * feat(model): add Model#deleteOne() and corresponding hooks #7538\r\n * feat(query): support hooks for `Query#distinct()` #5938\r\n * feat(model): print warning when calling create() incorrectly with a session #7535\r\n * feat(document): add Document#isEmpty() and corresponding helpers for nested paths #5369\r\n * feat(document): add `getters` option to Document#get() #7233\r\n * feat(query): add Query#projection() to get or overwrite the current projection #7384\r\n * fix(document): set full validator path on validatorProperties if `propsParameter` set on validator #7447\r\n * feat(document): add Document#directModifiedPaths() #7373\r\n * feat(document): add $locals property #7691\r\n * feat(document): add validateUpdatedOnly option that only validates modified paths in `save()` #7492 [captaincaius](https://github.com/captaincaius)\r\n * chore: upgrade MongoDB driver to v3.2.0 #7641\r\n * fix(schematype): deprecate `isAsync` option for custom validators #6700\r\n * chore(mongoose): deprecate global.MONGOOSE_DRIVER_PATH so we can be webpack-warning-free in 6.0 #7501\r\n\r\n5.4.23 / 2019-04-08\r\n===================\r\n * fix(document): report cast error when string path in schema is an array in MongoDB #7619\r\n * fix(query): set deletedCount on result of remove() #7629\r\n * docs(subdocs): add note about parent() and ownerDocument() to subdocument docs #7576\r\n\r\n5.4.22 / 2019-04-04\r\n===================\r\n * fix(aggregate): allow modifying options in pre('aggregate') hook #7606\r\n * fix(map): correctly init maps of maps when loading from MongoDB #7630\r\n * docs(model+query): add `omitUndefined` option to docs for updateX() and findOneAndX() #3486\r\n * docs: removed duplicate Query.prototype.merge() reference from doc #7684 [shihabmridha](https://github.com/shihabmridha)\r\n * docs(schema): fix shardKey type to object instead of bool #7668 [kyletsang](https://github.com/kyletsang)\r\n * docs(api): fix `Model.prototypedelete` link #7665 [pixcai](https://github.com/pixcai)\r\n\r\n5.4.21 / 2019-04-02\r\n===================\r\n * fix(updateValidators): run update validators correctly on Decimal128 paths #7561\r\n * fix(update): cast array filters in nested doc arrays correctly #7603\r\n * fix(document): allow .get() + .set() with aliased paths #7592\r\n * fix(document): ensure custom getters on single nested subdocs don't get persisted if toObject.getters = true #7601\r\n * fix(document): support setting subdoc path to subdoc copied using object rest `{...doc}` #7645\r\n * docs(schema): correct out-of-date list of reserved words #7593\r\n * docs(model+query): add link to update results docs and examples of using results of updateOne(), etc. #7582\r\n * docs: use atomic as opposed to $atomic consistently #7649 [720degreeLotus](https://github.com/720degreeLotus)\r\n\r\n5.4.20 / 2019-03-25\r\n===================\r\n * docs(tutorials): add tutorial about `lean()` #7640\r\n * fix(discriminator): fix wrong modelName being used as value to partialFilterExpression index #7635 #7634 [egorovli](https://github.com/egorovli)\r\n * fix(document): allow setters to modify `this` when overwriting single nested subdoc #7585\r\n * fix(populate): handle count option correctly with multiple docs #7573\r\n * fix(date): support declaring min/max validators as functions #7600 [ChienDevIT](https://github.com/ChienDevIT)\r\n * fix(discriminator): avoid projecting in embedded discriminator if only auto-selected path is discriminator key #7574\r\n * fix(discriminator): use discriminator model when using `new BaseModel()` with discriminator key #7586\r\n * fix(timestamps): avoid throwing if doc array has timestamps and array is undefined #7625 [serg33v](https://github.com/serg33v)\r\n * docs(document): explain DocumentNotFoundError in save() docs #7580\r\n * docs(query): fix .all() param type and add example #7612 [720degreeLotus](https://github.com/720degreeLotus)\r\n * docs: add useNewUrlParser to mongoose.connect for some pages #7615 [YC](https://github.com/YC)\r\n\r\n5.4.19 / 2019-03-11\r\n===================\r\n * fix(mongoose): ensure virtuals set on subdocs in global plugins get applied #7572\r\n * docs(tutorials): add \"Working With Dates\" tutorial #7597\r\n * docs(guide): clarify that versioning only affects array fields #7555\r\n * docs(model): list out all bulkWrite() options #7550\r\n\r\n5.4.18 / 2019-03-08\r\n===================\r\n * fix(document): handle nested virtuals in populated docs when parent path is projected out #7491\r\n * fix(model): make subclassed models handle discriminators correctly #7547\r\n * fix(model): remove $versionError from save options for better debug output #7570\r\n\r\n5.4.17 / 2019-03-03\r\n===================\r\n * fix(update): handle all positional operator when casting array filters #7540\r\n * fix(populate): handle populating nested path where top-level path is a primitive in the db #7545\r\n * fix(update): run update validators on array filters #7536\r\n * fix(document): clean modified subpaths when sorting an array #7556\r\n * fix(model): cast $setOnInsert correctly with nested docs #7534\r\n * docs: remove extra curly brace from example #7569 [kolya182](https://github.com/kolya182)\r\n\r\n5.4.16 / 2019-02-26\r\n===================\r\n * fix(schema): handle nested objects with `_id: false` #7524\r\n * fix(schema): don't throw error if declaring a virtual that starts with a map path name #7464\r\n * fix(browser): add stubbed `model()` function so code that uses model doesn't throw #7541 [caub](https://github.com/caub)\r\n * fix(schema): merge virtuals correctly #7563 [yoursdearboy](https://github.com/yoursdearboy)\r\n * docs(connections): add reconnectFailed to connection docs #7477\r\n * docs(index): fix typo #7553 [DenrizSusam](https://github.com/DenrizSusam)\r\n * refactor(schema): iterate over paths instead of depending on childSchemas #7554\r\n\r\n5.4.15 / 2019-02-22\r\n===================\r\n * fix(update): don't call schematype validators on array if using $pull with runValidators #6971\r\n * fix(schema): clone all schema types when cloning an array #7537\r\n * docs(connections): improve connectTimeoutMS docs and socketTimeoutMS docs to link to Node.js net.setTimeout() #5169\r\n * docs: fix setters example in migration guide #7546 [freewil](https://github.com/freewil)\r\n\r\n5.4.14 / 2019-02-19\r\n===================\r\n * fix(populate): make `getters` option handle nested paths #7521\r\n * fix(documentarray): report validation errors that occur in an array subdoc created using `create()` and then `set()` #7504\r\n * docs(schema): add examples for schema functions that didn't have any #7525\r\n * docs: add MongooseError to API docs and add list of error names\r\n * docs(CONTRIBUTING): fix link #7530 [sarpik](https://github.com/sarpik)\r\n\r\n5.4.13 / 2019-02-15\r\n===================\r\n * fix(query): throw handy error when using updateOne() with overwrite: true and no dollar keys #7475\r\n * fix(schema): support inheriting existing schema types using Node.js `util.inherits` like mongoose-float #7486\r\n * docs(connections): add list of connection events #7477\r\n\r\n5.4.12 / 2019-02-13\r\n===================\r\n * fix(connection): dont emit reconnected due to socketTimeoutMS #7452\r\n * fix(schema): revert check for `false` schema paths #7516 #7512\r\n * fix(model): don't delete unaliased keys in translateAliases #7510 [chrischen](https://github.com/chrischen)\r\n * fix(document): run single nested schematype validator if nested path has a default and subpath is modified #7493\r\n * fix(query): copy mongoose options when using `Query#merge()` #1790\r\n * fix(timestamps): don't call createdAt getters when setting updatedAt on new doc #7496\r\n * docs: improve description of ValidationError #7515 [JulioJu](https://github.com/JulioJu)\r\n * docs: add an asterisk before comment, otherwise the comment line is not generated #7513 [JulioJu](https://github.com/JulioJu)\r\n\r\n5.4.11 / 2019-02-09\r\n===================\r\n * fix(schema): handle `_id: false` in schema paths as a shortcut for setting the `_id` option to `false` #7480\r\n * fix(update): handle $addToSet and $push with ObjectIds and castNonArrays=false #7479\r\n * docs(model): document `session` option to `save()` #7484\r\n * chore: fix gitignore syntax #7498 [JulioJu](https://github.com/JulioJu)\r\n * docs: document that Document#validateSync returns ValidationError #7499\r\n * refactor: use consolidated `isPOJO()` function instead of constructor checks #7500\r\n\r\n5.4.10 / 2019-02-05\r\n===================\r\n * docs: add search bar and /search page #6706\r\n * fix: support dotted aliases #7478 [chrischen](https://github.com/chrischen)\r\n * fix(document): copy atomics when setting document array to an existing document array #7472\r\n * chore: upgrade to mongodb driver 3.1.13 #7488\r\n * docs: remove confusing references to executing a query \"immediately\" #7461\r\n * docs(guides+schematypes): link to custom schematypes docs #7407\r\n\r\n5.4.9 / 2019-02-01\r\n==================\r\n * fix(document): make `remove()`, `updateOne()`, and `update()` use the document's associated session #7455\r\n * fix(document): support passing args to hooked custom methods #7456\r\n * fix(document): avoid double calling single nested getters on `toObject()` #7442\r\n * fix(discriminator): handle global plugins modifying top-level discriminator options with applyPluginsToDiscriminators: true #7458\r\n * docs(documents): improve explanation of documents and use more modern syntax #7463\r\n * docs(middleware+api): fix a couple typos in examples #7474 [arniu](https://github.com/arniu)\r\n\r\n5.4.8 / 2019-01-30\r\n==================\r\n * fix(query): fix unhandled error when casting object in array filters #7431\r\n * fix(query): cast query $elemMatch to discriminator schema if discriminator key set #7449\r\n * docs: add table of contents to all guides #7430\r\n\r\n5.4.7 / 2019-01-26\r\n==================\r\n * fix(populate): set `populated()` when using virtual populate #7440\r\n * fix(discriminator): defer applying plugins to embedded discriminators until model compilation so global plugins work #7435\r\n * fix(schema): report correct pathtype underneath map so setting dotted paths underneath maps works #7448\r\n * fix: get debug from options using the get helper #7451 #7446 [LucGranato](https://github.com/LucGranato)\r\n * fix: use correct variable name #7443 [esben-semmle](https://github.com/esben-semmle)\r\n * docs: fix broken QueryCursor link #7438 [shihabmridha](https://github.com/shihabmridha)\r\n\r\n5.4.6 / 2019-01-22\r\n==================\r\n * fix(utils): make minimize leave empty objects in arrays instead of setting the array element to undefined #7322\r\n * fix(document): support passing `{document, query}` options to Schema#pre(regex) and Schema#post(regex) #7423\r\n * docs: add migrating to 5 guide to docs #7434\r\n * docs(deprecations): add instructions for fixing `count()` deprecation #7419\r\n * docs(middleware): add description and example for aggregate hooks #7402\r\n\r\n4.13.18 / 2019-01-21\r\n====================\r\n * fix(model): handle setting populated path set via `Document#populate()` #7302\r\n * fix(cast): backport fix from #7290 to 4.x\r\n\r\n5.4.5 / 2019-01-18\r\n==================\r\n * fix(populate): handle nested array `foreignField` with virtual populate #7374\r\n * fix(query): support not passing any arguments to `orFail()` #7409\r\n * docs(query): document what the resolved value for `deleteOne()`, `deleteMany()`, and `remove()` contains #7324\r\n * fix(array): allow opting out of converting non-arrays into arrays with `castNonArrays` option #7371\r\n * fix(query): ensure updateOne() doesnt unintentionally double call Schema#post(regexp) #7418\r\n\r\n5.4.4 / 2019-01-14\r\n==================\r\n * fix(query): run casting on arrayFilters option #7079\r\n * fix(document): support skipping timestamps on save() with `save({ timestamps: false })` #7357\r\n * fix(model): apply custom where on `Document#remove()` so we attach the shardKey #7393\r\n * docs(mongoose): document `mongoose.connections` #7338\r\n\r\n5.4.3 / 2019-01-09\r\n==================\r\n * fix(populate): handle `count` option when using `Document#populate()` on a virtual #7380\r\n * fix(connection): set connection state to DISCONNECTED if replica set has no primary #7330\r\n * fix(mongoose): apply global plugins to schemas nested underneath embedded discriminators #7370\r\n * fix(document): make modifiedPaths() return nested paths 1 level down on initial set #7313\r\n * fix(plugins): ensure sharding plugin works even if ObjectId has a `valueOf()` #7353\r\n\r\n5.4.2 / 2019-01-03\r\n==================\r\n * fix(document): ensure Document#updateOne() returns a query but still calls hooks #7366\r\n * fix(query): allow explicitly projecting out populated paths that are automatically projected in #7383\r\n * fix(document): support setting `flattenMaps` option for `toObject()` and `toJSON()` at schema level #7274\r\n * fix(query): handle merging objectids with `.where()` #7360\r\n * fix(schema): copy `.base` when cloning #7377\r\n * docs: remove links to plugins.mongoosejs.com in favor of plugins.mongoosejs.io #7364\r\n\r\n5.4.1 / 2018-12-26\r\n==================\r\n * fix(document): ensure doc array defaults get casted #7337\r\n * fix(document): make `save()` not crash if nested doc has a property 'get' #7316\r\n * fix(schema): allow using Schema.Types.Map as well as Map to declare a map type #7305\r\n * fix(map): make set after init mark correct path as modified #7321\r\n * fix(mongoose): don't recompile model if same collection and schema passed in to `mongoose.model()` #5767\r\n * fix(schema): improve error message when type is invalid #7303\r\n * fix(schema): add `populated` to reserved property names #7317\r\n * fix(model): don't run built-in middleware on custom methods and ensure timestamp hooks don't run if children don't have timestamps set #7342\r\n * docs(schematypes): clarify that you can add arbitrary options to a SchemaType #7340\r\n * docs(mongoose): clarify that passing same name+schema to `mongoose.model()` returns the model #5767\r\n * docs(index): add useNewUrlParser to example #7368 [JIBIN-P](https://github.com/JIBIN-P)\r\n * docs(connection): add useNewUrlParser to examples #7362 [JIBIN-P](https://github.com/JIBIN-P)\r\n * docs(discriminators): add back missing example from 'recursive embedded discriminators section' #7349\r\n * docs(schema): improve docs for string and boolean cast() #7351\r\n\r\n5.4.0 / 2018-12-14\r\n==================\r\n * feat(schematype): add `SchemaType.get()`, custom getters across all instances of a schematype #6912\r\n * feat(schematype): add `SchemaType.cast()`, configure casting for individual schematypes #7045\r\n * feat(schematype): add `SchemaType.checkRequired()`, configure what values pass `required` check for a schematype #7186 #7150\r\n * feat(model): add `Model.findOneAndReplace()` #7162\r\n * feat(model): add `Model.events` emitter that emits all `error`'s that occur with a given model #7125\r\n * feat(populate): add `count` option to populate virtuals, support returning # of populated docs instead of docs themselves #4469\r\n * feat(aggregate): add `.catch()` helper to make aggregations full thenables #7267\r\n * feat(query): add hooks for `deleteOne()` and `deleteMany()` #7195\r\n * feat(document): add hooks for `updateOne()` #7133\r\n * feat(query): add `Query#map()` for synchronously transforming results before post middleware runs #7142\r\n * feat(schema): support passing an array of objects or schemas to `Schema` constructor #7218\r\n * feat(populate): add `clone` option to ensure multiple docs don't share the same populated doc #3258\r\n * feat(query): add `Query#maxTimeMS()` helper #7254\r\n * fix(query): deprecate broken `Aggregate#addCursorFlag()` #7120\r\n * docs(populate): fix incorrect example #7335 [zcfan](https://github.com/zcfan)\r\n * docs(middleware): add `findOneAndDelete` to middleware list #7327 [danielkesselberg](https://github.com/danielkesselberg)\r\n\r\n5.3.16 / 2018-12-11\r\n===================\r\n * fix(document): handle `__proto__` in queries #7290\r\n * fix(document): use Array.isArray() instead of checking constructor name for arrays #7290\r\n * docs(populate): add section about what happens when no document matches #7279\r\n * fix(mongoose): avoid crash on `import mongoose, {Schema} from 'mongoose'` #5648\r\n\r\n5.3.15 / 2018-12-05\r\n===================\r\n * fix(query): handle `orFail()` with `findOneAndUpdate()` and `findOneAndDelete()` #7297 #7280\r\n * fix(document): make `save()` succeed if strict: false with a `collection` property #7276\r\n * fix(document): add `flattenMaps` option for toObject() #7274\r\n * docs(document): document flattenMaps option #7274\r\n * fix(populate): support populating individual subdoc path in document array #7273\r\n * fix(populate): ensure `model` option overrides `refPath` #7273\r\n * fix(map): don't call subdoc setters on init #7272\r\n * fix(document): use internal get() helper instead of lodash.get to support `null` projection param #7271\r\n * fix(document): continue running validateSync() for all elements in doc array after first error #6746\r\n\r\n5.3.14 / 2018-11-27\r\n===================\r\n * docs(api): use `openUri()` instead of legacy `open()` #7277 [artemjackson](https://github.com/artemjackson)\r\n * fix(document): don't mark date underneath single nested as modified if setting to string #7264\r\n * fix(update): set timestamps on subdocs if not using $set with no overwrite #7261\r\n * fix(document): use symbol instead of `__parent` so user code doesn't conflict #7230\r\n * fix(mongoose): allow using `mongoose.model()` without context, like `import {model} from 'mongoose'` #3768\r\n\r\n5.3.13 / 2018-11-20\r\n===================\r\n * fix: bump mongodb driver -> 3.1.10 #7266\r\n * fix(populate): support setting a model as a `ref` #7253\r\n * docs(schematype): add ref() function to document what is a valid `ref` path in a schematype #7253\r\n * fix(array): clean modified subpaths when calling `splice()` #7249\r\n * docs(compatibility): don't show Mongoose 4.11 as compatible with MongoDB 3.6 re: MongoDB's official compatibility table #7248 [a-harrison](https://github.com/a-harrison)\r\n * fix(document): report correct validation error if doc array set to primitive #7242\r\n * fix(mongoose): print warning when including server-side lib with jest jsdom environment #7240\r\n\r\n5.3.12 / 2018-11-13\r\n===================\r\n * docs(compatibility): don't show Mongoose 4.11 as compatible with MongoDB 3.6 re: MongoDB's official compatibility table #7238 [a-harrison](https://github.com/a-harrison)\r\n * fix(populate): use `instanceof` rather than class name for comparison #7237 [ivanseidel](https://github.com/ivanseidel)\r\n * docs(api): make options show up as a nested list #7232\r\n * fix(document): don't mark array as modified on init if doc array has default #7227\r\n * docs(api): link to bulk write result object in `bulkWrite()` docs #7225\r\n\r\n5.3.11 / 2018-11-09\r\n===================\r\n * fix(model): make parent pointers non-enumerable so they don't crash JSON.stringify() #7220\r\n * fix(document): allow saving docs with nested props with '.' using `checkKeys: false` #7144\r\n * docs(lambda): use async/await with lambda example #7019\r\n\r\n5.3.10 / 2018-11-06\r\n===================\r\n * fix(discriminator): support reusing a schema for multiple discriminators #7200\r\n * fix(cursor): handle `lean(false)` correctly with query cursors #7197\r\n * fix(document): avoid manual populate if `ref` not set #7193\r\n * fix(schema): handle schema without `.base` for browser build #7170\r\n * docs: add further reading section\r\n\r\n5.3.9 / 2018-11-02\r\n==================\r\n * fix: upgrade bson dep -> 1.1.0 to match mongodb-core #7213 [NewEraCracker](https://github.com/NewEraCracker)\r\n * docs(api): fix broken anchor link #7210 [gfranco93](https://github.com/gfranco93)\r\n * fix: don't set parent timestamps because a child has timestamps set to false #7203 #7202 [lineus](https://github.com/lineus)\r\n * fix(document): run setter only once when doing `.set()` underneath a single nested subdoc #7196\r\n * fix(document): surface errors in subdoc pre validate #7187\r\n * fix(query): run default functions after hydrating the loaded document #7182\r\n * fix(query): handle strictQuery: 'throw' with nested path correctly #7178\r\n * fix(update): update timestamps on replaceOne() #7152\r\n * docs(transactions): add example of aborting a transaction #7113\r\n\r\n5.3.8 / 2018-10-30\r\n==================\r\n * fix: bump mongodb driver -> 3.1.8 to fix connecting to +srv uri with no credentials #7191 #6881 [lineus](https://github.com/lineus)\r\n * fix(document): sets defaults correctly in child docs with projection #7159\r\n * fix(mongoose): handle setting custom type on a separate mongoose global #7158\r\n * fix: add unnecessary files to npmignore #7157\r\n * fix(model): set session when creating new subdoc #7104\r\n\r\n5.3.7 / 2018-10-26\r\n==================\r\n * fix(browser): fix buffer usage in browser build #7184 #7173 [lineus](https://github.com/lineus)\r\n * fix(document): make depopulate() work on populate virtuals and unpopulated docs #7180 #6075 [lineus](https://github.com/lineus)\r\n * fix(document): only pass properties as 2nd arg to custom validator if `propsParameter` set #7145\r\n * docs(schematypes): add note about nested paths with `type` getting converted to mixed #7143\r\n * fix(update): run update validators on nested doc when $set on an array #7135\r\n * fix(update): copy exact errors from array subdoc validation into top-level update validator error #7135\r\n\r\n5.3.6 / 2018-10-23\r\n==================\r\n * fix(cursor): fix undefined transforms error\r\n\r\n5.3.5 / 2018-10-22\r\n==================\r\n * fix(model): make sure versionKey on `replaceOne()` always gets set at top level to prevent cast errors #7138\r\n * fix(cursor): handle non-boolean lean option in `eachAsync()` #7137\r\n * fix(update): correct cast update that overwrites a map #7111\r\n * fix(schema): handle arrays of mixed correctly #7109\r\n * fix(query): use correct path when getting schema for child timestamp update #7106\r\n * fix(document): make `$session()` propagate sessions to child docs #7104\r\n * fix(document): handle user setting `schema.options.strict = 'throw'` #7103\r\n * fix(types): use core Node.js buffer prototype instead of safe-buffer because safe-buffer is broken for Node.js 4.x #7102\r\n * fix(document): handle setting single doc with refPath to document #7070\r\n * fix(model): handle array filters when updating timestamps for subdocs #7032\r\n\r\n5.3.4 / 2018-10-15\r\n==================\r\n * fix(schema): make `add()` and `remove()` return the schema instance #7131 [lineus](https://github.com/lineus)\r\n * fix(query): don't require passing model to `cast()` #7118\r\n * fix: support `useFindAndModify` as a connection-level option #7110 [lineus](https://github.com/lineus)\r\n * fix(populate): handle plus path projection with virtual populate #7050\r\n * fix(schema): allow using ObjectId type as schema path type #7049\r\n * docs(schematypes): elaborate on how schematypes relate to types #7049\r\n * docs(deprecations): add note about gridstore deprecation #6922\r\n * docs(guide): add storeSubdocValidationError option to guide #6802\r\n\r\n5.3.3 / 2018-10-12\r\n==================\r\n * fix(document): enable storing mongoose validation error in MongoDB by removing `$isValidatorError` property #7127\r\n * docs(api): clarify that aggregate triggers aggregate middleware #7126 [lineus](https://github.com/lineus)\r\n * fix(connection): handle Model.init() when an index exists on schema + autoCreate == true #7122 [jesstelford](https://github.com/jesstelford)\r\n * docs(middleware): explain how to switch between document and query hooks for `remove()` #7093\r\n * docs(api): clean up encoding issues in SchemaType.prototype.validate docs #7091\r\n * docs(schema): add schema types to api docs and update links on schematypes page #7080 #7076 [lineus](https://github.com/lineus)\r\n * docs(model): expand model constructor docs with examples and `fields` param #7077\r\n * docs(aggregate): remove incorrect description of noCursorTimeout and add description of aggregate options #7056\r\n * docs: re-add array type to API docs #7027\r\n * docs(connections): add note about `members.host` errors due to bad host names in replica set #7006\r\n\r\n5.3.2 / 2018-10-07\r\n==================\r\n * fix(query): make sure to return correct result from `orFail()` #7101 #7099 [gsandorx](https://github.com/gsandorx)\r\n * fix(schema): handle `{ timestamps: false }` correctly #7088 #7074 [lineus](https://github.com/lineus)\r\n * docs: fix markdown in options.useCreateIndex documentation #7085 [Cyral](https://github.com/Cyral)\r\n * docs(schema): correct field name in timestamps example #7082 [kizmo04](https://github.com/kizmo04)\r\n * docs(migrating_to_5): correct markdown syntax #7078 [gwuah](https://github.com/gwuah)\r\n * fix(connection): add useFindAndModify option in connect #7059 [NormanPerrin](https://github.com/NormanPerrin)\r\n * fix(document): dont mark single nested path as modified if setting to the same value #7048\r\n * fix(populate): use WeakMap to track lean populate models rather than leanPopulateSymbol #7026\r\n * fix(mongoose): avoid unhandled rejection when `mongoose.connect()` errors with a callback #6997\r\n * fix(mongoose): isolate Schema.Types between custom Mongoose instances #6933\r\n\r\n5.3.1 / 2018-10-02\r\n==================\r\n * fix(ChangeStream): expose driver's `close()` function #7068 #7022 [lineus](https://github.com/lineus)\r\n * fix(model): avoid printing warning if `_id` index is set to \"hashed\" #7053\r\n * fix(populate): handle nested populate underneath lean array correctly #7052\r\n * fix(update): make timestamps not crash on a null or undefined update #7041\r\n * docs(schematypes+validation): clean up links from validation docs to schematypes docs #7040\r\n * fix(model): apply timestamps to nested docs in bulkWrite() #7032\r\n * docs(populate): rewrite refPath docs to be simpler and more direct #7013\r\n * docs(faq): explain why destructuring imports are not supported in FAQ #7009\r\n\r\n5.3.0 / 2018-09-28\r\n==================\r\n * feat(mongoose): support `mongoose.set('debug', WritableStream)` so you can pipe debug to stderr, file, or network #7018\r\n * feat(query): add useNestedStrict option #6973 #5144 [lineus](https://github.com/lineus)\r\n * feat(query): add getPopulatedPaths helper to Query.prototype #6970 #6677 [lineus](https://github.com/lineus)\r\n * feat(model): add `createCollection()` helper to make transactions easier #6948 #6711 [Fonger](https://github.com/Fonger)\r\n * feat(schema): add ability to do `schema.add(otherSchema)` to merge hooks, virtuals, etc. #6897\r\n * feat(query): add `orFail()` helper that throws an error if no documents match `filter` #6841\r\n * feat(mongoose): support global toObject and toJSON #6815\r\n * feat(connection): add deleteModel() to remove a model from a connection #6813\r\n * feat(mongoose): add top-level mongoose.ObjectId, mongoose.Decimal128 for easier schema declarations #6760\r\n * feat(aggregate+query): support for/await/of (async iterators) #6737\r\n * feat(mongoose): add global `now()` function that you can stub for testing timestamps #6728\r\n * feat(schema): support `schema.pre(RegExp, fn)` and `schema.post(RegExp, fn)` #6680\r\n * docs(query): add better docs for the `mongooseOptions()` function #6677\r\n * feat(mongoose): add support for global strict object #6858\r\n * feat(schema+mongoose): add autoCreate option to automatically create collections #6489\r\n * feat(update): update timestamps on nested subdocs when using `$set` #4412\r\n * feat(query+schema): add query `remove` hook and ability to switch between query `remove` and document `remove` middleware #3054\r\n\r\n5.2.18 / 2018-09-27\r\n===================\r\n * docs(migrating_to_5): add note about overwriting filter properties #7030\r\n * fix(query): correctly handle `select('+c')` if c is not in schema #7017\r\n * fix(document): check path exists before checking for required #6974\r\n * fix(document): retain user-defined key order on initial set with nested docs #6944\r\n * fix(populate): handle multiple localFields + foreignFields using `localField: function() {}` syntax #5704\r\n\r\n5.2.17 / 2018-09-21\r\n===================\r\n * docs(guide): clarify that Mongoose only increments versionKey on `save()` and add a workaround for `findOneAndUpdate()` #7038\r\n * fix(model): correctly handle `createIndex` option to `ensureIndexes()` #7036 #6922 [lineus](https://github.com/lineus)\r\n * docs(migrating_to_5): add a note about changing debug output from stderr to stdout #7034 #7018 [lineus](https://github.com/lineus)\r\n * fix(query): add `setUpdate()` to allow overwriting update without changing op #7024 #7012 [lineus](https://github.com/lineus)\r\n * fix(update): find top-level version key even if there are `$` operators in the update #7003\r\n * docs(model+query): explain which operators `count()` supports that `countDocuments()` doesn't #6911\r\n\r\n5.2.16 / 2018-09-19\r\n===================\r\n * fix(index): use dynamic require only when needed for better webpack support #7014 #7010 [jaydp17](https://github.com/jaydp17)\r\n * fix(map): handle arrays of mixed maps #6995\r\n * fix(populate): leave justOne as null if populating underneath a Mixed type #6985\r\n * fix(populate): add justOne option to allow overriding any bugs with justOne #6985\r\n * fix(query): add option to skip adding timestamps to an update #6980\r\n * docs(model+schematype): improve docs about background indexes and init() #6966\r\n * fix: bump mongodb -> 3.1.6 to allow connecting to srv url without credentials #6955 #6881 [lineus](https://github.com/lineus)\r\n * fix(connection): allow specifying `useCreateIndex` at the connection level, overrides global-level #6922\r\n * fix(schema): throw a helpful error if setting `ref` to an invalid value #6915\r\n\r\n5.2.15 / 2018-09-15\r\n===================\r\n * fix(populate): handle virtual justOne correctly if it isn't set #6988\r\n * fix(populate): consistently use lowercase `model` instead of `Model` so double-populating works with existing docs #6978\r\n * fix(model): allow calling `Model.init()` again after calling `dropDatabase()` #6967\r\n * fix(populate): find correct justOne when double-populating underneath an array #6798\r\n * docs(webpack): make webpack docs use es2015 preset for correct libs and use acorn to test output is valid ES5 #6740\r\n * fix(populate): add selectPopulatedPaths option to opt out of auto-adding `populate()`-ed fields to `select()` #6546\r\n * fix(model): set timestamps on bulkWrite `insertOne` and `replaceOne` #5708\r\n\r\n5.2.14 / 2018-09-09\r\n===================\r\n * docs: fix wording on promise docs to not imply queries only return promises #6983 #6982 [lineus](https://github.com/lineus)\r\n * fix(map): throw TypeError if keys are not string #6956\r\n * fix(document): ensure you can `validate()` a child doc #6931\r\n * fix(populate): avoid cast error if refPath points to localFields with 2 different types #6870\r\n * fix(populate): handle populating already-populated paths #6839\r\n * fix(schematype): make ObjectIds handle refPaths when checking required #6714\r\n * fix(model): set timestamps on bulkWrite() updates #5708\r\n\r\n5.2.13 / 2018-09-04\r\n===================\r\n * fix(map): throw TypeError if keys are not string #6968 [Fonger](https://github.com/Fonger)\r\n * fix(update): make array op casting work with strict:false and {} #6962 #6952 [lineus](https://github.com/lineus)\r\n * fix(document): add doc.deleteOne(), doc.updateOne(), doc.replaceOne() re: deprecation warnings #6959 #6940 [lineus](https://github.com/lineus)\r\n * docs(faq+schematypes): add note about map keys needing to be strings #6957 #6956 [lineus](https://github.com/lineus)\r\n * fix(schematype): remove unused if statement #6950 #6949 [cacothi](https://github.com/cacothi)\r\n * docs: add /docs/deprecations.html for dealing with MongoDB driver deprecation warnings #6922\r\n * fix(populate): handle refPath where first element in array has no refPath #6913\r\n * fix(mongoose): allow setting useCreateIndex option after creating a model but before initial connection succeeds #6890\r\n * fix(updateValidators): ensure $pull validators always get an array #6889\r\n\r\n5.2.12 / 2018-08-30\r\n===================\r\n * fix(document): disallow setting `constructor` and `prototype` if strict mode false\r\n\r\n4.13.17 / 2018-08-30\r\n====================\r\n * fix(document): disallow setting `constructor` and `prototype` if strict mode false\r\n\r\n5.2.11 / 2018-08-30\r\n===================\r\n * fix(document): disallow setting __proto__ if strict mode false\r\n * fix(document): run document middleware on docs embedded in maps #6945 #6938 [Fonger](https://github.com/Fonger)\r\n * fix(query): make castForQuery return a CastError #6943 #6927 [lineus](https://github.com/lineus)\r\n * fix(query): use correct `this` scope when casting query with legacy 2dsphere pairs defined in schema #6939 #6937 [Fonger](https://github.com/Fonger)\r\n * fix(document): avoid crash when calling `get()` on deeply nested subdocs #6929 #6925 [jakemccloskey](https://github.com/jakemccloskey)\r\n * fix(plugins): make saveSubdocs execute child post save hooks _after_ the actual save #6926\r\n * docs: add dbName to api docs for .connect() #6923 [p722](https://github.com/p722)\r\n * fix(populate): convert to array when schema specifies array, even if doc doesn't have an array #6908\r\n * fix(populate): handle `justOne` virtual populate underneath array #6867\r\n * fix(model): dont set versionKey on upsert if it is already `$set` #5973\r\n\r\n4.13.16 / 2018-08-30\r\n====================\r\n * fix(document): disallow setting __proto__ if strict mode false\r\n * feat(error): backport adding modified paths to VersionError #6928 [freewil](https://github.com/freewil)\r\n\r\n5.2.10 / 2018-08-27\r\n===================\r\n * fix: bump mongodb driver -> 3.1.4 #6920 #6903 #6884 #6799 #6741 [Fonger](https://github.com/Fonger)\r\n * fix(model): track `session` option for `save()` as the document's `$session()` #6909\r\n * fix(query): add Query.getOptions() helper #6907 [Fonger](https://github.com/Fonger)\r\n * fix(document): ensure array atomics get cleared after save() #6900\r\n * fix(aggregate): add missing redact and readConcern helpers #6895 [Fonger](https://github.com/Fonger)\r\n * fix: add global option `mongoose.set('useCreateIndex', true)` to avoid ensureIndex deprecation warning #6890\r\n * fix(query): use `projection` option to avoid deprecation warnings #6888 #6880 [Fonger](https://github.com/Fonger)\r\n * fix(query): use `findOneAndReplace()` internally if using `overwrite: true` with `findOneAndUpdate()` #6888 [Fonger](https://github.com/Fonger)\r\n * fix(document): ensure required cache gets cleared correctly between subsequent saves #6892\r\n * fix(aggregate): support session chaining correctly #6886 #6885 [Fonger](https://github.com/Fonger)\r\n * fix(query): use `projection` instead of `fields` internally for `find()` and `findOne()` to avoid deprecation warning #6880\r\n * fix(populate): add `getters` option to opt in to calling getters on populate #6844\r\n\r\n5.2.9 / 2018-08-17\r\n==================\r\n * fix(document): correctly propagate write concern options in save() #6877 [Fonger](https://github.com/Fonger)\r\n * fix: upgrade mongodb driver -> 3.1.3 for numerous fixes #6869 #6843 #6692 #6670 [simllll](https://github.com/simllll)\r\n * fix: correct `this` scope of default functions for DocumentArray and Array #6868 #6840 [Fonger](https://github.com/Fonger)\r\n * fix(types): support casting JSON form of buffers #6866 #6863 [Fonger](https://github.com/Fonger)\r\n * fix(query): get global runValidators option correctly #6865 #6578\r\n * fix(query): add Query.prototype.setQuery() analogous to `getQuery()` #6855 #6854\r\n * docs(connections): add note about the `family` option for IPv4 vs IPv6 and add port to example URIs #6784\r\n * fix(query): get global runValidators option correctly #6578\r\n\r\n4.13.15 / 2018-08-14\r\n====================\r\n * fix(mongoose): add global `usePushEach` option for easier Mongoose 4.x + MongoDB 3.6 #6858\r\n * chore: fix flakey tests for 4.x #6853 [Fonger](https://github.com/Fonger)\r\n * feat(error): add version number to VersionError #6852 [freewil](https://github.com/freewil)\r\n\r\n5.2.8 / 2018-08-13\r\n==================\r\n * docs: update `execPopulate()` code example #6851 [WJakub](https://github.com/WJakub)\r\n * fix(document): allow passing callback to `execPopulate()` #6851\r\n * fix(populate): populate with undefined fields without error #6848 #6845 [Fonger](https://github.com/Fonger)\r\n * docs(migrating_to_5): Add `objectIdGetter` option docs #6842 [jwalton](https://github.com/jwalton)\r\n * chore: run lint in parallel and only on Node.js v10 #6836 [Fonger](https://github.com/Fonger)\r\n * fix(populate): throw helpful error if refPath excluded in query #6834\r\n * docs(migrating_to_5): add note about removing runSettersOnQuery #6832\r\n * fix: use safe-buffer to avoid buffer deprecation errors in Node.js 10 #6829 [Fonger](https://github.com/Fonger)\r\n * docs(query): fix broken links #6828 [yaynick](https://github.com/yaynick)\r\n * docs(defaults): clarify that defaults only run on undefined #6827\r\n * chore: fix flakey tests #6824 [Fonger](https://github.com/Fonger)\r\n * docs: fix custom inspect function deprecation warning in Node.js 10 #6821 [yelworc](https://github.com/yelworc)\r\n * fix(document): ensure subdocs get set to init state after save() so validators can run again #6818\r\n * fix(query): make sure embedded query casting always throws a CastError #6803\r\n * fix(document): ensure `required` function only gets called once when validating #6801\r\n * docs(connections): note that you must specify port if using `useNewUrlParser: true` #6789\r\n * fix(populate): support `options.match` in virtual populate schema definition #6787\r\n * fix(update): strip out virtuals from updates if strict: 'throw' rather than returning an error #6731\r\n\r\n5.2.7 / 2018-08-06\r\n==================\r\n * fix(model): check `expireAfterSeconds` option when diffing indexes in syncIndexes() #6820 #6819 [christopherhex](https://github.com/christopherhex)\r\n * chore: fix some common test flakes in travis #6816 [Fonger](https://github.com/Fonger)\r\n * chore: bump eslint and webpack to avoid bad versions of eslint-scope #6814\r\n * test(model): add delay to session tests to improve pass rate #6811 [Fonger](https://github.com/Fonger)\r\n * fix(model): support options in `deleteMany` #6810 [Fonger](https://github.com/Fonger)\r\n * fix(query): don't use $each when pushing an array into an array #6809 [lineus](https://github.com/lineus)\r\n * chore: bump mquery so eslint isn't a prod dependency #6800\r\n * fix(populate): correctly get schema type when calling `populate()` on already populated path #6798\r\n * fix(populate): propagate readConcern options in populate from parent query #6792 #6785 [Fonger](https://github.com/Fonger)\r\n * docs(connection): add description of useNewUrlParser option #6789\r\n * fix(query): make select('+path') a no-op if no select prop in schema #6785\r\n * docs(schematype+validation): document using function syntax for custom validator message #6772\r\n * fix(update): throw CastError if updating with `$inc: null` #6770\r\n * fix(connection): throw helpful error when calling `createConnection(undefined)` #6763\r\n\r\n5.2.6 / 2018-07-30\r\n==================\r\n * fix(document): don't double-call deeply nested custom getters when using `get()` #6779 #6637\r\n * fix(query): upgrade mquery for readConcern() helper #6777\r\n * docs(schematypes): clean up typos #6773 [sajadtorkamani](https://github.com/sajadtorkamani)\r\n * refactor(browser): fix webpack warnings #6771 #6705\r\n * fix(populate): make error reported when no `localField` specified catchable #6767\r\n * docs(connection): use correct form in createConnection example #6766 [lineus](https://github.com/lineus)\r\n * fix(connection): throw helpful error when using legacy `mongoose.connect()` syntax #6756\r\n * fix(document): handle overwriting `$session` in `execPopulate()` #6754\r\n * fix(query): propagate top-level session down to `populate()` #6754\r\n * fix(aggregate): add `session()` helper for consistency with query api #6752\r\n * fix(map): avoid infinite recursion when update overwrites a map #6750\r\n * fix(model): be consistent about passing noop callback to mongoose.model() `init()` as well as db.model() #6707\r\n\r\n5.2.5 / 2018-07-23\r\n==================\r\n * fix(boolean): expose `convertToTrue` and `convertToFalse` for custom boolean casting #6758\r\n * docs(schematypes): add note about what values are converted to booleans #6758\r\n * fix(document): fix(document): report castError when setting single nested doc to array #6753\r\n * docs: prefix mongoose.Schema call with new operator #6751 [sajadtorkamani](https://github.com/sajadtorkamani)\r\n * docs(query): add examples and links to schema writeConcern option for writeConcern helpers #6748\r\n * docs(middleware): clarify that init middleware is sync #6747\r\n * perf(model): create error rather than modifying stack for source map perf #6735\r\n * fix(model): throw helpful error when passing object to aggregate() #6732\r\n * fix(model): pass Model instance as context to applyGetters when calling getters for virtual populate #6726 [lineus](https://github.com/lineus)\r\n * fix(documentarray): remove `isNew` and `save` listeners on CastError because otherwise they never get removed #6723\r\n * docs(model+query): clarify when to use `countDocuments()` vs `estimatedDocumentCount()` #6713\r\n * fix(populate): correctly set virtual nestedSchemaPath when calling populate() multiple times #6644\r\n * docs(connections): add note about the `family` option for IPv4 vs IPv6 and add port to example URIs #6566\r\n\r\n5.2.4 / 2018-07-16\r\n==================\r\n * docs: Model.insertMany rawResult option in api docs #6724 [lineus](https://github.com/lineus)\r\n * docs: fix typo on migrating to 5 guide #6722 [iagowp](https://github.com/iagowp)\r\n * docs: update doc about keepalive #6719 #6718 [simllll](https://github.com/simllll)\r\n * fix: ensure debug mode doesn't crash with sessions #6712\r\n * fix(document): report castError when setting single nested doc to primitive value #6710\r\n * fix(connection): throw helpful error if using `new db.model(foo)(bar)` #6698\r\n * fix(model): throw readable error with better stack trace when non-cb passed to $wrapCallback() #6640\r\n\r\n5.2.3 / 2018-07-11\r\n==================\r\n * fix(populate): if a getter is defined on the localField, use it when populating #6702 #6618 [lineus](https://github.com/lineus)\r\n * docs(schema): add example of nested aliases #6671\r\n * fix(query): add `session()` function to queries to avoid positional argument mistakes #6663\r\n * docs(transactions): use new session() helper to make positional args less confusing #6663\r\n * fix(query+model+schema): add support for `writeConcern` option and writeConcern helpers #6620\r\n * docs(guide): add `writeConcern` option and re-add description for `safe` option #6620\r\n * docs(schema): fix broken API links #6619\r\n * docs(connections): add information re: socketTimeoutMS and connectTimeoutMS #4789\r\n\r\n5.2.2 / 2018-07-08\r\n==================\r\n * fix(model+query): add missing estimatedDocumentCount() function #6697\r\n * docs(faq): improve array-defaults section #6695 [lineus](https://github.com/lineus)\r\n * docs(model): fix countDocuments() docs, bad copy/paste from count() docs #6694 #6643\r\n * fix(connection): add `startSession()` helper to connection and mongoose global #6689\r\n * fix: upgrade mongodb driver -> 3.1.1 for countDocuments() fix #6688 #6666\r\n * docs(compatibility): add MongoDB 4 range #6685\r\n * fix(populate): add ability to define refPath as a function #6683 [lineus](https://github.com/lineus)\r\n * docs: add rudimentary transactions guide #6672\r\n * fix(update): make setDefaultsOnInsert handle nested subdoc updates with deeply nested defaults #6665\r\n * docs: use latest acquit-ignore to handle examples that start with acquit:ignore:start #6657\r\n * fix(validation): format `properties.message` as well as `message` #6621\r\n\r\n5.2.1 / 2018-07-03\r\n==================\r\n * fix(connection): allow setting the mongodb driver's useNewUrlParser option, default to false #6656 #6648 #6647\r\n * fix(model): only warn on custom _id index if index only has _id key #6650\r\n\r\n5.2.0 / 2018-07-02\r\n==================\r\n * feat(model): add `countDocuments()` #6643\r\n * feat(model): make ensureIndexes() fail if specifying an index on _id #6605\r\n * feat(mongoose): add `objectIdGetter` option to remove ObjectId.prototype._id #6588\r\n * feat: upgrade mongodb -> 3.1.0 for full MongoDB 4.0 support #6579\r\n * feat(query): support `runValidators` as a global option #6578\r\n * perf(schema): use WeakMap instead of array for schema stack #6503\r\n * feat(model): decorate unique discriminator indexes with partialFilterExpressions #6347\r\n * feat(model): add `syncIndexes()`, drops indexes that aren't in schema #6281\r\n * feat(document): add default getter/setter if virtual doesn't have one #6262\r\n * feat(discriminator): support discriminators on nested doc arrays #6202\r\n * feat(update): add `Query.prototype.set()` #5770\r\n\r\n5.1.8 / 2018-07-02\r\n==================\r\n * fix: don't throw TypeError if calling save() after original save() failed with push() #6638 [evanhenke](https://github.com/evanhenke)\r\n * fix(query): add explain() helper and don't hydrate explain output #6625\r\n * docs(query): fix `setOptions()` lists #6624\r\n * docs: add geojson docs #6607\r\n * fix: bump mongodb -> 3.0.11 to avoid cyclic dependency error with retryWrites #6109\r\n\r\n5.1.7 / 2018-06-26\r\n==================\r\n * docs: add npm badge to readme #6623 [VFedyk](https://github.com/VFedyk)\r\n * fix(document): don't throw parallel save error if post save hooks in parallel #6614 #6611 [lineus](https://github.com/lineus)\r\n * fix(populate): allow dynamic ref to handle >1 model getModelsMapForPopulate #6613 #6612 [jimmytsao](https://github.com/jimmytsao)\r\n * fix(document): handle `push()` on triple nested document array #6602\r\n * docs(validation): improve update validator doc headers #6577 [joeytwiddle](https://github.com/joeytwiddle)\r\n * fix(document): handle document arrays in `modifiedPaths()` with includeChildren option #5904\r\n\r\n5.1.6 / 2018-06-19\r\n==================\r\n * fix: upgrade mongodb -> 3.0.10\r\n * docs(model+document): clarify that `save()` returns `undefined` if passed a callback #6604 [lineus](https://github.com/lineus)\r\n * fix(schema): apply alias when adding fields with .add() #6593\r\n * docs: add full list of guides and streamline nav #6592\r\n * docs(model): add `projection` option to `findOneAndUpdate()` #6590 [lineus](https://github.com/lineus)\r\n * docs: support @static JSDoc declaration #6584\r\n * fix(query): use boolean casting logic for $exists #6581\r\n * fix(query): cast all $text options to correct values #6581\r\n * fix(model): add support synchronous pre hooks for `createModel` #6552 [profbiss](https://github.com/profbiss)\r\n * docs: add note about the `applyPluginsToDiscriminators` option #4965\r\n\r\n5.1.5 / 2018-06-11\r\n==================\r\n * docs(guide): rework query helper example #6575 [lineus](https://github.com/lineus)\r\n * fix(populate): handle virtual populate with embedded discriminator under single nested subdoc #6571\r\n * docs: add string option to projections that call query select #6563 [lineus](https://github.com/lineus)\r\n * style: use ES6 in collection.js #6560 [l33ds](https://github.com/l33ds)\r\n * fix(populate): add virtual ref function ability getModelsMapForPopulate #6559 #6554 [lineus](https://github.com/lineus)\r\n * docs(queries): fix link #6557 [sun1x](https://github.com/sun1x)\r\n * fix(schema): rename indexes -> getIndexes to avoid webpack duplicate declaration #6547\r\n * fix(document): support `toString()` as custom method #6538\r\n * docs: add @instance for instance methods to be more compliant with JSDoc #6516 [treble-snake](https://github.com/treble-snake)\r\n * fix(populate): avoid converting to map when using mongoose-deep-populate #6460\r\n * docs(browser): create new browser docs page #6061\r\n\r\n5.1.4 / 2018-06-04\r\n==================\r\n * docs(faq): add hr tags for parallel save error #6550 [lineus](https://github.com/lineus)\r\n * docs(connection): fix broken link #6545 [iblamefish](https://github.com/iblamefish)\r\n * fix(populate): honor subpopulate options #6539 #6528 [lineus](https://github.com/lineus)\r\n * fix(populate): allow population of refpath under array #6537 #6509 [lineus](https://github.com/lineus)\r\n * fix(query): dont treat $set the same as the other ops in update casting #6535 [lineus](https://github.com/lineus)\r\n * fix: bump async -> 2.6.1 #6534 #6505 [lineus](https://github.com/lineus)\r\n * fix: support using a function as validation error message #6530 [lucandrade](https://github.com/lucandrade)\r\n * fix(populate): propagate `lean()` down to subpopulate #6498 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * docs(lambda): add info on what happens if database does down between lambda function calls #6409\r\n * fix(update): allow updating embedded discriminator path if discriminator key is in filter #5841\r\n\r\n5.1.3 / 2018-05-28\r\n==================\r\n * fix(document): support set() on path underneath array embedded discriminator #6526\r\n * chore: update lodash and nsp dev dependencies #6514 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix(document): throw readable error when saving the same doc instance more than once in parallel #6511 #6456 #4064 [lineus](https://github.com/lineus)\r\n * fix(populate): set correct nestedSchemaPath for virtual underneath embedded discriminator #6501 #6487 [lineus](https://github.com/lineus)\r\n * docs(query): add section on promises and warning about not mixing promises and callbacks #6495\r\n * docs(connection): add concrete example of connecting to multiple hosts #6492 [lineus](https://github.com/lineus)\r\n * fix(populate): handle virtual populate under single nested doc under embedded discriminator #6488\r\n * fix(schema): collect indexes from embedded discriminators for autoIndex build #6485\r\n * fix(document): handle `doc.set()` underneath embedded discriminator #6482\r\n * fix(document): handle set() on path under embedded discriminator with object syntax #6482\r\n * fix(document): handle setting nested property to object with only non-schema properties #6436\r\n\r\n4.13.14 / 2018-05-25\r\n====================\r\n * fix(model): handle retainKeyOrder option in findOneAndUpdate() #6484\r\n\r\n5.1.2 / 2018-05-21\r\n==================\r\n * docs(guide): add missing SchemaTypes #6490 [distancesprinter](https://github.com/distancesprinter)\r\n * fix(map): make MongooseMap.toJSON return a serialized object #6486 #6478 [lineus](https://github.com/lineus)\r\n * fix(query): make CustomQuery inherit from model.Query for hooks #6483 #6455 [lineus](https://github.com/lineus)\r\n * fix(document): prevent default falses from being skipped by $__dirty #6481 #6477 [lineus](https://github.com/lineus)\r\n * docs(connection): document `useDb()` #6480\r\n * fix(model): skip redundant clone in insertMany #6479 [d1manson](https://github.com/d1manson)\r\n * fix(aggregate): let replaceRoot accept objects as well as strings #6475 #6474 [lineus](https://github.com/lineus)\r\n * docs(model): clarify `emit()` in mapReduce and how map/reduce are run #6465\r\n * fix(populate): flatten array to handle multi-level nested `refPath` #6457\r\n * fix(date): cast small numeric strings as years #6444 [AbdelrahmanHafez](https://github.com/AbdelrahmanHafez)\r\n * fix(populate): remove unmatched ids when using virtual populate on already hydrated document #6435\r\n * fix(array): use custom array class to avoid clobbered property names #6431\r\n * fix(model): handle hooks for custom methods that return promises #6385\r\n\r\n4.13.13 / 2018-05-17\r\n====================\r\n * fix(update): stop clobbering $in when casting update #6441 #6339\r\n * fix: upgrade async -> 2.6.0 re: security warning\r\n\r\n5.1.1 / 2018-05-14\r\n==================\r\n * docs(schema): add notes in api and guide about schema.methods object #6470 #6440 [lineus](https://github.com/lineus)\r\n * fix(error): add modified paths to VersionError #6464 #6433 [paglias](https://github.com/paglias)\r\n * fix(populate): only call populate with full param signature when match is not present #6458 #6451 [lineus](https://github.com/lineus)\r\n * docs: fix geoNear link in migration guide #6450 [kawache](https://github.com/kawache)\r\n * fix(discriminator): throw readable error when `create()` with a non-existent discriminator key #6434\r\n * fix(populate): add `retainNullValues` option to avoid stripping out null keys #6432\r\n * fix(populate): handle populate in embedded discriminators underneath nested paths #6411\r\n * docs(model): add change streams and ToC, make terminology more consistent #5888\r\n\r\n5.1.0 / 2018-05-10\r\n==================\r\n * feat(ObjectId): add `_id` getter so you can get a usable id whether or not the path is populated #6415 #6115\r\n * feat(model): add Model.startSession() #6362\r\n * feat(document): add doc.$session() and set session on doc after query #6362\r\n * feat: add Map type that supports arbitrary keys #6287 #681\r\n * feat: add `cloneSchemas` option to mongoose global to opt in to always cloning schemas before use #6274\r\n * feat(model): add `findOneAndDelete()` and `findByIdAndDelete()` #6164\r\n * feat(document): support `$ignore()` on single nested and array subdocs #6152\r\n * feat(document): add warning about calling `save()` on subdocs #6152\r\n * fix(model): make `save()` use `updateOne()` instead of `update()` #6031\r\n * feat(error): add version number to VersionError #5966\r\n * fix(query): allow `[]` as a value for `$in` when casting #5913\r\n * fix(document): avoid running validators on single nested paths if only a child path is modified #5885\r\n * feat(schema): print warning if method conflicts with mongoose internals #5860\r\n\r\n5.0.18 / 2018-05-09\r\n===================\r\n * fix(update): stop clobbering $in when casting update #6441 #6339 [lineus](https://github.com/lineus)\r\n * fix: upgrade mongodb driver -> 3.0.8 to fix session issue #6437 #6357 [simllll](https://github.com/simllll)\r\n * fix: upgrade bson -> 1.0.5 re: https://snyk.io/vuln/npm:bson:20180225 #6423 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix: look for `valueOf()` when casting to Decimal128 #6419 #6418 [lineus](https://github.com/lineus)\r\n * fix: populate array of objects with space separated paths #6414 [lineus](https://github.com/lineus)\r\n * test: add coverage for `mongoose.pluralize()` #6412 [FastDeath](https://github.com/FastDeath)\r\n * fix(document): avoid running default functions on init() if path has value #6410\r\n * fix(document): allow saving document with `null` id #6406\r\n * fix: prevent casting of populated docs in document.init #6390 [lineus](https://github.com/lineus)\r\n * fix: remove `toHexString()` helper that was added in 5.0.15 #6359\r\n\r\n5.0.17 / 2018-04-30\r\n===================\r\n * docs(migration): certain chars in passwords may cause connection failures #6401 [markstos](https://github.com/markstos)\r\n * fix(document): don't throw when `push()` on a nested doc array #6398\r\n * fix(model): apply hooks to custom methods if specified #6385\r\n * fix(schema): support opting out of one timestamp field but not the other for `insertMany()` #6381\r\n * fix(documentarray): handle `required: true` within documentarray definition #6364\r\n * fix(document): ensure `isNew` is set before default functions run on init #3793\r\n\r\n5.0.16 / 2018-04-23\r\n===================\r\n * docs(api): sort api methods based on their string property #6374 [lineus](https://github.com/lineus)\r\n * docs(connection): fix typo in `createCollection()` #6370 [mattc41190](https://github.com/mattc41190)\r\n * docs(document): remove vestigial reference to `numAffected` #6367 [ekulabuhov](https://github.com/ekulabuhov)\r\n * docs(schema): fix typo #6366 [dhritzkiv](https://github.com/dhritzkiv)\r\n * docs(schematypes): add missing `minlength` and `maxlength` docs #6365 [treble-snake](https://github.com/treble-snake)\r\n * docs(queries): fix formatting #6360 [treble-snake](https://github.com/treble-snake)\r\n * docs(api): add cursors to API docs #6353 #6344 [lineus](https://github.com/lineus)\r\n * docs(aggregate): remove reference to non-existent `.select()` method #6346\r\n * fix(update): handle `required` array with update validators and $pull #6341\r\n * fix(update): avoid setting __v in findOneAndUpdate if it is `$set` #5973\r\n\r\n5.0.15 / 2018-04-16\r\n===================\r\n * fix: add ability for casting from number to decimal128 #6336 #6331 [lineus](https://github.com/lineus)\r\n * docs(middleware): enumerate the ways to error out in a hook #6315\r\n * fix(document): respect schema-level depopulate option for toObject() #6313\r\n * fix: bump mongodb driver -> 3.0.6 #6310\r\n * fix(number): check for `valueOf()` function to support Decimal.js #6306 #6299 [lineus](https://github.com/lineus)\r\n * fix(query): run array setters on query if input value is an array #6277\r\n * fix(versioning): don't require matching version when using array.pull() #6190\r\n * fix(document): add `toHexString()` function so you don't need to check whether a path is populated to get an id #6115\r\n\r\n5.0.14 / 2018-04-09\r\n===================\r\n * fix(schema): clone aliases and alternative option syntax correctly\r\n * fix(query): call utils.toObject in query.count like in query.find #6325 [lineus](https://github.com/lineus)\r\n * docs(populate): add middleware examples #6320 [BorntraegerMarc](https://github.com/BorntraegerMarc)\r\n * docs(compatibility): fix dead link #6319 [lacivert](https://github.com/lacivert)\r\n * docs(api): fix markdown parsing for parameters #6318 #6314 [lineus](https://github.com/lineus)\r\n * fix(populate): handle space-delimited paths in array populate #6296 #6284 [lineus](https://github.com/lineus)\r\n * fix(populate): support basic virtual populate underneath embedded discriminators #6273\r\n\r\n5.0.13 / 2018-04-05\r\n===================\r\n * docs(faq): add middleware to faq arrow function warning #6309 [lineus](https://github.com/lineus)\r\n * docs(schema): add example to loadClass() docs #6308\r\n * docs: clean up misc typos #6304 [sfrieson](https://github.com/sfrieson)\r\n * fix(document): apply virtuals when calling `toJSON()` on a nested path #6294\r\n * refactor(connection): use `client.db()` syntax rather than double-parsing the URI #6292 #6286\r\n * docs: document new behavior of required validator for arrays #6288 [daltones](https://github.com/daltones)\r\n * fix(schema): treat set() options as user-provided options #6274\r\n * fix(schema): clone discriminators correctly #6274\r\n * fix(update): make setDefaultsOnInsert not create subdoc if only default is id #6269\r\n * docs(discriminator): clarify 3rd argument to Model.discriminator() #2596\r\n\r\n5.0.12 / 2018-03-27\r\n===================\r\n * docs(query): updating model name in query API docs #6280 [lineus](https://github.com/lineus)\r\n * docs: fix typo in tests #6275 [styler](https://github.com/styler)\r\n * fix: add missing `.hint()` to aggregate #6272 #6251 [lineus](https://github.com/lineus)\r\n * docs(api): add headers to each API docs section for easer nav #6261\r\n * fix(query): ensure hooked query functions always run on next tick for chaining #6250\r\n * fix(populate): ensure populated array not set to null if it isn't set #6245\r\n * fix(connection): set readyState to disconnected if initial connection fails #6244 #6131\r\n * docs(model): make `create()` params show up correctly in docs #6242\r\n * fix(model): make error handlers work with MongoDB server errors and `insertMany()` #6228\r\n * fix(browser): ensure browser document builds defaults for embedded arrays correctly #6175\r\n * fix(timestamps): set timestamps when using `updateOne()` and `updateMany()` #6282 [gualopezb](https://github.com/gualopezb)\r\n\r\n5.0.11 / 2018-03-19\r\n===================\r\n * fix(update): handle $pull with $in in update validators #6240\r\n * fix(query): don't convert undefined to null when casting so driver `ignoreUndefined` option works #6236\r\n * docs(middleware): add example of using async/await with middleware #6235\r\n * fix(populate): apply justOne option before `completeMany()` so it works with lean() #6234\r\n * fix(query): ensure errors in user callbacks aren't caught in init #6195 #6178\r\n * docs(connections): document dbName option for Atlas connections #6179\r\n * fix(discriminator): make child schema nested paths overwrite parent schema paths #6076\r\n\r\n4.13.12 / 2018-03-13\r\n====================\r\n * fix(document): make virtual get() return undefined instead of null if no getters #6223\r\n * docs: fix url in useMongoClient error message #6219 #6217 [lineus](https://github.com/lineus)\r\n * fix(discriminator): don't copy `discriminators` property from base schema #6122 #6064\r\n\r\n5.0.10 / 2018-03-12\r\n===================\r\n * docs(schematype): add notes re: running setters on queries #6209\r\n * docs: fix typo #6208 [kamagatos](https://github.com/kamagatos)\r\n * fix(query): only call setters once on query filter props for findOneAndUpdate and findOneAndRemove #6203\r\n * docs: elaborate on connection string changes in migration guide #6193\r\n * fix(document): skip applyDefaults if subdoc is null #6187\r\n * docs: fix schematypes docs and link to them #6176\r\n * docs(faq): add FAQs re: array defaults and casting aggregation pipelines #6184 #6176 #6170 [lineus](https://github.com/lineus)\r\n * fix(document): ensure primitive defaults are set and built-in default functions run before setters #6155\r\n * fix(query): handle single embedded embedded discriminators in castForQuery #6027\r\n\r\n5.0.9 / 2018-03-05\r\n==================\r\n * perf: bump mongodb -> 3.0.4 to fix SSL perf issue #6065\r\n\r\n5.0.8 / 2018-03-03\r\n==================\r\n * docs: remove obsolete references to `emitIndexErrors` #6186 [isaackwan](https://github.com/isaackwan)\r\n * fix(query): don't cast findOne() until exec() so setters don't run twice #6157\r\n * fix: remove document_provider.web.js file #6186\r\n * fix(discriminator): support custom discriminator model names #6100 [wentout](https://github.com/wentout)\r\n * fix: support caching calls to `useDb()` #6036 [rocketspacer](https://github.com/rocketspacer)\r\n * fix(query): add omitUndefined option so setDefaultsOnInsert can kick in on undefined #6034\r\n * fix: upgrade mongodb -> 3.0.3 for reconnectTries: 0 blocking process exit fix #6028\r\n\r\n5.0.7 / 2018-02-23\r\n==================\r\n * fix: support eachAsync options with aggregation cursor #6169 #6168 [vichle](https://github.com/vichle)\r\n * docs: fix link to MongoDB compound indexes docs #6162 [br0p0p](https://github.com/br0p0p)\r\n * docs(aggregate): use eachAsync instead of incorrect `each()` #6160 [simllll](https://github.com/simllll)\r\n * chore: fix benchmarks #6158 [pradel](https://github.com/pradel)\r\n * docs: remove dead link to old blog post #6154 [markstos](https://github.com/markstos)\r\n * fix: don't convert dates to numbers when updating mixed path #6146 #6145 [s4rbagamble](https://github.com/s4rbagamble)\r\n * feat(aggregate): add replaceRoot, count, sortByCount helpers #6142 [jakesjews](https://github.com/jakesjews)\r\n * fix(document): add includedChildren flag to modifiedPaths() #6134\r\n * perf: don't create wrapper function if no hooks specified #6126\r\n * fix(schema): allow indexes on single nested subdocs for geoJSON #6113\r\n * fix(document): allow depopulating all fields #6073\r\n * feat(mongoose): add support for `useFindAndModify` option on singleton #5616\r\n\r\n5.0.6 / 2018-02-15\r\n==================\r\n * refactor(query.castUpdate): avoid creating error until necessary #6137\r\n * docs(api): fix missing api docs #6136 [lineus](https://github.com/lineus)\r\n * fix(schema): copy virtuals when using `clone()` #6133\r\n * fix(update): avoid digging into buffers with upsert and replaceOne #6124\r\n * fix(schema): support `enum` on arrays of strings #6102\r\n * fix(update): cast `$addToSet: [1, 2]` -> `$addToSet: { $each: [1, 2] }` #6086\r\n\r\n5.0.5 / 2018-02-13\r\n==================\r\n * docs: make > show up correctly in API docs #6114\r\n * fix(query): support `where()` overwriting primitive with object #6097\r\n * fix(schematype): don't run internal `resetId` setter on queries with _id #6093\r\n * fix(discriminator): don't copy `discriminators` property from base schema #6064\r\n * fix(utils): respect `valueOf()` when merging object for update #6059\r\n * docs(validation): fix typo 'maxLength' #4720\r\n * fix(document): apply defaults after setting initial value so default functions don't see empty doc #3781\r\n\r\n5.0.4 / 2018-02-08\r\n==================\r\n * docs: add lambda guide #6107\r\n * fix(connection): add `dbName` option to work around `mongodb+srv` not supporting db name in URI #6106\r\n * fix(schematype): fix regexp typo in ObjectId #6098 [JoshuaWise](https://github.com/JoshuaWise)\r\n * perf(document): re-use the modifiedPaths list #6092 [tarun1793](https://github.com/tarun1793)\r\n * fix: use console.info() instead of console.error() for debug output #6088 [yuristsepaniuk](https://github.com/yuristsepaniuk)\r\n * docs(validation): clean up runValidators and isAsync options docs for 5.x #6083\r\n * docs(model): use array instead of spread consistently for aggregate() #6070\r\n * fix(schema): make aliases handle mongoose-lean-virtuals #6069\r\n * docs(layout): add link to subdocs guide #6056\r\n * fix(query): make strictQuery: true strip out fields that aren't in the schema #6032\r\n * docs(guide): add notes for `strictQuery` option #6032\r\n\r\n4.13.11 / 2018-02-07\r\n====================\r\n * docs: fix links in 4.x docs #6081\r\n * chore: add release script that uses --tag for npm publish for 4.x releases #6063\r\n\r\n5.0.3 / 2018-01-31\r\n==================\r\n * fix: consistently use process.nextTick() to avoid sinon.useFakeTimers() causing ops to hang #6074\r\n * docs(aggregate): fix typo #6072 [adursun](https://github.com/adursun)\r\n * chore: add return type to `mongoose.model()` docs [bryant1410](https://github.com/bryant1410)\r\n * fix(document): depopulate push()-ed docs when saving #6048\r\n * fix: upgrade mongodb -> 3.0.2 #6019\r\n\r\n5.0.2 / 2018-01-28\r\n==================\r\n * fix(schema): do not overwrite default values in schema when nested timestamps are provided #6024 [cdeveas](https://github.com/cdeveas)\r\n * docs: fix syntax highlighting in models.jade, schematypes.jade, subdocs.jade #6058 [lineus](https://github.com/lineus)\r\n * fix: use lazy loading so we can build mongoose with webpack #5993 #5842\r\n * docs(connections): clarify multi-mongos with useMongoClient for 4.x docs #5984\r\n * fix(populate): handle populating embedded discriminator paths #5970\r\n\r\n4.13.10 / 2018-01-28\r\n====================\r\n * docs(model+query): add lean() option to Model helpers #5996 [aguyinmontreal](https://github.com/aguyinmontreal)\r\n * fix: use lazy loading so we can build mongoose with webpack #5993 #5842\r\n * docs(connections): clarify multi-mongos with useMongoClient for 4.x docs #5984\r\n * fix(populate): handle populating embedded discriminator paths #5970\r\n * docs(query+aggregate): add more detail re: maxTimeMS #4066\r\n\r\n5.0.1 / 2018-01-19\r\n==================\r\n * fix(document): make validate() not resolve to document #6014\r\n * fix(model): make save() not return DocumentNotFoundError if using fire-and-forget writes #6012\r\n * fix(aggregate): make options() work as advertised #6011 [spederiva](https://github.com/spederiva)\r\n * docs(queries): fix code samples #6008\r\n\r\n5.0.0 / 2018-01-17\r\n==================\r\n * test: refactor tests to use start fewer connections #5985 [fenanquin](https://github.com/fenanquin)\r\n * feat: add global bufferCommands option #5879\r\n * docs: new docs site and build system #5976\r\n * test: increase timeout on slow test cases #5968 [fenanquin](https://github.com/fenanquin)\r\n * fix: avoid casting out array filter elements #5965\r\n * feat: add Model.watch() wrapper #5964\r\n * chore: replace istanbul with nyc #5962 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n\r\n4.13.9 / 2018-01-07\r\n===================\r\n * chore: update marked (dev dependency) re: security vulnerability #5951 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix: upgrade mongodb -> 2.2.34 for ipv6 and autoReconnect fixes #5794 #5760\r\n * docs: use useMongooseAggCursor for aggregate docs #2955\r\n\r\n5.0.0-rc2 / 2018-01-04\r\n======================\r\n * fix: add cleaner warning about no longer needing `useMongoClient` in 5.x #5961\r\n * chore: update acquit -> 0.5.1 for minor security patch #5961 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * docs: add docs for mongoose 4.x at http://mongoosejs.com/docs/4.x #5959\r\n * docs: add link to migration guide #5957\r\n * chore: update eslint to version 4.14.0 #5955 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * chore: update mocha to version 4.1.0 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n\r\n5.0.0-rc1 / 2018-01-02\r\n======================\r\n * fix(index): use pluralize correctly for `mongoose.model()` #5958\r\n * fix: make mquery use native promises by default #5945\r\n * fix(connection): ensure 'joined' and 'left' events get bubbled up #5944\r\n\r\n5.0.0-rc0 / 2017-12-28\r\n======================\r\n * BREAKING CHANGE: always use mongoose aggregation cursor when using `.aggregate().cursor()` #5941\r\n * BREAKING CHANGE: attach query middleware when compiling model #5939\r\n * BREAKING CHANGE: `emitIndexErrors` is on by default, failing index build will throw uncaught error if not handled #5910\r\n * BREAKING CHANGE: remove precompiled browser bundle #5895\r\n * feat: add `mongoose.pluralize()` function #5877\r\n * BREAKING CHANGE: remove `passRawResult` option for `findOneAndUpdate`, use `rawResult` #5869\r\n * BREAKING CHANGE: implicit async validators (based on number of function args) are removed, return a promise instead #5824\r\n * BREAKING CHANGE: fail fast if user sets a unique index on `_id` #5820 [varunjayaraman](https://github.com/varunjayaraman)\r\n * BREAKING CHANGE: mapReduce resolves to an object with 2 keys rather than 2 separate args #5816\r\n * BREAKING CHANGE: `mongoose.connect()` returns a promise, removed MongooseThenable #5796\r\n * BREAKING CHANGE: query stream removed, use `cursor()` instead #5795\r\n * BREAKING CHANGE: connection `open()` and `openSet()` removed, use `openUri()` instead #5795\r\n * BREAKING CHANGE: use MongoDB driver 3.0.0, drop support for MongoDB server < 3.0.0 #5791 #4740\r\n * BREAKING CHANGE: remove support for `$pushAll`, remove `usePushEach` option #5670\r\n * BREAKING CHANGE: make date casting use native Date #5395 [varunjayaraman](https://github.com/varunjayaraman)\r\n * BREAKING CHANGE: remove `runSettersOnQuery`, always run setters on query #5340\r\n * BREAKING CHANGE: array of length 0 now satisfies `required: true` for arays #5139 [wlingke](https://github.com/wlingke)\r\n * BREAKING CHANGE: remove `saveErrorIfNotFound`, always error out if `save()` did not update a document #4973\r\n * BREAKING CHANGE: don't execute getters in reverse order #4835\r\n * BREAKING CHANGE: make boolean casting more strict #4245\r\n * BREAKING CHANGE: `toObject()` and `toJSON()` option parameter merges with defaults rather than overwriting #4131\r\n * feat: allow setting `default` on `_id` #4069\r\n * BREAKING CHANGE: `deleteX()` and `remove()` promise resolves to the write object result #4013\r\n * feat: support returning a promise from middleware functions #3779\r\n * BREAKING CHANGE: don't return a promise if callback specified #3670\r\n * BREAKING CHANGE: only cast `update()`, `updateX()`, `replaceOne()`, `remove()`, `deleteX()` in exec #3529\r\n * BREAKING CHANGE: sync errors in middleware functions are now handled #3483\r\n * BREAKING CHANGE: post hooks get flow control #3232\r\n * BREAKING CHANGE: deduplicate hooks when merging discriminator schema #2945\r\n * BREAKING CHANGE: use native promises by default, remove support for mpromise #2917\r\n * BREAKING CHANGE: remove `retainKeyOrder`, always use forward order when iterating through objects #2749\r\n * BREAKING CHANGE: `aggregate()` no longer accepts a spread #2716\r\n\r\n4.13.8 / 2017-12-27\r\n===================\r\n * docs(guide): use more up-to-date syntax for autoIndex example #5933\r\n * docs: fix grammar #5927 [abagh0703](https://github.com/abagh0703)\r\n * fix: propagate lean options to child schemas #5914\r\n * fix(populate): use correct model with discriminators + nested populate #5858\r\n\r\n4.13.7 / 2017-12-11\r\n===================\r\n * docs(schematypes): fix typo #5889 [gokaygurcan](https://github.com/gokaygurcan)\r\n * fix(cursor): handle `reject(null)` with eachAsync callback #5875 #5874 [ZacharyRSmith](https://github.com/ZacharyRSmith)\r\n * fix: disallow setting `mongoose.connection` to invalid values #5871 [jinasonlin](https://github.com/jinasonlin)\r\n * docs(middleware): suggest using `return next()` to stop middleware execution #5866\r\n * docs(connection): improve connection string query param docs #5864\r\n * fix(document): run validate hooks on array subdocs even if not directly modified #5861\r\n * fix(discriminator): don't treat $meta as defining projection when querying #5859\r\n * fix(types): handle Decimal128 when using bson-ext on server side #5850\r\n * fix(document): ensure projection with only $slice isn't treated as inclusive for discriminators #4991\r\n * fix(model): throw error when passing non-object to create() #2037\r\n\r\n4.13.6 / 2017-12-02\r\n===================\r\n * fix(schema): support strictBool option in schema #5856 [ekulabuhov](https://github.com/ekulabuhov)\r\n * fix(update): make upsert option consistently handle truthy values, not just booleans, for updateOne() #5839\r\n * refactor: remove unnecessary constructor check #2057\r\n * docs(query): correct function signature for .mod() helper #1806\r\n * fix(query): report ObjectParameterError when passing non-object as filter to find() and findOne() #1698\r\n\r\n4.13.5 / 2017-11-24\r\n===================\r\n * fix(model): handle update cast errors correctly with bulkWrite #5845 [Michael77](https://github.com/Michael77)\r\n * docs: add link to bufferCommands option #5844 [ralphite](https://github.com/ralphite)\r\n * fix(model): allow virtual ref function to return arrays #5834 [brunohcastro](https://github.com/brunohcastro)\r\n * fix(query): don't throw uncaught error if query filter too big #5812\r\n * fix(document): if setting unselected nested path, don't overwrite nested path #5800\r\n * fix(document): support calling `populate()` on nested document props #5703\r\n * fix: add `strictBool` option for schema type boolean #5344 #5211 #4245\r\n * docs(faq): add faq re: typeKey #1886\r\n * docs(query): add more detailed docs re: options #1702\r\n\r\n4.13.4 / 2017-11-17\r\n===================\r\n * fix(aggregate): add chainable .option() helper for setting arbitrary options #5829\r\n * fix(aggregate): add `.pipeline()` helper to get the current pipeline #5825\r\n * docs: grammar fixes for `unique` FAQ #5823 [mfluehr](https://github.com/mfluehr)\r\n * chore: add node 9 to travis #5822 [superheri](https://github.com/superheri)\r\n * fix(model): fix infinite recursion with recursive embedded discriminators #5821 [Faibk](https://github.com/Faibk)\r\n\r\n4.13.3 / 2017-11-15\r\n===================\r\n * chore: add node 8 to travis #5818 [superheri](https://github.com/superheri)\r\n * fix(document): don't apply transforms to nested docs when updating already saved doc #5807\r\n\r\n4.13.2 / 2017-11-11\r\n===================\r\n * feat(buffer): add support for subtype prop #5530\r\n\r\n4.13.1 / 2017-11-08\r\n===================\r\n * fix: accept multiple paths or array of paths to depopulate #5798 #5797 [adamreisnz](https://github.com/adamreisnz)\r\n * fix(document): pass default array as actual array rather than taking first element #5780\r\n * fix(model): increment version when $set-ing it in a save() that requires a version bump #5779\r\n * fix(query): don't explicitly project in discriminator key if user projected in parent path #5775 #5754\r\n * fix(model): cast query option to geoNear() #5765\r\n * fix(query): don't treat projection with just $slice as inclusive #5737\r\n * fix(discriminator): defer applying embedded discriminator hooks until top-level model is compiled #5706\r\n * docs(discriminator): add warning to always attach hooks before calling discriminator() #5706\r\n\r\n4.13.0 / 2017-11-02\r\n===================\r\n * feat(aggregate): add $addFields helper #5740 [AyushG3112](https://github.com/AyushG3112)\r\n * feat(connection): add connection-level bufferCommands #5720\r\n * feat(connection): add createCollection() helper #5712\r\n * feat(populate): support setting localField and foreignField to functions #5704 #5602\r\n * feat(query): add multipleCastError option for aggregating cast errors when casting update #5609\r\n * feat(populate): allow passing a function to virtual ref #5602\r\n * feat(schema): add excludeIndexes option to optionally prevent collecting indexes from nested schemas #5575\r\n * feat(model): report validation errors from `insertMany()` if using `ordered: false` and `rawResult: true` #5337\r\n * feat(aggregate): add pre/post aggregate middleware #5251\r\n * feat(schema): allow using `set` as a schema path #1939\r\n\r\n4.12.6 / 2017-11-01\r\n===================\r\n * fix(schema): make clone() copy query helpers correctly #5752\r\n * fix: undeprecate `ensureIndex()` and use it by default #3280\r\n\r\n4.12.5 / 2017-10-29\r\n===================\r\n * fix(query): correctly handle `$in` and required for $pull and update validators #5744\r\n * feat(aggegate): add $addFields pipeline operator #5740 [AyushG3112](https://github.com/AyushG3112)\r\n * fix(document): catch sync errors in document pre hooks and report as error #5738\r\n * fix(populate): handle slice projections correctly when automatically selecting populated fields #5737\r\n * fix(discriminator): fix hooks for embedded discriminators #5706 [wlingke](https://github.com/wlingke)\r\n * fix(model): throw sane error when customer calls `mongoose.Model()` over `mongoose.model()` #2005\r\n\r\n4.12.4 / 2017-10-21\r\n===================\r\n * test(plugins): add coverage for idGetter with id as a schema property #5713 [wlingke](https://github.com/wlingke)\r\n * fix(model): avoid copying recursive $$context object when creating discriminator after querying #5721\r\n * fix(connection): ensure connection promise helpers are removed before emitting 'connected' #5714\r\n * docs(schema): add notes about runSettersOnQuery to schema setters #5705\r\n * fix(collection): ensure queued operations run on the next tick #5562\r\n\r\n4.12.3 / 2017-10-16\r\n===================\r\n * fix(connection): emit 'reconnect' event as well as 'reconnected' for consistency with driver #5719\r\n * fix: correctly bubble up left/joined events for replica set #5718\r\n * fix(connection): allow passing in `autoIndex` as top-level option rather than requiring `config.autoIndex` #5711\r\n * docs(connection): improve docs regarding reconnectTries, autoReconnect, and bufferMaxEntries #5711\r\n * fix(query): handle null with addToSet/push/pull/pullAll update validators #5710\r\n * fix(model): handle setDefaultsOnInsert option for bulkWrite updateOne and updateMany #5708\r\n * fix(query): avoid infinite recursion edge case when cloning a buffer #5702\r\n\r\n4.12.2 / 2017-10-14\r\n===================\r\n * docs(faq): add FAQ about using arrow functions for getters/setters, virtuals, and methods #5700\r\n * docs(schema): document the childSchemas property and add to public API #5695\r\n * fix(query): don't project in populated field if parent field is already projected in #5669\r\n * fix: bump mongodb -> 2.2.33 for issue with autoReconnect #4513\r\n\r\n4.12.1 / 2017-10-08\r\n===================\r\n * fix(document): create new doc when setting single nested, no more set() on copy of priorVal #5693\r\n * fix(model): recursively call applyMethods on child schemas for global plugins #5690\r\n * docs: fix bad promise lib example on home page #5686\r\n * fix(query): handle false when checking for inclusive/exclusive projection #5685\r\n * fix(discriminator): allow reusing child schema #5684\r\n * fix: make addToSet() on empty array with subdoc trigger manual population #5504\r\n\r\n4.12.0 / 2017-10-02\r\n===================\r\n * docs(validation): add docs coverage for ValidatorError.reason #5681\r\n * feat(discriminator): always add discriminatorKey to base schema to allow updating #5613\r\n * fix(document): make nested docs no longer inherit parent doc's schema props #5586 #5546 #5470\r\n * feat(query): run update validators on $pull and $pullAll #5555\r\n * feat(query): add .error() helper to query to error out in pre hooks #5520\r\n * feat(connection): add dropCollection() helper #5393\r\n * feat(schema): add schema-level collation option #5295\r\n * feat(types): add `discriminator()` function for single nested subdocs #5244\r\n * feat(document): add $isDeleted() getter/setter for better support for soft deletes #4428\r\n * feat(connection): bubble up reconnectFailed event when driver gives up reconnecting #4027\r\n * fix(query): report error if passing array or other non-object as filter to update query #3677\r\n * fix(collection): use createIndex() instead of deprecated ensureIndex() #3280\r\n\r\n4.11.14 / 2017-09-30\r\n====================\r\n * chore: add nsp check to the CI build #5679 [hairyhenderson](https://github.com/hairyhenderson)\r\n * fix: bump mquery because of security issue with debug package #5677 #5675 [jonathanprl](https://github.com/jonathanprl)\r\n * fix(populate): automatically select() populated()-ed fields #5669\r\n * fix(connection): make force close work as expected #5664\r\n * fix(document): treat $elemMatch as inclusive projection #5661\r\n * docs(model/query): clarify which functions fire which middleware #5654\r\n * fix(model): make `init()` public and return a promise that resolves when indexes are done building #5563\r\n\r\n4.11.13 / 2017-09-24\r\n====================\r\n * fix(query): correctly run replaceOne with update validators #5665 [sime1](https://github.com/sime1)\r\n * fix(schema): replace mistype in setupTimestamp method #5656 [zipp3r](https://github.com/zipp3r)\r\n * fix(query): avoid throwing cast error for strict: throw with nested id in query #5640\r\n * fix(model): ensure class gets combined schema when using class syntax with discriminators #5635\r\n * fix(document): handle setting doc array to array of top-level docs #5632\r\n * fix(model): handle casting findOneAndUpdate() with overwrite and upsert #5631\r\n * fix(update): correctly handle $ in updates #5628\r\n * fix(types): handle manual population consistently for unshift() and splice() #5504\r\n\r\n4.11.12 / 2017-09-18\r\n====================\r\n * docs(model): asterisk should not render as markdown bullet #5644 [timkinnane](https://github.com/timkinnane)\r\n * docs: use useMongoClient in connection example #5627 [GabrielNicolasAvellaneda](https://github.com/GabrielNicolasAvellaneda)\r\n * fix(connection): call callback when initial connection failed #5626\r\n * fix(query): apply select correctly if a given nested schema is used for 2 different paths #5603\r\n * fix(document): add graceful fallback for setting a doc array value and `pull()`-ing a doc #3511\r\n\r\n4.11.11 / 2017-09-10\r\n====================\r\n * fix(connection): properly set readyState in response to driver 'close' and 'reconnect' events #5604\r\n * fix(document): ensure single embedded doc setters only get called once, with correct value #5601\r\n * fix(timestamps): allow enabling updatedAt without createdAt #5598\r\n * test: improve unique validator test by making create run before ensureIndex #5595 #5562\r\n * fix(query): ensure find callback only gets called once when post init hook throws error #5592\r\n\r\n4.11.10 / 2017-09-03\r\n====================\r\n * docs: add KeenIO tracking #5612\r\n * fix(schema): ensure validators declared with `.validate()` get copied with clone() #5607\r\n * fix: remove unnecessary jest warning #5480\r\n * fix(discriminator): prevent implicit discriminator schema id from clobbering base schema custom id #5591\r\n * fix(schema): hide schema objectid warning for non-hex strings of length 24 #5587\r\n * docs(populate): use story schema defined key author instead of creator #5578 [dmric](https://github.com/dmric)\r\n * docs(document): describe usage of `.set()` #5576\r\n * fix(document): ensure correct scope in single nested validators #5569\r\n * fix(populate): don't mark path as populated until populate() is done #5564\r\n * fix(document): make push()-ing a doc onto an empty array act as manual population #5504\r\n * fix(connection): emit timeout event on socket timeout #4513\r\n\r\n4.11.9 / 2017-08-27\r\n===================\r\n * fix(error): avoid using arguments.callee because that breaks strict mode #5572\r\n * docs(schematypes): fix spacing #5567\r\n * fix(query): enforce binary subtype always propagates to mongodb #5551\r\n * fix(query): only skip castForQuery for mongoose arrays #5536\r\n * fix(browser): rely on browser entrypoint to decide whether to use BrowserDocument or NodeDocument #5480\r\n\r\n4.11.8 / 2017-08-23\r\n===================\r\n * feat: add warning about using schema ObjectId as type ObjectId #5571 [efkan](https://github.com/efkan)\r\n * fix(schema): allow setting `id` property after schema was created #5570 #5548\r\n * docs(populate): remove confusing _ from populate docs #5560\r\n * fix(connection): expose parsed uri fields (host, port, dbname) when using openUri() #5556\r\n * docs: added type boolean to options documentation #5547 [ndabAP](https://github.com/ndabAP)\r\n * test: add test coverage for stopping/starting server #5524\r\n * fix(aggregate): pull read preference from schema by default #5522\r\n\r\n4.11.7 / 2017-08-14\r\n===================\r\n * fix: correct properties when calling toJSON() on populated virtual #5544 #5442 [davidwu226](https://github.com/davidwu226)\r\n * docs: fix spelling #5535 [et](https://github.com/et)\r\n * fix(error): always set name before stack #5533\r\n * fix: add warning about running jest in jsdom environment #5532 #5513 #4943\r\n * fix(document): ensure overwriting a doc array cleans out individual docs #5523\r\n * fix(schema): handle creating arrays of single nested using type key #5521\r\n * fix: upgrade mongodb -> 2.2.31 to support user/pass options #5419\r\n\r\n4.11.6 / 2017-08-07\r\n===================\r\n * fix: limiting number of async operations per time in insertMany #5529 [andresattler](https://github.com/andresattler)\r\n * fix: upgrade mongodb -> 2.2.30 #5517\r\n * fix(browserDocument): prevent stack overflow caused by double-wrapping embedded doc save() in jest #5513\r\n * fix(document): clear single nested doc when setting to empty object #5506\r\n * fix(connection): emit reconnected and disconnected events correctly with useMongoClient #5498\r\n * fix(populate): ensure nested virtual populate gets set even if top-level property is null #5431\r\n\r\n4.11.5 / 2017-07-30\r\n===================\r\n * docs: fix link to $lookup #5516 [TalhaAwan](https://github.com/TalhaAwan)\r\n * fix: better parallelization for eachAsync #5502 [lchenay](https://github.com/lchenay)\r\n * docs(document): copy docs for save from model to doc #5493\r\n * fix(document): handle dotted virtuals in toJSON output #5473\r\n * fix(populate): restore user-provided limit after mutating so cursor() works with populate limit #5468\r\n * fix(query): don't throw StrictModeError if geo query with upsert #5467\r\n * fix(populate): propagate readPreference from query to populate queries by default #5460\r\n * docs: warn not to use arrow functions for statics and methods #5458\r\n * fix(query): iterate over all condition keys for setDefaultsOnInsert #5455\r\n * docs(connection): clarify server/replset/mongos option deprecation with useMongoClient #5442\r\n\r\n4.11.4 / 2017-07-23\r\n===================\r\n * fix: handle next() errors in `eachAsync()` #5486 [lchenay](https://github.com/lchenay)\r\n * fix(schema): propagate runSettersOnQuery option to implicitly created schemas #5479 [https://github.com/ValYouW]\r\n * fix(query): run castConditions() correctly in update ops #5477\r\n * fix(query): ensure castConditions called for findOne and findOneAnd* #5477\r\n * docs: clarify relationship between $lookup and populate #5475 [TalhaAwan](https://github.com/TalhaAwan)\r\n * test: add coverage for arrays of arrays [zbjornson](https://github.com/zbjornson)\r\n * fix(middleware): ensure that error handlers for save get doc as 2nd param #5466\r\n * fix: handle strict: false correctly #5454 #5453 [wookieb](https://github.com/wookieb)\r\n * fix(query): apply schema excluded paths if only projection is a $slice #5450\r\n * fix(query): correct discriminator handling for schema `select: false` fields in schema #5448\r\n * fix(cursor): call next() in series when parallel option used #5446\r\n * chore: load bundled driver first to avoid packaging problem #5443 [prototypeme](https://github.com/prototypeme)\r\n * fix(query): defer condition casting until final exec #5434\r\n * fix(aggregate): don't rely on mongodb aggregate to put a cursor in the callback #5394\r\n * docs(aggregate): add useMongooseAggCursor docs #5394\r\n * docs(middleware): clarify context for document, query, and model middleware #5381\r\n\r\n4.11.3 / 2017-07-14\r\n===================\r\n * fix(connection): remove .then() before resolving to prevent infinite recursion #5471\r\n\r\n4.11.2 / 2017-07-13\r\n===================\r\n * docs: fix comment typo in connect example #5435 [ConnorMcF](https://github.com/ConnorMcF)\r\n * fix(update): correctly cast document array in update validators with exec() #5430\r\n * fix(connection): handle autoIndex with useMongoClient #5423\r\n * fix(schema): handle `type: [Array]` in schemas #5416\r\n * fix(timestamps): if overwrite is set and there's a $set, use $set instead of top-level update #5413\r\n * fix(document): don't double-validate deeply nested doc array elements #5411\r\n * fix(schematype): clone default objects so default not shared across object instances unless `shared` specified #5407\r\n * fix(document): reset down the nested subdocs when resetting parent doc #5406\r\n * fix: don't pass error arg twice to error handlers #5405\r\n * fix(connection): make openUri() return connection decorated with then() and catch() #5404\r\n * fix: enforce $set on an array must be an array #5403\r\n * fix(document): don't crash if calling `validateSync()` after overwriting doc array index #5389\r\n * fix(discriminator): ensure discriminator key doesn't count as user-selected field for projection #4629\r\n\r\n4.11.1 / 2017-07-02\r\n===================\r\n* docs: populate virtuals fix justOne description #5427 [fredericosilva](https://github.com/fredericosilva)\r\n * fix(connection): make sure to call onOpen in openUri() #5404\r\n * docs(query): justOne is actually single, and it default to false #5402 [zbjornson](https://github.com/zbjornson)\r\n * docs: fix small typo in lib/schema.js #5398 #5396 [pjo336](https://github.com/pjo336)\r\n * fix: emit remove on single nested subdocs when removing parent #5388\r\n * fix(update): handle update with defaults and overwrite but no update validators #5384\r\n * fix(populate): handle undefined refPath values in middle of array #5377\r\n * fix(document): ensure consistent setter context for single nested #5363\r\n * fix(query): support runSettersOnQuery as query option #5350\r\n\r\n4.11.0 / 2017-06-25\r\n===================\r\n * feat(query): execute setters with query as context for `runSettersOnQuery` #5339\r\n * feat(model): add translateAliases function #5338 [rocketspacer](https://github.com/rocketspacer)\r\n * feat(connection): add `useMongoClient` and `openUri` functions, deprecate current connect logic #5304\r\n * refactor(schema): make id virtual not access doc internals #5279\r\n * refactor: handle non-boolean lean #5279\r\n * feat(cursor): add addCursorFlag() support to query and agg cursors #4814\r\n * feat(cursor): add parallel option to eachAsync #4244\r\n * feat(schema): allow setting custom error constructor for custom validators #4009\r\n\r\n4.10.8 / 2017-06-21\r\n===================\r\n * docs: fix small formatting typo on schematypes #5374 [gianpaj](https://github.com/gianpaj)\r\n * fix(model): allow null as an _id #5370\r\n * fix(populate): don't throw async uncaught exception if model not found in populate #5364\r\n * fix: correctly cast decimals in update #5361\r\n * fix(error): don't use custom getter for ValidationError message #5359\r\n * fix(query): handle runSettersOnQuery in built-in _id setter #5351\r\n * fix(document): ensure consistent context for nested doc custom validators #5347\r\n\r\n4.10.7 / 2017-06-18\r\n===================\r\n * docs(validation): show overriding custom validator error with 2nd cb arg #5358\r\n * fix: `parseOption` mutates user passed option map #5357 [igwejk](https://github.com/igwejk)\r\n * docs: fix guide.jade typo #5356 [CalebAnderson2014](https://github.com/CalebAnderson2014)\r\n * fix(populate): don't set populate virtual to ids when match fails #5336\r\n * fix(query): callback with cast error if remove and delete* args have a cast error #5323\r\n\r\n4.10.6 / 2017-06-12\r\n===================\r\n * fix(cursor): handle custom model option for populate #5334\r\n * fix(populate): handle empty virtual populate with Model.populate #5331\r\n * fix(model): make ensureIndexes() run with autoIndex: false unless called internally #5328 #5324 #5317\r\n * fix: wait for all connections to close before resolving disconnect() promise #5316\r\n * fix(document): handle setting populated path with custom typeKey in schema #5313\r\n * fix(error): add toJSON helper to ValidationError so `message` shows up with JSON.stringify #5309\r\n * feat: add `getPromiseConstructor()` to prevent need for `mongoose.Promise.ES6` #5305\r\n * fix(document): handle conditional required with undefined props #5296\r\n * fix(model): clone options before inserting in save() #5294\r\n * docs(populate): clarify that multiple populate() calls on same path overwrite #5274\r\n\r\n4.10.5 / 2017-06-06\r\n===================\r\n * chore: improve contrib guide for building docs #5312\r\n * fix(populate): handle init-ing nested virtuals properly #5311\r\n * fix(update): report update validator error if required path under single nested doc not set\r\n * fix(schema): remove default validate pre hook that was causing issues with jest #4943\r\n\r\n4.10.4 / 2017-05-29\r\n===================\r\n * chore: dont store test data in same directory #5303\r\n * chore: add data dirs to npmignore #5301 [Starfox64](https://github.com/Starfox64)\r\n * docs(query): add docs about runSettersOnQuery #5300\r\n\r\n4.10.3 / 2017-05-27\r\n===================\r\n * docs: correct inconsistent references to updateOne and replaceOne #5297 [dhritzkiv](https://github.com/dhritzkiv)\r\n * docs: fix dropdowns in docs #5292 [nathanallen](https://github.com/nathanallen)\r\n * docs: add description of alias option #5287\r\n * fix(document): prevent infinite loop if validating nested array #5282\r\n * fix(schema): correctly handle ref ObjectIds from different mongoose libs #5259\r\n * fix(schema): load child class methods after base class methods to allow override #5227\r\n\r\n4.10.2 / 2017-05-22\r\n===================\r\n * fix: bump ms -> 2.0.0 and mquery -> 2.3.1 for minor security vulnerability #5275\r\n\r\n4.10.1 / 2017-05-21\r\n===================\r\n * fix(aggregate): handle sorting by text score correctly #5258\r\n * fix(populate): handle doc.populate() with virtuals #5240\r\n * fix(schema): enforce that `_id` is never null #5236\r\n\r\n4.10.0 / 2017-05-18\r\n===================\r\n * fix(schema): update clone method to include indexes #5268 [clozanosanchez](https://github.com/clozanosanchez)\r\n * feat(schema): support aliases #5184 [rocketspacer](https://github.com/rocketspacer)\r\n * feat(aggregate): add mongoose-specific aggregation cursor option #5145\r\n * refactor(model): make sharding into a plugin instead of core #5105\r\n * fix(document): make nested doc mongoose internals not enumerable again #5078\r\n * feat(model): pass params to pre hooks #5064\r\n * feat(timestamps): support already defined timestamp paths in schema #4868\r\n * feat(query): add runSettersOnQuery option #4569\r\n * fix(query): add strictQuery option that throws when not querying on field not in schema #4136\r\n * fix(update): more complete handling for overwrite option with update validators #3556\r\n * feat: support `unique: true` in arrays via the mongoose-unique-array plugin #3347\r\n * fix(model): always emit 'index', even if no indexes #3347\r\n * fix(schema): set unique indexes on primitive arrays #3347\r\n * feat(validation): include failed paths in error message and inspect output #3064 #2135\r\n * fix(model): return saved docs when create() fails #2190\r\n\r\n4.9.10 / 2017-05-17\r\n===================\r\n * fix(connection): ensure callback arg to openSet() is handled properly #5249\r\n * docs: remove dead plugins repo and add content links #5247\r\n * fix(model): skip index build if connecting after model init and autoIndex false #5176\r\n\r\n4.9.9 / 2017-05-13\r\n==================\r\n * docs: correct value for Query#regex() #5230\r\n * fix(connection): don't throw if .catch() on open() promise #5229\r\n * fix(schema): allow update with $currentDate for updatedAt to succeed #5222\r\n * fix(model): versioning doesn't fail if version key undefined #5221 [basileos](https://github.com/basileos)\r\n * fix(document): don't emit model error if callback specified for consistency with docs #5216\r\n * fix(document): handle errors in subdoc pre validate #5215\r\n\r\n4.9.8 / 2017-05-07\r\n==================\r\n * docs(subdocs): rewrite subdocs guide #5217\r\n * fix(document): avoid circular JSON if error in doc array under single nested subdoc #5208\r\n * fix(document): set intermediate empty objects for deeply nested undefined paths before path itself #5206\r\n * fix(schema): throw error if first param to schema.plugin() is not a function #5201\r\n * perf(document): major speedup in validating subdocs (50x in some cases) #5191\r\n\r\n4.9.7 / 2017-04-30\r\n==================\r\n * docs: fix typo #5204 [phutchins](https://github.com/phutchins)\r\n * fix(schema): ensure correct path for deeply nested schema indexes #5199\r\n * fix(schema): make remove a reserved name #5197\r\n * fix(model): handle Decimal type in insertMany correctly #5190\r\n * fix: upgrade kareem to handle async pre hooks correctly #5188\r\n * docs: add details about unique not being a validator #5179\r\n * fix(validation): handle returning a promise with isAsync: true #5171\r\n\r\n4.9.6 / 2017-04-23\r\n==================\r\n * fix: update `parentArray` references when directly assigning document arrays #5192 [jhob](https://github.com/jhob)\r\n * docs: improve schematype validator docs #5178 [milesbarr](https://github.com/milesbarr)\r\n * fix(model): modify discriminator() class in place #5175\r\n * fix(model): handle bulkWrite updateMany casting #5172 [tzellman](https://github.com/tzellman)\r\n * docs(model): fix replaceOne example for bulkWrite #5168\r\n * fix(document): don't create a new array subdoc when creating schema array #5162\r\n * fix(model): merge query hooks from discriminators #5147\r\n * fix(document): add parent() function to subdocument to match array subdoc #5134\r\n\r\n4.9.5 / 2017-04-16\r\n==================\r\n * fix(query): correct $pullAll casting of null #5164 [Sebmaster](https://github.com/Sebmaster)\r\n * docs: add advanced schemas docs for loadClass #5157\r\n * fix(document): handle null/undefined gracefully in applyGetters() #5143\r\n * fix(model): add resolveToObject option for mapReduce with ES6 promises #4945\r\n\r\n4.9.4 / 2017-04-09\r\n==================\r\n * fix(schema): clone query middleware correctly #5153 #5141 [clozanosanchez](https://github.com/clozanosanchez)\r\n * docs(aggregate): fix typo #5142\r\n * fix(query): cast .$ update to underlying array type #5130\r\n * fix(populate): don't mutate populate result in place #5128\r\n * fix(query): handle $setOnInsert consistent with $set #5126\r\n * docs(query): add strict mode option for findOneAndUpdate #5108\r\n\r\n4.9.3 / 2017-04-02\r\n==================\r\n * docs: document.js fixes for functions prepended with `$` #5131 [krmannix](https://github.com/krmannix)\r\n * fix: Avoid exception on constructor check #5129 [monkbroc](https://github.com/monkbroc)\r\n * docs(schematype): explain how to use `isAsync` with validate() #5125\r\n * docs(schematype): explain custom message with required function #5123\r\n * fix(populate): only apply refPath duplicate id optimization if not array #5114\r\n * fix(document): copy non-objects to doc when init() #5111\r\n * perf(populate): dont clone whole options every time #5103\r\n * feat(document): add isDirectSelected() to minimize isSelected() changes #5063\r\n * docs(schematypes): explain some subtleties with arrays #5059\r\n\r\n4.9.2 / 2017-03-26\r\n==================\r\n * fix(discriminator): handle class names consistently #5104\r\n * fix(schema): make clone() work with reusing discriminator schemas #5098\r\n * fix(querycursor): run pre find hooks with .cursor() #5096\r\n * fix(connection): throw error if username:password includes @ or : #5091\r\n * fix(timestamps): handle overwriting createdAt+updatedAt consistently #5088\r\n * fix(document): ensure subdoc post save runs after parent save #5085\r\n * docs(model): improve update docs #5076 [bertolo1988](https://github.com/bertolo1988)\r\n\r\n4.9.1 / 2017-03-19\r\n==================\r\n * fix(query): handle $type for arrays #5080 #5079 [zoellner](https://github.com/zoellner)\r\n * fix(model): handle ordered param for `insertMany` validation errors #5072 [sjorssnoeren](https://github.com/sjorssnoeren)\r\n * fix(populate): avoid duplicate ids in dynref queries #5054\r\n * fix(timestamps): dont set timestamps in update if user set it #5045\r\n * fix(update): dont double-call setters on arrays #5041\r\n * fix: upgrade driver -> 2.2.25 for jest fix #5033\r\n * fix(model): get promise each time save() is called rather than once #5030\r\n * fix(connection): make connect return value consistent #5006\r\n\r\n4.9.0 / 2017-03-13\r\n==================\r\n * feat(document): return this from `depopulate()` #5027\r\n * fix(drivers): stop emitting timeouts as errors #5026\r\n * feat(schema): add a clone() function for schemas #4983\r\n * feat(query): add rawResult option to replace passRawResult, deprecate passRawResult #4977 #4925\r\n * feat(schematype): support isAsync validator option and handle returning promises from validators, deprecate implicit async validators #4290\r\n * feat(query): add `replaceOne()`, `deleteOne()`, `deleteMany()` #3998\r\n * feat(model): add `bulkWrite()` #3998\r\n\r\n4.8.7 / 2017-03-12\r\n==================\r\n * fix(model): if last arg in spread is falsy, treat it as a callback #5061\r\n * fix(document): use $hook instead of hook to enable 'hook' as a path name #5047\r\n * fix(populate): dont select foreign field if parent field is selected #5037\r\n * fix(populate): handle passing no args to query.populate #5036\r\n * fix(update): use correct method for casting nested arrays #5032\r\n * fix(discriminator): handle array discriminators when casting $push #5009\r\n\r\n4.8.6 / 2017-03-05\r\n==================\r\n * docs(document): remove text that implies that transform is false by default #5023\r\n * fix(applyHooks): dont wrap a function if it is already wrapped #5019\r\n * fix(document): ensure nested docs' toObject() clones #5008\r\n\r\n4.8.5 / 2017-02-25\r\n==================\r\n * fix: check for empty schemaPath before accessing property $isMongooseDocumentArray #5017 [https://github.com/randyhoulahan](randyhoulahan)\r\n * fix(discriminators): handle create() and push() for embedded discriminators #5001\r\n * fix(querycursor): ensure close emitted after last data event #4998\r\n * fix(discriminators): remove fields not selected in child when querying by base model #4991\r\n\r\n4.8.4 / 2017-02-19\r\n==================\r\n * docs(discriminators): explain embedded discriminators #4997\r\n * fix(query): fix TypeError when findOneAndUpdate errors #4990\r\n * fix(update): handle nested single embedded in update validators correctly #4989\r\n * fix(browser): make browser doc constructor not crash #4987\r\n\r\n4.8.3 / 2017-02-15\r\n==================\r\n * chore: upgrade mongodb driver -> 2.2.24\r\n * docs(connections): addd some details about callbacks #4986\r\n * fix: ensure class is created with new keyword #4972 #4947 [benhjames](https://github.com/benhjames)\r\n * fix(discriminator): add applyPluginsToDiscriminators option #4965\r\n * fix(update): properly cast array subdocs when casting update #4960\r\n * fix(populate): ensure foreign field is selected for virtual populate #4959\r\n * docs(query): document some query callback params #4949\r\n * fix(document): ensure errors in validators get caught #2185\r\n\r\n4.8.2 / 2017-02-10\r\n==================\r\n * fix(update): actually run validators on addToSet #4953\r\n * fix(update): improve buffer error handling #4944 [ValYouW](https://github.com/ValYouW)\r\n * fix(discriminator): handle subclassing with loadClass correctly #4942\r\n * fix(query): allow passing Map to sort() #4941\r\n * fix(document): handle setting discriminator doc #4935\r\n * fix(schema): return correct value from pre init hook #4928\r\n * fix(query): ensure consistent params in error handlers if pre hook errors #4927\r\n\r\n4.8.1 / 2017-01-30\r\n==================\r\n * fix(query): handle $exists for arrays and embedded docs #4937\r\n * fix(query): handle passing string to hint() #4931\r\n\r\n4.8.0 / 2017-01-28\r\n==================\r\n * feat(schema): add saveErrorIfNotFound option and $where property #4924 #4004\r\n * feat(query): add $in implicitly if passed an array #4912 [QuotableWater7](https://github.com/QuotableWater7)\r\n * feat(aggregate): helper for $facet #4904 [varunjayaraman](https://github.com/varunjayaraman)\r\n * feat(query): add collation method #4839\r\n * feat(schema): propogate strict option to implicit array subschemas #4831 [dkrosso](https://github.com/dkrosso)\r\n * feat(aggregate): add helper for graphLookup #4819 [varunjayaraman](https://github.com/varunjayaraman)\r\n * feat(types): support Decimal128 #4759\r\n * feat(aggregate): add eachAsync() to aggregate cursor #4300\r\n * feat(query): add updateOne and updateMany #3997\r\n * feat(model): support options for insertMany #3893\r\n * fix(document): run validation on single nested docs if not directly modified #3884\r\n * feat(model): use discriminator constructor based on discriminatorKey in create() #3624\r\n * feat: pass collection as context to debug function #3261\r\n * feat(query): support push and addToSet for update validators #2933\r\n * perf(document): refactor registerHooksFromSchema so hooks are defined on doc prototype #2754\r\n * feat(types): add discriminator() function to doc arrays #2723 #1856\r\n * fix(populate): return an error if sorting underneath a doc array #2202\r\n\r\n4.7.9 / 2017-01-27\r\n==================\r\n * fix(query): handle casting $exists under $not #4933\r\n * chore: upgrade mongodb -> 2.2.22 re: #4931\r\n\r\n4.7.8 / 2017-01-23\r\n==================\r\n * fix(populate): better handling for virtual populate under arrays #4923\r\n * docs: upgrade contributors count #4918 [AdamZaczek](https://github.com/AdamZaczek)\r\n * fix(query): don't set nested path default if setting parent path #4911\r\n * docs(promise): add missing bracket #4907\r\n * fix(connection): ensure error handling is consistently async #4905\r\n * fix: handle authMechanism in query string #4900\r\n * fix(document): ensure error handlers run for validate #4885\r\n\r\n4.7.7 / 2017-01-15\r\n==================\r\n * fix(utils): don't crash if to[key] is null #4881\r\n * fix: upgrade mongodb -> 2.2.21 #4867\r\n * fix: add a toBSON to documents for easier querying #4866\r\n * fix: suppress bluebird warning #4854 [davidwu226](https://github.com/davidwu226)\r\n * fix(populate): handle nested virtuals in virtual populate #4851\r\n\r\n4.7.6 / 2017-01-02\r\n==================\r\n * fix(model): allow passing non-array to insertMany #4846\r\n * fix(populate): use base model name if no discriminator for backwards compat #4843\r\n * fix: allow internal validate callback to be optional #4842 [arciisine](https://github.com/arciisine)\r\n * fix(document): don't skip pointCut if save not defined (like in browser doc) #4841\r\n * chore: improve benchmarks #4838 [billouboq](https://github.com/billouboq)\r\n * perf: remove some unused parameters #4837 [billouboq](https://github.com/billouboq)\r\n * fix(query): don't call error handler if passRawResult is true and no error occurred #4836\r\n\r\n4.7.5 / 2016-12-26\r\n==================\r\n * docs(model): fix spelling mistake #4828 [paulinoj](https://github.com/paulinoj)\r\n * fix(aggregate): remove unhandled rejection when using aggregate.then() #4824\r\n * perf: remove try/catch that kills optimizer #4821\r\n * fix(model): handles populating with discriminators that may not have a ref #4817\r\n * fix(document): handle setting array of discriminators #3575\r\n\r\n4.7.4 / 2016-12-21\r\n==================\r\n * docs: fix typo #4810 [GEEKIAM](https://github.com/GEEKIAM)\r\n * fix(query): timestamps with $push + $each #4805\r\n * fix(document): handle buffers correctly in minimize #4800\r\n * fix: don't disallow overwriting default and cast fns #4795 [pdspicer](https://github.com/pdspicer)\r\n * fix(document): don't convert single nested docs to POJOs #4793\r\n * fix(connection): handle reconnect to replica set correctly #4972 [gfzabarino](https://github.com/gfzabarino)\r\n\r\n4.7.3 / 2016-12-16\r\n==================\r\n * fix: upgrade mongodb driver -> 2.2.16 for several bug fixes and 3.4 support #4799\r\n * fix(model): ensure discriminator key is correct for child schema on discriminator #4790\r\n * fix(document): handle mark valid in subdocs correctly #4778\r\n * fix(query): check for objects consistently #4775\r\n\r\n4.7.2 / 2016-12-07\r\n==================\r\n * test(populate): fix justOne test #4772 [cblanc](https://github.com/cblanc)\r\n * chore: fix benchmarks #4769 [billouboq](https://github.com/billouboq)\r\n * fix(document): handle setting subdoc to null after setting parent doc #4766\r\n * fix(query): support passRawResult with lean #4762 #4761 [mhfrantz](https://github.com/mhfrantz)\r\n * fix(query): throw StrictModeError if upsert with nonexisting field in condition #4757\r\n * test: fix a couple of sort tests #4756 [japod](https://github.com/japod)\r\n * chore: upgrade mongodb driver -> 2.2.12 #4753 [mdlavin](https://github.com/mdlavin)\r\n * fix(query): handle update with upsert and overwrite correctly #4749\r\n\r\n4.7.1 / 2016-11-30\r\n==================\r\n * fix(schema): throw error if you use prototype as a schema path #4746\r\n * fix(schema): throw helpful error if you define a virtual with the same path as a real path #4744\r\n * fix(connection): make createConnection not throw rejected promises #4742\r\n * fix(populate): allow specifiying options in model schema #4741\r\n * fix(document): handle selected nested elements with defaults #4739\r\n * fix(query): add model to cast error if possible #4729\r\n * fix(query): handle timestamps with overwrite #4054\r\n\r\n4.7.0 / 2016-11-23\r\n==================\r\n * docs: clean up schematypes #4732 [kidlj](https://github.com/kidlj)\r\n * perf: only get stack when necessary with VersionError #4726 [Sebmaster](https://github.com/Sebmaster)\r\n * fix(query): ensure correct casting when setting array element #4724\r\n * fix(connection): ensure db name gets set when you pass 4 params #4721\r\n * fix: prevent TypeError in node v7 #4719 #4706\r\n * feat(document): support .set() on virtual subpaths #4716\r\n * feat(populate): support populate virtuals on nested schemas #4715\r\n * feat(querycursor): support transform option and .map() #4714 #4705 [cblanc](https://github.com/cblanc)\r\n * fix(document): dont set defaults on not-selected nested paths #4707\r\n * fix(populate): don't throw if empty string passed to populate #4702\r\n * feat(model): add `loadClass()` function for importing schema from ES6 class #4668 [rockmacaca](https://github.com/rockmacaca)\r\n\r\n4.6.8 / 2016-11-14\r\n==================\r\n * fix(querycursor): clear stack when iterating onto next doc #4697\r\n * fix: handle null keys in validation error #4693 #4689 [arciisine](https://github.com/arciisine)\r\n * fix(populate): handle pre init middleware correctly with populate virtuals #4683\r\n * fix(connection): ensure consistent return value for open and openSet #4659\r\n * fix(schema): handle falsy defaults for arrays #4620\r\n\r\n4.6.7 / 2016-11-10\r\n==================\r\n * fix(document): only invalidate in subdoc if using update validators #4681\r\n * fix(document): don't create subdocs when excluded in projection #4669\r\n * fix(document): ensure single embedded schema validator runs with correct context #4663\r\n * fix(document): make sure to depopulate top level for sharding #4658\r\n * fix(connection): throw more helpful error when .model() called incorrectly #4652\r\n * fix(populate): throw more descriptive error when trying to populate a virtual that doesn't have proper options #4602\r\n * fix(document): ensure subtype gets set properly when saving with a buffer id #4506\r\n * fix(query): handle setDefaultsOnInsert with defaults on doc arrays #4456\r\n * fix(drivers): make debug output better by calling toBSON() #4356\r\n\r\n4.6.6 / 2016-11-03\r\n==================\r\n * chore: upgrade deps #4674 [TrejGun](https://github.com/TrejGun)\r\n * chore: run tests on node v7 #4673 [TrejGun](https://github.com/TrejGun)\r\n * perf: make setDefaultsOnInsert more efficient if upsert is off #4672 [CamHenlin](https://github.com/CamHenlin)\r\n * fix(populate): ensure document array is returned #4656\r\n * fix(query): cast doc arrays with positionals correctly for update #4655\r\n * fix(document): ensure single nested doc validators run with correct context #4654\r\n * fix: handle reconnect failed error in new version of driver #4653 [loris](https://github.com/loris)\r\n * fix(populate): if setting a populated doc, take its id #4632\r\n *  fix(populate): handle populated virtuals in init #4618\r\n\r\n4.6.5 / 2016-10-23\r\n==================\r\n * docs: fix grammar issues #4642 #4640 #4639 [silvermanj7](https://github.com/silvermanj7)\r\n * fix(populate): filter out nonexistant values for dynref #4637\r\n * fix(query): handle $type as a schematype operator #4632\r\n * fix(schema): better handling for uppercase: false and lowercase: false #4622\r\n * fix(query): don't run transforms on updateForExec() #4621\r\n * fix(query): handle id = 0 in findById #4610\r\n * fix(query): handle buffers in mergeClone #4609\r\n * fix(document): handle undefined with conditional validator for validateSync #4607\r\n * fix: upgrade to mongodb driver 2.2.11 #4581\r\n * docs(schematypes): clarify schema.path() #4518\r\n * fix(query): ensure path is defined before checking in timestamps #4514\r\n * fix(model): set version key in upsert #4505\r\n * fix(document): never depopulate top-level doc #3057\r\n * refactor: ensure sync for setting non-capped collections #2690\r\n\r\n4.6.4 / 2016-10-16\r\n==================\r\n * fix(query): cast $not correctly #4616 #4592 [prssn](https://github.com/prssn)\r\n * fix: address issue with caching global plugins #4608 #4601 [TrejGun](https://github.com/TrejGun)\r\n * fix(model): make sure to depopulate in insertMany #4590\r\n * fix(model): buffer autoIndex if bufferCommands disabled #4589\r\n * fix(populate): copy ids array before modifying #4585\r\n * feat(schema): add retainKeyOrder prop #4542\r\n * fix(document): return isModified true for children of direct modified paths #4528\r\n * fix(connection): add dropDatabase() helper #4490\r\n * fix(model): add usePushEach option for schemas #4455\r\n * docs(connections): add some warnings about buffering #4413\r\n * fix: add ability to set promise implementation in browser #4395\r\n\r\n4.6.3 / 2016-10-05\r\n==================\r\n * fix(document): ensure single nested docs get initialized correctly when setting nested paths #4578\r\n * fix: turn off transforms when writing nested docs to db #4574\r\n * fix(document): don't set single nested subdocs to null when removing parent doc #4566\r\n * fix(model): ensure versionKey gets set in insertMany #4561\r\n * fix(schema): handle typeKey in arrays #4548\r\n * feat(schema): set $implicitlyCreated on schema if created by interpretAsType #4443\r\n\r\n4.6.2 / 2016-09-30\r\n==================\r\n * chore: upgrade to async 2.0.1 internally #4579 [billouboq](https://github.com/billouboq)\r\n * fix(types): ensure nested single doc schema errors reach update validators #4557 #4519\r\n * fix(connection): handle rs names with leading numbers (muri 1.1.1) #4556\r\n * fix(model): don't throw if method name conflicts with Object.prototype prop #4551\r\n * docs: fix broken link #4544 [VFedyk](https://github.com/VFedyk)\r\n * fix: allow overwriting model on mongoose singleton #4541 [Nainterceptor](https://github.com/Nainterceptor)\r\n * fix(document): don't use init: true when building doc defaults #4540\r\n * fix(connection): use replSet option if replset not specified #4535\r\n * fix(query): cast $not objects #4495\r\n\r\n4.6.1 / 2016-09-20\r\n==================\r\n * fix(query): improve handling of $not with $elemMatch #4531 #3719 [timbowhite](https://github.com/timbowhite)\r\n * fix: upgrade mongodb -> 2.2.10 #4517\r\n * chore: fix webpack build issue #4512 [saiichihashimoto](https://github.com/saiichihashimoto)\r\n * fix(query): emit error on next tick when exec callback errors #4500\r\n * test: improve test case #4496 [isayme](https://github.com/isayme)\r\n * fix(schema): use same check for array types and top-level types #4493\r\n * style: fix indentation in docs #4489 [dhurlburtusa](https://github.com/dhurlburtusa)\r\n * fix(schema): expose original object passed to constructor #4486\r\n * fix(query): handle findOneAndUpdate with array of arrays #4484 #4470 [fedotov](https://github.com/fedotov)\r\n * feat(document): add $ignore to make a path ignored #4480\r\n * fix(query): properly handle setting single embedded in update #4475 #4466 #4465\r\n * fix(updateValidators): handle single nested schema subpaths correctly #4479\r\n * fix(model): throw handy error when method name conflicts with property name #4475\r\n * fix(schema): handle .set() with array field #4472\r\n * fix(query): check nested path when avoiding double-validating Mixed #4441\r\n * fix(schema): handle calling path.trim() with no args correctly #4042\r\n\r\n4.6.0 / 2016-09-02\r\n==================\r\n * docs(document): clarify the findById and findByIdAndUpdate examples #4471 [mdcanham](https://github.com/mdcanham)\r\n * docs(schematypes): add details re: options #4452\r\n * docs(middleware): add docs for insertMany hooks #4451\r\n * fix(schema): create new array when copying from existing object to preserve change tracking #4449\r\n * docs: fix typo in index.jade #4448\r\n * fix(query): allow array for populate options #4446\r\n * fix(model): create should not cause unhandle reject promise #4439\r\n * fix: upgrade to mongodb driver 2.2.9 #4363 #4341 #4311 (see [comments here](https://github.com/mongodb/js-bson/commit/aa0b54597a0af28cce3530d2144af708e4b66bf0#commitcomment-18850498) if you use node 0.10)\r\n\r\n4.5.10 / 2016-08-23\r\n===================\r\n * docs: fix typo on documents.jade #4444 [Gabri3l](https://github.com/Gabri3l)\r\n * chore: upgrade mocha to 3.0.2 #4437 [TrejGun](https://github.com/TrejGun)\r\n * fix: subdocuments causing error with parent timestamp on update #4434 [dyang108](https://github.com/dyang108)\r\n * fix(query): don't crash if timestamps on and update doesn't have a path #4425 #4424 #4418\r\n * fix(query): ensure single nested subdoc is hydrated when running update validators #4420\r\n * fix(query): cast non-$geometry operators for $geoWithin #4419\r\n * docs: update contributor count #4415 [AdamZaczek](https://github.com/AdamZaczek)\r\n * docs: add more clarification re: the index event #4410\r\n * fix(document): only skip modifying subdoc path if parent is direct modified #4405\r\n * fix(schema): throw cast error if provided date invalid #4404\r\n * feat(error): use util.inspect() so CastError never prints \"[object Object]\" #4398\r\n * fix(model): dont error if the discriminator key is unchanged #4387\r\n * fix(query): don't throw unhandled rejection with bluebird when using cbs #4379\r\n\r\n4.5.9 / 2016-08-14\r\n==================\r\n * docs: add mixed schema doc for Object literal #4400 [Kikobeats](https://github.com/Kikobeats)\r\n * fix(query): cast $geoWithin and convert mongoose objects to POJOs before casting #4392\r\n * fix(schematype): dont cast defaults without parent doc #4390\r\n * fix(query): disallow passing empty string to findOne() #4378\r\n * fix(document): set single nested doc isNew correctly #4369\r\n * fix(types): checks field name correctly with nested arrays and populate #4365\r\n * fix(drivers): make debug output copy-pastable into mongodb shell #4352\r\n * fix(services): run update validators on nested paths #4332\r\n * fix(model): handle typeKey with discriminators #4339\r\n * fix(query): apply timestamps to child schemas when explicitly specified in update #4049\r\n * fix(schema): set prefix as nested path with add() #1730\r\n\r\n4.5.8 / 2016-08-01\r\n==================\r\n * fix(model): make changing the discriminator key cause a cast error #4374\r\n * fix(query): pass projection fields to cursor #4371 #4342 [Corei13](https://github.com/Corei13)\r\n * fix(document): support multiple paths for isModified #4370 [adambuczynski](https://github.com/adambuczynski)\r\n * fix(querycursor): always cast fields before returning cursor #4355\r\n * fix(query): support projection as alias for fields in findOneAndUpdate #4315\r\n * fix(schema): treat index false + unique false as no index #4304\r\n * fix(types): dont mark single nested subpath as modified if whole doc already modified #4224\r\n\r\n4.5.7 / 2016-07-25\r\n==================\r\n * fix(document): ensure no unhandled rejections if callback specified for save #4364\r\n\r\n4.5.6 / 2016-07-23\r\n==================\r\n * fix(schema): don't overwrite createdAt if it isn't selected #4351 [tusbar](https://github.com/tusbar)\r\n * docs(api): fix link to populate() and add a new one from depopulate() #4345 [Delapouite](https://github.com/Delapouite)\r\n * fix(types): ownerDocument() works properly with single nested docs #4344 [vichle](https://github.com/vichle)\r\n * fix(populate): dont use findOne when justOne option set #4329\r\n * fix(document): dont trigger .then() deprecated warning when calling doc.remove() #4291\r\n * docs(connection): add promiseLibrary option #4280\r\n * fix(plugins): apply global plugins to subschemas #4271\r\n * fix(model): ensure `ensureIndex()` never calls back in the same tick #4246\r\n * docs(schema): improve post hook docs on schema #4238\r\n\r\n4.5.5 / 2016-07-18\r\n==================\r\n * fix(document): handle setting root to empty obj if minimize false #4337\r\n * fix: downgrade to mongodb 2.1.18 #4335 #4334 #4328 #4323\r\n * perf(types): remove defineProperty usage in documentarray #4333\r\n * fix(query): correctly pass model in .toConstructor() #4318\r\n * fix(services): avoid double-validating mixed types with update validators #4305\r\n * docs(middleware): add docs describing error handling middleware #4229\r\n * fix(types): throw correct error when invalidating doc array #3602\r\n\r\n4.5.4 / 2016-07-11\r\n==================\r\n * fix(types): fix removing embedded documents #4309 [RoCat](https://github.com/RoCat)\r\n * docs: various docs improvements #4302 #4294 [simonxca](https://github.com/simonxca)\r\n * fix: upgrade mongodb -> 2.1.21 #4295 #4202 [RoCat](https://github.com/RoCat)\r\n * fix(populate): convert single result to array for virtual populate because of lean #4288\r\n * fix(populate): handle empty results for populate virtuals properly #4285 #4284\r\n * fix(query): dont cast $inc to number if type is long #4283\r\n * fix(types): allow setting single nested doc to null #4281\r\n * fix(populate): handle deeply nested virtual populate #4278\r\n * fix(document): allow setting empty obj if strict mode is false #4274\r\n * fix(aggregate): allow passing obj to .unwind() #4239\r\n * docs(document): add return statements to transform examples #1963\r\n\r\n4.5.3 / 2016-06-30\r\n==================\r\n * fix(query): pass correct options to QueryCursor #4277 #4266\r\n * fix(querycursor): handle lean option correctly #4276 [gchudnov](https://github.com/gchudnov)\r\n * fix(document): fix error handling when no error occurred #4275\r\n * fix(error): use strict mode for version error #4272\r\n * docs(populate): fix crashing compilation for populate.jade #4267\r\n * fix(populate): support `justOne` option for populate virtuals #4263\r\n * fix(populate): ensure model param gets used for populate virtuals #4261 #4243\r\n * fix(querycursor): add ability to properly close the cursor #4258\r\n * docs(model): correct link to Document #4250\r\n * docs(populate): correct path for refPath populate #4240\r\n * fix(document): support validator.isEmail as validator #4064\r\n\r\n4.5.2 / 2016-06-24\r\n==================\r\n * fix(connection): add checks for collection presence for `onOpen` and `onClose` #4259 [nodkz](https://github.com/nodkz)\r\n * fix(cast): allow strings for $type operator #4256\r\n * fix(querycursor): support lean() #4255 [pyramation](https://github.com/pyramation)\r\n * fix(aggregate): allow setting noCursorTimeout option #4241\r\n * fix(document): handle undefined for Array.pull #4222 [Sebmaster](https://github.com/Sebmaster)\r\n * fix(connection): ensure promise.catch() catches initial connection error #4135\r\n * fix(document): show additional context for VersionError #2633\r\n\r\n4.5.1 / 2016-06-18\r\n==================\r\n * fix(model): ensure wrapped insertMany() returns a promise #4237\r\n * fix(populate): dont overwrite populateVirtuals when populating multiple paths #4234\r\n * docs(model): clarify relationship between create() and save() #4233\r\n * fix(types): handle option param in subdoc remove() #4231 [tdebarochez](https://github.com/tdebarochez)\r\n * fix(document): dedupe modified paths #4226 #4223 [adambuczynski](https://github.com/adambuczynski)\r\n * fix(model): don't modify user-provided options object #4221\r\n * fix(document): handle setting nested path to empty object #4218 #4182\r\n * fix(document): clean subpaths when removing single nested #4216\r\n * fix(document): don't force transform on subdocs with inspect #4213\r\n * fix(error): allow setting .messages object #4207\r\n\r\n4.5.0 / 2016-06-13\r\n==================\r\n * feat(query): added Query.prototype.catch() #4215 #4173 [adambuczynski](https://github.com/adambuczynski)\r\n * feat(query): add Query.prototype.cursor() as a .stream() alternative #4117 #3637 #1907\r\n * feat(document): add markUnmodified() function #4092 [vincentcr](https://github.com/vincentcr)\r\n * feat(aggregate): convert aggregate object to a thenable #3995 #3946 [megagon](https://github.com/megagon)\r\n * perf(types): remove defineProperties call for array (**Note:** Because of this, a mongoose array will no longer `assert.deepEqual()` a plain old JS array) #3886\r\n * feat(model): add hooks for insertMany() #3846\r\n * feat(schema): add support for custom query methods #3740 #2372\r\n * feat(drivers): emit error on 'serverClosed' because that means that reconnect failed #3615\r\n * feat(model): emit error event when callback throws exception #3499\r\n * feat(model): inherit options from discriminator base schema #3414 #1818\r\n * feat(populate): expose mongoose-populate-virtuals inspired populate API #2562\r\n * feat(document): trigger remove hooks on subdocs when removing parent #2348\r\n * feat(schema): add support for express-style error handling middleware #2284\r\n * fix(model): disallow setting discriminator key #2041\r\n * feat(schema): add support for nested arrays #1361\r\n\r\n4.4.20 / 2016-06-05\r\n===================\r\n * docs: clarify command buffering when using driver directly #4195\r\n * fix(promise): correct broken mpromise .catch() #4189\r\n * fix(document): clean modified subpaths when set path to empty obj #4182\r\n * fix(query): support minDistance with query casting and `.near()` #4179\r\n * fix(model): remove unnecessary .save() promise #4177\r\n * fix(schema): cast all valid ObjectId strings to object ids #3365\r\n * docs: remove unclear \"unsafe\" term in query docs #3282\r\n\r\n4.4.19 / 2016-05-21\r\n===================\r\n * fix(model): handle insertMany if timestamps not set #4171\r\n\r\n4.4.18 / 2016-05-21\r\n===================\r\n * docs: add missing period #4170 [gitname](https://github.com/gitname)\r\n * docs: change build badge to svg #4158 [a0viedo](https://github.com/a0viedo)\r\n * fix(model): update timestamps when setting `createdAt` #4155\r\n * fix(utils): make sure to require in document properly #4152\r\n * fix(model): throw overwrite error when discriminator name conflicts #4148\r\n\r\n4.4.17 / 2016-05-13\r\n===================\r\n * docs: remove repetition in QueryStream docs #4147 [hugoabonizio](https://github.com/hugoabonizio)\r\n * fix(document): dont double-validate doc array elements #4145\r\n * fix(document): call required function with correct scope #4142 [JedWatson](https://github.com/JedWatson)\r\n\r\n4.4.16 / 2016-05-09\r\n===================\r\n * refactor(document): use function reference #4133 [dciccale](https://github.com/dciccale)\r\n * docs(querystream): clarify `destroy()` and close event #4126 [AnthonyCC](https://github.com/AnthonyCC)\r\n * test: make before hook fail fast if it can't connect #4121\r\n * docs: add description of CastError constructor params #4120\r\n * fix(schematype): ensure single embedded defaults have $parent #4115\r\n * fix(document): mark nested paths for validation #4111\r\n * fix(schema): make sure element is always a subdoc in doc array validation #3816\r\n\r\n4.4.15 / 2016-05-06\r\n===================\r\n * fix(schema): support overwriting array default #4109\r\n * fix(populate): assign values when resolving each populate #4104\r\n * fix(aggregate): dont send async option to server #4101\r\n * fix(model): ensure isNew set to false after insertMany #4099\r\n * fix(connection): emit on error if listeners and no callback #4098\r\n * fix(document): treat required fn that returns false as required: false #4094\r\n\r\n4.4.14 / 2016-04-27\r\n===================\r\n * fix: upgrade mongodb -> 2.1.18 #4102\r\n * feat(connection): allow setting mongos as a uri query param #4093 #4035 [burtonjc](https://github.com/burtonjc)\r\n * fix(populate): make sure to use correct assignment order for each model #4073\r\n * fix(schema): add complete set of geospatial operators for single embedded subdocs #4014\r\n\r\n3.8.40 / 2016-04-24\r\n===================\r\n * upgraded; mquery -> 1.10.0 #3989\r\n\r\n4.4.13 / 2016-04-21\r\n===================\r\n * docs: add docs favicons #4082 [robertjustjones](https://github.com/robertjustjones)\r\n * docs(model): correct Model.remove() return value #4075 [Jokero](https://github.com/Jokero)\r\n * fix(query): add $geoWithin query casting for single embedded docs #4044\r\n * fix(schema): handle setting trim option to falsy #4042\r\n * fix(query): handle setDefaultsOnInsert with empty update #3835\r\n\r\n4.4.12 / 2016-04-08\r\n===================\r\n * docs(query): document context option for update and findOneAndUpdate #4055\r\n * docs(query): correct link to $geoWithin docs #4050\r\n * fix(project): upgrade to mongodb driver 2.1.16 #4048 [schmalliso](https://github.com/schmalliso)\r\n * docs(validation): fix validation docs #4028\r\n * fix(types): improve .id() check for document arrays #4011\r\n * fix(query): remove premature return when using $rename #3171\r\n * docs(connection): clarify relationship between models and connections #2157\r\n\r\n4.4.11 / 2016-04-03\r\n===================\r\n * fix: upgrade to mongodb driver 2.1.14 #4036 #4030 #3945\r\n * fix(connection): allow connecting with { mongos: true } to handle query params #4032 [burtonjc](https://github.com/burtonjc)\r\n * docs(connection): add autoIndex example #4026 [tilleps](https://github.com/tilleps)\r\n * fix(query): handle passRawResult option when zero results #4023\r\n * fix(populate): clone options before modifying #4022\r\n * docs: add missing whitespace #4019 [chenxsan](https://github.com/chenxsan)\r\n * chore: upgrade to ESLint 2.4.0 #4015 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix(types): single nested subdocs get ids by default #4008\r\n * chore(project): add dependency status badge #4007 [Maheshkumar-Kakade](http://github.com/Maheshkumar-Kakade)\r\n * fix: make sure timestamps don't trigger unnecessary updates #4005 #3991 [tommarien](https://github.com/tommarien)\r\n * fix(document): inspect inherits schema options #4001\r\n * fix(populate): don't mark populated path as modified if setting to object w/ same id #3992\r\n * fix(document): support kind argument to invalidate #3965\r\n\r\n4.4.10 / 2016-03-24\r\n===================\r\n * fix(document): copy isNew when copying a document #3982\r\n * fix(document): don't override defaults with undefined keys #3981\r\n * fix(populate): merge multiple deep populate options for the same path #3974\r\n\r\n4.4.9 / 2016-03-22\r\n==================\r\n * fix: upgrade mongodb -> 2.1.10 re https://jira.mongodb.org/browse/NODE-679 #4010\r\n * docs: add syntax highlighting for acquit examples #3975\r\n\r\n4.4.8 / 2016-03-18\r\n==================\r\n * docs(aggregate): clarify promises #3990 [megagon](https://github.com/megagon)\r\n * fix: upgrade mquery -> 1.10 #3988 [matskiv](https://github.com/matskiv)\r\n * feat(connection): 'all' event for repl sets #3986 [xizhibei](https://github.com/xizhibei)\r\n * docs(types): clarify Array.pull #3985 [seriousManual](https://github.com/seriousManual)\r\n * feat(query): support array syntax for .sort() via mquery 1.9 #3980\r\n * fix(populate): support > 3 level nested populate #3973\r\n * fix: MongooseThenable exposes connection correctly #3972\r\n * docs(connection): add note about reconnectTries and reconnectInterval #3969\r\n * feat(document): invalidate returns the new validationError #3964\r\n * fix(query): .eq() as shorthand for .equals #3953 [Fonger](https://github.com/Fonger)\r\n * docs(connection): clarify connection string vs passed options #3941\r\n * docs(query): select option for findOneAndUpdate #3933\r\n * fix(error): ValidationError.properties no longer enumerable #3925\r\n * docs(validation): clarify how required validators work with nested schemas #3915\r\n * fix: upgrade mongodb driver -> 2.1.8 to make partial index errors more sane #3864\r\n\r\n4.4.7 / 2016-03-11\r\n==================\r\n * fix(query): stop infinite recursion caused by merging a mongoose buffer #3961\r\n * fix(populate): handle deep populate array -> array #3954\r\n * fix(schema): allow setting timestamps with .set() #3952 #3951 #3907 [Fonger](https://github.com/Fonger)\r\n * fix: MongooseThenable doesn't overwrite constructors #3940\r\n * fix(schema): don't cast boolean to date #3935\r\n * fix(drivers): support sslValidate in connection string #3929\r\n * fix(types): correct markModified() for single nested subdocs #3910\r\n * fix(drivers): catch and report any errors that occur in driver methods #3906\r\n * fix(populate): get subpopulate model correctly when array under nested #3904\r\n * fix(document): allow fields named 'pre' and 'post' #3902\r\n * docs(query): clarify runValidators and setDefaultsOnInsert options #3892\r\n * docs(validation): show how to use custom required messages in schema #2616\r\n\r\n4.4.6 / 2016-03-02\r\n==================\r\n * fix: upgrade mongodb driver to 2.1.7 #3938\r\n * docs: fix plugins link #3917 #3909 [fbertone](https://github.com/fbertone)\r\n * fix(query): sort+select with count works #3914\r\n * fix(query): improve mergeUpdate's ability to handle nested docs #3890\r\n\r\n4.4.5 / 2016-02-24\r\n==================\r\n * fix(query): ability to select a length field (upgrade to mquery 1.7.0) #3903\r\n * fix: include nested CastError as reason for array CastError #3897 [kotarou3](https://github.com/kotarou3)\r\n * fix(schema): check for doc existence before taking fields #3889\r\n * feat(schema): useNestedStrict option to take nested strict mode for update #3883\r\n * docs(validation): clarify relationship between required and checkRequired #3822\r\n * docs(populate): dynamic reference docs #3809\r\n * docs: expand dropdown when clicking on file name #3807\r\n * docs: plugins.mongoosejs.io is up #3127\r\n * fix(schema): ability to add a virtual with same name as removed path #2398\r\n\r\n4.4.4 / 2016-02-17\r\n==================\r\n * fix(schema): handle field selection when casting single nested subdocs #3880\r\n * fix(populate): populating using base model with multiple child models in result #3878\r\n * fix: ability to properly use return value of `mongoose.connect()` #3874\r\n * fix(populate): dont hydrate populated subdoc if lean option set #3873\r\n * fix(connection): dont re-auth if already connected with useDb #3871\r\n * docs: cover how to set underlying driver's promise lib #3869\r\n * fix(document): handle conflicting names in validation errors with subdocs #3867\r\n * fix(populate): set undefined instead of null consistently when populate couldn't find results #3859\r\n * docs: link to `execPopulate()` in `doc.populate()` docs #3836\r\n * docs(plugin): link to the `mongoose.plugin()` function #3732\r\n\r\n4.4.3 / 2016-02-09\r\n==================\r\n * fix: upgrade to mongodb 2.1.6 to remove kerberos log output #3861 #3860 [cartuchogl](https://github.com/cartuchogl)\r\n * fix: require('mongoose') is no longer a pseudo-promise #3856\r\n * fix(query): update casting for single nested docs #3820\r\n * fix(populate): deep populating multiple paths with same options #3808\r\n * docs(middleware): clarify save/validate hook order #1149\r\n\r\n4.4.2 / 2016-02-05\r\n==================\r\n * fix(aggregate): handle calling .cursor() with no options #3855\r\n * fix: upgrade mongodb driver to 2.1.5 for GridFS memory leak fix #3854\r\n * docs: fix schematype.html conflict #3853 #3850 #3843\r\n * fix(model): bluebird unhandled rejection with ensureIndexes() on init #3837\r\n * docs: autoIndex option for createConnection #3805\r\n\r\n4.4.1 / 2016-02-03\r\n==================\r\n * fix: linting broke some cases where we use `== null` as shorthand #3852\r\n * docs: fix up schematype.html conflict #3848 #3843 [mynameiscoffey](https://github.com/mynameiscoffey)\r\n * fix: backwards breaking change with `.connect()` return value #3847\r\n * docs: downgrade dox and highlight.js to fix docs build #3845\r\n * docs: clean up typo #3842 [Flash-](https://github.com/Flash-)\r\n * fix(document): storeShard handles undefined values #3841\r\n * chore: more linting #3838 [TrejGun](https://github.com/TrejGun)\r\n * fix(schema): handle `text: true` as a way to declare a text index #3824\r\n\r\n4.4.0 / 2016-02-02\r\n==================\r\n * docs: fix expireAfterSeconds index option name #3831 [Flash-](https://github.com/Flash-)\r\n * chore: run lint after test #3829 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * chore: use power-assert instead of assert #3828 [TrejGun](https://github.com/TrejGun)\r\n * chore: stricter lint #3827 [TrejGun](https://github.com/TrejGun)\r\n * feat(types): casting moment to date #3813 [TrejGun](https://github.com/TrejGun)\r\n * chore: comma-last lint for test folder #3810 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix: upgrade async mpath, mpromise, muri, and sliced #3801 [TrejGun](https://github.com/TrejGun)\r\n * fix(query): geo queries now return proper ES2015 promises #3800 [TrejGun](https://github.com/TrejGun)\r\n * perf(types): use `Object.defineProperties()` for array #3799 [TrejGun](https://github.com/TrejGun)\r\n * fix(model): mapReduce, ensureIndexes, remove, and save properly return ES2015 promises #3795 #3628 #3595 [TrejGun](https://github.com/TrejGun)\r\n * docs: fixed dates in History.md #3791 [Jokero](https://github.com/Jokero)\r\n * feat: connect, open, openSet, and disconnect return ES2015 promises #3790 #3622 [TrejGun](https://github.com/TrejGun)\r\n * feat: custom type for int32 via mongoose-int32 npm package #3652 #3102\r\n * feat: basic custom schema type API #995\r\n * feat(model): `insertMany()` for more performant bulk inserts #723\r\n\r\n4.3.7 / 2016-01-23\r\n==================\r\n * docs: grammar fix in timestamps docs #3786 [zclancy](https://github.com/zclancy)\r\n * fix(document): setting nested populated docs #3783 [slamuu](https://github.com/slamuu)\r\n * fix(document): don't call post save hooks twice for pushed docs #3780\r\n * fix(model): handle `_id=0` correctly #3776\r\n * docs(middleware): async post hooks #3770\r\n * docs: remove confusing sentence #3765 [marcusmellis89](https://github.com/marcusmellis89)\r\n\r\n3.8.39 / 2016-01-15\r\n===================\r\n * fixed; casting a number to a buffer #3764\r\n * fixed; enumerating virtual property with nested objects #3743 [kusold](https://github.com/kusold)\r\n\r\n4.3.6 / 2016-01-15\r\n==================\r\n * fix(types): casting a number to a buffer #3764\r\n * fix: add \"listener\" to reserved keywords #3759\r\n * chore: upgrade uglify #3757 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix: broken execPopulate() in 4.3.5 #3755 #3753\r\n * fix: ability to remove() a single embedded doc #3754\r\n * style: comma-last in test folder #3751 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * docs: clarify versionKey option #3747\r\n * fix: improve colorization for arrays #3744 [TrejGun](https://github.com/TrejGun)\r\n * fix: webpack build #3713\r\n\r\n4.3.5 / 2016-01-09\r\n==================\r\n * fix(query): throw when 4th parameter to update not a function #3741 [kasselTrankos](https://github.com/kasselTrankos)\r\n * fix(document): separate error type for setting an object to a primitive #3735\r\n * fix(populate): Model.populate returns ES6 promise #3734\r\n * fix(drivers): re-register event handlers after manual reconnect #3729\r\n * docs: broken links #3727\r\n * fix(validation): update validators run array validation #3724\r\n * docs: clarify the need to use markModified with in-place date ops #3722\r\n * fix(document): mark correct path as populated when manually populating array #3721\r\n * fix(aggregate): support for array pipeline argument to append #3718 [dbkup](https://github.com/dbkup)\r\n * docs: clarify `.connect()` callback #3705\r\n * fix(schema): properly validate nested single nested docs #3702\r\n * fix(types): handle setting documentarray of wrong type #3701\r\n * docs: broken links #3700\r\n * fix(drivers): debug output properly displays '0' #3689\r\n\r\n3.8.38 / 2016-01-07\r\n===================\r\n * fixed; aggregate.append an array #3730 [dbkup](https://github.com/dbkup)\r\n\r\n4.3.4 / 2015-12-23\r\n==================\r\n * fix: upgrade mongodb driver to 2.1.2 for repl set error #3712 [sansmischevia](https://github.com/sansmischevia)\r\n * docs: validation docs typo #3709 [ivanmaeder](https://github.com/ivanmaeder)\r\n * style: remove unused variables #3708 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix(schema): duck-typing for schemas #3703 [mgcrea](https://github.com/mgcrea)\r\n * docs: connection sample code issue #3697\r\n * fix(schema): duck-typing for schemas #3693 [mgcrea](https://github.com/mgcrea)\r\n * docs: clarify id schema option #3638\r\n\r\n4.3.3 / 2015-12-18\r\n==================\r\n * fix(connection): properly support 'replSet' as well as 'replset' #3688 [taxilian](https://github.com/taxilian)\r\n * fix(document): single nested doc pre hooks called before nested doc array #3687 [aliatsis](https://github.com/aliatsis)\r\n\r\n4.3.2 / 2015-12-17\r\n==================\r\n * fix(document): .set() into single nested schemas #3686\r\n * fix(connection): support 'replSet' as well as 'replset' option #3685\r\n * fix(document): bluebird unhandled rejection when validating doc arrays #3681\r\n * fix(document): hooks for doc arrays in single nested schemas #3680\r\n * fix(document): post hooks for single nested schemas #3679\r\n * fix: remove unused npm module #3674 [sybarite](https://github.com/sybarite)\r\n * fix(model): don't swallow exceptions in nested doc save callback #3671\r\n * docs: update keepAlive info #3667 [ChrisZieba](https://github.com/ChrisZieba)\r\n * fix(document): strict 'throw' throws a specific mongoose error #3662\r\n * fix: flakey test #3332\r\n * fix(query): more robust check for RegExp #2969\r\n\r\n4.3.1 / 2015-12-11\r\n==================\r\n * feat(aggregate): `.sample()` helper #3665\r\n * fix(query): bitwise query operators with buffers #3663\r\n * docs(migration): clarify `new` option and findByIdAndUpdate #3661\r\n\r\n4.3.0 / 2015-12-09\r\n==================\r\n * feat(query): support for mongodb 3.2 bitwise query operators #3660\r\n * style: use comma-last style consistently #3657 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * feat: upgrade mongodb driver to 2.1.0 for full MongoDB 3.2 support #3656\r\n * feat(aggregate): `.lookup()` helper #3532\r\n\r\n4.2.10 / 2015-12-08\r\n===================\r\n * fixed; upgraded marked #3653 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * docs; cross-db populate #3648\r\n * docs; update mocha URL #3646 [ojhaujjwal](https://github.com/ojhaujjwal)\r\n * fixed; call close callback asynchronously #3645\r\n * docs; virtuals.html issue #3644 [Psarna94](https://github.com/Psarna94)\r\n * fixed; single embedded doc casting on init #3642\r\n * docs; validation docs improvements #3640\r\n\r\n4.2.9 / 2015-12-02\r\n==================\r\n * docs; defaults docs #3625\r\n * fix; nested numeric keys causing an embedded document crash #3623\r\n * fix; apply path getters before virtual getters #3618\r\n * fix; casting for arrays in single nested schemas #3616\r\n\r\n4.2.8 / 2015-11-25\r\n==================\r\n * docs; clean up README links #3612 [ReadmeCritic](https://github.com/ReadmeCritic)\r\n * fix; ESLint improvements #3605 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fix; assigning single nested subdocs #3601\r\n * docs; describe custom logging functions in `mongoose.set()` docs #3557\r\n\r\n4.2.7 / 2015-11-20\r\n==================\r\n * fixed; readPreference connection string option #3600\r\n * fixed; pulling from manually populated arrays #3598 #3579\r\n * docs; FAQ about OverwriteModelError #3597 [stcruy](https://github.com/stcruy)\r\n * fixed; setting single embedded schemas to null #3596\r\n * fixed; indexes for single embedded schemas #3594\r\n * docs; clarify projection for `findOne()` #3593 [gunar](https://github.com/gunar)\r\n * fixed; .ownerDocument() method on single embedded schemas #3589\r\n * fixed; properly throw casterror for query on single embedded schema #3580\r\n * upgraded; mongodb driver -> 2.0.49 for reconnect issue fix #3481\r\n\r\n4.2.6 / 2015-11-16\r\n==================\r\n * fixed; ability to manually populate an array #3575\r\n * docs; clarify `isAsync` parameter to hooks #3573\r\n * fixed; use captureStackTrace if possible instead #3571\r\n * fixed; crash with buffer and update validators #3565 [johnpeb](https://github.com/johnpeb)\r\n * fixed; update casting with operators overwrite: true #3564\r\n * fixed; validation with single embedded docs #3562\r\n * fixed; inline docs inherit parents $type key #3560\r\n * docs; bad grammar in populate docs #3559 [amaurymedeiros](https://github.com/amaurymedeiros)\r\n * fixed; properly handle populate option for find() #2321\r\n\r\n3.8.37 / 2015-11-16\r\n===================\r\n * fixed; use retainKeyOrder for cloning update op #3572\r\n\r\n4.2.5 / 2015-11-09\r\n==================\r\n * fixed; handle setting fields in pre update hooks with exec #3549\r\n * upgraded; ESLint #3547 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fixed; bluebird unhandled rejections with cast errors and .exec #3543\r\n * fixed; min/max validators handling undefined #3539\r\n * fixed; standalone mongos connections #3537\r\n * fixed; call `.toObject()` when setting a single nested doc #3535\r\n * fixed; single nested docs now have methods #3534\r\n * fixed; single nested docs with .create() #3533 #3521 [tusbar](https://github.com/tusbar)\r\n * docs; deep populate docs #3528\r\n * fixed; deep populate schema ref handling #3507\r\n * upgraded; mongodb driver -> 2.0.48 for sort overflow issue #3493\r\n * docs; clarify default ids for discriminators #3482\r\n * fixed; properly support .update(doc) #3221\r\n\r\n4.2.4 / 2015-11-02\r\n==================\r\n * fixed; upgraded `ms` package for security vulnerability #3524 [fhemberger](https://github.com/fhemberger)\r\n * fixed; ESlint rules #3517 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * docs; typo in aggregation docs #3513 [rafakato](https://github.com/rafakato)\r\n * fixed; add `dontThrowCastError` option to .update() for promises #3512\r\n * fixed; don't double-cast buffers in node 4.x #3510 #3496\r\n * fixed; population with single embedded schemas #3501\r\n * fixed; pre('set') hooks work properly #3479\r\n * docs; promises guide #3441\r\n\r\n4.2.3 / 2015-10-26\r\n==================\r\n * docs; remove unreferenced function in middleware.jade #3506\r\n * fixed; handling auth with no username/password #3500 #3498 #3484 [mleanos](https://github.com/mleanos)\r\n * fixed; more ESlint rules #3491 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fixed; swallowing exceptions in save callback #3478\r\n * docs; fixed broken links in subdocs guide #3477\r\n * fixed; casting booleans to numbers #3475\r\n * fixed; report CastError for subdoc arrays in findOneAndUpdate #3468\r\n * fixed; geoNear returns ES6 promise #3458\r\n\r\n4.2.2 / 2015-10-22\r\n==================\r\n * fixed; go back to old pluralization code #3490\r\n\r\n4.2.1 / 2015-10-22\r\n==================\r\n * fixed; pluralization issues #3492 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n\r\n4.2.0 / 2015-10-22\r\n==================\r\n * added; support for skipVersioning for document arrays #3467 [chazmo03](https://github.com/chazmo03)\r\n * added; ability to customize schema 'type' key #3459 #3245\r\n * fixed; writeConcern for index builds #3455\r\n * added; emit event when individual index build starts #3440 [objectiveSee](https://github.com/objectiveSee)\r\n * added; 'context' option for update validators #3430\r\n * refactor; pluralization now in separate pluralize-mongoose npm module #3415 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * added; customizable error validation messages #3406 [geronime](https://github.com/geronime)\r\n * added; support for passing 'minimize' option to update #3381\r\n * added; ability to customize debug logging format #3261\r\n * added; baseModelName property for discriminator models #3202\r\n * added; 'emitIndexErrors' option #3174\r\n * added; 'async' option for aggregation cursor to support buffering #3160\r\n * added; ability to skip validation for individual save() calls #2981\r\n * added; single embedded schema support #2689 #585\r\n * added; depopulate function #2509\r\n\r\n4.1.12 / 2015-10-19\r\n===================\r\n * docs; use readPreference instead of slaveOk for Query.setOptions docs #3471 [buunguyen](https://github.com/buunguyen)\r\n * fixed; more helpful error when regexp contains null bytes #3456\r\n * fixed; x509 auth issue #3454 [NoxHarmonium](https://github.com/NoxHarmonium)\r\n\r\n3.8.36 / 2015-10-18\r\n===================\r\n * fixed; Make array props non-enumerable #3461 [boblauer](https://github.com/boblauer)\r\n\r\n4.1.11 / 2015-10-12\r\n===================\r\n * fixed; update timestamps for update() if they're enabled #3450 [isayme](https://github.com/isayme)\r\n * fixed; unit test error on node 0.10 #3449 [isayme](https://github.com/isayme)\r\n * docs; timestamp option docs #3448 [isayme](https://github.com/isayme)\r\n * docs; fix unexpected indent #3443 [isayme](https://github.com/isayme)\r\n * fixed; use ES6 promises for Model.prototype.remove() #3442\r\n * fixed; don't use unused 'safe' option for index builds #3439\r\n * fixed; elemMatch casting bug #3437 #3435 [DefinitelyCarter](https://github.com/DefinitelyCarter)\r\n * docs; schema.index docs #3434\r\n * fixed; exceptions in save() callback getting swallowed on mongodb 2.4 #3371\r\n\r\n4.1.10 / 2015-10-05\r\n===================\r\n * docs; improve virtuals docs to explain virtuals schema option #3433 [zoyaH](https://github.com/zoyaH)\r\n * docs; MongoDB server version compatibility guide #3427\r\n * docs; clarify that findById and findByIdAndUpdate fire hooks #3422\r\n * docs; clean up Model.save() docs #3420\r\n * fixed; properly handle projection with just id #3407 #3412\r\n * fixed; infinite loop when database document is corrupted #3405\r\n * docs; clarify remove middleware #3388\r\n\r\n4.1.9 / 2015-09-28\r\n==================\r\n * docs; minlength and maxlength string validation docs #3368 #3413 [cosmosgenius](https://github.com/cosmosgenius)\r\n * fixed; linting for infix operators #3397 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fixed; proper casting for $all #3394\r\n * fixed; unhandled rejection warnings with .create() #3391\r\n * docs; clarify update validators on paths that aren't explicitly set #3386\r\n * docs; custom validator examples #2778\r\n\r\n4.1.8 / 2015-09-21\r\n==================\r\n * docs; fixed typo in example #3390 [kmctown](https://github.com/kmctown)\r\n * fixed; error in toObject() #3387 [guumaster](https://github.com/guumaster)\r\n * fixed; handling for casting null dates #3383 [alexmingoia](https://github.com/alexmingoia)\r\n * fixed; passing composite ids to `findByIdAndUpdate` #3380\r\n * fixed; linting #3376 #3375 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fixed; added NodeJS v4 to Travis #3374 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fixed; casting $elemMatch inside of $not #3373 [gaguirre](https://github.com/gaguirre)\r\n * fixed; handle case where $slice is 0 #3369\r\n * fixed; avoid running getters if path is populated #3357\r\n * fixed; cast documents to objects when setting to a nested path #3346\r\n\r\n4.1.7 / 2015-09-14\r\n==================\r\n * docs; typos in SchemaType documentation #3367 [jasson15](https://github.com/jasson15)\r\n * fixed; MONGOOSE_DRIVER_PATH env variable again #3360\r\n * docs; added validateSync docs #3353\r\n * fixed; set findOne op synchronously in query #3344\r\n * fixed; handling for `.pull()` on a documentarray without an id #3341\r\n * fixed; use natural order for cloning update conditions #3338\r\n * fixed; issue with strict mode casting for mixed type updates #3337\r\n\r\n4.1.6 / 2015-09-08\r\n==================\r\n * fixed; MONGOOSE_DRIVER_PATH env variable #3345 [g13013](https://github.com/g13013)\r\n * docs; global autoIndex option #3335 [albertorestifo](https://github.com/albertorestifo)\r\n * docs; model documentation typos #3330\r\n * fixed; report reason for CastError #3320\r\n * fixed; .populate() no longer returns true after re-assigning #3308\r\n * fixed; discriminators with aggregation geoNear #3304\r\n * docs; discriminator docs #2743\r\n\r\n4.1.5 / 2015-09-01\r\n==================\r\n * fixed; document.remove() removing all docs #3326 #3325\r\n * fixed; connect() checks for rs_name in options #3299\r\n * docs; examples for schema.set() #3288\r\n * fixed; checkKeys issue with bluebird #3286 [gregthegeek](https://github.com/gregthegeek)\r\n\r\n4.1.4 / 2015-08-31\r\n==================\r\n * fixed; ability to set strict: false for update #3305\r\n * fixed; .create() properly uses ES6 promises #3297\r\n * fixed; pre hooks on nested subdocs #3291 #3284 [aliatsis](https://github.com/aliatsis)\r\n * docs; remove unclear text in .remove() docs #3282\r\n * fixed; pre hooks called twice for 3rd-level nested doc #3281\r\n * fixed; nested transforms #3279\r\n * upgraded; mquery -> 1.6.3 #3278 #3272\r\n * fixed; don't swallow callback errors by default #3273 #3222\r\n * fixed; properly get nested paths from nested schemas #3265\r\n * fixed; remove() with id undefined deleting all docs #3260 [thanpolas](https://github.com/thanpolas)\r\n * fixed; handling for non-numeric projections #3256\r\n * fixed; findById with id undefined returning first doc #3255\r\n * fixed; use retainKeyOrder for update #3215\r\n * added; passRawResult option to findOneAndUpdate for backwards compat #3173\r\n\r\n4.1.3 / 2015-08-16\r\n==================\r\n * fixed; getUpdate() in pre update hooks #3520 [gregthegeek](https://github.com/gregthegeek)\r\n * fixed; handleArray() ensures arg is an array #3238 [jloveridge](https://github.com/jloveridge)\r\n * fixed; refresh required path cache when recreating docs #3199\r\n * fixed; $ operator on unwind aggregation helper #3197\r\n * fixed; findOneAndUpdate() properly returns raw result as third arg to callback #3173\r\n * fixed; querystream with dynamic refs #3108\r\n\r\n3.8.35 / 2015-08-14\r\n===================\r\n * fixed; handling for minimize on nested objects #2930\r\n * fixed; don't crash when schema.path.options undefined #1824\r\n\r\n4.1.2 / 2015-08-10\r\n==================\r\n * fixed; better handling for Jade templates #3241 [kbadk](https://github.com/kbadk)\r\n * added; ESlint trailing spaces #3234 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * added; ESlint #3191 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fixed; properly emit event on disconnect #3183\r\n * fixed; copy options properly using Query.toConstructor() #3176\r\n * fixed; setMaxListeners() issue in browser build #3170\r\n * fixed; node driver -> 2.0.40 to not store undefined keys as null #3169\r\n * fixed; update validators handle positional operator #3167\r\n * fixed; handle $all + $elemMatch query casting #3163\r\n * fixed; post save hooks don't swallow extra args #3155\r\n * docs; spelling mistake in index.jade #3154\r\n * fixed; don't crash when toObject() has no fields #3130\r\n * fixed; apply toObject() recursively for find and update queries #3086 [naoina](https://github.com/naoina)\r\n\r\n4.1.1 / 2015-08-03\r\n==================\r\n * fixed; aggregate exec() crash with no callback #3212 #3198 [jpgarcia](https://github.com/jpgarcia)\r\n * fixed; pre init hooks now properly synchronous #3207 [burtonjc](https://github.com/burtonjc)\r\n * fixed; updateValidators doesn't flatten dates #3206 #3194 [victorkohl](https://github.com/victorkohl)\r\n * fixed; default fields don't make document dirty between saves #3205 [burtonjc](https://github.com/burtonjc)\r\n * fixed; save passes 0 as numAffected rather than undefined when no change #3195 [burtonjc](https://github.com/burtonjc)\r\n * fixed; better handling for positional operator in update #3185\r\n * fixed; use Travis containers #3181 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n * fixed; leaked variable #3180 [ChristianMurphy](https://github.com/ChristianMurphy)\r\n\r\n4.1.0 / 2015-07-24\r\n==================\r\n * added; `schema.queue()` now public #3193\r\n * added; raw result as third parameter to findOneAndX callback #3173\r\n * added; ability to run validateSync() on only certain fields #3153\r\n * added; subPopulate #3103 [timbur](https://github.com/timbur)\r\n * added; $isDefault function on documents #3077\r\n * added; additional properties for built-in validator messages #3063 [KLicheR](https://github.com/KLicheR)\r\n * added; getQuery() and getUpdate() functions for Query #3013\r\n * added; export DocumentProvider #2996\r\n * added; ability to remove path from schema #2993 [JohnnyEstilles](https://github.com/JohnnyEstilles)\r\n * added; .explain() helper for aggregate #2714\r\n * added; ability to specify which ES6-compatible promises library mongoose uses #2688\r\n * added; export Aggregate #1910\r\n\r\n4.0.8 / 2015-07-20\r\n==================\r\n * fixed; assignment with document arrays #3178 [rosston](https://github.com/rosston)\r\n * docs; remove duplicate paragraph #3164 [rhmeeuwisse](https://github.com/rhmeeuwisse)\r\n * docs; improve findOneAndXYZ parameter descriptions #3159 [rhmeeuwisse](https://github.com/rhmeeuwisse)\r\n * docs; add findOneAndRemove to list of supported middleware #3158\r\n * docs; clarify ensureIndex #3156\r\n * fixed; refuse to save/remove document without id #3118\r\n * fixed; hooks next() no longer accidentally returns promise #3104\r\n * fixed; strict mode for findOneAndUpdate #2947\r\n * added; .min.js.gz file for browser component #2806\r\n\r\n3.8.34 / 2015-07-20\r\n===================\r\n * fixed; allow using $rename #3171\r\n * fixed; no longer modifies update arguments #3008\r\n\r\n4.0.7 / 2015-07-11\r\n==================\r\n * fixed; documentarray id method when using object id #3157 [siboulet](https://github.com/siboulet)\r\n * docs; improve findById docs #3147\r\n * fixed; update validators handle null properly #3136 [odeke-em](https://github.com/odeke-em)\r\n * docs; jsdoc syntax errors #3128 [rhmeeuwisse](https://github.com/rhmeeuwisse)\r\n * docs; fix typo #3126 [rhmeeuwisse](https://github.com/rhmeeuwisse)\r\n * docs; proper formatting in queries.jade #3121 [rhmeeuwisse](https://github.com/rhmeeuwisse)\r\n * docs; correct example for string maxlength validator #3111 [rhmeeuwisse](https://github.com/rhmeeuwisse)\r\n * fixed; setDefaultsOnInsert with arrays #3107\r\n * docs; LearnBoost -> Automattic in package.json #3099\r\n * docs; pre update hook example #3094 [danpe](https://github.com/danpe)\r\n * docs; clarify query middleware example #3051\r\n * fixed; ValidationErrors in strict mode #3046\r\n * fixed; set findOneAndUpdate properties before hooks run #3024\r\n\r\n3.8.33 / 2015-07-10\r\n===================\r\n * upgraded; node driver -> 1.4.38\r\n * fixed; dont crash when `match` validator undefined\r\n\r\n4.0.6 / 2015-06-21\r\n==================\r\n * upgraded; node driver -> 2.0.34 #3087\r\n * fixed; apply setters on addToSet, etc #3067 [victorkohl](https://github.com/victorkohl)\r\n * fixed; missing semicolons #3065 [sokolikp](https://github.com/sokolikp)\r\n * fixed; proper handling for async doc hooks #3062 [gregthegeek](https://github.com/gregthegeek)\r\n * fixed; dont set failed populate field to null if other docs are successfully populated #3055 [eloytoro](https://github.com/eloytoro)\r\n * fixed; setDefaultsOnInsert with document arrays #3034 [taxilian](https://github.com/taxilian)\r\n * fixed; setters fired on array items #3032\r\n * fixed; stop validateSync() on first error #3025 [victorkohl](https://github.com/victorkohl)\r\n * docs; improve query docs #3016\r\n * fixed; always exclude _id when its deselected #3010\r\n * fixed; enum validator kind property #3009\r\n * fixed; mquery collection names #3005\r\n * docs; clarify mongos option #3000\r\n * docs; clarify that query builder has a .then() #2995\r\n * fixed; race condition in dynamic ref #2992\r\n\r\n3.8.31 / 2015-06-20\r\n===================\r\n * fixed; properly handle text search with discriminators and $meta #2166\r\n\r\n4.0.5 / 2015-06-05\r\n==================\r\n * fixed; ObjectIds and buffers when mongodb driver is a sibling dependency #3050 #3048 #3040 #3031 #3020 #2988 #2951\r\n * fixed; warn user when 'increment' is used in schema #3039\r\n * fixed; setDefaultsOnInsert with array in schema #3035\r\n * fixed; dont use default Object toString to cast to string #3030\r\n * added; npm badge #3020 [odeke-em](https://github.com/odeke-em)\r\n * fixed; proper handling for calling .set() with a subdoc #2782\r\n * fixed; dont throw cast error when using $rename on non-string path #1845\r\n\r\n3.8.30 / 2015-06-05\r\n===================\r\n * fixed; enable users to set all options with tailable() #2883\r\n\r\n4.0.4 / 2015-05-28\r\n==================\r\n * docs; findAndModify new parameter correct default value #3012 [JonForest](https://github.com/JonForest)\r\n * docs; clarify pluralization rules #2999 [anonmily](https://github.com/anonmily)\r\n * fix; discriminators with schema methods #2978\r\n * fix; make `isModified` a schema reserved keyword #2975\r\n * fix; properly fire setters when initializing path with object #2943\r\n * fix; can use `setDefaultsOnInsert` without specifying `runValidators` #2938\r\n * fix; always set validation errors `kind` property #2885\r\n * upgraded; node driver -> 2.0.33 #2865\r\n\r\n3.8.29 / 2015-05-27\r\n===================\r\n * fixed; Handle JSON.stringify properly for nested docs #2990\r\n\r\n4.0.3 / 2015-05-13\r\n==================\r\n * upgraded; mquery -> 1.5.1 #2983\r\n * docs; clarify context for query middleware #2974\r\n * docs; fix missing type -> kind rename in History.md #2961\r\n * fixed; broken ReadPreference include on Heroku #2957\r\n * docs; correct form for cursor aggregate option #2955\r\n * fixed; sync post hooks now properly called after function #2949 #2925\r\n * fixed; fix sub-doc validate() function #2929\r\n * upgraded; node driver -> 2.0.30 #2926\r\n * docs; retainKeyOrder for save() #2924\r\n * docs; fix broken class names #2913\r\n * fixed; error when using node-clone on a doc #2909\r\n * fixed; no more hard references to bson #2908 #2906\r\n * fixed; dont overwrite array values #2907 [naoina](https://github.com/naoina)\r\n * fixed; use readPreference=primary for findOneAndUpdate #2899 #2823\r\n * docs; clarify that update validators only run on $set and $unset #2889\r\n * fixed; set kind consistently for built-in validators #2885\r\n * docs; single field populated documents #2884\r\n * fixed; nested objects are now enumerable #2880 [toblerpwn](https://github.com/toblerpwn)\r\n * fixed; properly populate field when ref, lean, stream used together #2841\r\n * docs; fixed migration guide jade error #2807\r\n\r\n3.8.28 / 2015-05-12\r\n===================\r\n * fixed; proper handling for toJSON options #2910\r\n * fixed; dont attach virtuals to embedded docs in update() #2046\r\n\r\n4.0.2 / 2015-04-23\r\n==================\r\n * fixed; error thrown when calling .validate() on subdoc not in an array #2902\r\n * fixed; rename define() to play nice with webpack #2900 [jspears](https://github.com/jspears)\r\n * fixed; pre validate called twice with discriminators #2892\r\n * fixed; .inspect() on mongoose.Types #2875\r\n * docs; correct callback params for Model.update #2872\r\n * fixed; setDefaultsOnInsert now works when runValidators not specified #2870\r\n * fixed; Document now wraps EventEmitter.addListener #2867\r\n * fixed; call non-hook functions in schema queue #2856\r\n * fixed; statics can be mocked out for tests #2848 [ninelb](https://github.com/ninelb)\r\n * upgraded; mquery 1.4.0 for bluebird bug fix #2846\r\n * fixed; required validators run first #2843\r\n * docs; improved docs for new option to findAndMody #2838\r\n * docs; populate example now uses correct field #2837 [swilliams](https://github.com/swilliams)\r\n * fixed; pre validate changes causing VersionError #2835\r\n * fixed; get path from correct place when setting CastError #2832\r\n * docs; improve docs for Model.update() function signature #2827 [irnc](https://github.com/irnc)\r\n * fixed; populating discriminators #2825 [chetverikov](https://github.com/chetverikov)\r\n * fixed; discriminators with nested schemas #2821\r\n * fixed; CastErrors with embedded docs #2819\r\n * fixed; post save hook context #2816\r\n * docs; 3.8.x -> 4.x migration guide #2807\r\n * fixed; proper _distinct copying for query #2765 [cdelauder](https://github.com/cdelauder)\r\n\r\n3.8.27 / 2015-04-22\r\n===================\r\n * fixed; dont duplicate db calls on Q.ninvoke() #2864\r\n * fixed; Model.find arguments naming in docs #2828\r\n * fixed; Support ipv6 in connection strings #2298\r\n\r\n3.8.26 / 2015-04-07\r\n===================\r\n * fixed; TypeError when setting date to undefined #2833\r\n * fixed; handle CastError properly in distinct() with no callback #2786\r\n * fixed; broken links in queries docs #2779\r\n * fixed; dont mark buffer as modified when setting type initially #2738\r\n * fixed; dont crash when using slice with populate #1934\r\n\r\n4.0.1 / 2015-03-28\r\n==================\r\n * fixed; properly handle empty cast doc in update() with promises #2796\r\n * fixed; unstable warning #2794\r\n * fixed; findAndModify docs now show new option is false by default #2793\r\n\r\n4.0.0 / 2015-03-25\r\n==================\r\n * fixed; on-the-fly schema docs typo #2783 [artiifix](https://github.com/artiifix)\r\n * fixed; cast error validation handling #2775 #2766 #2678\r\n * fixed; discriminators with populate() #2773 #2719 [chetverikov](https://github.com/chetverikov)\r\n * fixed; increment now a reserved path #2709\r\n * fixed; avoid sending duplicate object ids in populate() #2683\r\n * upgraded; mongodb to 2.0.24 to properly emit reconnect event multiple times #2656\r\n\r\n4.0.0-rc4 / 2015-03-14\r\n======================\r\n * fixed; toObject virtuals schema option handled properly #2751\r\n * fixed; update validators work on document arrays #2733\r\n * fixed; check for cast errors on $set #2729\r\n * fixed; instance field set for all schema types #2727 [csdco](https://github.com/csdco)\r\n * fixed; dont run other validators if required fails #2725\r\n * fixed; custom getters execute on ref paths #2610\r\n * fixed; save defaults if they were set when doc was loaded from db #2558\r\n * fixed; pre validate now runs before pre save #2462\r\n * fixed; no longer throws errors with --use_strict #2281\r\n\r\n3.8.25 / 2015-03-13\r\n===================\r\n * fixed; debug output reverses order of aggregation keys #2759\r\n * fixed; $eq is a valid query selector in 3.0 #2752\r\n * fixed; upgraded node driver to 1.4.32 for handling non-numeric poolSize #2682\r\n * fixed; update() with overwrite sets _id for nested docs #2658\r\n * fixed; casting for operators in $elemMatch #2199\r\n\r\n4.0.0-rc3 / 2015-02-28\r\n======================\r\n * fixed; update() pre hooks run before validators #2706\r\n * fixed; setters not called on arrays of refs #2698 [brandom](https://github.com/brandom)\r\n * fixed; use node driver 2.0.18 for nodejs 0.12 support #2685\r\n * fixed; comments reference file that no longer exists #2681\r\n * fixed; populated() returns _id of manually populated doc #2678\r\n * added; ability to exclude version key in toObject() #2675\r\n * fixed; dont allow setting nested path to a string #2592\r\n * fixed; can cast objects with _id field to ObjectIds #2581\r\n * fixed; on-the-fly schema getters #2360\r\n * added; strict option for findOneAndUpdate() #1967\r\n\r\n3.8.24 / 2015-02-25\r\n===================\r\n * fixed; properly apply child schema transforms #2691\r\n * fixed; make copy of findOneAndUpdate options before modifying #2687\r\n * fixed; apply defaults when parent path is selected #2670 #2629\r\n * fixed; properly get ref property for nested paths #2665\r\n * fixed; node driver makes copy of authenticate options before modifying them #2619\r\n * fixed; dont block process exit when auth fails #2599\r\n * fixed; remove redundant clone in update() #2537\r\n\r\n4.0.0-rc2 / 2015-02-10\r\n======================\r\n * added; io.js to travis build\r\n * removed; browser build dependencies not installed by default\r\n * added; dynamic refpaths #2640 [chetverikov](https://github.com/chetverikov)\r\n * fixed; dont call child schema transforms on parent #2639 [chetverikov](https://github.com/chetverikov)\r\n * fixed; get rid of remove option if new is set in findAndModify #2598\r\n * fixed; aggregate all document array validation errors #2589\r\n * fixed; custom setters called when setting value to undefined #1892\r\n\r\n3.8.23 / 2015-02-06\r\n===================\r\n * fixed; unset opts.remove when upsert is true #2519\r\n * fixed; array saved as object when path is object in array #2442\r\n * fixed; inline transforms #2440\r\n * fixed; check for callback in count() #2204\r\n * fixed; documentation for selecting fields #1534\r\n\r\n4.0.0-rc1 / 2015-02-01\r\n======================\r\n * fixed; use driver 2.0.14\r\n * changed; use transform: true by default #2245\r\n\r\n4.0.0-rc0 / 2015-01-31\r\n===================\r\n * fixed; wrong order for distinct() params #2628\r\n * fixed; handling no query argument to remove() #2627\r\n * fixed; createModel and discriminators #2623 [ashaffer](https://github.com/ashaffer)\r\n * added; pre('count') middleware #2621\r\n * fixed; double validation calls on document arrays #2618\r\n * added; validate() catches cast errors #2611\r\n * fixed; respect replicaSet parameter in connection string #2609\r\n * added; can explicitly exclude paths from versioning #2576 [csabapalfi](https://github.com/csabapalfi)\r\n * upgraded; driver to 2.0.15 #2552\r\n * fixed; save() handles errors more gracefully in ES6 #2371\r\n * fixed; undefined is now a valid argument to findOneAndUpdate #2272\r\n * changed; `new` option to findAndModify ops is false by default #2262\r\n\r\n3.8.22 / 2015-01-24\r\n===================\r\n * upgraded; node-mongodb-native to 1.4.28 #2587 [Climax777](https://github.com/Climax777)\r\n * added; additional documentation for validators #2449\r\n * fixed; stack overflow when creating massive arrays #2423\r\n * fixed; undefined is a valid id for queries #2411\r\n * fixed; properly create nested schema index when same schema used twice #2322\r\n * added; link to plugin generator in docs #2085 [huei90](https://github.com/huei90)\r\n * fixed; optional arguments documentation for findOne() #1971 [nachinius](https://github.com/nachinius)\r\n\r\n3.9.7 / 2014-12-19\r\n===================\r\n * added; proper cursors for aggregate #2539 [changyy](https://github.com/changyy)\r\n * added; min/max built-in validators for dates #2531 [bshamblen](https://github.com/bshamblen)\r\n * fixed; save and validate are now reserved keywords #2380\r\n * added; basic documentation for browser component #2256\r\n * added; find and findOne hooks (query middleware) #2138\r\n * fixed; throw a DivergentArrayError when saving positional operator queries #2031\r\n * added; ability to use options as a document property #1416\r\n * fixed; document no longer inherits from event emitter and so domain and _events are no longer reserved #1351\r\n * removed; setProfiling #1349\r\n\r\n3.8.21 / 2014-12-18\r\n===================\r\n * fixed; syntax in index.jade #2517 [elderbas](https://github.com/elderbas)\r\n * fixed; writable statics #2510 #2528\r\n * fixed; overwrite and explicit $set casting #2515\r\n\r\n3.9.6 / 2014-12-05\r\n===================\r\n * added; correctly run validators on each element of array when entire array is modified #661 #1227\r\n * added; castErrors in validation #1013 [jondavidjohn](https://github.com/jondavidjohn)\r\n * added; specify text indexes in schema fields #1401 [sr527](https://github.com/sr527)\r\n * added; ability to set field with validators to undefined #1594 [alabid](https://github.com/alabid)\r\n * added; .create() returns an array when passed an array #1746 [alabid](https://github.com/alabid)\r\n * added; test suite and docs for use with co and yield #2177 #2474\r\n * fixed; subdocument toObject() transforms #2447 [chmanie](https://github.com/chmanie)\r\n * fixed; Model.create() with save errors #2484\r\n * added; pass options to .save() and .remove() #2494 [jondavidjohn](https://github.com/jondavidjohn)\r\n\r\n3.8.20 / 2014-12-01\r\n===================\r\n * fixed; recursive readPref #2490 [kjvalencik](https://github.com/kjvalencik)\r\n * fixed; make sure to copy parameters to update() before modifying #2406 [alabid](https://github.com/alabid)\r\n * fixed; unclear documentation about query callbacks #2319\r\n * fixed; setting a schema-less field to an empty object #2314 [alabid](https://github.com/alabid)\r\n * fixed; registering statics and methods for discriminators #2167 [alabid](https://github.com/alabid)\r\n\r\n3.9.5 / 2014-11-10\r\n===================\r\n * added; ability to disable autoIndex on a per-connection basis #1875 [sr527](https://github.com/sr527)\r\n * fixed; `geoNear()` no longer enforces legacy coordinate pairs - supports GeoJSON #1987 [alabid](https://github.com/alabid)\r\n * fixed; browser component works when minified with mangled variable names #2302\r\n * fixed; `doc.errors` now cleared before `validate()` called #2302\r\n * added; `execPopulate()` function to make `doc.populate()` compatible with promises #2317\r\n * fixed; `count()` no longer throws an error when used with `sort()` #2374\r\n * fixed; `save()` no longer recursively calls `save()` on populated fields #2418\r\n\r\n3.8.19 / 2014-11-09\r\n===================\r\n * fixed; make sure to not override subdoc _ids on find #2276 [alabid](https://github.com/alabid)\r\n * fixed; exception when comparing two documents when one lacks _id #2333 [slawo](https://github.com/slawo)\r\n * fixed; getters for properties with non-strict schemas #2439 [alabid](https://github.com/alabid)\r\n * fixed; inconsistent URI format in docs #2414 [sr527](https://github.com/sr527)\r\n\r\n3.9.4 / 2014-10-25\r\n==================\r\n * fixed; statics no longer can be overwritten #2343 [nkcmr](https://github.com/chetverikov)\r\n * added; ability to set single populated paths to documents #1530\r\n * added; setDefaultsOnInsert and runValidator options for findOneAndUpdate() #860\r\n\r\n3.8.18 / 2014-10-22\r\n==================\r\n * fixed; Dont use all toObject options in save #2340 [chetverikov](https://github.com/chetverikov)\r\n\r\n3.9.3 / 2014-10-01\r\n=================\r\n * added; support for virtuals that return objects #2294\r\n * added; ability to manually hydrate POJOs into mongoose objects #2292\r\n * added; setDefaultsOnInsert and runValidator options for update() #860\r\n\r\n3.8.17 / 2014-09-29\r\n==================\r\n * fixed; use schema options retainKeyOrder in save() #2274\r\n * fixed; fix skip in populate when limit is set #2252\r\n * fixed; fix stack overflow when passing MongooseArray to findAndModify #2214\r\n * fixed; optimize .length usage in populate #2289\r\n\r\n3.9.2 / 2014-09-08\r\n==================\r\n * added; test coverage for browser component #2255\r\n * added; in-order execution of validators #2243\r\n * added; custom fields for validators #2132\r\n * removed; exception thrown when find() used with count() #1950\r\n\r\n3.8.16 / 2014-09-08\r\n==================\r\n * fixed; properly remove modified array paths if array has been overwritten #1638\r\n * fixed; key check errors #1884\r\n * fixed; make sure populate on an array always returns a Mongoose array #2214\r\n * fixed; SSL connections with node 0.11 #2234\r\n * fixed; return sensible strings for promise errors #2239\r\n\r\n3.9.1 / 2014-08-17\r\n==================\r\n * added; alpha version of browser-side schema validation #2254\r\n * added; support passing a function to schemas `required` field #2247\r\n * added; support for setting updatedAt and createdAt timestamps #2227\r\n * added; document.validate() returns a promise #2131\r\n\r\n3.8.15 / 2014-08-17\r\n==================\r\n * fixed; Replica set connection string example in docs #2246\r\n * fixed; bubble up parseError event #2229\r\n * fixed; removed buggy populate cache #2176\r\n * fixed; dont $inc versionKey if its being $set #1933\r\n * fixed; cast $or and $and in $pull #1932\r\n * fixed; properly cast to schema in stream() #1862\r\n * fixed; memory leak in nested objects #1565 #2211 [devongovett](https://github.com/devongovett)\r\n\r\n3.8.14 / 2014-07-26\r\n==================\r\n * fixed; stringifying MongooseArray shows nested arrays #2002\r\n * fixed; use populated doc schema in toObject and toJSON by default #2035\r\n * fixed; dont crash on arrays containing null #2140\r\n * fixed; model.update w/ upsert has same return values on .exec and promise #2143\r\n * fixed; better handling for populate limit with multiple documents #2151\r\n * fixed; dont prevent users from adding weights to text index #2183\r\n * fixed; helper for aggregation cursor #2187\r\n * updated; node-mongodb-native to 1.4.7\r\n\r\n3.8.13 / 2014-07-15\r\n==================\r\n * fixed; memory leak with isNew events #2159\r\n * fixed; docs for overwrite option for update() #2144\r\n * fixed; storeShard() handles dates properly #2127\r\n * fixed; sub-doc changes not getting persisted to db after save #2082\r\n * fixed; populate with _id: 0 actually removes _id instead of setting to undefined #2123\r\n * fixed; save versionKey on findOneAndUpdate w/ upsert #2122\r\n * fixed; fix typo in 2.8 docs #2120 [shakirullahi](https://github.com/shakirullahi)\r\n * fixed; support maxTimeMs #2102 [yuukinajima](https://github.com/yuukinajima)\r\n * fixed; support $currentDate #2019\r\n * fixed; $addToSet handles objects without _ids properly #1973\r\n * fixed; dont crash on invalid nearSphere query #1874\r\n\r\n3.8.12 / 2014-05-30\r\n==================\r\n * fixed; single-server reconnect event fires #1672\r\n * fixed; sub-docs not saved when pushed into populated array #1794\r\n * fixed; .set() sometimes converts embedded docs to pojos #1954 [archangel-irk](https://github.com/archangel-irk)\r\n * fixed; sub-doc changes not getting persisted to db after save #2082\r\n * fixed; custom getter might cause mongoose to mistakenly think a path is dirty #2100 [pgherveou](https://github.com/pgherveou)\r\n * fixed; chainable helper for allowDiskUse option in aggregation #2114\r\n\r\n3.9.0 (unstable) / 2014-05-22\r\n==================\r\n * changed; added `domain` to reserved keywords #1338 #2052 [antoinepairet](https://github.com/antoinepairet)\r\n * added; asynchronous post hooks #1977 #2081 [chopachom](https://github.com/chopachom) [JasonGhent](https://github.com/JasonGhent)\r\n * added; using model for population, cross-db populate [mihai-chiorean](https://github.com/mihai-chiorean)\r\n * added; can define a type for schema validators\r\n * added; `doc.remove()` returns a promise #1619 [refack](https://github.com/refack)\r\n * added; internal promises for hooks, pre-save hooks run in parallel #1732 [refack](https://github.com/refack)\r\n * fixed; geoSearch hanging when no results returned #1846 [ghartnett](https://github.com/ghartnett)\r\n * fixed; do not set .type property on ValidationError, use .kind instead #1323\r\n\r\n3.8.11 / 2014-05-22\r\n==================\r\n * updated; node-mongodb-native to 1.4.5\r\n * reverted; #2052, fixes #2097\r\n\r\n3.8.10 / 2014-05-20\r\n==================\r\n\r\n * updated; node-mongodb-native to 1.4.4\r\n * fixed; _.isEqual false negatives bug in js-bson #2070\r\n * fixed; missing check for schema.options #2014\r\n * fixed; missing support for $position #2024\r\n * fixed; options object corruption #2049\r\n * fixed; improvements to virtuals docs #2055\r\n * fixed; added `domain` to reserved keywords #2052 #1338\r\n\r\n3.8.9 / 2014-05-08\r\n==================\r\n\r\n * updated; mquery to 0.7.0\r\n * updated; node-mongodb-native to 1.4.3\r\n * fixed; $near failing against MongoDB 2.6\r\n * fixed; relying on .options() to determine if collection exists\r\n * fixed; $out aggregate helper\r\n * fixed; all test failures against MongoDB 2.6.1, with caveat #2065\r\n\r\n3.8.8 / 2014-02-22\r\n==================\r\n\r\n * fixed; saving Buffers #1914\r\n * updated; expose connection states for user-land #1926 [yorkie](https://github.com/yorkie)\r\n * updated; mquery to 0.5.3\r\n * updated; added get / set to reserved path list #1903 [tstrimple](https://github.com/tstrimple)\r\n * docs; README code highlighting, syntax fixes #1930 [IonicaBizau](https://github.com/IonicaBizau)\r\n * docs; fixes link in the doc at #1925 [kapeels](https://github.com/kapeels)\r\n * docs; add a missed word 'hook' for the description of the post-hook api #1924 [ipoval](https://github.com/ipoval)\r\n\r\n3.8.7 / 2014-02-09\r\n==================\r\n\r\n * fixed; sending safe/read options in Query#exec #1895\r\n * fixed; findOneAnd..() with sort #1887\r\n\r\n3.8.6 / 2014-01-30\r\n==================\r\n\r\n * fixed; setting readPreferences #1895\r\n\r\n3.8.5 / 2014-01-23\r\n==================\r\n\r\n * fixed; ssl setting when using URI #1882\r\n * fixed; findByIdAndUpdate now respects the overwrite option #1809 [owenallenaz](https://github.com/owenallenaz)\r\n\r\n3.8.4 / 2014-01-07\r\n==================\r\n\r\n * updated; mongodb driver to 1.3.23\r\n * updated; mquery to 0.4.1\r\n * updated; mpromise to 0.4.3\r\n * fixed; discriminators now work when selecting fields #1820 [daemon1981](https://github.com/daemon1981)\r\n * fixed; geoSearch with no results timeout #1846 [ghartnett](https://github.com/ghartnett)\r\n * fixed; infitite recursion in ValidationError #1834 [chetverikov](https://github.com/chetverikov)\r\n\r\n3.8.3 / 2013-12-17\r\n==================\r\n\r\n * fixed; setting empty array with model.update #1838\r\n * docs; fix url\r\n\r\n3.8.2 / 2013-12-14\r\n==================\r\n\r\n * fixed; enum validation of multiple values #1778 [heroicyang](https://github.com/heroicyang)\r\n * fixed; global var leak #1803\r\n * fixed; post remove now fires on subdocs #1810\r\n * fixed; no longer set default empty array for geospatial-indexed fields #1668 [shirish87](https://github.com/shirish87)\r\n * fixed; model.stream() not hydrating discriminators correctly #1792 [j](https://github.com/j)\r\n * docs: Stablility -> Stability [nikmartin](https://github.com/nikmartin)\r\n * tests; improve shard error handling\r\n\r\n3.8.1 / 2013-11-19\r\n==================\r\n\r\n * fixed; mishandling of Dates with minimize/getters #1764\r\n * fixed; Normalize bugs.email, so `npm` will shut up #1769 [refack](https://github.com/refack)\r\n * docs; Improve the grammar where \"lets us\" was used #1777 [alexyoung](https://github.com/alexyoung)\r\n * docs; Fix some grammatical issues in the documentation #1777 [alexyoung](https://github.com/alexyoung)\r\n * docs; fix Query api exposure\r\n * docs; fix return description\r\n * docs; Added Notes on findAndUpdate() #1750 [sstadelman](https://github.com/sstadelman)\r\n * docs; Update version number in README #1762 [Fodi69](https://github.com/Fodi69)\r\n\r\n3.8.0 / 2013-10-31\r\n==================\r\n\r\n * updated; warn when using an unstable version\r\n * updated; error message returned in doc.save() #1595\r\n * updated; mongodb driver to 1.3.19 (fix error swallowing behavior)\r\n * updated; mquery to 0.3.2\r\n * updated; mocha to 1.12.0\r\n * updated; mpromise 0.3.0\r\n * updated; sliced 0.0.5\r\n * removed; mongoose.Error.DocumentError (never used)\r\n * removed; namedscope (undocumented and broken) #679 #642 #455 #379\r\n * changed; no longer offically supporting node 0.6.x\r\n * changed; query.within getter is now a method -> query.within()\r\n * changed; query.intersects getter is now a method -> query.intersects()\r\n * added; custom error msgs for built-in validators #747\r\n * added; discriminator support #1647 #1003 [j](https://github.com/j)\r\n * added; support disabled collection name pluralization #1350 #1707 [refack](https://github.com/refack)\r\n * added; support for GeoJSON to Query#near [ebensing](https://github.com/ebensing)\r\n * added; stand-alone base query support - query.toConstructor() [ebensing](https://github.com/ebensing)\r\n * added; promise support to geoSearch #1614 [ebensing](https://github.com/ebensing)\r\n * added; promise support for geoNear #1614 [ebensing](https://github.com/ebensing)\r\n * added; connection.useDb() #1124 [ebensing](https://github.com/ebensing)\r\n * added; promise support to model.mapReduce()\r\n * added; promise support to model.ensureIndexes()\r\n * added; promise support to model.populate()\r\n * added; benchmarks [ebensing](https://github.com/ebensing)\r\n * added; publicly exposed connection states #1585\r\n * added; $geoWithin support #1529 $1455 [ebensing](https://github.com/ebensing)\r\n * added; query method chain validation\r\n * added; model.update `overwrite` option\r\n * added; model.geoNear() support #1563 [ebensing](https://github.com/ebensing)\r\n * added; model.geoSearch() support #1560 [ebensing](https://github.com/ebensing)\r\n * added; MongooseBuffer#subtype()\r\n * added; model.create() now returns a promise #1340\r\n * added; support for `awaitdata` query option\r\n * added; pass the doc to doc.remove() callback #1419 [JoeWagner](https://github.com/JoeWagner)\r\n * added; aggregation query builder #1404 [njoyard](https://github.com/njoyard)\r\n * fixed; document.toObject when using `minimize` and `getters` options #1607 [JedWatson](https://github.com/JedWatson)\r\n * fixed; Mixed types can now be required #1722 [Reggino](https://github.com/Reggino)\r\n * fixed; do not pluralize model names not ending with letters #1703 [refack](https://github.com/refack)\r\n * fixed; repopulating modified populated paths #1697\r\n * fixed; doc.equals() when _id option is set to false #1687\r\n * fixed; strict mode warnings #1686\r\n * fixed; $near GeoJSON casting #1683\r\n * fixed; nearSphere GeoJSON query builder\r\n * fixed; population field selection w/ strings #1669\r\n * fixed; setters not firing on null values #1445 [ebensing](https://github.com/ebensing)\r\n * fixed; handle another versioning edge case #1520\r\n * fixed; excluding subdocument fields #1280 [ebensing](https://github.com/ebensing)\r\n * fixed; allow array properties to be set to null with findOneAndUpdate [aheuermann](https://github.com/aheuermann)\r\n * fixed; subdocuments now use own toJSON opts #1376 [ebensing](https://github.com/ebensing)\r\n * fixed; model#geoNear fulfills promise when results empty #1658 [ebensing](https://github.com/ebensing)\r\n * fixed; utils.merge no longer overrides props and methods #1655 [j](https://github.com/j)\r\n * fixed; subdocuments now use their own transform #1412 [ebensing](https://github.com/ebensing)\r\n * fixed; model.remove() removes only what is necessary #1649\r\n * fixed; update() now only runs with cb or explicit true #1644\r\n * fixed; casting ref docs on creation #1606 [ebensing](https://github.com/ebensing)\r\n * fixed; model.update \"overwrite\" option works as documented\r\n * fixed; query#remove() works as documented\r\n * fixed; \"limit\" correctly applies to individual items on population #1490 [ebensing](https://github.com/ebensing)\r\n * fixed; issue with positional operator on ref docs #1572 [ebensing](https://github.com/ebensing)\r\n * fixed; benchmarks to actually output valid json\r\n * deprecated; promise#addBack (use promise#onResolve)\r\n * deprecated; promise#complete (use promise#fulfill)\r\n * deprecated; promise#addCallback (use promise#onFulFill)\r\n * deprecated; promise#addErrback (use promise#onReject)\r\n * deprecated; query.nearSphere() (use query.near)\r\n * deprecated; query.center() (use query.circle)\r\n * deprecated; query.centerSphere() (use query.circle)\r\n * deprecated; query#slaveOk (use query#read)\r\n * docs; custom validator messages\r\n * docs; 10gen -> MongoDB\r\n * docs; add Date method caveats #1598\r\n * docs; more validation details\r\n * docs; state which branch is stable/unstable\r\n * docs; mention that middleware does not run on Models\r\n * docs; promise.fulfill()\r\n * docs; fix readme spelling #1483 [yorchopolis](https://github.com/yorchopolis)\r\n * docs; fixed up the README and examples [ebensing](https://github.com/ebensing)\r\n * website; add \"show code\" for properties\r\n * website; move \"show code\" links down\r\n * website; update guide\r\n * website; add unstable docs\r\n * website; many improvements\r\n * website; fix copyright #1439\r\n * website; server.js -> static.js #1546 [nikmartin](https://github.com/nikmartin)\r\n * tests; refactor 1703\r\n * tests; add test generator\r\n * tests; validate formatMessage() throws\r\n * tests; add script for continuously running tests\r\n * tests; fixed versioning tests\r\n * tests; race conditions in tests\r\n * tests; added for nested and/or queries\r\n * tests; close some test connections\r\n * tests; validate db contents\r\n * tests; remove .only\r\n * tests; close some test connections\r\n * tests; validate db contents\r\n * tests; remove .only\r\n * tests; replace deprecated method names\r\n * tests; convert id to string\r\n * tests; fix sharding tests for MongoDB 2.4.5\r\n * tests; now 4-5 seconds faster\r\n * tests; fix race condition\r\n * make; suppress warning msg in test\r\n * benchmarks; updated for pull requests\r\n * examples; improved and expanded [ebensing](https://github.com/ebensing)\r\n\r\n3.7.4 (unstable) / 2013-10-01\r\n=============================\r\n\r\n * updated; mquery to 0.3.2\r\n * removed; mongoose.Error.DocumentError (never used)\r\n * added; custom error msgs for built-in validators #747\r\n * added; discriminator support #1647 #1003 [j](https://github.com/j)\r\n * added; support disabled collection name pluralization #1350 #1707 [refack](https://github.com/refack)\r\n * fixed; do not pluralize model names not ending with letters #1703 [refack](https://github.com/refack)\r\n * fixed; repopulating modified populated paths #1697\r\n * fixed; doc.equals() when _id option is set to false #1687\r\n * fixed; strict mode warnings #1686\r\n * fixed; $near GeoJSON casting #1683\r\n * fixed; nearSphere GeoJSON query builder\r\n * fixed; population field selection w/ strings #1669\r\n * docs; custom validator messages\r\n * docs; 10gen -> MongoDB\r\n * docs; add Date method caveats #1598\r\n * docs; more validation details\r\n * website; add \"show code\" for properties\r\n * website; move \"show code\" links down\r\n * tests; refactor 1703\r\n * tests; add test generator\r\n * tests; validate formatMessage() throws\r\n\r\n3.7.3 (unstable) / 2013-08-22\r\n=============================\r\n\r\n  * updated; warn when using an unstable version\r\n  * updated; mquery to 0.3.1\r\n  * updated; mocha to 1.12.0\r\n  * updated; mongodb driver to 1.3.19 (fix error swallowing behavior)\r\n  * changed; no longer offically supporting node 0.6.x\r\n  * added; support for GeoJSON to Query#near [ebensing](https://github.com/ebensing)\r\n  * added; stand-alone base query support - query.toConstructor() [ebensing](https://github.com/ebensing)\r\n  * added; promise support to geoSearch #1614 [ebensing](https://github.com/ebensing)\r\n  * added; promise support for geoNear #1614 [ebensing](https://github.com/ebensing)\r\n  * fixed; setters not firing on null values #1445 [ebensing](https://github.com/ebensing)\r\n  * fixed; handle another versioning edge case #1520\r\n  * fixed; excluding subdocument fields #1280 [ebensing](https://github.com/ebensing)\r\n  * fixed; allow array properties to be set to null with findOneAndUpdate [aheuermann](https://github.com/aheuermann)\r\n  * fixed; subdocuments now use own toJSON opts #1376 [ebensing](https://github.com/ebensing)\r\n  * fixed; model#geoNear fulfills promise when results empty #1658 [ebensing](https://github.com/ebensing)\r\n  * fixed; utils.merge no longer overrides props and methods #1655 [j](https://github.com/j)\r\n  * fixed; subdocuments now use their own transform #1412 [ebensing](https://github.com/ebensing)\r\n  * make; suppress warning msg in test\r\n  * docs; state which branch is stable/unstable\r\n  * docs; mention that middleware does not run on Models\r\n  * tests; add script for continuously running tests\r\n  * tests; fixed versioning tests\r\n  * benchmarks; updated for pull requests\r\n\r\n3.7.2 (unstable) / 2013-08-15\r\n==================\r\n\r\n  * fixed; model.remove() removes only what is necessary #1649\r\n  * fixed; update() now only runs with cb or explicit true #1644\r\n  * tests; race conditions in tests\r\n  * website; update guide\r\n\r\n3.7.1 (unstable) / 2013-08-13\r\n=============================\r\n\r\n  * updated; driver to 1.3.18 (fixes memory leak)\r\n  * added; connection.useDb() #1124 [ebensing](https://github.com/ebensing)\r\n  * added; promise support to model.mapReduce()\r\n  * added; promise support to model.ensureIndexes()\r\n  * added; promise support to model.populate()\r\n  * fixed; casting ref docs on creation #1606 [ebensing](https://github.com/ebensing)\r\n  * fixed; model.update \"overwrite\" option works as documented\r\n  * fixed; query#remove() works as documented\r\n  * fixed; \"limit\" correctly applies to individual items on population #1490 [ebensing](https://github.com/ebensing)\r\n  * fixed; issue with positional operator on ref docs #1572 [ebensing](https://github.com/ebensing)\r\n  * fixed; benchmarks to actually output valid json\r\n  * tests; added for nested and/or queries\r\n  * tests; close some test connections\r\n  * tests; validate db contents\r\n  * tests; remove .only\r\n  * tests; close some test connections\r\n  * tests; validate db contents\r\n  * tests; remove .only\r\n  * tests; replace deprecated method names\r\n  * tests; convert id to string\r\n  * docs; promise.fulfill()\r\n\r\n3.7.0 (unstable) / 2013-08-05\r\n===================\r\n\r\n  * changed; query.within getter is now a method -> query.within()\r\n  * changed; query.intersects getter is now a method -> query.intersects()\r\n  * deprecated; promise#addBack (use promise#onResolve)\r\n  * deprecated; promise#complete (use promise#fulfill)\r\n  * deprecated; promise#addCallback (use promise#onFulFill)\r\n  * deprecated; promise#addErrback (use promise#onReject)\r\n  * deprecated; query.nearSphere() (use query.near)\r\n  * deprecated; query.center() (use query.circle)\r\n  * deprecated; query.centerSphere() (use query.circle)\r\n  * deprecated; query#slaveOk (use query#read)\r\n  * removed; namedscope (undocumented and broken) #679 #642 #455 #379\r\n  * added; benchmarks [ebensing](https://github.com/ebensing)\r\n  * added; publicly exposed connection states #1585\r\n  * added; $geoWithin support #1529 $1455 [ebensing](https://github.com/ebensing)\r\n  * added; query method chain validation\r\n  * added; model.update `overwrite` option\r\n  * added; model.geoNear() support #1563 [ebensing](https://github.com/ebensing)\r\n  * added; model.geoSearch() support #1560 [ebensing](https://github.com/ebensing)\r\n  * added; MongooseBuffer#subtype()\r\n  * added; model.create() now returns a promise #1340\r\n  * added; support for `awaitdata` query option\r\n  * added; pass the doc to doc.remove() callback #1419 [JoeWagner](https://github.com/JoeWagner)\r\n  * added; aggregation query builder #1404 [njoyard](https://github.com/njoyard)\r\n  * updated; integrate mquery #1562 [ebensing](https://github.com/ebensing)\r\n  * updated; error msg in doc.save() #1595\r\n  * updated; bump driver to 1.3.15\r\n  * updated; mpromise 0.3.0\r\n  * updated; sliced 0.0.5\r\n  * tests; fix sharding tests for MongoDB 2.4.5\r\n  * tests; now 4-5 seconds faster\r\n  * tests; fix race condition\r\n  * docs; fix readme spelling #1483 [yorchopolis](https://github.com/yorchopolis)\r\n  * docs; fixed up the README and examples [ebensing](https://github.com/ebensing)\r\n  * website; add unstable docs\r\n  * website; many improvements\r\n  * website; fix copyright #1439\r\n  * website; server.js -> static.js #1546 [nikmartin](https://github.com/nikmartin)\r\n  * examples; improved and expanded [ebensing](https://github.com/ebensing)\r\n\r\n3.6.20 (stable) / 2013-09-23\r\n===================\r\n\r\n * fixed; repopulating modified populated paths #1697\r\n * fixed; doc.equals w/ _id false #1687\r\n * fixed; strict mode warning #1686\r\n * docs; near/nearSphere\r\n\r\n3.6.19 (stable) / 2013-09-04\r\n==================\r\n\r\n  * fixed; population field selection w/ strings #1669\r\n  * docs; Date method caveats #1598\r\n\r\n3.6.18 (stable) / 2013-08-22\r\n===================\r\n\r\n  * updated; warn when using an unstable version of mongoose\r\n  * updated; mocha to 1.12.0\r\n  * updated; mongodb driver to 1.3.19 (fix error swallowing behavior)\r\n  * fixed; setters not firing on null values #1445 [ebensing](https://github.com/ebensing)\r\n  * fixed; properly exclude subdocument fields #1280 [ebensing](https://github.com/ebensing)\r\n  * fixed; cast error in findAndModify #1643 [aheuermann](https://github.com/aheuermann)\r\n  * website; update guide\r\n  * website; added documentation for safe:false and versioning interaction\r\n  * docs; mention that middleware dont run on Models\r\n  * docs; fix indexes link\r\n  * make; suppress warning msg in test\r\n  * tests; moar\r\n\r\n3.6.17 / 2013-08-13\r\n===================\r\n\r\n  * updated; driver to 1.3.18 (fixes memory leak)\r\n  * fixed; casting ref docs on creation #1606\r\n  * docs; query options\r\n\r\n3.6.16 / 2013-08-08\r\n===================\r\n\r\n  * added; publicly expose connection states #1585\r\n  * fixed; limit applies to individual items on population #1490 [ebensing](https://github.com/ebensing)\r\n  * fixed; positional operator casting in updates #1572 [ebensing](https://github.com/ebensing)\r\n  * updated; MongoDB driver to 1.3.17\r\n  * updated; sliced to 0.0.5\r\n  * website; tweak homepage\r\n  * tests; fixed + added\r\n  * docs; fix some examples\r\n  * docs; multi-mongos support details\r\n  * docs; auto open browser after starting static server\r\n\r\n3.6.15 / 2013-07-16\r\n==================\r\n\r\n  * added; mongos failover support #1037\r\n  * updated; make schematype return vals return self #1580\r\n  * docs; add note to model.update #571\r\n  * docs; document third param to document.save callback #1536\r\n  * tests; tweek mongos test timeout\r\n\r\n3.6.14 / 2013-07-05\r\n===================\r\n\r\n  * updated; driver to 1.3.11\r\n  * fixed; issue with findOneAndUpdate not returning null on upserts #1533 [ebensing](https://github.com/ebensing)\r\n  * fixed; missing return statement in SchemaArray#$geoIntersects() #1498 [bsrykt](https://github.com/bsrykt)\r\n  * fixed; wrong isSelected() behavior #1521 [kyano](https://github.com/kyano)\r\n  * docs; note about toObject behavior during save()\r\n  * docs; add callbacks details #1547 [nikmartin](https://github.com/nikmartin)\r\n\r\n3.6.13 / 2013-06-27\r\n===================\r\n\r\n  * fixed; calling model.distinct without conditions #1541\r\n  * fixed; regression in Query#count() #1542\r\n  * now working on 3.6.13\r\n\r\n3.6.12 / 2013-06-25\r\n===================\r\n\r\n  * updated; driver to 1.3.10\r\n  * updated; clearer capped collection error message #1509 [bitmage](https://github.com/bitmage)\r\n  * fixed; MongooseBuffer subtype loss during casting #1517 [zedgu](https://github.com/zedgu)\r\n  * fixed; docArray#id when doc.id is disabled #1492\r\n  * fixed; docArray#id now supports matches on populated arrays #1492 [pgherveou](https://github.com/pgherveou)\r\n  * website; fix example\r\n  * website; improve _id disabling example\r\n  * website; fix typo #1494 [dejj](https://github.com/dejj)\r\n  * docs; added a 'Requesting new features' section #1504 [shovon](https://github.com/shovon)\r\n  * docs; improve subtypes description\r\n  * docs; clarify _id disabling\r\n  * docs: display by alphabetical order the methods list #1508 [nicolasleger](https://github.com/nicolasleger)\r\n  * tests; refactor isSelected checks\r\n  * tests; remove pointless test\r\n  * tests; fixed timeouts\r\n\r\n3.6.11 / 2013-05-15\r\n===================\r\n\r\n  * updated; driver to 1.3.5\r\n  * fixed; compat w/ Object.create(null) #1484 #1485\r\n  * fixed; cloning objects w/ missing constructors\r\n  * fixed; prevent multiple min number validators #1481 [nrako](https://github.com/nrako)\r\n  * docs; add doc.increment() example\r\n  * docs; add $size example\r\n  * docs; add \"distinct\" example\r\n\r\n3.6.10 / 2013-05-09\r\n==================\r\n\r\n  * update driver to 1.3.3\r\n  * fixed; increment() works without other changes #1475\r\n  * website; fix links to posterous\r\n  * docs; fix link #1472\r\n\r\n3.6.9 / 2013-05-02\r\n==================\r\n\r\n  * fixed; depopulation of mixed documents #1471\r\n  * fixed; use of $options in array #1462\r\n  * tests; fix race condition\r\n  * docs; fix default example\r\n\r\n3.6.8 / 2013-04-25\r\n==================\r\n\r\n  * updated; driver to 1.3.0\r\n  * fixed; connection.model should retain options #1458 [vedmalex](https://github.com/vedmalex)\r\n  * tests; 4-5 seconds faster\r\n\r\n3.6.7 / 2013-04-19\r\n==================\r\n\r\n  * fixed; population regression in 3.6.6 #1444\r\n\r\n3.6.6 / 2013-04-18\r\n==================\r\n\r\n  * fixed; saving populated new documents #1442\r\n  * fixed; population regession in 3.6.5 #1441\r\n  * website; fix copyright #1439\r\n\r\n3.6.5 / 2013-04-15\r\n==================\r\n\r\n  * fixed; strict:throw edge case using .set(path, val)\r\n  * fixed; schema.pathType() on some numbericAlpha paths\r\n  * fixed; numbericAlpha path versioning\r\n  * fixed; setting nested mixed paths #1418\r\n  * fixed; setting nested objects with null prop #1326\r\n  * fixed; regression in v3.6 population performance #1426 [vedmalex](https://github.com/vedmalex)\r\n  * fixed; read pref typos #1422 [kyano](https://github.com/kyano)\r\n  * docs; fix method example\r\n  * website; update faq\r\n  * website; add more deep links\r\n  * website; update poolSize docs\r\n  * website; add 3.6 release notes\r\n  * website; note about keepAlive\r\n\r\n3.6.4 / 2013-04-03\r\n==================\r\n\r\n  * fixed; +field conflict with $slice #1370\r\n  * fixed; nested deselection conflict #1333\r\n  * fixed; RangeError in ValidationError.toString() #1296\r\n  * fixed; do not save user defined transforms #1415\r\n  * tests; fix race condition\r\n\r\n3.6.3 / 2013-04-02\r\n==================\r\n\r\n  * fixed; setting subdocuments deeply nested fields #1394\r\n  * fixed; regression: populated streams #1411\r\n  * docs; mention hooks/validation with findAndModify\r\n  * docs; mention auth\r\n  * docs; add more links\r\n  * examples; add document methods example\r\n  * website; display \"see\" links for properties\r\n  * website; clean up homepage\r\n\r\n3.6.2 / 2013-03-29\r\n==================\r\n\r\n  * fixed; corrupted sub-doc array #1408\r\n  * fixed; document#update returns a Query #1397\r\n  * docs; readpref strategy\r\n\r\n3.6.1 / 2013-03-27\r\n==================\r\n\r\n  * added; populate support to findAndModify varients #1395\r\n  * added; text index type to schematypes\r\n  * expose allowed index types as Schema.indexTypes\r\n  * fixed; use of `setMaxListeners` as path\r\n  * fixed; regression in node 0.6 on docs with > 10 arrays\r\n  * fixed; do not alter schema arguments #1364\r\n  * fixed; subdoc#ownerDocument() #1385\r\n  * website; change search id\r\n  * website; add search from google [jackdbernier](https://github.com/jackdbernier)\r\n  * website; fix link\r\n  * website; add 3.5.x docs release\r\n  * website; fix link\r\n  * docs; fix geometry\r\n  * docs; hide internal constructor\r\n  * docs; aggregation does not cast arguments #1399\r\n  * docs; querystream options\r\n  * examples; added for population\r\n\r\n3.6.0 / 2013-03-18\r\n==================\r\n\r\n  * changed; cast 'true'/'false' to boolean #1282 [mgrach](https://github.com/mgrach)\r\n  * changed; Buffer arrays can now contain nulls\r\n  * added; QueryStream transform option\r\n  * added; support for authSource driver option\r\n  * added; {mongoose,db}.modelNames()\r\n  * added; $push w/ $slice,$sort support (MongoDB 2.4)\r\n  * added; hashed index type (MongoDB 2.4)\r\n  * added; support for mongodb 2.4 geojson (MongoDB 2.4)\r\n  * added; value at time of validation error\r\n  * added; support for object literal schemas\r\n  * added; bufferCommands schema option\r\n  * added; allow auth option in connections #1360 [geoah](https://github.com/geoah)\r\n  * added; performance improvements to populate() [263ece9](https://github.com/LearnBoost/mongoose/commit/263ece9)\r\n  * added; allow adding uncasted docs to populated arrays and properties #570\r\n  * added; doc#populated(path) stores original populated _ids\r\n  * added; lean population #1260\r\n  * added; query.populate() now accepts an options object\r\n  * added; document#populate(opts, callback)\r\n  * added; Model.populate(docs, opts, callback)\r\n  * added; support for rich nested path population\r\n  * added; doc.array.remove(value) subdoc with _id value support #1278\r\n  * added; optionally allow non-strict sets and updates\r\n  * added; promises/A+ comformancy with [mpromise](https://github.com/aheckmann/mpromise)\r\n  * added; promise#then\r\n  * added; promise#end\r\n  * fixed; use of `model` as doc property\r\n  * fixed; lean population #1382\r\n  * fixed; empty object mixed defaults #1380\r\n  * fixed; populate w/ deselected _id using string syntax\r\n  * fixed; attempted save of divergent populated arrays #1334 related\r\n  * fixed; better error msg when attempting toObject as property name\r\n  * fixed; non population buffer casting from doc\r\n  * fixed; setting populated paths #570\r\n  * fixed; casting when added docs to populated arrays #570\r\n  * fixed; prohibit updating arrays selected with $elemMatch #1334\r\n  * fixed; pull / set subdoc combination #1303\r\n  * fixed; multiple bg index creation #1365\r\n  * fixed; manual reconnection to single mongod\r\n  * fixed; Constructor / version exposure #1124\r\n  * fixed; CastError race condition\r\n  * fixed; no longer swallowing misuse of subdoc#invalidate()\r\n  * fixed; utils.clone retains RegExp opts\r\n  * fixed; population of non-schema property\r\n  * fixed; allow updating versionKey #1265\r\n  * fixed; add EventEmitter props to reserved paths #1338\r\n  * fixed; can now deselect populated doc _ids #1331\r\n  * fixed; properly pass subtype to Binary in MongooseBuffer\r\n  * fixed; casting _id from document with non-ObjectId _id\r\n  * fixed; specifying schema type edge case { path: [{type: \"String\" }] }\r\n  * fixed; typo in schemdate #1329 [jplock](https://github.com/jplock)\r\n  * updated; driver to 1.2.14\r\n  * updated; muri to 0.3.1\r\n  * updated; mpromise to 0.2.1\r\n  * updated; mocha 1.8.1\r\n  * updated; mpath to 0.1.1\r\n  * deprecated; pluralization will die in 4.x\r\n  * refactor; rename private methods to something unusable as doc properties\r\n  * refactor MongooseArray#remove\r\n  * refactor; move expires index to SchemaDate #1328\r\n  * refactor; internal document properties #1171 #1184\r\n  * tests; added\r\n  * docs; indexes\r\n  * docs; validation\r\n  * docs; populate\r\n  * docs; populate\r\n  * docs; add note about stream compatibility with node 0.8\r\n  * docs; fix for private names\r\n  * docs; Buffer -> mongodb.Binary #1363\r\n  * docs; auth options\r\n  * docs; improved\r\n  * website; update FAQ\r\n  * website; add more api links\r\n  * website; add 3.5.x docs to prior releases\r\n  * website; Change mongoose-types to an active repo [jackdbernier](https://github.com/jackdbernier)\r\n  * website; compat with node 0.10\r\n  * website; add news section\r\n  * website; use T for generic type\r\n  * benchmark; make adjustable\r\n\r\n3.6.0rc1 / 2013-03-12\r\n======================\r\n\r\n  * refactor; rename private methods to something unusable as doc properties\r\n  * added; {mongoose,db}.modelNames()\r\n  * added; $push w/ $slice,$sort support (MongoDB 2.4)\r\n  * added; hashed index type (MongoDB 2.4)\r\n  * added; support for mongodb 2.4 geojson (MongoDB 2.4)\r\n  * added; value at time of validation error\r\n  * added; support for object literal schemas\r\n  * added; bufferCommands schema option\r\n  * added; allow auth option in connections #1360 [geoah](https://github.com/geoah)\r\n  * fixed; lean population #1382\r\n  * fixed; empty object mixed defaults #1380\r\n  * fixed; populate w/ deselected _id using string syntax\r\n  * fixed; attempted save of divergent populated arrays #1334 related\r\n  * fixed; better error msg when attempting toObject as property name\r\n  * fixed; non population buffer casting from doc\r\n  * fixed; setting populated paths #570\r\n  * fixed; casting when added docs to populated arrays #570\r\n  * fixed; prohibit updating arrays selected with $elemMatch #1334\r\n  * fixed; pull / set subdoc combination #1303\r\n  * fixed; multiple bg index creation #1365\r\n  * fixed; manual reconnection to single mongod\r\n  * fixed; Constructor / version exposure #1124\r\n  * fixed; CastError race condition\r\n  * fixed; no longer swallowing misuse of subdoc#invalidate()\r\n  * fixed; utils.clone retains RegExp opts\r\n  * fixed; population of non-schema property\r\n  * fixed; allow updating versionKey #1265\r\n  * fixed; add EventEmitter props to reserved paths #1338\r\n  * fixed; can now deselect populated doc _ids #1331\r\n  * updated; muri to 0.3.1\r\n  * updated; driver to 1.2.12\r\n  * updated; mpromise to 0.2.1\r\n  * deprecated; pluralization will die in 4.x\r\n  * docs; Buffer -> mongodb.Binary #1363\r\n  * docs; auth options\r\n  * docs; improved\r\n  * website; add news section\r\n  * benchmark; make adjustable\r\n\r\n3.6.0rc0 / 2013-02-03\r\n======================\r\n\r\n  * changed; cast 'true'/'false' to boolean #1282 [mgrach](https://github.com/mgrach)\r\n  * changed; Buffer arrays can now contain nulls\r\n  * fixed; properly pass subtype to Binary in MongooseBuffer\r\n  * fixed; casting _id from document with non-ObjectId _id\r\n  * fixed; specifying schema type edge case { path: [{type: \"String\" }] }\r\n  * fixed; typo in schemdate #1329 [jplock](https://github.com/jplock)\r\n  * refactor; move expires index to SchemaDate #1328\r\n  * refactor; internal document properties #1171 #1184\r\n  * added; performance improvements to populate() [263ece9](https://github.com/LearnBoost/mongoose/commit/263ece9)\r\n  * added; allow adding uncasted docs to populated arrays and properties #570\r\n  * added; doc#populated(path) stores original populated _ids\r\n  * added; lean population #1260\r\n  * added; query.populate() now accepts an options object\r\n  * added; document#populate(opts, callback)\r\n  * added; Model.populate(docs, opts, callback)\r\n  * added; support for rich nested path population\r\n  * added; doc.array.remove(value) subdoc with _id value support #1278\r\n  * added; optionally allow non-strict sets and updates\r\n  * added; promises/A+ comformancy with [mpromise](https://github.com/aheckmann/mpromise)\r\n  * added; promise#then\r\n  * added; promise#end\r\n  * updated; mocha 1.8.1\r\n  * updated; muri to 0.3.0\r\n  * updated; mpath to 0.1.1\r\n  * updated; docs\r\n\r\n3.5.16 / 2013-08-13\r\n===================\r\n\r\n  * updated; driver to 1.3.18\r\n\r\n3.5.15 / 2013-07-26\r\n==================\r\n\r\n  * updated; sliced to 0.0.5\r\n  * updated; driver to 1.3.12\r\n  * fixed; regression in Query#count() due to driver change\r\n  * tests; fixed timeouts\r\n  * tests; handle differing test uris\r\n\r\n3.5.14 / 2013-05-15\r\n===================\r\n\r\n  * updated; driver to 1.3.5\r\n  * fixed; compat w/ Object.create(null) #1484 #1485\r\n  * fixed; cloning objects missing constructors\r\n  * fixed; prevent multiple min number validators #1481 [nrako](https://github.com/nrako)\r\n\r\n3.5.13 / 2013-05-09\r\n==================\r\n\r\n  * update driver to 1.3.3\r\n  * fixed; use of $options in array #1462\r\n\r\n3.5.12 / 2013-04-25\r\n===================\r\n\r\n  * updated; driver to 1.3.0\r\n  * fixed; connection.model should retain options #1458 [vedmalex](https://github.com/vedmalex)\r\n  * fixed; read pref typos #1422 [kyano](https://github.com/kyano)\r\n\r\n3.5.11 / 2013-04-03\r\n==================\r\n\r\n  * fixed; +field conflict with $slice #1370\r\n  * fixed; RangeError in ValidationError.toString() #1296\r\n  * fixed; nested deselection conflict #1333\r\n  * remove time from Makefile\r\n\r\n3.5.10 / 2013-04-02\r\n==================\r\n\r\n  * fixed; setting subdocuments deeply nested fields #1394\r\n  * fixed; do not alter schema arguments #1364\r\n\r\n3.5.9 / 2013-03-15\r\n==================\r\n\r\n  * updated; driver to 1.2.14\r\n  * added; support for authSource driver option (mongodb 2.4)\r\n  * added; QueryStream transform option (node 0.10 helper)\r\n  * fixed; backport for saving required populated buffers\r\n  * fixed; pull / set subdoc combination #1303\r\n  * fixed; multiple bg index creation #1365\r\n  * test; added for saveable required populated buffers\r\n  * test; added for #1365\r\n  * test; add authSource test\r\n\r\n3.5.8 / 2013-03-12\r\n==================\r\n\r\n  * added; auth option in connection [geoah](https://github.com/geoah)\r\n  * fixed; CastError race condition\r\n  * docs; add note about stream compatibility with node 0.8\r\n\r\n3.5.7 / 2013-02-22\r\n==================\r\n\r\n  * updated; driver to 1.2.13\r\n  * updated; muri to 0.3.1 #1347\r\n  * fixed; utils.clone retains RegExp opts #1355\r\n  * fixed; deepEquals RegExp support\r\n  * tests; fix a connection test\r\n  * website; clean up docs [afshinm](https://github.com/afshinm)\r\n  * website; update homepage\r\n  * website; migragtion: emphasize impact of strict docs #1264\r\n\r\n3.5.6 / 2013-02-14\r\n==================\r\n\r\n  * updated; driver to 1.2.12\r\n  * fixed; properly pass Binary subtype\r\n  * fixed; add EventEmitter props to reserved paths #1338\r\n  * fixed; use correct node engine version\r\n  * fixed; display empty docs as {} in log output #953 follow up\r\n  * improved; \"bad $within $box argument\" error message\r\n  * populate; add unscientific benchmark\r\n  * website; add stack overflow to help section\r\n  * website; use better code font #1336 [risseraka](https://github.com/risseraka)\r\n  * website; clarify where help is available\r\n  * website; fix source code links #1272 [floatingLomas](https://github.com/floatingLomas)\r\n  * docs; be specific about _id schema option #1103\r\n  * docs; add ensureIndex error handling example\r\n  * docs; README\r\n  * docs; CONTRIBUTING.md\r\n\r\n3.5.5 / 2013-01-29\r\n==================\r\n\r\n  * updated; driver to 1.2.11\r\n  * removed; old node < 0.6x shims\r\n  * fixed; documents with Buffer _ids equality\r\n  * fixed; MongooseBuffer properly casts numbers\r\n  * fixed; reopening closed connection on alt host/port #1287\r\n  * docs; fixed typo in Readme #1298 [rened](https://github.com/rened)\r\n  * docs; fixed typo in migration docs [Prinzhorn](https://github.com/Prinzhorn)\r\n  * docs; fixed incorrect annotation in SchemaNumber#min [bilalq](https://github.com/bilalq)\r\n  * docs; updated\r\n\r\n3.5.4 / 2013-01-07\r\n==================\r\n\r\n  * changed; \"_pres\" & \"_posts\" are now reserved pathnames #1261\r\n  * updated; driver to 1.2.8\r\n  * fixed; exception when reopening a replica set. #1263 [ethankan](https://github.com/ethankan)\r\n  * website; updated\r\n\r\n3.5.3 / 2012-12-26\r\n==================\r\n\r\n  * added; support for geo object notation #1257\r\n  * fixed; $within query casting with arrays\r\n  * fixed; unix domain socket support #1254\r\n  * updated; driver to 1.2.7\r\n  * updated; muri to 0.0.5\r\n\r\n3.5.2 / 2012-12-17\r\n==================\r\n\r\n  * fixed; using auth with replica sets #1253\r\n\r\n3.5.1 / 2012-12-12\r\n==================\r\n\r\n  * fixed; regression when using subdoc with `path` as pathname #1245 [daeq](https://github.com/daeq)\r\n  * fixed; safer db option checks\r\n  * updated; driver to 1.2.5\r\n  * website; add more examples\r\n  * website; clean up old docs\r\n  * website; fix prev release urls\r\n  * docs; clarify streaming with HTTP responses\r\n\r\n3.5.0 / 2012-12-10\r\n==================\r\n\r\n  * added; paths to CastErrors #1239\r\n  * added; support for mongodb connection string spec #1187\r\n  * added; post validate event\r\n  * added; Schema#get (to retrieve schema options)\r\n  * added; VersionError #1071\r\n  * added; npmignore [hidekiy](https://github.com/hidekiy)\r\n  * update; driver to 1.2.3\r\n  * fixed; stackoverflow in setter #1234\r\n  * fixed; utils.isObject()\r\n  * fixed; do not clobber user specified driver writeConcern #1227\r\n  * fixed; always pass current document to post hooks\r\n  * fixed; throw error when user attempts to overwrite a model\r\n  * fixed; connection.model only caches on connection #1209\r\n  * fixed; respect conn.model() creation when matching global model exists #1209\r\n  * fixed; passing model name + collection name now always honors collection name\r\n  * fixed; setting virtual field to an empty object #1154\r\n  * fixed; subclassed MongooseErrors exposure, now available in mongoose.Error.xxxx\r\n  * fixed; model.remove() ignoring callback when executed twice [daeq](https://github.com/daeq) #1210\r\n  * docs; add collection option to schema api docs #1222\r\n  * docs; NOTE about db safe options\r\n  * docs; add post hooks docs\r\n  * docs; connection string options\r\n  * docs; middleware is not executed with Model.remove #1241\r\n  * docs; {g,s}etter introspection #777\r\n  * docs; update validation docs\r\n  * docs; add link to plugins page\r\n  * docs; clarify error returned by unique indexes #1225\r\n  * docs; more detail about disabling autoIndex behavior\r\n  * docs; add homepage section to package (npm docs mongoose)\r\n  * docs; more detail around collection name pluralization #1193\r\n  * website; add .important css\r\n  * website; update models page\r\n  * website; update getting started\r\n  * website; update quick start\r\n\r\n3.4.0 / 2012-11-10\r\n==================\r\n\r\n  * added; support for generic toJSON/toObject transforms #1160 #1020 #1197\r\n  * added; doc.set() merge support #1148 [NuORDER](https://github.com/NuORDER)\r\n  * added; query#add support #1188 [aleclofabbro](https://github.com/aleclofabbro)\r\n  * changed; adding invalid nested paths to non-objects throws 4216f14\r\n  * changed; fixed; stop invalid function cloning (internal fix)\r\n  * fixed; add query $and casting support #1180 [anotheri](https://github.com/anotheri)\r\n  * fixed; overwriting of query arguments #1176\r\n  * docs; fix expires examples\r\n  * docs; transforms\r\n  * docs; schema `collection` option docs [hermanjunge](https://github.com/hermanjunge)\r\n  * website; updated\r\n  * tests; added\r\n\r\n3.3.1 / 2012-10-11\r\n==================\r\n\r\n  * fixed; allow goose.connect(uris, dbname, opts) #1144\r\n  * docs; persist API private checked state across page loads\r\n\r\n3.3.0 / 2012-10-10\r\n==================\r\n\r\n  * fixed; passing options as 2nd arg to connect() #1144\r\n  * fixed; race condition after no-op save #1139\r\n  * fixed; schema field selection application in findAndModify #1150\r\n  * fixed; directly setting arrays #1126\r\n  * updated; driver to 1.1.11\r\n  * updated; collection pluralization rules [mrickard](https://github.com/mrickard)\r\n  * tests; added\r\n  * docs; updated\r\n\r\n3.2.2 / 2012-10-08\r\n==================\r\n\r\n  * updated; driver to 1.1.10 #1143\r\n  * updated; use sliced 0.0.3\r\n  * fixed; do not recast embedded docs unnecessarily\r\n  * fixed; expires schema option helper #1132\r\n  * fixed; built in string setters #1131\r\n  * fixed; debug output for Dates/ObjectId properties #1129\r\n  * docs; fixed Javascript syntax error in example [olalonde](https://github.com/olalonde)\r\n  * docs; fix toJSON example #1137\r\n  * docs; add ensureIndex production notes\r\n  * docs; fix spelling\r\n  * docs; add blogposts about v3\r\n  * website; updated\r\n  * removed; undocumented inGroupsOf util\r\n  * tests; added\r\n\r\n3.2.1 / 2012-09-28\r\n==================\r\n\r\n  * fixed; remove query batchSize option default of 1000 https://github.com/learnboost/mongoose/commit/3edaa8651\r\n  * docs; updated\r\n  * website; updated\r\n\r\n3.2.0 / 2012-09-27\r\n==================\r\n\r\n  * added; direct array index assignment with casting support `doc.array.set(index, value)`\r\n  * fixed; QueryStream#resume within same tick as pause() #1116\r\n  * fixed; default value validatation #1109\r\n  * fixed; array splice() not casting #1123\r\n  * fixed; default array construction edge case #1108\r\n  * fixed; query casting for inequalities in arrays #1101 [dpatti](https://github.com/dpatti)\r\n  * tests; added\r\n  * website; more documentation\r\n  * website; fixed layout issue #1111 [SlashmanX](https://github.com/SlashmanX)\r\n  * website; refactored [guille](https://github.com/guille)\r\n\r\n3.1.2 / 2012-09-10\r\n==================\r\n\r\n  * added; ReadPreferrence schema option #1097\r\n  * updated; driver to 1.1.7\r\n  * updated; default query batchSize to 1000\r\n  * fixed; we now cast the mapReduce query option #1095\r\n  * fixed; $elemMatch+$in with field selection #1091\r\n  * fixed; properly cast $elemMatch+$in conditions #1100\r\n  * fixed; default field application of subdocs #1027\r\n  * fixed; querystream prematurely dying #1092\r\n  * fixed; querystream never resumes when paused at getMore boundries #1092\r\n  * fixed; querystream occasionally emits data events after destroy #1092\r\n  * fixed; remove unnecessary ObjectId creation in querystream\r\n  * fixed; allow ne(boolean) again #1093\r\n  * docs; add populate/field selection syntax notes\r\n  * docs; add toObject/toJSON options detail\r\n  * docs; `read` schema option\r\n\r\n3.1.1 / 2012-08-31\r\n==================\r\n\r\n  * updated; driver to 1.1.6\r\n\r\n3.1.0 / 2012-08-29\r\n==================\r\n\r\n  * changed; fixed; directly setting nested objects now overwrites entire object (previously incorrectly merged them)\r\n  * added; read pref support (mongodb 2.2) 205a709c\r\n  * added; aggregate support (mongodb 2.2) f3a5bd3d\r\n  * added; virtual {g,s}etter introspection (#1070)\r\n  * updated; docs [brettz9](https://github.com/brettz9)\r\n  * updated; driver to 1.1.5\r\n  * fixed; retain virtual setter return values (#1069)\r\n\r\n3.0.3 / 2012-08-23\r\n==================\r\n\r\n  * fixed; use of nested paths beginning w/ numbers #1062\r\n  * fixed; query population edge case #1053 #1055 [jfremy](https://github.com/jfremy)\r\n  * fixed; simultaneous top and sub level array modifications #1073\r\n  * added; id and _id schema option aliases + tests\r\n  * improve debug formatting to allow copy/paste logged queries into mongo shell [eknkc](https://github.com/eknkc)\r\n  * docs\r\n\r\n3.0.2 / 2012-08-17\r\n==================\r\n\r\n  * added; missing support for v3 sort/select syntax to findAndModify helpers (#1058)\r\n  * fixed; replset fullsetup event emission\r\n  * fixed; reconnected event for replsets\r\n  * fixed; server reconnection setting discovery\r\n  * fixed; compat with non-schema path props using positional notation (#1048)\r\n  * fixed; setter/casting order (#665)\r\n  * docs; updated\r\n\r\n3.0.1 / 2012-08-11\r\n==================\r\n\r\n  * fixed; throw Error on bad validators (1044)\r\n  * fixed; typo in EmbeddedDocument#parentArray [lackac]\r\n  * fixed; repair mongoose.SchemaTypes alias\r\n  * updated; docs\r\n\r\n3.0.0 / 2012-08-07\r\n==================\r\n\r\n  * removed; old subdocument#commit method\r\n  * fixed; setting arrays of matching docs [6924cbc2]\r\n  * fixed; doc!remove event now emits in save order as save for consistency\r\n  * fixed; pre-save hooks no longer fire on subdocuments when validation fails\r\n  * added; subdoc#parent() and subdoc#parentArray() to access subdocument parent objects\r\n  * added; query#lean() helper\r\n\r\n3.0.0rc0 / 2012-08-01\r\n=====================\r\n\r\n  * fixed; allow subdoc literal declarations containing \"type\" pathname (#993)\r\n  * fixed; unsetting a default array (#758)\r\n  * fixed; boolean $in queries (#998)\r\n  * fixed; allow use of `options` as a pathname (#529)\r\n  * fixed; `model` is again a permitted schema path name\r\n  * fixed; field selection option on subdocs (#1022)\r\n  * fixed; handle another edge case with subdoc saving (#975)\r\n  * added; emit save err on model if listening\r\n  * added; MongoDB TTL collection support (#1006)\r\n  * added; $center options support\r\n  * added; $nearSphere and $polygon support\r\n  * updated; driver version to 1.1.2\r\n\r\n3.0.0alpha2 / 2012-07-18\r\n=========================\r\n\r\n  * changed; index errors are now emitted on their model and passed to an optional callback (#984)\r\n  * fixed; specifying index along with sparse/unique option no longer overwrites (#1004)\r\n  * fixed; never swallow connection errors (#618)\r\n  * fixed; creating object from model with emded object no longer overwrites defaults [achurkin] (#859)\r\n  * fixed; stop needless validation of unchanged/unselected fields (#891)\r\n  * fixed; document#equals behavior of objectids (#974)\r\n  * fixed; honor the minimize schema option (#978)\r\n  * fixed; provide helpful error msgs when reserved schema path is used (#928)\r\n  * fixed; callback to conn#disconnect is optional (#875)\r\n  * fixed; handle missing protocols in connection urls (#987)\r\n  * fixed; validate args to query#where (#969)\r\n  * fixed; saving modified/removed subdocs (#975)\r\n  * fixed; update with $pull from Mixed array (#735)\r\n  * fixed; error with null shard key value\r\n  * fixed; allow unsetting enums (#967)\r\n  * added; support for manual index creation (#984)\r\n  * added; support for disabled auto-indexing (#984)\r\n  * added; support for preserving MongooseArray#sort changes (#752)\r\n  * added; emit state change events on connection\r\n  * added; support for specifying BSON subtype in MongooseBuffer#toObject [jcrugzz]\r\n  * added; support for disabled versioning (#977)\r\n  * added; implicit \"new\" support for models and Schemas\r\n\r\n3.0.0alpha1 / 2012-06-15\r\n=========================\r\n\r\n  * removed; doc#commit (use doc#markModified)\r\n  * removed; doc.modified getter (#950)\r\n  * removed; mongoose{connectSet,createSetConnection}. use connect,createConnection instead\r\n  * removed; query alias methods 1149804c\r\n  * removed; MongooseNumber\r\n  * changed; now creating indexes in background by default\r\n  * changed; strict mode now enabled by default (#952)\r\n  * changed; doc#modifiedPaths is now a method (#950)\r\n  * changed; getters no longer cast (#820); casting happens during set\r\n  * fixed; no need to pass updateArg to findOneAndUpdate (#931)\r\n  * fixed: utils.merge bug when merging nested non-objects. [treygriffith]\r\n  * fixed; strict:throw should produce errors in findAndModify (#963)\r\n  * fixed; findAndUpdate no longer overwrites document (#962)\r\n  * fixed; setting default DocumentArrays (#953)\r\n  * fixed; selection of _id with schema deselection (#954)\r\n  * fixed; ensure promise#error emits instanceof Error\r\n  * fixed; CursorStream: No stack overflow on any size result (#929)\r\n  * fixed; doc#remove now passes safe options\r\n  * fixed; invalid use of $set during $pop\r\n  * fixed; array#{$pop,$shift} mirror MongoDB behavior\r\n  * fixed; no longer test non-required vals in string match (#934)\r\n  * fixed; edge case with doc#inspect\r\n  * fixed; setter order (#665)\r\n  * fixed; setting invalid paths in strict mode (#916)\r\n  * fixed; handle docs without id in DocumentArray#id method (#897)\r\n  * fixed; do not save virtuals during model.update (#894)\r\n  * fixed; sub doc toObject virtuals application (#889)\r\n  * fixed; MongooseArray#pull of ObjectId (#881)\r\n  * fixed; handle passing db name with any repl set string\r\n  * fixed; default application of selected fields (#870)\r\n  * fixed; subdoc paths reported in validation errors (#725)\r\n  * fixed; incorrect reported num of affected docs in update ops (#862)\r\n  * fixed; connection assignment in Model#model (#853)\r\n  * fixed; stringifying arrays of docs (#852)\r\n  * fixed; modifying subdoc and parent array works (#842)\r\n  * fixed; passing undefined to next hook (#785)\r\n  * fixed; Query#{update,remove}() works without callbacks (#788)\r\n  * fixed; set/updating nested objects by parent pathname (#843)\r\n  * fixed; allow null in number arrays (#840)\r\n  * fixed; isNew on sub doc after insertion error (#837)\r\n  * fixed; if an insert fails, set isNew back to false [boutell]\r\n  * fixed; isSelected when only _id is selected (#730)\r\n  * fixed; setting an unset default value (#742)\r\n  * fixed; query#sort error messaging (#671)\r\n  * fixed; support for passing $options with $regex\r\n  * added; array of object literal notation in schema creates DocumentArrays\r\n  * added; gt,gte,lt,lte query support for arrays (#902)\r\n  * added; capped collection support (#938)\r\n  * added; document versioning support\r\n  * added; inclusion of deselected schema path (#786)\r\n  * added; non-atomic array#pop\r\n  * added; EmbeddedDocument constructor is now exposed in DocArray#create 7cf8beec\r\n  * added; mapReduce support (#678)\r\n  * added; support for a configurable minimize option #to{Object,JSON}(option) (#848)\r\n  * added; support for strict: `throws` [regality]\r\n  * added; support for named schema types (#795)\r\n  * added; to{Object,JSON} schema options (#805)\r\n  * added; findByIdAnd{Update,Remove}()\r\n  * added; findOneAnd{Update,Remove}()\r\n  * added; query.setOptions()\r\n  * added; instance.update() (#794)\r\n  * added; support specifying model in populate() [DanielBaulig]\r\n  * added; `lean` query option [gitfy]\r\n  * added; multi-atomic support to MongooseArray#nonAtomicPush\r\n  * added; support for $set + other $atomic ops on single array\r\n  * added; tests\r\n  * updated; driver to 1.0.2\r\n  * updated; query.sort() syntax to mirror query.select()\r\n  * updated; clearer cast error msg for array numbers\r\n  * updated; docs\r\n  * updated; doc.clone 3x faster (#950)\r\n  * updated; only create _id if necessary (#950)\r\n\r\n2.7.3 / 2012-08-01\r\n==================\r\n\r\n  * fixed; boolean $in queries (#998)\r\n  * fixed field selection option on subdocs (#1022)\r\n\r\n2.7.2 / 2012-07-18\r\n==================\r\n\r\n  * fixed; callback to conn#disconnect is optional (#875)\r\n  * fixed; handle missing protocols in connection urls (#987)\r\n  * fixed; saving modified/removed subdocs (#975)\r\n  * updated; tests\r\n\r\n2.7.1 / 2012-06-26\r\n===================\r\n\r\n  * fixed; sharding: when a document holds a null as a value of the shard key\r\n  * fixed; update() using $pull on an array of Mixed (gh-735)\r\n  * deprecated; MongooseNumber#{inc, increment, decrement} methods\r\n  * tests; now using mocha\r\n\r\n2.7.0 / 2012-06-14\r\n===================\r\n\r\n  * added; deprecation warnings to methods being removed in 3.x\r\n\r\n2.6.8 / 2012-06-14\r\n===================\r\n\r\n  * fixed; edge case when using 'options' as a path name (#961)\r\n\r\n2.6.7 / 2012-06-08\r\n===================\r\n\r\n  * fixed; ensure promise#error always emits instanceof Error\r\n  * fixed; selection of _id w/ another excluded path (#954)\r\n  * fixed; setting default DocumentArrays (#953)\r\n\r\n2.6.6 / 2012-06-06\r\n===================\r\n\r\n  * fixed; stack overflow in query stream with large result sets (#929)\r\n  * added; $gt, $gte, $lt, $lte support to arrays (#902)\r\n  * fixed; pass option `safe` along to doc#remove() calls\r\n\r\n2.6.5 / 2012-05-24\r\n===================\r\n\r\n  * fixed; do not save virtuals in Model.update (#894)\r\n  * added; missing $ prefixed query aliases (going away in 3.x) (#884) [timoxley]\r\n  * fixed; setting invalid paths in strict mode (#916)\r\n  * fixed; resetting isNew after insert failure (#837) [boutell]\r\n\r\n2.6.4 / 2012-05-15\r\n===================\r\n\r\n  * updated; backport string regex $options to 2.x\r\n  * updated; use driver 1.0.2 (performance improvements) (#914)\r\n  * fixed; calling MongooseDocumentArray#id when the doc has no _id (#897)\r\n\r\n2.6.3 / 2012-05-03\r\n===================\r\n\r\n  * fixed; repl-set connectivity issues during failover on MongoDB 2.0.1\r\n  * updated; driver to 1.0.0\r\n  * fixed; virtuals application of subdocs when using toObject({ virtuals: true }) (#889)\r\n  * fixed; MongooseArray#pull of ObjectId correctly updates the array itself (#881)\r\n\r\n2.6.2 / 2012-04-30\r\n===================\r\n\r\n  * fixed; default field application of selected fields (#870)\r\n\r\n2.6.1 / 2012-04-30\r\n===================\r\n\r\n  * fixed; connection assignment in mongoose#model (#853, #877)\r\n  * fixed; incorrect reported num of affected docs in update ops (#862)\r\n\r\n2.6.0 / 2012-04-19\r\n===================\r\n\r\n  * updated; hooks.js to 0.2.1\r\n  * fixed; issue with passing undefined to a hook callback. thanks to [chrisleishman] for reporting.\r\n  * fixed; updating/setting nested objects in strict schemas (#843) as reported by [kof]\r\n  * fixed; Query#{update,remove}() work without callbacks again (#788)\r\n  * fixed; modifying subdoc along with parent array $atomic op (#842)\r\n\r\n2.5.14 / 2012-04-13\r\n===================\r\n\r\n  * fixed; setting an unset default value (#742)\r\n  * fixed; doc.isSelected(otherpath) when only _id is selected (#730)\r\n  * updated; docs\r\n\r\n2.5.13 / 2012-03-22\r\n===================\r\n\r\n  * fixed; failing validation of unselected required paths (#730,#713)\r\n  * fixed; emitting connection error when only one listener (#759)\r\n  * fixed; MongooseArray#splice was not returning values (#784) [chrisleishman]\r\n\r\n2.5.12 / 2012-03-21\r\n===================\r\n\r\n  * fixed; honor the `safe` option in all ensureIndex calls\r\n  * updated; node-mongodb-native driver to 0.9.9-7\r\n\r\n2.5.11 / 2012-03-15\r\n===================\r\n\r\n  * added; introspection for getters/setters (#745)\r\n  * updated; node-mongodb-driver to 0.9.9-5\r\n  * added; tailable method to Query (#769) [holic]\r\n  * fixed; Number min/max validation of null (#764) [btamas]\r\n  * added; more flexible user/password connection options (#738) [KarneAsada]\r\n\r\n2.5.10 / 2012-03-06\r\n===================\r\n\r\n  * updated; node-mongodb-native driver to 0.9.9-4\r\n  * added; Query#comment()\r\n  * fixed; allow unsetting arrays\r\n  * fixed; hooking the set method of subdocuments (#746)\r\n  * fixed; edge case in hooks\r\n  * fixed; allow $id and $ref in queries (fixes compatibility with mongoose-dbref) (#749) [richtera]\r\n  * added; default path selection to SchemaTypes\r\n\r\n2.5.9 / 2012-02-22\r\n===================\r\n\r\n  * fixed; properly cast nested atomic update operators for sub-documents\r\n\r\n2.5.8 / 2012-02-21\r\n===================\r\n\r\n  * added; post 'remove' middleware includes model that was removed (#729) [timoxley]\r\n\r\n2.5.7 / 2012-02-09\r\n===================\r\n\r\n  * fixed; RegExp validators on node >= v0.6.x\r\n\r\n2.5.6 / 2012-02-09\r\n===================\r\n\r\n  * fixed; emit errors returned from db.collection() on the connection (were being swallowed)\r\n  * added; can add multiple validators in your schema at once (#718) [diogogmt]\r\n  * fixed; strict embedded documents (#717)\r\n  * updated; docs [niemyjski]\r\n  * added; pass number of affected docs back in model.update/save\r\n\r\n2.5.5 / 2012-02-03\r\n===================\r\n\r\n  * fixed; RangeError: maximum call stack exceed error when removing docs with Number _id (#714)\r\n\r\n2.5.4 / 2012-02-03\r\n===================\r\n\r\n  * fixed; RangeError: maximum call stack exceed error (#714)\r\n\r\n2.5.3 / 2012-02-02\r\n===================\r\n\r\n  * added; doc#isSelected(path)\r\n  * added; query#equals()\r\n  * added; beta sharding support\r\n  * added; more descript error msgs (#700) [obeleh]\r\n  * added; document.modifiedPaths (#709) [ljharb]\r\n  * fixed; only functions can be added as getters/setters (#707,704) [ljharb]\r\n\r\n2.5.2 / 2012-01-30\r\n===================\r\n\r\n  * fixed; rollback -native driver to 0.9.7-3-5 (was causing timeouts and other replica set weirdness)\r\n  * deprecated; MongooseNumber (will be moved to a separate repo for 3.x)\r\n  * added; init event is emitted on schemas\r\n\r\n2.5.1 / 2012-01-27\r\n===================\r\n\r\n  * fixed; honor strict schemas in Model.update (#699)\r\n\r\n2.5.0 / 2012-01-26\r\n===================\r\n\r\n  * added; doc.toJSON calls toJSON on embedded docs when exists [jerem]\r\n  * added; populate support for refs of type Buffer (#686) [jerem]\r\n  * added; $all support for ObjectIds and Dates (#690)\r\n  * fixed; virtual setter calling on instantiation when strict: true (#682) [hunterloftis]\r\n  * fixed; doc construction triggering getters (#685)\r\n  * fixed; MongooseBuffer check in deepEquals (#688)\r\n  * fixed; range error when using Number _ids with `instance.save()` (#691)\r\n  * fixed; isNew on embedded docs edge case (#680)\r\n  * updated; driver to 0.9.8-3\r\n  * updated; expose `model()` method within static methods\r\n\r\n2.4.10 / 2012-01-10\r\n===================\r\n\r\n  * added; optional getter application in .toObject()/.toJSON() (#412)\r\n  * fixed; nested $operators in $all queries (#670)\r\n  * added; $nor support (#674)\r\n  * fixed; bug when adding nested schema (#662) [paulwe]\r\n\r\n2.4.9 / 2012-01-04\r\n===================\r\n\r\n  * updated; driver to 0.9.7-3-5 to fix Linux performance degradation on some boxes\r\n\r\n2.4.8 / 2011-12-22\r\n===================\r\n\r\n  * updated; bump -native to 0.9.7.2-5\r\n  * fixed; compatibility with date.js (#646) [chrisleishman]\r\n  * changed; undocumented schema \"lax\" option to \"strict\"\r\n  * fixed; default value population for strict schemas\r\n  * updated; the nextTick helper for small performance gain. 1bee2a2\r\n\r\n2.4.7 / 2011-12-16\r\n===================\r\n\r\n  * fixed; bug in 2.4.6 with path setting\r\n  * updated; bump -native to 0.9.7.2-1\r\n  * added; strict schema option [nw]\r\n\r\n2.4.6 / 2011-12-16\r\n===================\r\n\r\n  * fixed; conflicting mods on update bug [sirlantis]\r\n  * improved; doc.id getter performance\r\n\r\n2.4.5 / 2011-12-14\r\n===================\r\n\r\n  * fixed; bad MongooseArray behavior in 2.4.2 - 2.4.4\r\n\r\n2.4.4 / 2011-12-14\r\n===================\r\n\r\n  * fixed; MongooseArray#doAtomics throwing after sliced\r\n\r\n2.4.3 / 2011-12-14\r\n===================\r\n\r\n  * updated; system.profile schema for MongoDB 2x\r\n\r\n2.4.2 / 2011-12-12\r\n===================\r\n\r\n  * fixed; partially populating multiple children of subdocs (#639) [kenpratt]\r\n  * fixed; allow Update of numbers to null (#640) [jerem]\r\n\r\n2.4.1 / 2011-12-02\r\n===================\r\n\r\n  * added; options support for populate() queries\r\n  * updated; -native driver to 0.9.7-1.4\r\n\r\n2.4.0 / 2011-11-29\r\n===================\r\n\r\n  * added; QueryStreams (#614)\r\n  * added; debug print mode for development\r\n  * added; $within support to Array queries (#586) [ggoodale]\r\n  * added; $centerSphere query support\r\n  * fixed; $within support\r\n  * added; $unset is now used when setting a path to undefined (#519)\r\n  * added; query#batchSize support\r\n  * updated; docs\r\n  * updated; -native driver to 0.9.7-1.3 (provides Windows support)\r\n\r\n2.3.13 / 2011-11-15\r\n===================\r\n\r\n  * fixed; required validation for Refs (#612) [ded]\r\n  * added; $nearSphere support for Arrays (#610)\r\n\r\n2.3.12 / 2011-11-09\r\n===================\r\n\r\n  * fixed; regression, objects passed to Model.update should not be changed (#605)\r\n  * fixed; regression, empty Model.update should not be executed\r\n\r\n2.3.11 / 2011-11-08\r\n===================\r\n\r\n  * fixed; using $elemMatch on arrays of Mixed types (#591)\r\n  * fixed; allow using $regex when querying Arrays (#599)\r\n  * fixed; calling Model.update with no atomic keys (#602)\r\n\r\n2.3.10 / 2011-11-05\r\n===================\r\n\r\n  * fixed; model.update casting for nested paths works (#542)\r\n\r\n2.3.9 / 2011-11-04\r\n==================\r\n\r\n  * fixed; deepEquals check for MongooseArray returned false\r\n  * fixed; reset modified flags of embedded docs after save [gitfy]\r\n  * fixed; setting embedded doc with identical values no longer marks modified [gitfy]\r\n  * updated; -native driver to 0.9.6.23 [mlazarov]\r\n  * fixed; Model.update casting (#542, #545, #479)\r\n  * fixed; populated refs no longer fail required validators (#577)\r\n  * fixed; populating refs of objects with custom ids works\r\n  * fixed; $pop & $unset work with Model.update (#574)\r\n  * added; more helpful debugging message for Schema#add (#578)\r\n  * fixed; accessing .id when no _id exists now returns null (#590)\r\n\r\n2.3.8 / 2011-10-26\r\n==================\r\n\r\n  * added; callback to query#findOne is now optional (#581)\r\n\r\n2.3.7 / 2011-10-24\r\n==================\r\n\r\n  * fixed; wrapped save/remove callbacks in nextTick to mitigate -native swallowing thrown errors\r\n\r\n2.3.6 / 2011-10-21\r\n==================\r\n\r\n  * fixed; exclusion of embedded doc _id from query results (#541)\r\n\r\n2.3.5 / 2011-10-19\r\n==================\r\n\r\n  * fixed; calling queries without passing a callback works (#569)\r\n  * fixed; populate() works with String and Number _ids too (#568)\r\n\r\n2.3.4 / 2011-10-18\r\n==================\r\n\r\n  * added; Model.create now accepts an array as a first arg\r\n  * fixed; calling toObject on a DocumentArray with nulls no longer throws\r\n  * fixed; calling inspect on a DocumentArray with nulls no longer throws\r\n  * added; MongooseArray#unshift support\r\n  * fixed; save hooks now fire on embedded documents [gitfy] (#456)\r\n  * updated; -native driver to 0.9.6-22\r\n  * fixed; correctly pass $addToSet op instead of $push\r\n  * fixed; $addToSet properly detects dates\r\n  * fixed; $addToSet with multiple items works\r\n  * updated; better node 0.6 Buffer support\r\n\r\n2.3.3 / 2011-10-12\r\n==================\r\n\r\n  * fixed; population conditions in multi-query settings [vedmalex] (#563)\r\n  * fixed; now compatible with Node v0.5.x\r\n\r\n2.3.2 / 2011-10-11\r\n==================\r\n\r\n  * fixed; population of null subdoc properties no longer hangs (#561)\r\n\r\n2.3.1 / 2011-10-10\r\n==================\r\n\r\n  * added; support for Query filters to populate() [eneko]\r\n  * fixed; querying with number no longer crashes mongodb (#555) [jlbyrey]\r\n  * updated; version of -native driver to 0.9.6-21\r\n  * fixed; prevent query callbacks that throw errors from corrupting -native connection state\r\n\r\n2.3.0 / 2011-10-04\r\n==================\r\n\r\n  * fixed; nulls as default values for Boolean now works as expected\r\n  * updated; version of -native driver to 0.9.6-20\r\n\r\n2.2.4 / 2011-10-03\r\n==================\r\n\r\n  * fixed; populate() works when returned array contains undefined/nulls\r\n\r\n2.2.3 / 2011-09-29\r\n==================\r\n\r\n  * updated; version of -native driver to 0.9.6-19\r\n\r\n2.2.2 / 2011-09-28\r\n==================\r\n\r\n  * added; $regex support to String [davidandrewcope]\r\n  * added; support for other contexts like repl etc (#535)\r\n  * fixed; clear modified state properly after saving\r\n  * added; $addToSet support to Array\r\n\r\n2.2.1 / 2011-09-22\r\n==================\r\n\r\n  * more descript error when casting undefined to string\r\n  * updated; version of -native driver to 0.9.6-18\r\n\r\n2.2.0 / 2011-09-22\r\n==================\r\n\r\n  * fixed; maxListeners warning on schemas with many arrays (#530)\r\n  * changed; return / apply defaults based on fields selected in query (#423)\r\n  * fixed; correctly detect Mixed types within schema arrays (#532)\r\n\r\n2.1.4 / 2011-09-20\r\n==================\r\n\r\n  * fixed; new private methods that stomped on users code\r\n  * changed; finished removing old \"compat\" support which did nothing\r\n\r\n2.1.3 / 2011-09-16\r\n==================\r\n\r\n  * updated; version of -native driver to 0.9.6-15\r\n  * added; emit `error` on connection when open fails [edwardhotchkiss]\r\n  * added; index support to Buffers (thanks justmoon for helping track this down)\r\n  * fixed; passing collection name via schema in conn.model() now works (thanks vedmalex for reporting)\r\n\r\n2.1.2 / 2011-09-07\r\n==================\r\n\r\n  * fixed; Query#find with no args no longer throws\r\n\r\n2.1.1 / 2011-09-07\r\n==================\r\n\r\n  * added; support Model.count(fn)\r\n  * fixed; compatibility with node >=0.4.0 < 0.4.3\r\n  * added; pass model.options.safe through with .save() so w:2, wtimeout:5000 options work [andrewjstone]\r\n  * added; support for $type queries\r\n  * added; support for Query#or\r\n  * added; more tests\r\n  * optimized populate queries\r\n\r\n2.1.0 / 2011-09-01\r\n==================\r\n\r\n  * changed; document#validate is a public method\r\n  * fixed; setting number to same value no longer marks modified (#476) [gitfy]\r\n  * fixed; Buffers shouldn't have default vals\r\n  * added; allow specifying collection name in schema (#470) [ixti]\r\n  * fixed; reset modified paths and atomics after saved (#459)\r\n  * fixed; set isNew on embedded docs to false after save\r\n  * fixed; use self to ensure proper scope of options in doOpenSet (#483) [andrewjstone]\r\n\r\n2.0.4 / 2011-08-29\r\n==================\r\n\r\n  * Fixed; Only send the depopulated ObjectId instead of the entire doc on save (DBRefs)\r\n  * Fixed; Properly cast nested array values in Model.update (the data was stored in Mongo incorrectly but recast on document fetch was \"fixing\" it)\r\n\r\n2.0.3 / 2011-08-28\r\n==================\r\n\r\n  * Fixed; manipulating a populated array no longer causes infinite loop in BSON serializer during save (#477)\r\n  * Fixed; populating an empty array no longer hangs foreeeeeeeever (#481)\r\n\r\n2.0.2 / 2011-08-25\r\n==================\r\n\r\n  * Fixed; Maintain query option key order (fixes 'bad hint' error from compound query hints)\r\n\r\n2.0.1 / 2011-08-25\r\n==================\r\n\r\n  * Fixed; do not over-write the doc when no valide props exist in Model.update (#473)\r\n\r\n2.0.0 / 2011-08-24\r\n===================\r\n\r\n  * Added; support for Buffers [justmoon]\r\n  * Changed; improved error handling [maelstrom]\r\n  * Removed: unused utils.erase\r\n  * Fixed; support for passing other context object into Schemas (#234) [Sija]\r\n  * Fixed; getters are no longer circular refs to themselves (#366)\r\n  * Removed; unused compat.js\r\n  * Fixed; getter/setter scopes are set properly\r\n  * Changed; made several private properties more obvious by prefixing _\r\n  * Added; DBRef support [guille]\r\n  * Changed; removed support for multiple collection names per model\r\n  * Fixed; no longer applying setters when document returned from db\r\n  * Changed; default auto_reconnect to true\r\n  * Changed; Query#bind no longer clones the query\r\n  * Fixed; Model.update now accepts $pull, $inc and friends (#404)\r\n  * Added; virtual type option support [nw]\r\n\r\n1.8.4 / 2011-08-21\r\n===================\r\n\r\n  * Fixed; validation bug when instantiated with non-schema properties (#464) [jmreidy]\r\n\r\n1.8.3 / 2011-08-19\r\n===================\r\n\r\n  * Fixed; regression in connection#open [jshaw86]\r\n\r\n1.8.2 / 2011-08-17\r\n===================\r\n\r\n  * fixed; reset connection.readyState after failure [tomseago]\r\n  * fixed; can now query positionally for non-embedded docs (arrays of numbers/strings etc)\r\n  * fixed; embedded document query casting\r\n  * added; support for passing options to node-mongo-native db, server, and replsetserver [tomseago]\r\n\r\n1.8.1 / 2011-08-10\r\n===================\r\n\r\n  * fixed; ObjectIds were always marked modified\r\n  * fixed; can now query using document instances\r\n  * fixed; can now query/update using documents with subdocs\r\n\r\n1.8.0 / 2011-08-04\r\n===================\r\n\r\n  * fixed; can now use $all with String and Number\r\n  * fixed; can query subdoc array with $ne: null\r\n  * fixed; instance.subdocs#id now works with custom _ids\r\n  * fixed; do not apply setters when doc returned from db (change in bad behavior)\r\n\r\n1.7.4 / 2011-07-25\r\n===================\r\n\r\n  * fixed; sparse now a valid seperate schema option\r\n  * fixed; now catching cast errors in queries\r\n  * fixed; calling new Schema with object created in vm.runInNewContext now works (#384) [Sija]\r\n  * fixed; String enum was disallowing null\r\n  * fixed; Find by nested document _id now works (#389)\r\n\r\n1.7.3 / 2011-07-16\r\n===================\r\n\r\n  * fixed; MongooseArray#indexOf now works with ObjectIds\r\n  * fixed; validation scope now set properly (#418)\r\n  * fixed; added missing colors dependency (#398)\r\n\r\n1.7.2 / 2011-07-13\r\n===================\r\n\r\n  * changed; node-mongodb-native driver to v0.9.6.7\r\n\r\n1.7.1 / 2011-07-12\r\n===================\r\n\r\n  * changed; roll back node-mongodb-native driver to v0.9.6.4\r\n\r\n1.7.0 / 2011-07-12\r\n===================\r\n\r\n  * fixed; collection name misspelling [mathrawka]\r\n  * fixed; 2nd param is required for ReplSetServers [kevinmarvin]\r\n  * fixed; MongooseArray behaves properly with Object.keys\r\n  * changed; node-mongodb-native driver to v0.9.6.6\r\n  * fixed/changed; Mongodb segfault when passed invalid ObjectId (#407)\r\n      - This means invalid data passed to the ObjectId constructor will now error\r\n\r\n1.6.0 / 2011-07-07\r\n===================\r\n\r\n  * changed; .save() errors are now emitted on the instances db instead of the instance 9782463fc\r\n  * fixed; errors occurring when creating indexes now properly emit on db\r\n  * added; $maxDistance support to MongooseArrays\r\n  * fixed; RegExps now work with $all\r\n  * changed; node-mongodb-native driver to v0.9.6.4\r\n  * fixed; model names are now accessible via .modelName\r\n  * added; Query#slaveOk support\r\n\r\n1.5.0 / 2011-06-27\r\n===================\r\n\r\n  * changed; saving without a callback no longer ignores the error (@bnoguchi)\r\n  * changed; hook-js version bump to 0.1.9\r\n  * changed; node-mongodb-native version bumped to 0.9.6.1 - When .remove() doesn't\r\n             return an error, null is no longer passed.\r\n  * fixed; two memory leaks (@justmoon)\r\n  * added; sparse index support\r\n  * added; more ObjectId conditionals (gt, lt, gte, lte) (@phillyqueso)\r\n  * added; options are now passed in model#remote (@JerryLuke)\r\n\r\n1.4.0 / 2011-06-10\r\n===================\r\n\r\n  * bumped hooks-js dependency (fixes issue passing null as first arg to next())\r\n  * fixed; document#inspect now works properly with nested docs\r\n  * fixed; 'set' now works as a schema attribute (GH-365)\r\n  * fixed; _id is now set properly within pre-init hooks (GH-289)\r\n  * added; Query#distinct / Model#distinct support (GH-155)\r\n  * fixed; embedded docs now can use instance methods (GH-249)\r\n  * fixed; can now overwrite strings conflicting with schema type\r\n\r\n1.3.7 / 2011-06-03\r\n===================\r\n\r\n  * added MongooseArray#splice support\r\n  * fixed; 'path' is now a valid Schema pathname\r\n  * improved hooks (utilizing https://github.com/bnoguchi/hooks-js)\r\n  * fixed; MongooseArray#$shift now works (never did)\r\n  * fixed; Document.modified no longer throws\r\n  * fixed; modifying subdoc property sets modified paths for subdoc and parent doc\r\n  * fixed; marking subdoc path as modified properly persists the value to the db\r\n  * fixed; RexExps can again be saved ( #357 )\r\n\r\n1.3.6 / 2011-05-18\r\n===================\r\n\r\n  * fixed; corrected casting for queries against array types\r\n  * added; Document#set now accepts Document instances\r\n\r\n1.3.5 / 2011-05-17\r\n===================\r\n\r\n  * fixed; $ne queries work properly with single vals\r\n  * added; #inspect() methods to improve console.log output\r\n\r\n1.3.4 / 2011-05-17\r\n===================\r\n\r\n  * fixed; find by Date works as expected (#336)\r\n  * added; geospatial 2d index support\r\n  * added; support for $near (#309)\r\n  * updated; node-mongodb-native driver\r\n  * fixed; updating numbers work (#342)\r\n  * added; better error msg when try to remove an embedded doc without an _id (#307)\r\n  * added; support for 'on-the-fly' schemas (#227)\r\n  * changed; virtual id getters can now be skipped\r\n  * fixed; .index() called on subdoc schema now works as expected\r\n  * fixed; db.setProfile() now buffers until the db is open (#340)\r\n\r\n1.3.3 / 2011-04-27\r\n===================\r\n\r\n  * fixed; corrected query casting on nested mixed types\r\n\r\n1.3.2 / 2011-04-27\r\n===================\r\n\r\n  * fixed; query hints now retain key order\r\n\r\n1.3.1 / 2011-04-27\r\n===================\r\n\r\n  * fixed; setting a property on an embedded array no longer overwrites entire array (GH-310)\r\n  * fixed; setting nested properties works when sibling prop is named \"type\"\r\n  * fixed; isModified is now much finer grained when .set() is used (GH-323)\r\n  * fixed; mongoose.model() and connection.model() now return the Model (GH-308, GH-305)\r\n  * fixed; can now use $gt, $lt, $gte, $lte with String schema types (GH-317)\r\n  * fixed; .lowercase() -> .toLowerCase() in pluralize()\r\n  * fixed; updating an embedded document by index works (GH-334)\r\n  * changed; .save() now passes the instance to the callback (GH-294, GH-264)\r\n  * added; can now query system.profile and system.indexes collections\r\n  * added; db.model('system.profile') is now included as a default Schema\r\n  * added; db.setProfiling(level, ms, callback)\r\n  * added; Query#hint() support\r\n  * added; more tests\r\n  * updated node-mongodb-native to 0.9.3\r\n\r\n1.3.0 / 2011-04-19\r\n===================\r\n\r\n  * changed; save() callbacks now fire only once on failed validation\r\n  * changed; Errors returned from save() callbacks now instances of ValidationError\r\n  * fixed; MongooseArray#indexOf now works properly\r\n\r\n1.2.0 / 2011-04-11\r\n===================\r\n\r\n  * changed; MongooseNumber now casts empty string to null\r\n\r\n1.1.25 / 2011-04-08\r\n===================\r\n\r\n  * fixed; post init now fires at proper time\r\n\r\n1.1.24 / 2011-04-03\r\n===================\r\n\r\n  * fixed; pushing an array onto an Array works on existing docs\r\n\r\n1.1.23 / 2011-04-01\r\n===================\r\n\r\n  * Added Model#model\r\n\r\n1.1.22 / 2011-03-31\r\n===================\r\n\r\n  * Fixed; $in queries on mixed types now work\r\n\r\n1.1.21 / 2011-03-31\r\n===================\r\n\r\n  * Fixed; setting object root to null/undefined works\r\n\r\n1.1.20 / 2011-03-31\r\n===================\r\n\r\n  * Fixed; setting multiple props on null field works\r\n\r\n1.1.19 / 2011-03-31\r\n===================\r\n\r\n  * Fixed; no longer using $set on paths to an unexisting fields\r\n\r\n1.1.18 / 2011-03-30\r\n===================\r\n\r\n  * Fixed; non-mixed type object setters work after initd from null\r\n\r\n1.1.17 / 2011-03-30\r\n===================\r\n\r\n  * Fixed; nested object property access works when root initd with null value\r\n\r\n1.1.16 / 2011-03-28\r\n===================\r\n\r\n  * Fixed; empty arrays are now saved\r\n\r\n1.1.15 / 2011-03-28\r\n===================\r\n\r\n  * Fixed; `null` and `undefined` are set atomically.\r\n\r\n1.1.14 / 2011-03-28\r\n===================\r\n\r\n  * Changed; more forgiving date casting, accepting '' as null.\r\n\r\n1.1.13 / 2011-03-26\r\n===================\r\n\r\n  * Fixed setting values as `undefined`.\r\n\r\n1.1.12 / 2011-03-26\r\n===================\r\n\r\n  * Fixed; nested objects now convert to JSON properly\r\n  * Fixed; setting nested objects directly now works\r\n  * Update node-mongodb-native\r\n\r\n1.1.11 / 2011-03-25\r\n===================\r\n\r\n  * Fixed for use of `type` as a key.\r\n\r\n1.1.10 / 2011-03-23\r\n===================\r\n\r\n  * Changed; Make sure to only ensure indexes while connected\r\n\r\n1.1.9 / 2011-03-2\r\n==================\r\n\r\n  * Fixed; Mixed can now default to empty arrays\r\n  * Fixed; keys by the name 'type' are now valid\r\n  * Fixed; null values retrieved from the database are hydrated as null values.\r\n  * Fixed repeated atomic operations when saving a same document twice.\r\n\r\n1.1.8 / 2011-03-23\r\n==================\r\n\r\n  * Fixed 'id' overriding. [bnoguchi]\r\n\r\n1.1.7 / 2011-03-22\r\n==================\r\n\r\n  * Fixed RegExp query casting when querying against an Array of Strings [bnoguchi]\r\n  * Fixed getters/setters for nested virtualsl. [bnoguchi]\r\n\r\n1.1.6 / 2011-03-22\r\n==================\r\n\r\n  * Only doValidate when path exists in Schema [aheckmann]\r\n  * Allow function defaults for Array types [aheckmann]\r\n  * Fix validation hang [aheckmann]\r\n  * Fix setting of isRequired of SchemaType [aheckmann]\r\n  * Fix SchemaType#required(false) filter [aheckmann]\r\n  * More backwards compatibility [aheckmann]\r\n  * More tests [aheckmann]\r\n\r\n1.1.5 / 2011-03-14\r\n==================\r\n\r\n  * Added support for `uri, db, fn` and `uri, fn` signatures for replica sets.\r\n  * Improved/extended replica set tests.\r\n\r\n1.1.4 / 2011-03-09\r\n==================\r\n\r\n  * Fixed; running an empty Query doesn't throw. [aheckmann]\r\n  * Changed; Promise#addBack returns promise. [aheckmann]\r\n  * Added streaming cursor support. [aheckmann]\r\n  * Changed; Query#update defaults to use$SetOnSave now. [brian]\r\n  * Added more docs.\r\n\r\n1.1.3 / 2011-03-04\r\n==================\r\n\r\n  * Added Promise#resolve [aheckmann]\r\n  * Fixed backward compatibility with nulls [aheckmann]\r\n  * Changed; Query#{run,exec} return promises [aheckmann]\r\n\r\n1.1.2 / 2011-03-03\r\n==================\r\n\r\n  * Restored Query#exec and added notion of default operation [brian]\r\n  * Fixed ValidatorError messages [brian]\r\n\r\n1.1.1 / 2011-03-01\r\n==================\r\n\r\n  * Added SchemaType String `lowercase`, `uppercase`, `trim`.\r\n  * Public exports (`Model`, `Document`) and tests.\r\n  * Added ObjectId casting support for `Document`s.\r\n\r\n1.1.0 / 2011-02-25\r\n==================\r\n\r\n  * Added support for replica sets.\r\n\r\n1.0.16 / 2011-02-18\r\n===================\r\n\r\n  * Added $nin as another whitelisted $conditional for SchemaArray [brian]\r\n  * Changed #with to #where [brian]\r\n  * Added ability to use $in conditional with Array types [brian]\r\n\r\n1.0.15 / 2011-02-18\r\n===================\r\n\r\n  * Added `id` virtual getter for documents to easily access the hexString of\r\n  the `_id`.\r\n\r\n1.0.14 / 2011-02-17\r\n===================\r\n\r\n  * Fix for arrays within subdocuments [brian]\r\n\r\n1.0.13 / 2011-02-16\r\n===================\r\n\r\n  * Fixed embedded documents saving.\r\n\r\n1.0.12 / 2011-02-14\r\n===================\r\n\r\n  * Minor refactorings [brian]\r\n\r\n1.0.11 / 2011-02-14\r\n===================\r\n\r\n  * Query refactor and $ne, $slice, $or, $size, $elemMatch, $nin, $exists support [brian]\r\n  * Named scopes sugar [brian]\r\n\r\n1.0.10 / 2011-02-11\r\n===================\r\n\r\n  * Updated node-mongodb-native driver [thanks John Allen]\r\n\r\n1.0.9 / 2011-02-09\r\n==================\r\n\r\n  * Fixed single member arrays as defaults [brian]\r\n\r\n1.0.8 / 2011-02-09\r\n==================\r\n\r\n  * Fixed for collection-level buffering of commands [gitfy]\r\n  * Fixed `Document#toJSON` [dalejefferson]\r\n  * Fixed `Connection` authentication [robrighter]\r\n  * Fixed clash of accessors in getters/setters [eirikurn]\r\n  * Improved `Model#save` promise handling\r\n\r\n1.0.7 / 2011-02-05\r\n==================\r\n\r\n  * Fixed memory leak warnings for test suite on 0.3\r\n  * Fixed querying documents that have an array that contain at least one\r\n  specified member. [brian]\r\n  * Fixed default value for Array types (fixes GH-210). [brian]\r\n  * Fixed example code.\r\n\r\n1.0.6 / 2011-02-03\r\n==================\r\n\r\n  * Fixed `post` middleware\r\n  * Fixed; it's now possible to instantiate a model even when one of the paths maps\r\n  to an undefined value [brian]\r\n\r\n1.0.5 / 2011-02-02\r\n==================\r\n\r\n  * Fixed; combo $push and $pushAll auto-converts into a $pushAll [brian]\r\n  * Fixed; combo $pull and $pullAll auto-converts to a single $pullAll [brian]\r\n  * Fixed; $pullAll now removes said members from array before save (so it acts just\r\n  like pushAll) [brian]\r\n  * Fixed; multiple $pulls and $pushes become a single $pullAll and $pushAll.\r\n  Moreover, $pull now modifies the array before save to reflect the immediate\r\n  change [brian]\r\n  * Added tests for nested shortcut getters [brian]\r\n  * Added tests that show that Schemas with nested Arrays don't apply defaults\r\n  [brian]\r\n\r\n1.0.4 / 2011-02-02\r\n==================\r\n\r\n  * Added MongooseNumber#toString\r\n  * Added MongooseNumber unit tests\r\n\r\n1.0.3 / 2011-02-02\r\n==================\r\n\r\n  * Make sure safe mode works with Model#save\r\n  * Changed Schema options: safe mode is now the default\r\n  * Updated node-mongodb-native to HEAD\r\n\r\n1.0.2 / 2011-02-02\r\n==================\r\n\r\n  * Added a Model.create shortcut for creating documents. [brian]\r\n  * Fixed; we can now instantiate models with hashes that map to at least one\r\n  null value. [brian]\r\n  * Fixed Schema with more than 2 nested levels. [brian]\r\n\r\n1.0.1 / 2011-02-02\r\n==================\r\n\r\n  * Improved `MongooseNumber`, works almost like the native except for `typeof`\r\n  not being `'number'`.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/History.md	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/History.md	(date 499162500000)
@@ -1,3 +1,12 @@
+5.10.3 / 2020-09-03
+===================
+ * fix: upgrade mongodb -> 3.6.1 #9380 [lamhieu-vk](https://github.com/lamhieu-vk)
+ * fix(populate): allow populating paths underneath subdocument maps #9359
+ * fix(update): handle casting map paths when map is underneath a single nested subdoc #9298
+ * fix(discriminator): avoid removing nested path if both base and discriminator schema have the same nested path #9362
+ * fix(schema): support `Schema#add()` with schematype instances with different paths #9370
+ * docs(api): fix typo in `Query#get()` example #9372 [elainewlin](https://github.com/elainewlin)
+
 5.10.2 / 2020-08-28
 ===================
  * fix(model): avoid uncaught error if `insertMany()` fails due to server selection error #9355
Index: initializers/requirements.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>express = require('express');\r\nfs = require('fs');\r\nadaro = require('adaro');\r\npath = require('path');\r\nsvg_captcha = require('svg-captcha');\r\nsession = require('express-session');\r\nbody_parser = require('body-parser');\r\nfile_upload = require('express-fileupload');\r\nmongo_store = require('connect-mongo')(session);\r\nmongoose = require('mongoose');\r\nnodemailer = require('nodemailer');\r\nJalaliDate = require('jalali-date');\r\nsha1 = require('sha1');\r\ncompression = require('compression');\r\ncrypto = require('crypto');\r\nhtml_entities = require('html-entities').AllHtmlEntities;\r\n\r\nentities = new html_entities();\r\n\r\nrequire('./config');\r\nrequire('./library');\r\ndust_helpers = require('./dust-helpers');\r\nvalidation = require('./validation');\r\nfileManager = require('./file-manager');\r\nserverHelpers = require('./server-helpers');\r\n\r\nuser_model = require('../models/user-schema');\r\ncategory_model = require('../models/category-schema');\r\nsetting_model = require('../models/setting-schema');\r\nproduct_model = require('../models/product-schema');\r\nmessage_model = require('../models/message-schema');\r\ndiscount_model = require('../models/discount-schema');\r\narticle_model = require('../models/article-schema');\r\nreport_model = require('../models/report-schema');\r\naccess_model = require('../models/access-schema');\r\ncomment_model = require('../models/comment-schema');\r\ncontact_model = require('../models/contact-schema');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- initializers/requirements.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ initializers/requirements.js	(date 1599636786566)
@@ -2,6 +2,8 @@
 fs = require('fs');
 adaro = require('adaro');
 path = require('path');
+os = require('os');
+disk = require('check-disk-space');
 svg_captcha = require('svg-captcha');
 session = require('express-session');
 body_parser = require('body-parser');
Index: node_modules/bl/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"bl@^2.2.0\",\r\n  \"_id\": \"bl@2.2.0\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha512-wbgvOpqopSr7uq6fJrLH8EsvYMJf9gzfo2jCsL2eTy75qXPukA4pCgHamOQkZtY5vmfVtjB+P3LNlMHW5CEZXA==\",\r\n  \"_location\": \"/bl\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"range\",\r\n    \"registry\": true,\r\n    \"raw\": \"bl@^2.2.0\",\r\n    \"name\": \"bl\",\r\n    \"escapedName\": \"bl\",\r\n    \"rawSpec\": \"^2.2.0\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"^2.2.0\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"/mongodb\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/bl/-/bl-2.2.0.tgz\",\r\n  \"_shasum\": \"e1a574cdf528e4053019bb800b041c0ac88da493\",\r\n  \"_spec\": \"bl@^2.2.0\",\r\n  \"_where\": \"F:\\\\Programming\\\\Node Js Projects\\\\CMS\\\\node_modules\\\\mongodb\",\r\n  \"authors\": [\r\n    \"Rod Vagg <rod@vagg.org> (https://github.com/rvagg)\",\r\n    \"Matteo Collina <matteo.collina@gmail.com> (https://github.com/mcollina)\",\r\n    \"Jarett Cruger <jcrugzz@gmail.com> (https://github.com/jcrugzz)\"\r\n  ],\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/rvagg/bl/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"dependencies\": {\r\n    \"readable-stream\": \"^2.3.5\",\r\n    \"safe-buffer\": \"^5.1.1\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"Buffer List: collect buffers and access with a standard readable Buffer interface, streamable too!\",\r\n  \"devDependencies\": {\r\n    \"faucet\": \"0.0.1\",\r\n    \"hash_file\": \"~0.1.1\",\r\n    \"tape\": \"~4.9.0\"\r\n  },\r\n  \"homepage\": \"https://github.com/rvagg/bl\",\r\n  \"keywords\": [\r\n    \"buffer\",\r\n    \"buffers\",\r\n    \"stream\",\r\n    \"awesomesauce\"\r\n  ],\r\n  \"license\": \"MIT\",\r\n  \"main\": \"bl.js\",\r\n  \"name\": \"bl\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/rvagg/bl.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"node test/test.js | faucet\"\r\n  },\r\n  \"version\": \"2.2.0\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/bl/package.json	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/bl/package.json	(date 1599636142627)
@@ -1,27 +1,28 @@
 {
-  "_from": "bl@^2.2.0",
-  "_id": "bl@2.2.0",
+  "_from": "bl@2.2.1",
+  "_id": "bl@2.2.1",
   "_inBundle": false,
-  "_integrity": "sha512-wbgvOpqopSr7uq6fJrLH8EsvYMJf9gzfo2jCsL2eTy75qXPukA4pCgHamOQkZtY5vmfVtjB+P3LNlMHW5CEZXA==",
+  "_integrity": "sha512-6Pesp1w0DEX1N550i/uGV/TqucVL4AM/pgThFSN/Qq9si1/DF9aIHs1BxD8V/QU0HoeHO6cQRTAuYnLPKq1e4g==",
   "_location": "/bl",
   "_phantomChildren": {},
   "_requested": {
-    "type": "range",
+    "type": "version",
     "registry": true,
-    "raw": "bl@^2.2.0",
+    "raw": "bl@2.2.1",
     "name": "bl",
     "escapedName": "bl",
-    "rawSpec": "^2.2.0",
+    "rawSpec": "2.2.1",
     "saveSpec": null,
-    "fetchSpec": "^2.2.0"
+    "fetchSpec": "2.2.1"
   },
   "_requiredBy": [
-    "/mongodb"
+    "/mongodb",
+    "/mongoose/mongodb"
   ],
-  "_resolved": "https://registry.npmjs.org/bl/-/bl-2.2.0.tgz",
-  "_shasum": "e1a574cdf528e4053019bb800b041c0ac88da493",
-  "_spec": "bl@^2.2.0",
-  "_where": "F:\\Programming\\Node Js Projects\\CMS\\node_modules\\mongodb",
+  "_resolved": "https://registry.npmjs.org/bl/-/bl-2.2.1.tgz",
+  "_shasum": "8c11a7b730655c5d56898cdc871224f40fd901d5",
+  "_spec": "bl@2.2.1",
+  "_where": "F:\\Programming\\Node Js Projects\\Quince\\node_modules\\mongodb",
   "authors": [
     "Rod Vagg <rod@vagg.org> (https://github.com/rvagg)",
     "Matteo Collina <matteo.collina@gmail.com> (https://github.com/mcollina)",
@@ -59,5 +60,5 @@
   "scripts": {
     "test": "node test/test.js | faucet"
   },
-  "version": "2.2.0"
+  "version": "2.2.1"
 }
Index: backend/templates/quince/views/groups/groups-admins.dust
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{>\"layouts/dashboard-layout\"/}\r\n\r\n{<css}\r\n    <link rel=\"stylesheet\" href=\"css/groups/groups-admins.css\">\r\n{/css}\r\n{<js}\r\n    <script src=\"js/groups/groups-admins.js\"></script>\r\n    <script src=\"js/custom/checkbox.js\"></script>\r\n    <script src=\"js/custom/image-modal.js\"></script>\r\n    <script src=\"js/custom/main-error.js\"></script>\r\n    <script src=\"js/general/form-ajax.js\"></script>\r\n    <script src=\"js/custom/modal.js\"></script>\r\n{/js}\r\n\r\n\r\n{<body}\r\n\r\n    <section>\r\n        <div class=\"error_info warning_error\">\r\n            <i class=\"fal fa-exclamation-circle\"></i>\r\n            <p></p>\r\n            <i class=\"fal fa-times\"></i>\r\n        </div>\r\n        <div class=\"main_body\">\r\n            <div class=\"container-fluid\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 main_col\">\r\n                        <header class=\"header_field\">\r\n                            <div class=\"container-fluid\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-12 col-lg-7\">\r\n                                        <div class=\"d-inline-block field_of_ht\">\r\n                                            <h1>لیست مدیران</h1>\r\n                                            <h2>لیست مدیران سایت را در جدول زیر مشاهده کنید</h2>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-12 col-lg-5\">\r\n                                        <div class=\"table_header\">\r\n                                            <div class=\"input-group mb-3 t_search\">\r\n                                                <div class=\"input-group-prepend\">\r\n                                                    <button class=\"input-group-text btn search_btn\" id=\"basic-addon1\">\r\n                                                        <i class=\"fal fa-search\"></i>\r\n                                                    </button>\r\n                                                </div>\r\n                                                <input type=\"text\" class=\"form-control search_table\" placeholder=\"جستجو ...\" aria-describedby=\"basic-addon1\" value=\"{search_value}\">\r\n                                                {@eq key=\"{search}\" value=\"true\"}\r\n                                                    <i class=\"fal fa-times search_btn_cancel\"></i>\r\n                                                {/eq}\r\n                                            </div>\r\n                                            <div class=\"form-group tr_select\">\r\n                                                <label for=\"t_row_select\" class=\"d-inline-block select_lable\">تعداد ردیف ها :</label>\r\n                                                <select class=\"form-control limit_row\" id=\"t_row_select\">\r\n                                                    {#page_limit_slot}\r\n                                                        {@eq key=\"{.}\" value=\"{page_limit}\"}\r\n                                                            <option selected>{.}</option>\r\n                                                        {:else}\r\n                                                            <option>{.}</option>\r\n                                                        {/eq}\r\n                                                    {/page_limit_slot}\r\n                                                </select>\r\n                                            </div>\r\n                                            <button class=\"btn table_delete_btn\">\r\n                                                <i class=\"fal fa-trash-alt\"></i>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </header>\r\n                        <div class=\"QTR\">\r\n                            <table class=\"Q_table\">\r\n                                <tr class=\"TQ_hr\">\r\n                                    <th>\r\n                                        <label class=\"checkbox_of_category\">\r\n                                            <input type=\"checkbox\" class=\"option-input checkbox\" id=\"selectall\" name=\"select_all\">\r\n                                        </label>\r\n                                    </th>\r\n                                    <th>ردیف</th>\r\n                                    <th>عکس</th>\r\n                                    <th>نام کاربری</th>\r\n                                    <th>سطح دسترسی</th>\r\n                                    <th>وضعیت</th>\r\n                                    <th>آخرین فعالیت</th>\r\n                                    <th>تنظیمات</th>\r\n                                </tr>\r\n                                {#admins_list}\r\n                                    <tr>\r\n                                        {@eq key=\"{g_admin_info._id}\" value=\"{_id}\"}\r\n                                            <td>\r\n\r\n                                            </td>\r\n                                        {:else}\r\n                                            {@eq key=\"{can_edit}\" value=\"true\"}\r\n                                                <td>\r\n                                                    <label class=\"checkbox_of_category\">\r\n                                                        <input type=\"checkbox\" name=\"delete_checkbox[]\" class=\"table_checkbox option-input checkbox\" value=\"{._id}\">\r\n                                                    </label>\r\n                                                </td>\r\n                                            {:else}\r\n                                                <td>\r\n\r\n                                                </td>\r\n                                            {/eq}\r\n                                        {/eq}\r\n                                        <td>{@math key=\"{rows_begin_number}\" method=\"add\" operand=\"{$idx}\"/}</td>\r\n                                        <td class=\"QT_image\">\r\n                                            {@eq key=\"{avatar}\" value=\"\"}\r\n                                                <img src=\"img/default-profile-picture.png\" alt=\"\">\r\n                                            {:else}\r\n                                                <img src=\"media/avatars/{avatar}\" alt=\"\">\r\n                                            {/eq}\r\n                                        </td>\r\n                                        <td>\r\n                                            <div>\r\n                                                <a href=\"{backend_url}groups/profile/{unique_id}\">\r\n                                                    {@eq key=\"{author_type}\" value=\"name\"}\r\n                                                        {first_name} {last_name}\r\n                                                    {:else}\r\n                                                        {nick_name}\r\n                                                    {/eq}\r\n                                                </a>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td class=\"QT_truncate\">\r\n                                            <div>\r\n                                                {@eq key=\"{access_type}\" value=\"{null}\"}\r\n                                                    تعریف نشده\r\n                                                {:else}\r\n                                                    {access_type.title}\r\n                                                {/eq}\r\n                                            </div>\r\n                                        </td>\r\n                                        {@eq key=\"{status}\" value=\"true\"}\r\n                                            <td class=\"QT_green_pill\">\r\n                                                <div>\r\n                                                    فعال\r\n                                                </div>\r\n                                            </td>\r\n                                        {:else}\r\n                                            <td class=\"QT_red_pill\">\r\n                                                <div>\r\n                                                    مسدود\r\n                                                </div>\r\n                                            </td>\r\n                                        {/eq}\r\n                                        <td>\r\n                                            {@eq key=\"{last_activity}\" value=\"\"}\r\n                                                ثبت نشده\r\n                                            {:else}\r\n                                                <div>\r\n                                                    {last_activity}\r\n                                                </div>\r\n                                            {/eq}\r\n                                        </td>\r\n                                        {@eq key=\"{g_admin_info._id}\" value=\"{_id}\"}\r\n                                            <td>\r\n                                                دسترسی ندارید\r\n                                            </td>\r\n                                        {:else}\r\n                                            {@eq key=\"{can_edit}\" value=\"true\"}\r\n                                                <td class=\"table_option\">\r\n                                                    <div class=\"dropdown\">\r\n                                                        <button class=\"btn  dropdown-toggle\" type=\"button\" id=\"table_option\"\r\n                                                                data-toggle=\"dropdown\"\r\n                                                                aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                                            <i class=\"fas fa-ellipsis-v\"></i>\r\n                                                        </button>\r\n                                                        <div class=\"dropdown-menu\" aria-labelledby=\"table_option\">\r\n                                                            <button class=\"dropdown-item\">\r\n                                                                <i class=\"fal fa-paper-plane\"></i>\r\n                                                                ارسال پیام\r\n                                                            </button>\r\n                                                            <button class=\"dropdown-item edit_btn\" name=\"{._id}\">\r\n                                                                <i class=\"fal fa-sync-alt\"></i>\r\n                                                                تغییر دسترسی\r\n                                                            </button>\r\n                                                            <button class=\"dropdown-item admin_status\" name=\"{._id}\" value=\"{status}\">\r\n                                                                <i class=\"fal fa-ban\"></i>\r\n                                                                {@eq key=\"{status}\" value=\"true\"}\r\n                                                                    مسدود کردن حساب\r\n                                                                {:else}\r\n                                                                    فعال کردن حساب\r\n                                                                {/eq}\r\n                                                            </button>\r\n                                                            <button class=\"user_delete dropdown-item\" name=\"{._id}\">\r\n                                                                <i class=\"fal fa-user-times\"></i>\r\n                                                                حذف کاربر\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </td>\r\n                                            {:else}\r\n                                                <td>\r\n                                                    دسترسی ندارید\r\n                                                </td>\r\n                                            {/eq}\r\n                                        {/eq}\r\n                                    </tr>\r\n                                {/admins_list}\r\n                            </table>\r\n                            {?admins_list}{:else}\r\n                                <div class=\"table_search_error\">\r\n                                    <p>موردی جهت نمایش وجود ندارد !</p>\r\n                                </div>\r\n                            {/admins_list}\r\n                            {@page number=\"{total_pages}\"  url=\"{backend_url}groups/admins{pagination_url}\" current=\"{page_number}\" query=\"{pagination_url}\"/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- modal -->\r\n    <div class=\"modal_field\">\r\n        <div class=\"container\">\r\n            <div class=\"row align-items-center modal_row\">\r\n                <div class=\"col-6 offset-3\">\r\n                    <div class=\"info_field\">\r\n                        <header class=\"header_field\">\r\n                            <h1>تغییر دسترسی</h1>\r\n                            <h2>دسترسی مورد نظر خود را تغییر کنید</h2>\r\n                            <hr>\r\n                        </header>\r\n                        <form class=\"text-right dir-rtl form_ajax\" method=\"post\" action=\"{backend_url}groups/admins/access\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"change_access\">سطح دسترسی</label>\r\n                                <input class=\"edit_access_admin_id\" hidden=\"hidden\" name=\"admin_id\">\r\n                                <select class=\"form-control main_form_design edit_access\" id=\"change_access\" name=\"access_inp\">\r\n                                    <option value=\"0\">----</option>\r\n                                    {#access_list}\r\n                                        <option value=\"{_id}\">{title}</option>\r\n                                    {/access_list}\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"modal_btn_field\">\r\n                                <button type=\"button\" class=\"btn red_btn py-2 mt-3 close_modal\">لغو</button>\r\n                                <button type=\"submit\" class=\"btn green_btn py-2 mt-3 mr-2\">تغییر دسترسی</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n{/body}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/templates/quince/views/groups/groups-admins.dust	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/templates/quince/views/groups/groups-admins.dust	(date 1599623255267)
@@ -166,10 +166,6 @@
                                                             <i class="fas fa-ellipsis-v"></i>
                                                         </button>
                                                         <div class="dropdown-menu" aria-labelledby="table_option">
-                                                            <button class="dropdown-item">
-                                                                <i class="fal fa-paper-plane"></i>
-                                                                ارسال پیام
-                                                            </button>
                                                             <button class="dropdown-item edit_btn" name="{._id}">
                                                                 <i class="fal fa-sync-alt"></i>
                                                                 تغییر دسترسی
Index: backend/branches/article/edit.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const router = express.Router();\r\n\r\nrouter.get('/:id', async(req, res, next)=>{\r\n\r\n    try{\r\n\r\n        let article_id = req.params.id\r\n        let find_article = await article_model.getByUniqueId(article_id);\r\n\r\n        if(!find_article){\r\n\r\n            return res.status(404).render('errors/404');\r\n\r\n        }\r\n\r\n        let data = {\r\n\r\n            article_info : find_article,\r\n            parent_list : await category_model.getParent(),\r\n\r\n        }\r\n\r\n        if(find_article.category_parent != null){\r\n\r\n            data.child_list = await category_model.getSub(find_article.category_parent._id);\r\n\r\n        }\r\n\r\n        req.session.temp_files = [];\r\n\r\n        res.render('article/article-edit', data);\r\n\r\n    }\r\n    catch (error) {\r\n\r\n        next(error);\r\n\r\n    }\r\n\r\n});\r\n\r\nrouter.post('/:id', async(req, res, next)=>{\r\n\r\n   try{\r\n\r\n       let article_id = req.params.id;\r\n       let find_article = await article_model.getByUniqueId(article_id);\r\n       let {title_inp, parent_inp, child_inp, summary_inp, describe_inp, meta_describe_inp, type_inp} = req.body;\r\n       let tags_inp = req.body['tags_inp[]'];\r\n       let validation_result = new validation([\r\n           {value : title_inp},\r\n           {value : parent_inp, type : 'objectId'},\r\n           {value : child_inp, type : 'objectId'},\r\n           {value : meta_describe_inp},\r\n           {value : type_inp},\r\n           {value : tags_inp, type : 'array'},\r\n       ]).valid()\r\n\r\n       if(validation_result){\r\n\r\n           return res.json(validation_result);\r\n\r\n       }\r\n\r\n       let article_url = title_inp.split(' ').join('-').toLowerCase();\r\n\r\n       let article_data = {\r\n\r\n           title : title_inp,\r\n           category_parent : (parent_inp == '0') ? null : parent_inp,\r\n           category_child : (child_inp == '0') ? null : child_inp,\r\n           describe : describe_inp,\r\n           meta_describe : meta_describe_inp,\r\n           url : article_url,\r\n           internal_files : req.session.temp_files,\r\n           summary : summary_inp,\r\n           status : (type_inp == '0') ? true : false,\r\n\r\n       }\r\n\r\n       if (req.files) {\r\n\r\n           let current_main_image = await article_model.edit(article_id, {\r\n               main_image : \"\"\r\n           });\r\n\r\n           if(current_main_image){\r\n\r\n               let file_path = `${backend_upload_dir}images/${current_main_image.main_image}`;\r\n               fs.unlink(file_path, function (err) {});\r\n\r\n           }\r\n\r\n           let main_image = req.files.main_image;\r\n           let file_name = `${randomSha1String()}.${main_image.name.split(\".\").pop()}`;\r\n           let upload_result = fileManager.upload(main_image, file_name,{\r\n\r\n               allowed_formats : `image`,\r\n               file_path : `${backend_upload_dir}images/`,\r\n\r\n           });\r\n\r\n           if(upload_result){\r\n\r\n               return res.json(upload_result)\r\n\r\n           }\r\n\r\n           article_data.main_image = file_name;\r\n\r\n       }\r\n       else if(find_article.main_image == \"\"){\r\n\r\n           return res.json('یک تصویر به عنوان تصویر اصلی مقاله انتخاب کنید.');\r\n\r\n       }\r\n\r\n       let result = await article_model.edit(article_id, article_data);\r\n\r\n       if(result){\r\n\r\n           return res.json({\r\n               status : 'success',\r\n               url : `${config.backend_url}article/list`,\r\n               msg : `مقاله موردنظر با موفقیت ویرایش شد`\r\n           })\r\n\r\n       }\r\n       else{\r\n\r\n           return res.json('این نام تکراری می باشد، لطفا از نام دیگری استفاده کنید.')\r\n\r\n       }\r\n\r\n   }\r\n   catch (error) {\r\n\r\n       next(error);\r\n\r\n   }\r\n\r\n});\r\n\r\nmodule.exports = router;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/branches/article/edit.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/branches/article/edit.js	(date 1599624372898)
@@ -47,13 +47,13 @@
        let find_article = await article_model.getByUniqueId(article_id);
        let {title_inp, parent_inp, child_inp, summary_inp, describe_inp, meta_describe_inp, type_inp} = req.body;
        let tags_inp = req.body['tags_inp[]'];
+
        let validation_result = new validation([
            {value : title_inp},
            {value : parent_inp, type : 'objectId'},
            {value : child_inp, type : 'objectId'},
            {value : meta_describe_inp},
            {value : type_inp},
-           {value : tags_inp, type : 'array'},
        ]).valid()
 
        if(validation_result){
@@ -75,6 +75,7 @@
            internal_files : req.session.temp_files,
            summary : summary_inp,
            status : (type_inp == '0') ? true : false,
+           tags : tags_inp,
 
        }
 
Index: node_modules/bl/test/test.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict'\r\n\r\nvar tape       = require('tape')\r\n  , crypto     = require('crypto')\r\n  , fs         = require('fs')\r\n  , hash       = require('hash_file')\r\n  , BufferList = require('../')\r\n  , Buffer     = require('safe-buffer').Buffer\r\n\r\n  , encodings  =\r\n      ('hex utf8 utf-8 ascii binary base64'\r\n          + (process.browser ? '' : ' ucs2 ucs-2 utf16le utf-16le')).split(' ')\r\n\r\n// run the indexOf tests\r\nrequire('./indexOf')\r\n\r\ntape('single bytes from single buffer', function (t) {\r\n  var bl = new BufferList()\r\n  bl.append(Buffer.from('abcd'))\r\n\r\n  t.equal(bl.length, 4)\r\n  t.equal(bl.get(-1), undefined)\r\n  t.equal(bl.get(0), 97)\r\n  t.equal(bl.get(1), 98)\r\n  t.equal(bl.get(2), 99)\r\n  t.equal(bl.get(3), 100)\r\n  t.equal(bl.get(4), undefined)\r\n\r\n  t.end()\r\n})\r\n\r\ntape('single bytes from multiple buffers', function (t) {\r\n  var bl = new BufferList()\r\n  bl.append(Buffer.from('abcd'))\r\n  bl.append(Buffer.from('efg'))\r\n  bl.append(Buffer.from('hi'))\r\n  bl.append(Buffer.from('j'))\r\n\r\n  t.equal(bl.length, 10)\r\n\r\n  t.equal(bl.get(0), 97)\r\n  t.equal(bl.get(1), 98)\r\n  t.equal(bl.get(2), 99)\r\n  t.equal(bl.get(3), 100)\r\n  t.equal(bl.get(4), 101)\r\n  t.equal(bl.get(5), 102)\r\n  t.equal(bl.get(6), 103)\r\n  t.equal(bl.get(7), 104)\r\n  t.equal(bl.get(8), 105)\r\n  t.equal(bl.get(9), 106)\r\n  t.end()\r\n})\r\n\r\ntape('multi bytes from single buffer', function (t) {\r\n  var bl = new BufferList()\r\n  bl.append(Buffer.from('abcd'))\r\n\r\n  t.equal(bl.length, 4)\r\n\r\n  t.equal(bl.slice(0, 4).toString('ascii'), 'abcd')\r\n  t.equal(bl.slice(0, 3).toString('ascii'), 'abc')\r\n  t.equal(bl.slice(1, 4).toString('ascii'), 'bcd')\r\n  t.equal(bl.slice(-4, -1).toString('ascii'), 'abc')\r\n\r\n  t.end()\r\n})\r\n\r\ntape('multi bytes from single buffer (negative indexes)', function (t) {\r\n  var bl = new BufferList()\r\n  bl.append(Buffer.from('buffer'))\r\n\r\n  t.equal(bl.length, 6)\r\n\r\n  t.equal(bl.slice(-6, -1).toString('ascii'), 'buffe')\r\n  t.equal(bl.slice(-6, -2).toString('ascii'), 'buff')\r\n  t.equal(bl.slice(-5, -2).toString('ascii'), 'uff')\r\n\r\n  t.end()\r\n})\r\n\r\ntape('multiple bytes from multiple buffers', function (t) {\r\n  var bl = new BufferList()\r\n\r\n  bl.append(Buffer.from('abcd'))\r\n  bl.append(Buffer.from('efg'))\r\n  bl.append(Buffer.from('hi'))\r\n  bl.append(Buffer.from('j'))\r\n\r\n  t.equal(bl.length, 10)\r\n\r\n  t.equal(bl.slice(0, 10).toString('ascii'), 'abcdefghij')\r\n  t.equal(bl.slice(3, 10).toString('ascii'), 'defghij')\r\n  t.equal(bl.slice(3, 6).toString('ascii'), 'def')\r\n  t.equal(bl.slice(3, 8).toString('ascii'), 'defgh')\r\n  t.equal(bl.slice(5, 10).toString('ascii'), 'fghij')\r\n  t.equal(bl.slice(-7, -4).toString('ascii'), 'def')\r\n\r\n  t.end()\r\n})\r\n\r\ntape('multiple bytes from multiple buffer lists', function (t) {\r\n  var bl = new BufferList()\r\n\r\n  bl.append(new BufferList([ Buffer.from('abcd'), Buffer.from('efg') ]))\r\n  bl.append(new BufferList([ Buffer.from('hi'), Buffer.from('j') ]))\r\n\r\n  t.equal(bl.length, 10)\r\n\r\n  t.equal(bl.slice(0, 10).toString('ascii'), 'abcdefghij')\r\n\r\n  t.equal(bl.slice(3, 10).toString('ascii'), 'defghij')\r\n  t.equal(bl.slice(3, 6).toString('ascii'), 'def')\r\n  t.equal(bl.slice(3, 8).toString('ascii'), 'defgh')\r\n  t.equal(bl.slice(5, 10).toString('ascii'), 'fghij')\r\n\r\n  t.end()\r\n})\r\n\r\n// same data as previous test, just using nested constructors\r\ntape('multiple bytes from crazy nested buffer lists', function (t) {\r\n  var bl = new BufferList()\r\n\r\n  bl.append(new BufferList([\r\n      new BufferList([\r\n          new BufferList(Buffer.from('abc'))\r\n        , Buffer.from('d')\r\n        , new BufferList(Buffer.from('efg'))\r\n      ])\r\n    , new BufferList([ Buffer.from('hi') ])\r\n    , new BufferList(Buffer.from('j'))\r\n  ]))\r\n\r\n  t.equal(bl.length, 10)\r\n\r\n  t.equal(bl.slice(0, 10).toString('ascii'), 'abcdefghij')\r\n\r\n  t.equal(bl.slice(3, 10).toString('ascii'), 'defghij')\r\n  t.equal(bl.slice(3, 6).toString('ascii'), 'def')\r\n  t.equal(bl.slice(3, 8).toString('ascii'), 'defgh')\r\n  t.equal(bl.slice(5, 10).toString('ascii'), 'fghij')\r\n\r\n  t.end()\r\n})\r\n\r\ntape('append accepts arrays of Buffers', function (t) {\r\n  var bl = new BufferList()\r\n  bl.append(Buffer.from('abc'))\r\n  bl.append([ Buffer.from('def') ])\r\n  bl.append([ Buffer.from('ghi'), Buffer.from('jkl') ])\r\n  bl.append([ Buffer.from('mnop'), Buffer.from('qrstu'), Buffer.from('vwxyz') ])\r\n  t.equal(bl.length, 26)\r\n  t.equal(bl.slice().toString('ascii'), 'abcdefghijklmnopqrstuvwxyz')\r\n  t.end()\r\n})\r\n\r\ntape('append accepts arrays of BufferLists', function (t) {\r\n  var bl = new BufferList()\r\n  bl.append(Buffer.from('abc'))\r\n  bl.append([ new BufferList('def') ])\r\n  bl.append(new BufferList([ Buffer.from('ghi'), new BufferList('jkl') ]))\r\n  bl.append([ Buffer.from('mnop'), new BufferList([ Buffer.from('qrstu'), Buffer.from('vwxyz') ]) ])\r\n  t.equal(bl.length, 26)\r\n  t.equal(bl.slice().toString('ascii'), 'abcdefghijklmnopqrstuvwxyz')\r\n  t.end()\r\n})\r\n\r\ntape('append chainable', function (t) {\r\n  var bl = new BufferList()\r\n  t.ok(bl.append(Buffer.from('abcd')) === bl)\r\n  t.ok(bl.append([ Buffer.from('abcd') ]) === bl)\r\n  t.ok(bl.append(new BufferList(Buffer.from('abcd'))) === bl)\r\n  t.ok(bl.append([ new BufferList(Buffer.from('abcd')) ]) === bl)\r\n  t.end()\r\n})\r\n\r\ntape('append chainable (test results)', function (t) {\r\n  var bl = new BufferList('abc')\r\n    .append([ new BufferList('def') ])\r\n    .append(new BufferList([ Buffer.from('ghi'), new BufferList('jkl') ]))\r\n    .append([ Buffer.from('mnop'), new BufferList([ Buffer.from('qrstu'), Buffer.from('vwxyz') ]) ])\r\n\r\n  t.equal(bl.length, 26)\r\n  t.equal(bl.slice().toString('ascii'), 'abcdefghijklmnopqrstuvwxyz')\r\n  t.end()\r\n})\r\n\r\ntape('consuming from multiple buffers', function (t) {\r\n  var bl = new BufferList()\r\n\r\n  bl.append(Buffer.from('abcd'))\r\n  bl.append(Buffer.from('efg'))\r\n  bl.append(Buffer.from('hi'))\r\n  bl.append(Buffer.from('j'))\r\n\r\n  t.equal(bl.length, 10)\r\n\r\n  t.equal(bl.slice(0, 10).toString('ascii'), 'abcdefghij')\r\n\r\n  bl.consume(3)\r\n  t.equal(bl.length, 7)\r\n  t.equal(bl.slice(0, 7).toString('ascii'), 'defghij')\r\n\r\n  bl.consume(2)\r\n  t.equal(bl.length, 5)\r\n  t.equal(bl.slice(0, 5).toString('ascii'), 'fghij')\r\n\r\n  bl.consume(1)\r\n  t.equal(bl.length, 4)\r\n  t.equal(bl.slice(0, 4).toString('ascii'), 'ghij')\r\n\r\n  bl.consume(1)\r\n  t.equal(bl.length, 3)\r\n  t.equal(bl.slice(0, 3).toString('ascii'), 'hij')\r\n\r\n  bl.consume(2)\r\n  t.equal(bl.length, 1)\r\n  t.equal(bl.slice(0, 1).toString('ascii'), 'j')\r\n\r\n  t.end()\r\n})\r\n\r\ntape('complete consumption', function (t) {\r\n  var bl = new BufferList()\r\n\r\n  bl.append(Buffer.from('a'))\r\n  bl.append(Buffer.from('b'))\r\n\r\n  bl.consume(2)\r\n\r\n  t.equal(bl.length, 0)\r\n  t.equal(bl._bufs.length, 0)\r\n\r\n  t.end()\r\n})\r\n\r\ntape('test readUInt8 / readInt8', function (t) {\r\n  var buf1 = Buffer.alloc(1)\r\n    , buf2 = Buffer.alloc(3)\r\n    , buf3 = Buffer.alloc(3)\r\n    , bl  = new BufferList()\r\n\r\n  buf2[1] = 0x3\r\n  buf2[2] = 0x4\r\n  buf3[0] = 0x23\r\n  buf3[1] = 0x42\r\n\r\n  bl.append(buf1)\r\n  bl.append(buf2)\r\n  bl.append(buf3)\r\n\r\n  t.equal(bl.readUInt8(2), 0x3)\r\n  t.equal(bl.readInt8(2), 0x3)\r\n  t.equal(bl.readUInt8(3), 0x4)\r\n  t.equal(bl.readInt8(3), 0x4)\r\n  t.equal(bl.readUInt8(4), 0x23)\r\n  t.equal(bl.readInt8(4), 0x23)\r\n  t.equal(bl.readUInt8(5), 0x42)\r\n  t.equal(bl.readInt8(5), 0x42)\r\n  t.end()\r\n})\r\n\r\ntape('test readUInt16LE / readUInt16BE / readInt16LE / readInt16BE', function (t) {\r\n  var buf1 = Buffer.alloc(1)\r\n    , buf2 = Buffer.alloc(3)\r\n    , buf3 = Buffer.alloc(3)\r\n    , bl   = new BufferList()\r\n\r\n  buf2[1] = 0x3\r\n  buf2[2] = 0x4\r\n  buf3[0] = 0x23\r\n  buf3[1] = 0x42\r\n\r\n  bl.append(buf1)\r\n  bl.append(buf2)\r\n  bl.append(buf3)\r\n\r\n  t.equal(bl.readUInt16BE(2), 0x0304)\r\n  t.equal(bl.readUInt16LE(2), 0x0403)\r\n  t.equal(bl.readInt16BE(2), 0x0304)\r\n  t.equal(bl.readInt16LE(2), 0x0403)\r\n  t.equal(bl.readUInt16BE(3), 0x0423)\r\n  t.equal(bl.readUInt16LE(3), 0x2304)\r\n  t.equal(bl.readInt16BE(3), 0x0423)\r\n  t.equal(bl.readInt16LE(3), 0x2304)\r\n  t.equal(bl.readUInt16BE(4), 0x2342)\r\n  t.equal(bl.readUInt16LE(4), 0x4223)\r\n  t.equal(bl.readInt16BE(4), 0x2342)\r\n  t.equal(bl.readInt16LE(4), 0x4223)\r\n  t.end()\r\n})\r\n\r\ntape('test readUInt32LE / readUInt32BE / readInt32LE / readInt32BE', function (t) {\r\n  var buf1 = Buffer.alloc(1)\r\n    , buf2 = Buffer.alloc(3)\r\n    , buf3 = Buffer.alloc(3)\r\n    , bl   = new BufferList()\r\n\r\n  buf2[1] = 0x3\r\n  buf2[2] = 0x4\r\n  buf3[0] = 0x23\r\n  buf3[1] = 0x42\r\n\r\n  bl.append(buf1)\r\n  bl.append(buf2)\r\n  bl.append(buf3)\r\n\r\n  t.equal(bl.readUInt32BE(2), 0x03042342)\r\n  t.equal(bl.readUInt32LE(2), 0x42230403)\r\n  t.equal(bl.readInt32BE(2), 0x03042342)\r\n  t.equal(bl.readInt32LE(2), 0x42230403)\r\n  t.end()\r\n})\r\n\r\ntape('test readUIntLE / readUIntBE / readIntLE / readIntBE', function (t) {\r\n  var buf1 = Buffer.alloc(1)\r\n    , buf2 = Buffer.alloc(3)\r\n    , buf3 = Buffer.alloc(3)\r\n    , bl   = new BufferList()\r\n\r\n  buf2[0] = 0x2\r\n  buf2[1] = 0x3\r\n  buf2[2] = 0x4\r\n  buf3[0] = 0x23\r\n  buf3[1] = 0x42\r\n  buf3[2] = 0x61\r\n\r\n  bl.append(buf1)\r\n  bl.append(buf2)\r\n  bl.append(buf3)\r\n\r\n  t.equal(bl.readUIntBE(1, 1), 0x02)\r\n  t.equal(bl.readUIntBE(1, 2), 0x0203)\r\n  t.equal(bl.readUIntBE(1, 3), 0x020304)\r\n  t.equal(bl.readUIntBE(1, 4), 0x02030423)\r\n  t.equal(bl.readUIntBE(1, 5), 0x0203042342)\r\n  t.equal(bl.readUIntBE(1, 6), 0x020304234261)\r\n  t.equal(bl.readUIntLE(1, 1), 0x02)\r\n  t.equal(bl.readUIntLE(1, 2), 0x0302)\r\n  t.equal(bl.readUIntLE(1, 3), 0x040302)\r\n  t.equal(bl.readUIntLE(1, 4), 0x23040302)\r\n  t.equal(bl.readUIntLE(1, 5), 0x4223040302)\r\n  t.equal(bl.readUIntLE(1, 6), 0x614223040302)\r\n  t.equal(bl.readIntBE(1, 1), 0x02)\r\n  t.equal(bl.readIntBE(1, 2), 0x0203)\r\n  t.equal(bl.readIntBE(1, 3), 0x020304)\r\n  t.equal(bl.readIntBE(1, 4), 0x02030423)\r\n  t.equal(bl.readIntBE(1, 5), 0x0203042342)\r\n  t.equal(bl.readIntBE(1, 6), 0x020304234261)\r\n  t.equal(bl.readIntLE(1, 1), 0x02)\r\n  t.equal(bl.readIntLE(1, 2), 0x0302)\r\n  t.equal(bl.readIntLE(1, 3), 0x040302)\r\n  t.equal(bl.readIntLE(1, 4), 0x23040302)\r\n  t.equal(bl.readIntLE(1, 5), 0x4223040302)\r\n  t.equal(bl.readIntLE(1, 6), 0x614223040302)\r\n  t.end()\r\n})\r\n\r\ntape('test readFloatLE / readFloatBE', function (t) {\r\n  var buf1 = Buffer.alloc(1)\r\n    , buf2 = Buffer.alloc(3)\r\n    , buf3 = Buffer.alloc(3)\r\n    , bl   = new BufferList()\r\n\r\n  buf2[1] = 0x00\r\n  buf2[2] = 0x00\r\n  buf3[0] = 0x80\r\n  buf3[1] = 0x3f\r\n\r\n  bl.append(buf1)\r\n  bl.append(buf2)\r\n  bl.append(buf3)\r\n\r\n  t.equal(bl.readFloatLE(2), 0x01)\r\n  t.end()\r\n})\r\n\r\ntape('test readDoubleLE / readDoubleBE', function (t) {\r\n  var buf1 = Buffer.alloc(1)\r\n    , buf2 = Buffer.alloc(3)\r\n    , buf3 = Buffer.alloc(10)\r\n    , bl   = new BufferList()\r\n\r\n  buf2[1] = 0x55\r\n  buf2[2] = 0x55\r\n  buf3[0] = 0x55\r\n  buf3[1] = 0x55\r\n  buf3[2] = 0x55\r\n  buf3[3] = 0x55\r\n  buf3[4] = 0xd5\r\n  buf3[5] = 0x3f\r\n\r\n  bl.append(buf1)\r\n  bl.append(buf2)\r\n  bl.append(buf3)\r\n\r\n  t.equal(bl.readDoubleLE(2), 0.3333333333333333)\r\n  t.end()\r\n})\r\n\r\ntape('test toString', function (t) {\r\n  var bl = new BufferList()\r\n\r\n  bl.append(Buffer.from('abcd'))\r\n  bl.append(Buffer.from('efg'))\r\n  bl.append(Buffer.from('hi'))\r\n  bl.append(Buffer.from('j'))\r\n\r\n  t.equal(bl.toString('ascii', 0, 10), 'abcdefghij')\r\n  t.equal(bl.toString('ascii', 3, 10), 'defghij')\r\n  t.equal(bl.toString('ascii', 3, 6), 'def')\r\n  t.equal(bl.toString('ascii', 3, 8), 'defgh')\r\n  t.equal(bl.toString('ascii', 5, 10), 'fghij')\r\n\r\n  t.end()\r\n})\r\n\r\ntape('test toString encoding', function (t) {\r\n  var bl = new BufferList()\r\n    , b  = Buffer.from('abcdefghij\\xff\\x00')\r\n\r\n  bl.append(Buffer.from('abcd'))\r\n  bl.append(Buffer.from('efg'))\r\n  bl.append(Buffer.from('hi'))\r\n  bl.append(Buffer.from('j'))\r\n  bl.append(Buffer.from('\\xff\\x00'))\r\n\r\n  encodings.forEach(function (enc) {\r\n      t.equal(bl.toString(enc), b.toString(enc), enc)\r\n    })\r\n\r\n  t.end()\r\n})\r\n\r\n!process.browser && tape('test stream', function (t) {\r\n  var random = crypto.randomBytes(65534)\r\n    , rndhash = hash(random, 'md5')\r\n    , md5sum = crypto.createHash('md5')\r\n    , bl     = new BufferList(function (err, buf) {\r\n        t.ok(Buffer.isBuffer(buf))\r\n        t.ok(err === null)\r\n        t.equal(rndhash, hash(bl.slice(), 'md5'))\r\n        t.equal(rndhash, hash(buf, 'md5'))\r\n\r\n        bl.pipe(fs.createWriteStream('/tmp/bl_test_rnd_out.dat'))\r\n          .on('close', function () {\r\n            var s = fs.createReadStream('/tmp/bl_test_rnd_out.dat')\r\n            s.on('data', md5sum.update.bind(md5sum))\r\n            s.on('end', function() {\r\n              t.equal(rndhash, md5sum.digest('hex'), 'woohoo! correct hash!')\r\n              t.end()\r\n            })\r\n          })\r\n\r\n      })\r\n\r\n  fs.writeFileSync('/tmp/bl_test_rnd.dat', random)\r\n  fs.createReadStream('/tmp/bl_test_rnd.dat').pipe(bl)\r\n})\r\n\r\ntape('instantiation with Buffer', function (t) {\r\n  var buf  = crypto.randomBytes(1024)\r\n    , buf2 = crypto.randomBytes(1024)\r\n    , b    = BufferList(buf)\r\n\r\n  t.equal(buf.toString('hex'), b.slice().toString('hex'), 'same buffer')\r\n  b = BufferList([ buf, buf2 ])\r\n  t.equal(b.slice().toString('hex'), Buffer.concat([ buf, buf2 ]).toString('hex'), 'same buffer')\r\n  t.end()\r\n})\r\n\r\ntape('test String appendage', function (t) {\r\n  var bl = new BufferList()\r\n    , b  = Buffer.from('abcdefghij\\xff\\x00')\r\n\r\n  bl.append('abcd')\r\n  bl.append('efg')\r\n  bl.append('hi')\r\n  bl.append('j')\r\n  bl.append('\\xff\\x00')\r\n\r\n  encodings.forEach(function (enc) {\r\n      t.equal(bl.toString(enc), b.toString(enc))\r\n    })\r\n\r\n  t.end()\r\n})\r\n\r\ntape('test Number appendage', function (t) {\r\n  var bl = new BufferList()\r\n    , b  = Buffer.from('1234567890')\r\n\r\n  bl.append(1234)\r\n  bl.append(567)\r\n  bl.append(89)\r\n  bl.append(0)\r\n\r\n  encodings.forEach(function (enc) {\r\n      t.equal(bl.toString(enc), b.toString(enc))\r\n    })\r\n\r\n  t.end()\r\n})\r\n\r\ntape('write nothing, should get empty buffer', function (t) {\r\n  t.plan(3)\r\n  BufferList(function (err, data) {\r\n    t.notOk(err, 'no error')\r\n    t.ok(Buffer.isBuffer(data), 'got a buffer')\r\n    t.equal(0, data.length, 'got a zero-length buffer')\r\n    t.end()\r\n  }).end()\r\n})\r\n\r\ntape('unicode string', function (t) {\r\n  t.plan(2)\r\n  var inp1 = '\\u2600'\r\n    , inp2 = '\\u2603'\r\n    , exp = inp1 + ' and ' + inp2\r\n    , bl = BufferList()\r\n  bl.write(inp1)\r\n  bl.write(' and ')\r\n  bl.write(inp2)\r\n  t.equal(exp, bl.toString())\r\n  t.equal(Buffer.from(exp).toString('hex'), bl.toString('hex'))\r\n})\r\n\r\ntape('should emit finish', function (t) {\r\n  var source = BufferList()\r\n    , dest = BufferList()\r\n\r\n  source.write('hello')\r\n  source.pipe(dest)\r\n\r\n  dest.on('finish', function () {\r\n    t.equal(dest.toString('utf8'), 'hello')\r\n    t.end()\r\n  })\r\n})\r\n\r\ntape('basic copy', function (t) {\r\n  var buf  = crypto.randomBytes(1024)\r\n    , buf2 = Buffer.alloc(1024)\r\n    , b    = BufferList(buf)\r\n\r\n  b.copy(buf2)\r\n  t.equal(b.slice().toString('hex'), buf2.toString('hex'), 'same buffer')\r\n  t.end()\r\n})\r\n\r\ntape('copy after many appends', function (t) {\r\n  var buf  = crypto.randomBytes(512)\r\n    , buf2 = Buffer.alloc(1024)\r\n    , b    = BufferList(buf)\r\n\r\n  b.append(buf)\r\n  b.copy(buf2)\r\n  t.equal(b.slice().toString('hex'), buf2.toString('hex'), 'same buffer')\r\n  t.end()\r\n})\r\n\r\ntape('copy at a precise position', function (t) {\r\n  var buf  = crypto.randomBytes(1004)\r\n    , buf2 = Buffer.alloc(1024)\r\n    , b    = BufferList(buf)\r\n\r\n  b.copy(buf2, 20)\r\n  t.equal(b.slice().toString('hex'), buf2.slice(20).toString('hex'), 'same buffer')\r\n  t.end()\r\n})\r\n\r\ntape('copy starting from a precise location', function (t) {\r\n  var buf  = crypto.randomBytes(10)\r\n    , buf2 = Buffer.alloc(5)\r\n    , b    = BufferList(buf)\r\n\r\n  b.copy(buf2, 0, 5)\r\n  t.equal(b.slice(5).toString('hex'), buf2.toString('hex'), 'same buffer')\r\n  t.end()\r\n})\r\n\r\ntape('copy in an interval', function (t) {\r\n  var rnd      = crypto.randomBytes(10)\r\n    , b        = BufferList(rnd) // put the random bytes there\r\n    , actual   = Buffer.alloc(3)\r\n    , expected = Buffer.alloc(3)\r\n\r\n  rnd.copy(expected, 0, 5, 8)\r\n  b.copy(actual, 0, 5, 8)\r\n\r\n  t.equal(actual.toString('hex'), expected.toString('hex'), 'same buffer')\r\n  t.end()\r\n})\r\n\r\ntape('copy an interval between two buffers', function (t) {\r\n  var buf      = crypto.randomBytes(10)\r\n    , buf2     = Buffer.alloc(10)\r\n    , b        = BufferList(buf)\r\n\r\n  b.append(buf)\r\n  b.copy(buf2, 0, 5, 15)\r\n\r\n  t.equal(b.slice(5, 15).toString('hex'), buf2.toString('hex'), 'same buffer')\r\n  t.end()\r\n})\r\n\r\ntape('shallow slice across buffer boundaries', function (t) {\r\n  var bl = new BufferList(['First', 'Second', 'Third'])\r\n\r\n  t.equal(bl.shallowSlice(3, 13).toString(), 'stSecondTh')\r\n  t.end()\r\n})\r\n\r\ntape('shallow slice within single buffer', function (t) {\r\n  t.plan(2)\r\n  var bl = new BufferList(['First', 'Second', 'Third'])\r\n\r\n  t.equal(bl.shallowSlice(5, 10).toString(), 'Secon')\r\n  t.equal(bl.shallowSlice(7, 10).toString(), 'con')\r\n  t.end()\r\n})\r\n\r\ntape('shallow slice single buffer', function (t) {\r\n  t.plan(3)\r\n  var bl = new BufferList(['First', 'Second', 'Third'])\r\n\r\n  t.equal(bl.shallowSlice(0, 5).toString(), 'First')\r\n  t.equal(bl.shallowSlice(5, 11).toString(), 'Second')\r\n  t.equal(bl.shallowSlice(11, 16).toString(), 'Third')\r\n})\r\n\r\ntape('shallow slice with negative or omitted indices', function (t) {\r\n  t.plan(4)\r\n  var bl = new BufferList(['First', 'Second', 'Third'])\r\n\r\n  t.equal(bl.shallowSlice().toString(), 'FirstSecondThird')\r\n  t.equal(bl.shallowSlice(5).toString(), 'SecondThird')\r\n  t.equal(bl.shallowSlice(5, -3).toString(), 'SecondTh')\r\n  t.equal(bl.shallowSlice(-8).toString(), 'ondThird')\r\n})\r\n\r\ntape('shallow slice does not make a copy', function (t) {\r\n  t.plan(1)\r\n  var buffers = [Buffer.from('First'), Buffer.from('Second'), Buffer.from('Third')]\r\n  var bl = (new BufferList(buffers)).shallowSlice(5, -3)\r\n\r\n  buffers[1].fill('h')\r\n  buffers[2].fill('h')\r\n\r\n  t.equal(bl.toString(), 'hhhhhhhh')\r\n})\r\n\r\ntape('shallow slice with 0 length', function (t) {\r\n  t.plan(1)\r\n  var buffers = [Buffer.from('First'), Buffer.from('Second'), Buffer.from('Third')]\r\n  var bl = (new BufferList(buffers)).shallowSlice(0, 0)\r\n  t.equal(bl.length, 0)\r\n})\r\n\r\ntape('shallow slice with 0 length from middle', function (t) {\r\n  t.plan(1)\r\n  var buffers = [Buffer.from('First'), Buffer.from('Second'), Buffer.from('Third')]\r\n  var bl = (new BufferList(buffers)).shallowSlice(10, 10)\r\n  t.equal(bl.length, 0)\r\n})\r\n\r\ntape('duplicate', function (t) {\r\n  t.plan(2)\r\n\r\n  var bl = new BufferList('abcdefghij\\xff\\x00')\r\n    , dup = bl.duplicate()\r\n\r\n  t.equal(bl.prototype, dup.prototype)\r\n  t.equal(bl.toString('hex'), dup.toString('hex'))\r\n})\r\n\r\ntape('destroy no pipe', function (t) {\r\n  t.plan(2)\r\n\r\n  var bl = new BufferList('alsdkfja;lsdkfja;lsdk')\r\n  bl.destroy()\r\n\r\n  t.equal(bl._bufs.length, 0)\r\n  t.equal(bl.length, 0)\r\n})\r\n\r\n!process.browser && tape('destroy with pipe before read end', function (t) {\r\n  t.plan(2)\r\n\r\n  var bl = new BufferList()\r\n  fs.createReadStream(__dirname + '/test.js')\r\n    .pipe(bl)\r\n\r\n  bl.destroy()\r\n\r\n  t.equal(bl._bufs.length, 0)\r\n  t.equal(bl.length, 0)\r\n\r\n})\r\n\r\n!process.browser && tape('destroy with pipe before read end with race', function (t) {\r\n  t.plan(2)\r\n\r\n  var bl = new BufferList()\r\n  fs.createReadStream(__dirname + '/test.js')\r\n    .pipe(bl)\r\n\r\n  setTimeout(function () {\r\n    bl.destroy()\r\n    setTimeout(function () {\r\n      t.equal(bl._bufs.length, 0)\r\n      t.equal(bl.length, 0)\r\n    }, 500)\r\n  }, 500)\r\n})\r\n\r\n!process.browser && tape('destroy with pipe after read end', function (t) {\r\n  t.plan(2)\r\n\r\n  var bl = new BufferList()\r\n  fs.createReadStream(__dirname + '/test.js')\r\n    .on('end', onEnd)\r\n    .pipe(bl)\r\n\r\n  function onEnd () {\r\n    bl.destroy()\r\n\r\n    t.equal(bl._bufs.length, 0)\r\n    t.equal(bl.length, 0)\r\n  }\r\n})\r\n\r\n!process.browser && tape('destroy with pipe while writing to a destination', function (t) {\r\n  t.plan(4)\r\n\r\n  var bl = new BufferList()\r\n    , ds = new BufferList()\r\n\r\n  fs.createReadStream(__dirname + '/test.js')\r\n    .on('end', onEnd)\r\n    .pipe(bl)\r\n\r\n  function onEnd () {\r\n    bl.pipe(ds)\r\n\r\n    setTimeout(function () {\r\n      bl.destroy()\r\n\r\n      t.equals(bl._bufs.length, 0)\r\n      t.equals(bl.length, 0)\r\n\r\n      ds.destroy()\r\n\r\n      t.equals(bl._bufs.length, 0)\r\n      t.equals(bl.length, 0)\r\n\r\n    }, 100)\r\n  }\r\n})\r\n\r\n!process.browser && tape('handle error', function (t) {\r\n  t.plan(2)\r\n  fs.createReadStream('/does/not/exist').pipe(BufferList(function (err, data) {\r\n    t.ok(err instanceof Error, 'has error')\r\n    t.notOk(data, 'no data')\r\n  }))\r\n})\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/bl/test/test.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/bl/test/test.js	(date 499162500000)
@@ -431,6 +431,22 @@
   t.end()
 })
 
+tape('uninitialized memory', function (t) {
+  const secret = crypto.randomBytes(256)
+  for (let i = 0; i < 1e6; i++) {
+    const clone = Buffer.from(secret)
+    const bl = new BufferList()
+    bl.append(Buffer.from('a'))
+    bl.consume(-1024)
+    const buf = bl.slice(1)
+    if (buf.indexOf(clone) !== -1) {
+      t.fail(`Match (at ${i})`)
+      break
+    }
+  }
+  t.end()
+})
+
 !process.browser && tape('test stream', function (t) {
   var random = crypto.randomBytes(65534)
     , rndhash = hash(random, 'md5')
Index: backend/templates/quince/views/groups/groups-access.dust
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{>\"layouts/dashboard-layout\"/}\r\n\r\n{<css}\r\n    <link rel=\"stylesheet\" href=\"css/groups/group-access.css\">\r\n{/css}\r\n\r\n{<js} \r\n    <script src=\"js/groups/groups-access.js\"></script>\r\n    <script src=\"js/custom/checkbox.js\"></script>\r\n    <script src=\"js/custom/main-error.js\"></script>\r\n    <script src=\"js/custom/error-handler.js\"></script>\r\n    <script src=\"js/groups/groups-access-error.js\"></script>\r\n    <script src=\"js/general/form-ajax.js\"></script>\r\n    <script src=\"js/custom/modal.js\"></script>\r\n{/js}\r\n\r\n\r\n{<body}\r\n<section>\r\n    <!-- error -->\r\n    <div class=\"error_info warning_error\">\r\n        <i class=\"fal fa-exclamation-circle\"></i>\r\n        <p></p>\r\n        <i class=\"fal fa-times\"></i>\r\n    </div>\r\n    <div class=\"main_body\">\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n                <div class=\"col-9 pr-0 pl-0\">\r\n                    <div class=\"main_col\">\r\n                        <header class=\"header_field\">\r\n                            <div class=\"container-fluid\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-12 col-lg-7\">\r\n                                        <div class=\"d-inline-block field_of_ht\">\r\n                                            <h1>لیست دسترسی ها</h1>\r\n                                            <h2>لیست دسترسی های موجود در سایت</h2>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"col-12 col-lg-5\">\r\n                                        <div class=\"table_header\">\r\n                                            <div class=\"input-group mb-3 t_search\">\r\n                                                <div class=\"input-group-prepend\">\r\n                                                    <button class=\"input-group-text btn search_btn\" id=\"basic-addon1\">\r\n                                                        <i class=\"fal fa-search\"></i>\r\n                                                    </button>\r\n                                                </div>\r\n                                                <input type=\"text\" class=\"form-control search_table\" placeholder=\"جستجو ...\" aria-describedby=\"basic-addon1\" value=\"{search_value}\">\r\n                                                {@eq key=\"{search}\" value=\"true\"}\r\n                                                    <i class=\"fal fa-times search_btn_cancel\"></i>\r\n                                                {/eq}\r\n                                            </div>\r\n                                              <div class=\"form-group tr_select\">\r\n                                                <label for=\"t_row_select\" class=\"d-inline-block select_lable\">تعداد ردیف ها :</label>\r\n                                                <select class=\"form-control limit_row\" id=\"t_row_select\">\r\n                                                    {#page_limit_slot}\r\n                                                        {@eq key=\"{.}\" value=\"{page_limit}\"}\r\n                                                            <option selected>{.}</option>\r\n                                                        {:else}\r\n                                                            <option>{.}</option>\r\n                                                        {/eq}\r\n                                                    {/page_limit_slot}\r\n                                                </select>\r\n                                            </div>\r\n                                            <button class=\"btn table_delete_btn\">\r\n                                                <i class=\"fal fa-trash-alt\"></i>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </header>\r\n                        <div class=\"QTR\">\r\n                            <table class=\"Q_table\">\r\n                                <tr class=\"TQ_hr\">\r\n                                    <th>\r\n                                        <label class=\"checkbox_of_category\">\r\n                                            <input type=\"checkbox\" class=\"option-input checkbox\" id=\"selectall\" name=\"select_all\">\r\n                                        </label>\r\n                                    </th>\r\n                                    <th>ردیف</th>\r\n                                    <th>نام دسترسی</th>\r\n                                    <th>تعداد دسترسی ها</th>\r\n                                    <th>تنظیمات</th>\r\n                                </tr>\r\n                                {#access_list}\r\n                                <tr>\r\n                                    {@eq key=\"{g_admin_info._id}\" value=\"{author._id}\"}\r\n                                        {@ne key=\"{g_admin_info.access_type._id}\" value=\"{._id}\"}\r\n                                            <td>\r\n                                                <label class=\"checkbox_of_category\">\r\n                                                    <input type=\"checkbox\" name=\"delete_checkbox[]\" class=\"table_checkbox option-input checkbox\" value=\"{._id}\">\r\n                                                </label>\r\n                                            </td>\r\n                                        {:else}\r\n                                            <td>\r\n\r\n                                            </td>\r\n                                        {/ne}\r\n                                    {:else}\r\n                                        {@eq key=\"{can_edit}\" value=\"true\"}\r\n                                            {@ne key=\"{g_admin_info.access_type._id}\" value=\"{._id}\"}\r\n                                                <td>\r\n                                                    <label class=\"checkbox_of_category\">\r\n                                                        <input type=\"checkbox\" name=\"delete_checkbox[]\" class=\"table_checkbox option-input checkbox\" value=\"{._id}\">\r\n                                                    </label>\r\n                                                </td>\r\n                                            {:else}\r\n                                                <td>\r\n\r\n                                                </td>\r\n                                            {/ne}\r\n                                        {:else}\r\n                                            <td>\r\n\r\n                                            </td>\r\n                                        {/eq}\r\n                                    {/eq}\r\n                                    <td>{@math key=\"{rows_begin_number}\" method=\"add\" operand=\"{$idx}\"/}</td>\r\n                                    <td>\r\n                                        {title}\r\n                                    </td>\r\n                                    <td class=\"QT_green_pill\">\r\n                                        <div>\r\n                                            {count}\r\n                                        </div>\r\n                                    </td>\r\n                                    {@eq key=\"{g_admin_info._id}\" value=\"{author._id}\"}\r\n                                        {@ne key=\"{g_admin_info.access_type._id}\" value=\"{._id}\"}\r\n                                            <td class=\"btn_td_w\">\r\n                                                <button class=\"btn blue_btn access_btn edit_btn\" name=\"{._id}\"><i class=\"fal fa-pencil-alt\"></i></button>\r\n                                                <button class=\"btn red_btn mr-2 access_btn access_delete\" name=\"{._id}\"><i class=\"fal fa-trash-alt\"></i></button>\r\n                                            </td>\r\n                                        {:else}\r\n                                            <td>\r\n                                                دسترسی ندارید\r\n                                            </td>\r\n                                        {/ne}\r\n                                    {:else}\r\n                                        {@eq key=\"{can_edit}\" value=\"true\"}\r\n                                            {@ne key=\"{g_admin_info.access_type._id}\" value=\"{._id}\"}\r\n                                                <td class=\"btn_td_w\">\r\n                                                    <button class=\"btn blue_btn access_btn edit_btn\" name=\"{._id}\"><i class=\"fal fa-pencil-alt\"></i></button>\r\n                                                    <button class=\"btn red_btn mr-2 access_btn access_delete\" name=\"{._id}\"><i class=\"fal fa-trash-alt\"></i></button>\r\n                                                </td>\r\n                                            {:else}\r\n                                                <td>\r\n                                                    دسترسی ندارید\r\n                                                </td>\r\n                                            {/ne}\r\n                                        {:else}\r\n                                            <td>\r\n                                                دسترسی ندارید\r\n                                            </td>\r\n                                        {/eq}\r\n                                    {/eq}\r\n                                </tr>\r\n                                {/access_list}\r\n                            </table>\r\n                            {?access_list}{:else}\r\n                                <div class=\"table_search_error\">\r\n                                    <p>موردی جهت نمایش وجود ندارد !</p>\r\n                                </div>\r\n                            {/access_list}\r\n                            {@page number=\"{total_pages}\"  url=\"{backend_url}groups/access{pagination_url}\" current=\"{page_number}\" query=\"{pagination_url}\"/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-3 pr-0\">\r\n                    <div class=\"main_col pr-4 pl-4\">\r\n                        <header class=\"header_field\">\r\n                            <h1>ثبت دسترسی جدید</h1>\r\n                        </header>\r\n                        <form class=\"form_ajax\" name=\"access\" method=\"post\" action=\"\" autocomplete=\"off\">\r\n                            <div class=\"form-group mt-4\">\r\n                                <label for=\"access_name\">نام دسترسی</label>\r\n                                <input type=\"text\" class=\"form-control main_form_design\" id=\"access_name\" name=\"title_inp\">\r\n                            </div>\r\n                            <div class=\"form-group mt-4\">\r\n                                <label class=\"mb-3 mt-0 lable_collaps\">\r\n                                    بخش های تولید محتوا\r\n                                    <i class=\"far fa-angle-left\"></i>\r\n                                </label>\r\n                                <div class=\"collaps_content\">\r\n                                    {@keyValue:backend_access.content}\r\n                                        {@select key=key}\r\n                                            {@eq value=\"/article/list/\"}{/eq}\r\n                                            {@eq value=\"/article/add/\"}{/eq}\r\n                                            {@none}\r\n                                                <div class=\"row\">\r\n                                                    <div class=\"col-9\">\r\n                                                        <p>{value}</p>\r\n                                                    </div>\r\n                                                    <div class=\"col-3 pl-0\">\r\n                                                        <label class=\"checkbox_of_category\">\r\n                                                            <input type=\"checkbox\" name=\"access_select_inp[]\" class=\"option-input checkbox access_checkbox\" value=\"{value}\">\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            {/none}\r\n                                        {/select}\r\n                                    {/keyValue}\r\n                                </div>\r\n                                <label class=\"mb-3 mt-0 lable_collaps\">\r\n                                   بخش های مدیریتی\r\n                                    <i class=\"far fa-angle-left\"></i>\r\n                                </label>\r\n                                <div class=\"collaps_content\">\r\n                                    {@keyValue:backend_access.management}\r\n                                        {@select key=key}\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col-9\">\r\n                                                    <p>{value}</p>\r\n                                                </div>\r\n                                                <div class=\"col-3 pl-0\">\r\n                                                    <label class=\"checkbox_of_category\">\r\n                                                        <input type=\"checkbox\" name=\"access_select_inp[]\" class=\"option-input checkbox access_checkbox\" value=\"{value}\">\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        {/select}\r\n                                    {/keyValue}\r\n                                </div>\r\n                                <label class=\"mb-3 mt-0 lable_collaps\">\r\n                                    ویرایش محتوای دیگران\r\n                                    <i class=\"far fa-angle-left\"></i>\r\n                                </label>\r\n                                <div class=\"collaps_content\">\r\n                                    {@keyValue:backend_access.edit}\r\n                                        {@select key=key}\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col-9\">\r\n                                                    <p>{value}</p>\r\n                                                </div>\r\n                                                <div class=\"col-3 pl-0\">\r\n                                                    <label class=\"checkbox_of_category\">\r\n                                                        <input type=\"checkbox\" name=\"access_select_inp[]\" class=\"option-input checkbox access_checkbox\" value=\"{value}\">\r\n                                                    </label>\r\n                                                </div>\r\n                                            </div>\r\n                                        {/select}\r\n                                    {/keyValue}\r\n                                </div>\r\n\r\n                            <button type=\"submit\" class=\"btn green_btn py-2 mt-3\">ثبت دسترسی جدید</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</section>\r\n<!-- modal -->\r\n    <div class=\"modal_field\">\r\n        <div class=\"container\">\r\n            <div class=\"row align-items-center modal_row\">\r\n                <div class=\"col-6 offset-3\">\r\n                    <div class=\"info_field mt-5 mb-5\">\r\n                        <header class=\"header_field\">\r\n                            <h1>ویرایش دسترسی</h1>\r\n                            <h2>دسترسی مورد نظر خود را ویرایش کنید</h2>\r\n                            <hr>\r\n                        </header>\r\n                            <form class=\"dir-rtl text-right form_ajax\" name=\"access\" method=\"post\" action=\"{backend_url}groups/access/edit\" autocomplete=\"off\">\r\n                                <div class=\"form-group mt-4\">\r\n                                    <label for=\"access_name\">نام دسترسی</label>\r\n                                    <input type=\"text\" class=\"edit_access_title form-control main_form_design\" id=\"access_name\" name=\"edit_title_inp\">\r\n                                    <input class=\"edit_access_id\" hidden=\"hidden\" name=\"edit_access_id\">\r\n                                </div>\r\n                                <div class=\"form-group mt-4\">\r\n                                    <label class=\"mb-4 mt-0\">بخش های تولید محتوا</label>\r\n                                    {@keyValue:backend_access.content}\r\n                                        {@select key=key}\r\n                                            {@eq value=\"/article/list/\"}{/eq}\r\n                                            {@eq value=\"/article/add/\"}{/eq}\r\n                                            {@none}\r\n                                                <div class=\"row\">\r\n                                                    <div class=\"col-10\">\r\n                                                        <p>{value}</p>\r\n                                                    </div>\r\n                                                    <div class=\"col-2 pl-0\">\r\n                                                        <label class=\"checkbox_of_category\">\r\n                                                            <input type=\"checkbox\" name=\"edit_access_select_inp[]\" class=\"option-input checkbox access_checkbox\" value=\"{value}\">\r\n                                                        </label>\r\n                                                    </div>\r\n                                                </div>\r\n                                            {/none}\r\n                                        {/select}\r\n                                    {/keyValue}\r\n                                    <hr>\r\n                                    <label class=\"mt-2 mb-3\">بخش های مدیریتی</label>\r\n                                    {@keyValue:backend_access.management}\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col-10\">\r\n                                                <p>{value}</p>\r\n                                            </div>\r\n                                            <div class=\"col-2 pl-0\">\r\n                                                <label class=\"checkbox_of_category\">\r\n                                                    <input type=\"checkbox\" name=\"edit_access_select_inp[]\" class=\"option-input checkbox access_checkbox\" value=\"{value}\">\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    {/keyValue}\r\n                                    <hr>\r\n                                    <label class=\"mt-2 mb-3\">ویرایش محتوای دیگران</label>\r\n                                    {@keyValue:backend_access.edit}\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col-10\">\r\n                                                <p>{value}</p>\r\n                                            </div>\r\n                                            <div class=\"col-2 pl-0\">\r\n                                                <label class=\"checkbox_of_category\">\r\n                                                    <input type=\"checkbox\" name=\"edit_access_select_inp[]\" class=\"option-input checkbox access_checkbox\" value=\"{value}\">\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    {/keyValue}\r\n                                    <div class=\"modal_btn_field\">\r\n                                        <button type=\"submit\" class=\"btn green_btn py-2 mt-3\">ویرایش دسترسی</button>\r\n                                        <button type=\"button\" class=\"btn red_btn py-2 mt-3 mr-2 close_modal\">لغو</button>\r\n                                    </div>\r\n                            </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n{/body} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/templates/quince/views/groups/groups-access.dust	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/templates/quince/views/groups/groups-access.dust	(date 1599624822307)
@@ -222,6 +222,26 @@
                                     {/keyValue}
                                 </div>
                                 <label class="mb-3 mt-0 lable_collaps">
+                                    بخش های پشتیبانی
+                                    <i class="far fa-angle-left"></i>
+                                </label>
+                                <div class="collaps_content">
+                                    {@keyValue:backend_access.support}
+                                        {@select key=key}
+                                            <div class="row">
+                                                <div class="col-9">
+                                                    <p>{value}</p>
+                                                </div>
+                                                <div class="col-3 pl-0">
+                                                    <label class="checkbox_of_category">
+                                                        <input type="checkbox" name="access_select_inp[]" class="option-input checkbox access_checkbox" value="{value}">
+                                                    </label>
+                                                </div>
+                                            </div>
+                                        {/select}
+                                    {/keyValue}
+                                </div>
+                                <label class="mb-3 mt-0 lable_collaps">
                                     ویرایش محتوای دیگران
                                     <i class="far fa-angle-left"></i>
                                 </label>
@@ -291,6 +311,20 @@
                                     <hr>
                                     <label class="mt-2 mb-3">بخش های مدیریتی</label>
                                     {@keyValue:backend_access.management}
+                                        <div class="row">
+                                            <div class="col-10">
+                                                <p>{value}</p>
+                                            </div>
+                                            <div class="col-2 pl-0">
+                                                <label class="checkbox_of_category">
+                                                    <input type="checkbox" name="edit_access_select_inp[]" class="option-input checkbox access_checkbox" value="{value}">
+                                                </label>
+                                            </div>
+                                        </div>
+                                    {/keyValue}
+                                    <hr>
+                                    <label class="mt-2 mb-3">بخش های پشتیبانی</label>
+                                    {@keyValue:backend_access.support}
                                         <div class="row">
                                             <div class="col-10">
                                                 <p>{value}</p>
Index: backend/templates/quince/views/article/article-edit.dust
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{>\"layouts/dashboard-layout\"/}\r\n\r\n{<css}\r\n\r\n    <link rel=\"stylesheet\" href=\"css/article/wysiwyg-editor.css\">\r\n    <link rel=\"stylesheet\" href=\"css/article/article-edit.css\">\r\n\r\n{/css}\r\n{<js}\r\n\r\n    <script src=\"js/general/wysiwyg-editor.js\"></script>\r\n    <script src=\"js/general/wysiwyg-image-manager.js\"></script>\r\n    <script src=\"js/general/wysiwyg-custom.js\"></script>\r\n    <script src=\"js/custom/main-error.js\"></script>\r\n    <script src=\"js/custom/error-handler.js\"></script>\r\n    <script src=\"js/article/article-edit.js\"></script>\r\n    <script src=\"js/article/article-error.js\"></script>\r\n    <script src=\"js/general/form-ajax.js\"></script>\r\n    <script src=\"js/custom/uploader.js\"></script>\r\n    <script src=\"js/custom/tag.js\"></script>\r\n\r\n{/js}\r\n\r\n{<body}\r\n    <section>\r\n        <div class=\"error_info warning_error\">\r\n            <i class=\"fal fa-exclamation-circle\"></i>\r\n            <p></p>\r\n            <i class=\"fal fa-times\"></i>\r\n        </div>\r\n        <div class=\"main_field_of_add_article mb-5 mt-4\">\r\n            <div class=\"container-fluid\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 main_col\">\r\n                        <header class=\"header_field\">\r\n                            <h1>ویرایش مقاله</h1>\r\n                            <h2>شما در حال ویرایش مقاله <strong>{article_info.title}</strong> هستید</h2>\r\n                            <hr>\r\n                        </header>\r\n                        <div class=\"row dir-ltr\">\r\n                            <div class=\"col-8 offset-2\">\r\n                                <form name=\"article\" class=\"form_ajax text-right dir-rtl\" method=\"post\" action=\"\" autocomplete=\"off\" enctype=\"multipart/form-data\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_name\">نام مقاله</label>\r\n                                        <input type=\"text\" class=\"form-control main_form_design\" id=\"article_name\"  name=\"title_inp\" value=\"{article_info.title}\">\r\n                                    </div>\r\n                                    <div class=\"form-group position-relative\">\r\n                                        <label for=\"article_photo\">عکس مقاله</label>\r\n                                        <span class=\"show_img mr-1\">(مشاهده عکس)</span>\r\n                                        <input type=\"file\" class=\"form-control chose_file_inp main_form_design fal ajax_file\" name=\"main_image\" id=\"article_photo\" data-value=\"{article_info.main_image}\">\r\n                                        <div class=\"img_upload_field display_none\">\r\n                                            <img src=\"media/images/{article_info.main_image}\" alt=\"\">\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_parent\">دسته</label>\r\n                                        <select class=\"form-control main_form_design select-category\" id=\"article_parent\" name=\"parent_inp\">\r\n                                            <option value=\"0\">-----</option>\r\n                                            {#parent_list}\r\n                                                {@eq key=\"{article_info.category_parent._id}\" value=\"{_id}\"}\r\n                                                    <option selected value=\"{_id}\">{title}</option>\r\n                                                {:else}\r\n                                                    <option value=\"{_id}\">{title}</option>\r\n                                                {/eq}\r\n                                            {/parent_list}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_child\">زیر دسته</label>\r\n                                        <select class=\"form-control main_form_design select-sub-category\" id=\"article_child\" name=\"child_inp\">\r\n                                            <option value=\"0\">-----</option>\r\n                                            {#child_list}\r\n                                                {@eq key=\"{article_info.category_child._id}\" value=\"{_id}\"}\r\n                                                    <option selected value=\"{_id}\">{title}</option>\r\n                                                {:else}\r\n                                                    <option value=\"{_id}\">{title}</option>\r\n                                                {/eq}\r\n                                            {/child_list}\r\n                                        </select>\r\n                                    </div>\r\n                                    \r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_summary\">خلاصه مقاله</label>\r\n                                        <textarea class=\"form-control main_form_design\" id=\"article_summary\" name=\"summary_inp\">{article_info.summary}</textarea>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_textarea\">توضیحات مقاله</label>\r\n                                        <textarea class=\"form-control main_form_design\" id=\"article_textarea\" rows=\"7\" name=\"describe_inp\">{article_info.describe}</textarea>\r\n                                        <input type='file' name='fileupload' id='fileupload' style='display: none;'>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group position-relative\">\r\n                                        <label for=\"tags_field\">برچسب ها</label>\r\n                                        <input type=\"text\" class=\"form-control main_form_design \" id=\"tags_field\"  name=\"tags_inp\">\r\n                                        <button type=\"button\" class=\"btn add_tags\">\r\n                                            <i class=\"far fa-check\"></i>\r\n                                        </button>\r\n                                        <div class=\"tags_lable_field\">\r\n                                            {#article_info.tags}\r\n                                            <div class=\"tags_lable mr-2\">\r\n                                                <p>\r\n                                                    {.}\r\n                                                </p>\r\n                                                <i class=\"fas fa-times remove_tag\"></i>\r\n                                                <input type=\"hidden\" name=\"tags_inp[]\" value=\"{.}\">\r\n                                            </div>\r\n                                            {/article_info.tags}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group \">\r\n                                        <label for=\"article_type\">نوع نمایش</label>\r\n                                        <select class=\"form-control main_form_design\" id=\"article_type\" name=\"type_inp\">\r\n                                            {@eq key=\"{article_info.status}\" value=\"true\"}\r\n                                                <option value=\"0\" selected>فعال</option>\r\n                                                <option value=\"1\">غیر فعال</option>\r\n                                            {:else}\r\n                                                <option value=\"0\">فعال</option>\r\n                                                <option value=\"1\" selected>غیر فعال</option>\r\n                                            {/eq}\r\n                                        </select>\r\n                                    </div>\r\n                                    \r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_describe\">توضیحات کلیدی مقاله</label>\r\n                                        <textarea class=\"form-control main_form_design\" id=\"article_describe\" rows=\"7\" name=\"meta_describe_inp\">{article_info.meta_describe}</textarea>\r\n                                    </div>\r\n\r\n                                    <button type=\"submit\" class=\"btn green_btn\" name=\"profile_private\">ویرایش مقاله</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n{/body}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/templates/quince/views/article/article-edit.dust	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/templates/quince/views/article/article-edit.dust	(date 1599623950975)
@@ -92,7 +92,7 @@
 
                                     <div class="form-group position-relative">
                                         <label for="tags_field">برچسب ها</label>
-                                        <input type="text" class="form-control main_form_design " id="tags_field"  name="tags_inp">
+                                        <input type="text" class="form-control main_form_design " id="tags_field">
                                         <button type="button" class="btn add_tags">
                                             <i class="far fa-check"></i>
                                         </button>
Index: node_modules/mongoose/lib/document.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst InternalCache = require('./internal');\r\nconst MongooseError = require('./error/index');\r\nconst MixedSchema = require('./schema/mixed');\r\nconst ObjectExpectedError = require('./error/objectExpected');\r\nconst ObjectParameterError = require('./error/objectParameter');\r\nconst ParallelValidateError = require('./error/parallelValidate');\r\nconst Schema = require('./schema');\r\nconst StrictModeError = require('./error/strict');\r\nconst ValidationError = require('./error/validation');\r\nconst ValidatorError = require('./error/validator');\r\nconst VirtualType = require('./virtualtype');\r\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\r\nconst cleanModifiedSubpaths = require('./helpers/document/cleanModifiedSubpaths');\r\nconst compile = require('./helpers/document/compile').compile;\r\nconst defineKey = require('./helpers/document/compile').defineKey;\r\nconst flatten = require('./helpers/common').flatten;\r\nconst get = require('./helpers/get');\r\nconst getEmbeddedDiscriminatorPath = require('./helpers/document/getEmbeddedDiscriminatorPath');\r\nconst handleSpreadDoc = require('./helpers/document/handleSpreadDoc');\r\nconst idGetter = require('./plugins/idGetter');\r\nconst isDefiningProjection = require('./helpers/projection/isDefiningProjection');\r\nconst isExclusive = require('./helpers/projection/isExclusive');\r\nconst inspect = require('util').inspect;\r\nconst internalToObjectOptions = require('./options').internalToObjectOptions;\r\nconst mpath = require('mpath');\r\nconst queryhelpers = require('./queryhelpers');\r\nconst utils = require('./utils');\r\nconst isPromise = require('./helpers/isPromise');\r\n\r\nconst clone = utils.clone;\r\nconst deepEqual = utils.deepEqual;\r\nconst isMongooseObject = utils.isMongooseObject;\r\n\r\nconst arrayAtomicsBackupSymbol = Symbol('mongoose.Array#atomicsBackup');\r\nconst arrayAtomicsSymbol = require('./helpers/symbols').arrayAtomicsSymbol;\r\nconst documentArrayParent = require('./helpers/symbols').documentArrayParent;\r\nconst documentSchemaSymbol = require('./helpers/symbols').documentSchemaSymbol;\r\nconst getSymbol = require('./helpers/symbols').getSymbol;\r\nconst populateModelSymbol = require('./helpers/symbols').populateModelSymbol;\r\nconst scopeSymbol = require('./helpers/symbols').scopeSymbol;\r\n\r\nlet DocumentArray;\r\nlet MongooseArray;\r\nlet Embedded;\r\n\r\nconst specialProperties = utils.specialProperties;\r\n\r\n/**\r\n * The core Mongoose document constructor. You should not call this directly,\r\n * the Mongoose [Model constructor](./api.html#Model) calls this for you.\r\n *\r\n * @param {Object} obj the values to set\r\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\r\n * @param {Object} [options] various configuration options for the document\r\n * @param {Boolean} [options.defaults=true] if `false`, skip applying default values to this document.\r\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\r\n * @event `init`: Emitted on a document after it has been retrieved from the db and fully hydrated by Mongoose.\r\n * @event `save`: Emitted when the document is successfully saved\r\n * @api private\r\n */\r\n\r\nfunction Document(obj, fields, skipId, options) {\r\n  if (typeof skipId === 'object' && skipId != null) {\r\n    options = skipId;\r\n    skipId = options.skipId;\r\n  }\r\n  options = Object.assign({}, options);\r\n  const defaults = get(options, 'defaults', true);\r\n  options.defaults = defaults;\r\n\r\n  // Support `browserDocument.js` syntax\r\n  if (this.schema == null) {\r\n    const _schema = utils.isObject(fields) && !fields.instanceOfSchema ?\r\n      new Schema(fields) :\r\n      fields;\r\n    this.$__setSchema(_schema);\r\n    fields = skipId;\r\n    skipId = options;\r\n    options = arguments[4] || {};\r\n  }\r\n\r\n  this.$__ = new InternalCache;\r\n  this.$__.emitter = new EventEmitter();\r\n  this.isNew = 'isNew' in options ? options.isNew : true;\r\n  this.errors = undefined;\r\n  this.$__.$options = options || {};\r\n  this.$locals = {};\r\n  this.$op = null;\r\n\r\n  if (obj != null && typeof obj !== 'object') {\r\n    throw new ObjectParameterError(obj, 'obj', 'Document');\r\n  }\r\n\r\n  const schema = this.schema;\r\n\r\n  if (typeof fields === 'boolean' || fields === 'throw') {\r\n    this.$__.strictMode = fields;\r\n    fields = undefined;\r\n  } else {\r\n    this.$__.strictMode = schema.options.strict;\r\n    this.$__.selected = fields;\r\n  }\r\n\r\n  const requiredPaths = schema.requiredPaths(true);\r\n  for (const path of requiredPaths) {\r\n    this.$__.activePaths.require(path);\r\n  }\r\n\r\n  this.$__.emitter.setMaxListeners(0);\r\n\r\n  let exclude = null;\r\n\r\n  // determine if this doc is a result of a query with\r\n  // excluded fields\r\n  if (utils.isPOJO(fields)) {\r\n    exclude = isExclusive(fields);\r\n  }\r\n\r\n  const hasIncludedChildren = exclude === false && fields ?\r\n    $__hasIncludedChildren(fields) :\r\n    {};\r\n\r\n  if (this._doc == null) {\r\n    this.$__buildDoc(obj, fields, skipId, exclude, hasIncludedChildren, false);\r\n\r\n    // By default, defaults get applied **before** setting initial values\r\n    // Re: gh-6155\r\n    if (defaults) {\r\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, true, {\r\n        isNew: this.isNew\r\n      });\r\n    }\r\n  }\r\n\r\n  if (obj) {\r\n    // Skip set hooks\r\n    if (this.$__original_set) {\r\n      this.$__original_set(obj, undefined, true);\r\n    } else {\r\n      this.$set(obj, undefined, true);\r\n    }\r\n\r\n    if (obj instanceof Document) {\r\n      this.isNew = obj.isNew;\r\n    }\r\n  }\r\n\r\n  // Function defaults get applied **after** setting initial values so they\r\n  // see the full doc rather than an empty one, unless they opt out.\r\n  // Re: gh-3781, gh-6155\r\n  if (options.willInit && defaults) {\r\n    EventEmitter.prototype.once.call(this, 'init', () => {\r\n      $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\r\n        isNew: this.isNew\r\n      });\r\n    });\r\n  } else if (defaults) {\r\n    $__applyDefaults(this, fields, skipId, exclude, hasIncludedChildren, false, options.skipDefaults, {\r\n      isNew: this.isNew\r\n    });\r\n  }\r\n\r\n  this.$__._id = this._id;\r\n\r\n  if (!this.$__.strictMode && obj) {\r\n    const _this = this;\r\n    const keys = Object.keys(this._doc);\r\n\r\n    keys.forEach(function(key) {\r\n      if (!(key in schema.tree)) {\r\n        defineKey(key, null, _this);\r\n      }\r\n    });\r\n  }\r\n\r\n  applyQueue(this);\r\n}\r\n\r\n/*!\r\n * Document exposes the NodeJS event emitter API, so you can use\r\n * `on`, `once`, etc.\r\n */\r\nutils.each(\r\n  ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\r\n    'removeAllListeners', 'addListener'],\r\n  function(emitterFn) {\r\n    Document.prototype[emitterFn] = function() {\r\n      return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\r\n    };\r\n  });\r\n\r\nDocument.prototype.constructor = Document;\r\n\r\nfor (const i in EventEmitter.prototype) {\r\n  Document[i] = EventEmitter.prototype[i];\r\n}\r\n\r\n/**\r\n * The documents schema.\r\n *\r\n * @api public\r\n * @property schema\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.schema;\r\n\r\n/**\r\n * Empty object that you can use for storing properties on the document. This\r\n * is handy for passing data to middleware without conflicting with Mongoose\r\n * internals.\r\n *\r\n * ####Example:\r\n *\r\n *     schema.pre('save', function() {\r\n *       // Mongoose will set `isNew` to `false` if `save()` succeeds\r\n *       this.$locals.wasNew = this.isNew;\r\n *     });\r\n *\r\n *     schema.post('save', function() {\r\n *       // Prints true if `isNew` was set before `save()`\r\n *       console.log(this.$locals.wasNew);\r\n *     });\r\n *\r\n * @api public\r\n * @property $locals\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(Document.prototype, '$locals', {\r\n  configurable: false,\r\n  enumerable: false,\r\n  writable: true\r\n});\r\n\r\n/**\r\n * Boolean flag specifying if the document is new.\r\n *\r\n * @api public\r\n * @property isNew\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.isNew;\r\n\r\n/**\r\n * The string version of this documents _id.\r\n *\r\n * ####Note:\r\n *\r\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\r\n *\r\n *     new Schema({ name: String }, { id: false });\r\n *\r\n * @api public\r\n * @see Schema options /docs/guide.html#options\r\n * @property id\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.id;\r\n\r\n/**\r\n * Hash containing current validation errors.\r\n *\r\n * @api public\r\n * @property errors\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.errors;\r\n\r\n/**\r\n * A string containing the current operation that Mongoose is executing\r\n * on this document. May be `null`, `'save'`, `'validate'`, or `'remove'`.\r\n *\r\n * ####Example:\r\n *\r\n *     const doc = new Model({ name: 'test' });\r\n *     doc.$op; // null\r\n *\r\n *     const promise = doc.save();\r\n *     doc.$op; // 'save'\r\n *\r\n *     await promise;\r\n *     doc.$op; // null\r\n *\r\n * @api public\r\n * @property $op\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$op;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction $__hasIncludedChildren(fields) {\r\n  const hasIncludedChildren = {};\r\n  const keys = Object.keys(fields);\r\n\r\n  for (const key of keys) {\r\n    const parts = key.split('.');\r\n    const c = [];\r\n\r\n    for (const part of parts) {\r\n      c.push(part);\r\n      hasIncludedChildren[c.join('.')] = 1;\r\n    }\r\n  }\r\n\r\n  return hasIncludedChildren;\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction $__applyDefaults(doc, fields, skipId, exclude, hasIncludedChildren, isBeforeSetters, pathsToSkip) {\r\n  const paths = Object.keys(doc.schema.paths);\r\n  const plen = paths.length;\r\n\r\n  for (let i = 0; i < plen; ++i) {\r\n    let def;\r\n    let curPath = '';\r\n    const p = paths[i];\r\n\r\n    if (p === '_id' && skipId) {\r\n      continue;\r\n    }\r\n\r\n    const type = doc.schema.paths[p];\r\n    const path = p.indexOf('.') === -1 ? [p] : p.split('.');\r\n    const len = path.length;\r\n    let included = false;\r\n    let doc_ = doc._doc;\r\n\r\n    for (let j = 0; j < len; ++j) {\r\n      if (doc_ == null) {\r\n        break;\r\n      }\r\n\r\n      const piece = path[j];\r\n      curPath += (!curPath.length ? '' : '.') + piece;\r\n\r\n      if (exclude === true) {\r\n        if (curPath in fields) {\r\n          break;\r\n        }\r\n      } else if (exclude === false && fields && !included) {\r\n        if (curPath in fields) {\r\n          included = true;\r\n        } else if (!hasIncludedChildren[curPath]) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (j === len - 1) {\r\n        if (doc_[piece] !== void 0) {\r\n          break;\r\n        }\r\n\r\n        if (typeof type.defaultValue === 'function') {\r\n          if (!type.defaultValue.$runBeforeSetters && isBeforeSetters) {\r\n            break;\r\n          }\r\n          if (type.defaultValue.$runBeforeSetters && !isBeforeSetters) {\r\n            break;\r\n          }\r\n        } else if (!isBeforeSetters) {\r\n          // Non-function defaults should always run **before** setters\r\n          continue;\r\n        }\r\n\r\n        if (pathsToSkip && pathsToSkip[curPath]) {\r\n          break;\r\n        }\r\n\r\n        if (fields && exclude !== null) {\r\n          if (exclude === true) {\r\n            // apply defaults to all non-excluded fields\r\n            if (p in fields) {\r\n              continue;\r\n            }\r\n\r\n            def = type.getDefault(doc, false);\r\n            if (typeof def !== 'undefined') {\r\n              doc_[piece] = def;\r\n              doc.$__.activePaths.default(p);\r\n            }\r\n          } else if (included) {\r\n            // selected field\r\n            def = type.getDefault(doc, false);\r\n            if (typeof def !== 'undefined') {\r\n              doc_[piece] = def;\r\n              doc.$__.activePaths.default(p);\r\n            }\r\n          }\r\n        } else {\r\n          def = type.getDefault(doc, false);\r\n          if (typeof def !== 'undefined') {\r\n            doc_[piece] = def;\r\n            doc.$__.activePaths.default(p);\r\n          }\r\n        }\r\n      } else {\r\n        doc_ = doc_[piece];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Builds the default doc structure\r\n *\r\n * @param {Object} obj\r\n * @param {Object} [fields]\r\n * @param {Boolean} [skipId]\r\n * @api private\r\n * @method $__buildDoc\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__buildDoc = function(obj, fields, skipId, exclude, hasIncludedChildren) {\r\n  const doc = {};\r\n\r\n  const paths = Object.keys(this.schema.paths).\r\n    // Don't build up any paths that are underneath a map, we don't know\r\n    // what the keys will be\r\n    filter(p => !p.includes('$*'));\r\n  const plen = paths.length;\r\n  let ii = 0;\r\n\r\n  for (; ii < plen; ++ii) {\r\n    const p = paths[ii];\r\n\r\n    if (p === '_id') {\r\n      if (skipId) {\r\n        continue;\r\n      }\r\n      if (obj && '_id' in obj) {\r\n        continue;\r\n      }\r\n    }\r\n\r\n    const path = p.split('.');\r\n    const len = path.length;\r\n    const last = len - 1;\r\n    let curPath = '';\r\n    let doc_ = doc;\r\n    let included = false;\r\n\r\n    for (let i = 0; i < len; ++i) {\r\n      const piece = path[i];\r\n\r\n      curPath += (!curPath.length ? '' : '.') + piece;\r\n\r\n      // support excluding intermediary levels\r\n      if (exclude === true) {\r\n        if (curPath in fields) {\r\n          break;\r\n        }\r\n      } else if (exclude === false && fields && !included) {\r\n        if (curPath in fields) {\r\n          included = true;\r\n        } else if (!hasIncludedChildren[curPath]) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (i < last) {\r\n        doc_ = doc_[piece] || (doc_[piece] = {});\r\n      }\r\n    }\r\n  }\r\n\r\n  this._doc = doc;\r\n};\r\n\r\n/*!\r\n * Converts to POJO when you use the document for querying\r\n */\r\n\r\nDocument.prototype.toBSON = function() {\r\n  return this.toObject(internalToObjectOptions);\r\n};\r\n\r\n/**\r\n * Initializes the document without setters or marking anything modified.\r\n *\r\n * Called internally after a document is returned from mongodb. Normally,\r\n * you do **not** need to call this function on your own.\r\n *\r\n * This function triggers `init` [middleware](/docs/middleware.html).\r\n * Note that `init` hooks are [synchronous](/docs/middleware.html#synchronous).\r\n *\r\n * @param {Object} doc document returned by mongo\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.init = function(doc, opts, fn) {\r\n  if (typeof opts === 'function') {\r\n    fn = opts;\r\n    opts = null;\r\n  }\r\n\r\n  this.$__init(doc, opts);\r\n\r\n  if (fn) {\r\n    fn(null, this);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDocument.prototype.$__init = function(doc, opts) {\r\n  this.isNew = false;\r\n  this.$init = true;\r\n  opts = opts || {};\r\n\r\n  // handle docs with populated paths\r\n  // If doc._id is not null or undefined\r\n  if (doc._id != null && opts.populated && opts.populated.length) {\r\n    const id = String(doc._id);\r\n    for (const item of opts.populated) {\r\n      if (item.isVirtual) {\r\n        this.populated(item.path, utils.getValue(item.path, doc), item);\r\n      } else {\r\n        this.populated(item.path, item._docs[id], item);\r\n      }\r\n\r\n      if (item._childDocs == null) {\r\n        continue;\r\n      }\r\n      for (const child of item._childDocs) {\r\n        if (child == null || child.$__ == null) {\r\n          continue;\r\n        }\r\n        child.$__.parent = this;\r\n      }\r\n    }\r\n  }\r\n\r\n  init(this, doc, this._doc, opts);\r\n\r\n  markArraySubdocsPopulated(this, opts.populated);\r\n\r\n  this.emit('init', this);\r\n  this.constructor.emit('init', this);\r\n\r\n  this.$__._id = this._id;\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * If populating a path within a document array, make sure each\r\n * subdoc within the array knows its subpaths are populated.\r\n *\r\n * ####Example:\r\n *     const doc = await Article.findOne().populate('comments.author');\r\n *     doc.comments[0].populated('author'); // Should be set\r\n */\r\n\r\nfunction markArraySubdocsPopulated(doc, populated) {\r\n  if (doc._id == null || populated == null || populated.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const id = String(doc._id);\r\n  for (const item of populated) {\r\n    if (item.isVirtual) {\r\n      continue;\r\n    }\r\n    const path = item.path;\r\n    const pieces = path.split('.');\r\n    for (let i = 0; i < pieces.length - 1; ++i) {\r\n      const subpath = pieces.slice(0, i + 1).join('.');\r\n      const rest = pieces.slice(i + 1).join('.');\r\n      const val = doc.get(subpath);\r\n      if (val == null) {\r\n        continue;\r\n      }\r\n\r\n      if (val.isMongooseDocumentArray) {\r\n        for (let j = 0; j < val.length; ++j) {\r\n          val[j].populated(rest, item._docs[id] == null ? [] : item._docs[id][j], item);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/*!\r\n * Init helper.\r\n *\r\n * @param {Object} self document instance\r\n * @param {Object} obj raw mongodb doc\r\n * @param {Object} doc object we are initializing\r\n * @api private\r\n */\r\n\r\nfunction init(self, obj, doc, opts, prefix) {\r\n  prefix = prefix || '';\r\n\r\n  const keys = Object.keys(obj);\r\n  const len = keys.length;\r\n  let schema;\r\n  let path;\r\n  let i;\r\n  let index = 0;\r\n\r\n  while (index < len) {\r\n    _init(index++);\r\n  }\r\n\r\n  function _init(index) {\r\n    i = keys[index];\r\n    path = prefix + i;\r\n    schema = self.schema.path(path);\r\n\r\n    // Should still work if not a model-level discriminator, but should not be\r\n    // necessary. This is *only* to catch the case where we queried using the\r\n    // base model and the discriminated model has a projection\r\n    if (self.schema.$isRootDiscriminator && !self.isSelected(path)) {\r\n      return;\r\n    }\r\n\r\n    if (!schema && utils.isPOJO(obj[i])) {\r\n      // assume nested object\r\n      if (!doc[i]) {\r\n        doc[i] = {};\r\n      }\r\n      init(self, obj[i], doc[i], opts, path + '.');\r\n    } else if (!schema) {\r\n      doc[i] = obj[i];\r\n    } else {\r\n      if (obj[i] === null) {\r\n        doc[i] = schema._castNullish(null);\r\n      } else if (obj[i] !== undefined) {\r\n        const intCache = obj[i].$__ || {};\r\n        const wasPopulated = intCache.wasPopulated || null;\r\n\r\n        if (schema && !wasPopulated) {\r\n          try {\r\n            doc[i] = schema.cast(obj[i], self, true);\r\n          } catch (e) {\r\n            self.invalidate(e.path, new ValidatorError({\r\n              path: e.path,\r\n              message: e.message,\r\n              type: 'cast',\r\n              value: e.value\r\n            }));\r\n          }\r\n        } else {\r\n          doc[i] = obj[i];\r\n        }\r\n      }\r\n      // mark as hydrated\r\n      if (!self.isModified(path)) {\r\n        self.$__.activePaths.init(path);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Sends an update command with this document `_id` as the query selector.\r\n *\r\n * ####Example:\r\n *\r\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\r\n *\r\n * ####Valid options:\r\n *\r\n *  - same as in [Model.update](#model_Model.update)\r\n *\r\n * @see Model.update #model_Model.update\r\n * @param {Object} doc\r\n * @param {Object} options\r\n * @param {Function} callback\r\n * @return {Query}\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.update = function update() {\r\n  const args = utils.args(arguments);\r\n  args.unshift({ _id: this._id });\r\n  const query = this.constructor.update.apply(this.constructor, args);\r\n\r\n  if (this.$session() != null) {\r\n    if (!('session' in query.options)) {\r\n      query.options.session = this.$session();\r\n    }\r\n  }\r\n\r\n  return query;\r\n};\r\n\r\n/**\r\n * Sends an updateOne command with this document `_id` as the query selector.\r\n *\r\n * ####Example:\r\n *\r\n *     weirdCar.updateOne({$inc: {wheels:1}}, { w: 1 }, callback);\r\n *\r\n * ####Valid options:\r\n *\r\n *  - same as in [Model.updateOne](#model_Model.updateOne)\r\n *\r\n * @see Model.updateOne #model_Model.updateOne\r\n * @param {Object} doc\r\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\r\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and the [Mongoose lean tutorial](/docs/tutorials/lean.html).\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\r\n * @param {Function} callback\r\n * @return {Query}\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.updateOne = function updateOne(doc, options, callback) {\r\n  const query = this.constructor.updateOne({ _id: this._id }, doc, options);\r\n  query._pre(cb => {\r\n    this.constructor._middleware.execPre('updateOne', this, [this], cb);\r\n  });\r\n  query._post(cb => {\r\n    this.constructor._middleware.execPost('updateOne', this, [this], {}, cb);\r\n  });\r\n\r\n  if (this.$session() != null) {\r\n    if (!('session' in query.options)) {\r\n      query.options.session = this.$session();\r\n    }\r\n  }\r\n\r\n  if (callback != null) {\r\n    return query.exec(callback);\r\n  }\r\n\r\n  return query;\r\n};\r\n\r\n/**\r\n * Sends a replaceOne command with this document `_id` as the query selector.\r\n *\r\n * ####Valid options:\r\n *\r\n *  - same as in [Model.replaceOne](#model_Model.replaceOne)\r\n *\r\n * @see Model.replaceOne #model_Model.replaceOne\r\n * @param {Object} doc\r\n * @param {Object} options\r\n * @param {Function} callback\r\n * @return {Query}\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.replaceOne = function replaceOne() {\r\n  const args = utils.args(arguments);\r\n  args.unshift({ _id: this._id });\r\n  return this.constructor.replaceOne.apply(this.constructor, args);\r\n};\r\n\r\n/**\r\n * Getter/setter around the session associated with this document. Used to\r\n * automatically set `session` if you `save()` a doc that you got from a\r\n * query with an associated session.\r\n *\r\n * ####Example:\r\n *\r\n *     const session = MyModel.startSession();\r\n *     const doc = await MyModel.findOne().session(session);\r\n *     doc.$session() === session; // true\r\n *     doc.$session(null);\r\n *     doc.$session() === null; // true\r\n *\r\n * If this is a top-level document, setting the session propagates to all child\r\n * docs.\r\n *\r\n * @param {ClientSession} [session] overwrite the current session\r\n * @return {ClientSession}\r\n * @method $session\r\n * @api public\r\n * @memberOf Document\r\n */\r\n\r\nDocument.prototype.$session = function $session(session) {\r\n  if (arguments.length === 0) {\r\n    return this.$__.session;\r\n  }\r\n  this.$__.session = session;\r\n\r\n  if (!this.ownerDocument) {\r\n    const subdocs = this.$__getAllSubdocs();\r\n    for (const child of subdocs) {\r\n      child.$session(session);\r\n    }\r\n  }\r\n\r\n  return session;\r\n};\r\n\r\n/**\r\n * Overwrite all values in this document with the values of `obj`, except\r\n * for immutable properties. Behaves similarly to `set()`, except for it\r\n * unsets all properties that aren't in `obj`.\r\n *\r\n * @param {Object} obj the object to overwrite this document with\r\n * @method overwrite\r\n * @name overwrite\r\n * @memberOf Document\r\n * @instance\r\n * @api public\r\n */\r\n\r\nDocument.prototype.overwrite = function overwrite(obj) {\r\n  const keys = Array.from(new Set(Object.keys(this._doc).concat(Object.keys(obj))));\r\n\r\n  for (const key of keys) {\r\n    if (key === '_id') {\r\n      continue;\r\n    }\r\n    // Explicitly skip version key\r\n    if (this.schema.options.versionKey && key === this.schema.options.versionKey) {\r\n      continue;\r\n    }\r\n    if (this.schema.options.discriminatorKey && key === this.schema.options.discriminatorKey) {\r\n      continue;\r\n    }\r\n    this.$set(key, obj[key]);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Alias for `set()`, used internally to avoid conflicts\r\n *\r\n * @param {String|Object} path path or object of key/vals to set\r\n * @param {Any} val the value to set\r\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\r\n * @param {Object} [options] optionally specify options that modify the behavior of the set\r\n * @method $set\r\n * @name $set\r\n * @memberOf Document\r\n * @instance\r\n * @api public\r\n */\r\n\r\nDocument.prototype.$set = function $set(path, val, type, options) {\r\n  if (utils.isPOJO(type)) {\r\n    options = type;\r\n    type = undefined;\r\n  }\r\n\r\n  options = options || {};\r\n  const merge = options.merge;\r\n  const adhoc = type && type !== true;\r\n  const constructing = type === true;\r\n  let adhocs;\r\n  let keys;\r\n  let i = 0;\r\n  let pathtype;\r\n  let key;\r\n  let prefix;\r\n\r\n  const strict = 'strict' in options\r\n    ? options.strict\r\n    : this.$__.strictMode;\r\n\r\n  if (adhoc) {\r\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\r\n    adhocs[path] = this.schema.interpretAsType(path, type, this.schema.options);\r\n  }\r\n\r\n  if (typeof path !== 'string') {\r\n    // new Document({ key: val })\r\n    if (path instanceof Document) {\r\n      if (path.$__isNested) {\r\n        path = path.toObject();\r\n      } else {\r\n        path = path._doc;\r\n      }\r\n    }\r\n\r\n    if (path == null) {\r\n      const _ = path;\r\n      path = val;\r\n      val = _;\r\n    } else {\r\n      prefix = val ? val + '.' : '';\r\n\r\n      keys = Object.keys(path);\r\n      const len = keys.length;\r\n\r\n      // `_skipMinimizeTopLevel` is because we may have deleted the top-level\r\n      // nested key to ensure key order.\r\n      const _skipMinimizeTopLevel = get(options, '_skipMinimizeTopLevel', false);\r\n      if (len === 0 && _skipMinimizeTopLevel) {\r\n        delete options._skipMinimizeTopLevel;\r\n        if (val) {\r\n          this.$set(val, {});\r\n        }\r\n        return this;\r\n      }\r\n\r\n      while (i < len) {\r\n        _handleIndex.call(this, i++);\r\n      }\r\n\r\n      return this;\r\n    }\r\n  } else {\r\n    this.$__.$setCalled.add(path);\r\n  }\r\n\r\n  function _handleIndex(i) {\r\n    key = keys[i];\r\n    const pathName = prefix + key;\r\n    pathtype = this.schema.pathType(pathName);\r\n\r\n    // On initial set, delete any nested keys if we're going to overwrite\r\n    // them to ensure we keep the user's key order.\r\n    if (type === true &&\r\n        !prefix &&\r\n        path[key] != null &&\r\n        pathtype === 'nested' &&\r\n        this._doc[key] != null &&\r\n        Object.keys(this._doc[key]).length === 0) {\r\n      delete this._doc[key];\r\n      // Make sure we set `{}` back even if we minimize re: gh-8565\r\n      options = Object.assign({}, options, { _skipMinimizeTopLevel: true });\r\n    }\r\n\r\n    if (typeof path[key] === 'object' &&\r\n        !utils.isNativeObject(path[key]) &&\r\n        !utils.isMongooseType(path[key]) &&\r\n        path[key] != null &&\r\n        pathtype !== 'virtual' &&\r\n        pathtype !== 'real' &&\r\n        pathtype !== 'adhocOrUndefined' &&\r\n        !(this.$__path(pathName) instanceof MixedSchema) &&\r\n        !(this.schema.paths[pathName] &&\r\n        this.schema.paths[pathName].options &&\r\n        this.schema.paths[pathName].options.ref)) {\r\n      this.$__.$setCalled.add(prefix + key);\r\n      this.$set(path[key], prefix + key, constructing, options);\r\n    } else if (strict) {\r\n      // Don't overwrite defaults with undefined keys (gh-3981) (gh-9039)\r\n      if (constructing && path[key] === void 0 &&\r\n          this.get(pathName) !== void 0) {\r\n        return;\r\n      }\r\n\r\n      if (pathtype === 'adhocOrUndefined') {\r\n        pathtype = getEmbeddedDiscriminatorPath(this, pathName, { typeOnly: true });\r\n      }\r\n\r\n      if (pathtype === 'real' || pathtype === 'virtual') {\r\n        // Check for setting single embedded schema to document (gh-3535)\r\n        let p = path[key];\r\n        if (this.schema.paths[pathName] &&\r\n            this.schema.paths[pathName].$isSingleNested &&\r\n            path[key] instanceof Document) {\r\n          p = p.toObject({ virtuals: false, transform: false });\r\n        }\r\n        this.$set(prefix + key, p, constructing, options);\r\n      } else if (pathtype === 'nested' && path[key] instanceof Document) {\r\n        this.$set(prefix + key,\r\n          path[key].toObject({ transform: false }), constructing, options);\r\n      } else if (strict === 'throw') {\r\n        if (pathtype === 'nested') {\r\n          throw new ObjectExpectedError(key, path[key]);\r\n        } else {\r\n          throw new StrictModeError(key);\r\n        }\r\n      }\r\n    } else if (path[key] !== void 0) {\r\n      this.$set(prefix + key, path[key], constructing, options);\r\n    }\r\n  }\r\n\r\n  let pathType = this.schema.pathType(path);\r\n  if (pathType === 'adhocOrUndefined') {\r\n    pathType = getEmbeddedDiscriminatorPath(this, path, { typeOnly: true });\r\n  }\r\n\r\n  // Assume this is a Mongoose document that was copied into a POJO using\r\n  // `Object.assign()` or `{...doc}`\r\n  val = handleSpreadDoc(val);\r\n\r\n  if (pathType === 'nested' && val) {\r\n    if (typeof val === 'object' && val != null) {\r\n      if (!merge) {\r\n        this.$__setValue(path, null);\r\n        cleanModifiedSubpaths(this, path);\r\n      } else {\r\n        return this.$set(val, path, constructing);\r\n      }\r\n\r\n      const keys = Object.keys(val);\r\n      this.$__setValue(path, {});\r\n      for (const key of keys) {\r\n        this.$set(path + '.' + key, val[key], constructing);\r\n      }\r\n      this.markModified(path);\r\n      cleanModifiedSubpaths(this, path, { skipDocArrays: true });\r\n      return this;\r\n    }\r\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\r\n    return this;\r\n  }\r\n\r\n  let schema;\r\n  const parts = path.indexOf('.') === -1 ? [path] : path.split('.');\r\n\r\n  // Might need to change path for top-level alias\r\n  if (typeof this.schema.aliases[parts[0]] == 'string') {\r\n    parts[0] = this.schema.aliases[parts[0]];\r\n  }\r\n\r\n  if (pathType === 'adhocOrUndefined' && strict) {\r\n    // check for roots that are Mixed types\r\n    let mixed;\r\n\r\n    for (i = 0; i < parts.length; ++i) {\r\n      const subpath = parts.slice(0, i + 1).join('.');\r\n\r\n      // If path is underneath a virtual, bypass everything and just set it.\r\n      if (i + 1 < parts.length && this.schema.pathType(subpath) === 'virtual') {\r\n        mpath.set(path, val, this);\r\n        return this;\r\n      }\r\n\r\n      schema = this.schema.path(subpath);\r\n      if (schema == null) {\r\n        continue;\r\n      }\r\n\r\n      if (schema instanceof MixedSchema) {\r\n        // allow changes to sub paths of mixed types\r\n        mixed = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (schema == null) {\r\n      // Check for embedded discriminators\r\n      schema = getEmbeddedDiscriminatorPath(this, path);\r\n    }\r\n\r\n    if (!mixed && !schema) {\r\n      if (strict === 'throw') {\r\n        throw new StrictModeError(path);\r\n      }\r\n      return this;\r\n    }\r\n  } else if (pathType === 'virtual') {\r\n    schema = this.schema.virtualpath(path);\r\n    schema.applySetters(val, this);\r\n    return this;\r\n  } else {\r\n    schema = this.$__path(path);\r\n  }\r\n\r\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\r\n  let cur = this._doc;\r\n  let curPath = '';\r\n  for (i = 0; i < parts.length - 1; ++i) {\r\n    cur = cur[parts[i]];\r\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\r\n    if (!cur) {\r\n      this.$set(curPath, {});\r\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\r\n      // so `MongoError: cannot use the part (nested of nested.num) to\r\n      // traverse the element ({nested: null})` is not likely. If user gets\r\n      // that error, its their fault for now. We should reconsider disallowing\r\n      // modifying not selected paths for 6.x\r\n      if (!this.isSelected(curPath)) {\r\n        this.unmarkModified(curPath);\r\n      }\r\n      cur = this.$__getValue(curPath);\r\n    }\r\n  }\r\n\r\n  let pathToMark;\r\n\r\n  // When using the $set operator the path to the field must already exist.\r\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\r\n\r\n  if (parts.length <= 1) {\r\n    pathToMark = path;\r\n  } else {\r\n    for (i = 0; i < parts.length; ++i) {\r\n      const subpath = parts.slice(0, i + 1).join('.');\r\n      if (this.get(subpath, null, { getters: false }) === null) {\r\n        pathToMark = subpath;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!pathToMark) {\r\n      pathToMark = path;\r\n    }\r\n  }\r\n\r\n  // if this doc is being constructed we should not trigger getters\r\n  const priorVal = (() => {\r\n    if (this.$__.$options.priorDoc != null) {\r\n      return this.$__.$options.priorDoc.$__getValue(path);\r\n    }\r\n    if (constructing) {\r\n      return void 0;\r\n    }\r\n    return this.$__getValue(path);\r\n  })();\r\n\r\n  if (!schema) {\r\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\r\n    return this;\r\n  }\r\n\r\n  // If overwriting a subdocument path, make sure to clear out\r\n  // any errors _before_ setting, so new errors that happen\r\n  // get persisted. Re: #9080\r\n  if (schema.$isSingleNested || schema.$isMongooseArray) {\r\n    _markValidSubpaths(this, path);\r\n  }\r\n\r\n  if (schema.$isSingleNested && val != null && merge) {\r\n    if (val instanceof Document) {\r\n      val = val.toObject({ virtuals: false, transform: false });\r\n    }\r\n    const keys = Object.keys(val);\r\n    for (const key of keys) {\r\n      this.$set(path + '.' + key, val[key], constructing, options);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  let shouldSet = true;\r\n  try {\r\n    // If the user is trying to set a ref path to a document with\r\n    // the correct model name, treat it as populated\r\n    const refMatches = (() => {\r\n      if (schema.options == null) {\r\n        return false;\r\n      }\r\n      if (!(val instanceof Document)) {\r\n        return false;\r\n      }\r\n      const model = val.constructor;\r\n\r\n      // Check ref\r\n      const ref = schema.options.ref;\r\n      if (ref != null && (ref === model.modelName || ref === model.baseModelName)) {\r\n        return true;\r\n      }\r\n\r\n      // Check refPath\r\n      const refPath = schema.options.refPath;\r\n      if (refPath == null) {\r\n        return false;\r\n      }\r\n      const modelName = val.get(refPath);\r\n      return modelName === model.modelName || modelName === model.baseModelName;\r\n    })();\r\n\r\n    let didPopulate = false;\r\n    if (refMatches && val instanceof Document) {\r\n      this.populated(path, val._id, { [populateModelSymbol]: val.constructor });\r\n      didPopulate = true;\r\n    }\r\n\r\n    let popOpts;\r\n    if (schema.options &&\r\n        Array.isArray(schema.options[this.schema.options.typeKey]) &&\r\n        schema.options[this.schema.options.typeKey].length &&\r\n        schema.options[this.schema.options.typeKey][0].ref &&\r\n        _isManuallyPopulatedArray(val, schema.options[this.schema.options.typeKey][0].ref)) {\r\n      if (this.ownerDocument) {\r\n        popOpts = { [populateModelSymbol]: val[0].constructor };\r\n        this.ownerDocument().populated(this.$__fullPath(path),\r\n          val.map(function(v) { return v._id; }), popOpts);\r\n      } else {\r\n        popOpts = { [populateModelSymbol]: val[0].constructor };\r\n        this.populated(path, val.map(function(v) { return v._id; }), popOpts);\r\n      }\r\n      didPopulate = true;\r\n    }\r\n\r\n    if (this.schema.singleNestedPaths[path] == null) {\r\n      // If this path is underneath a single nested schema, we'll call the setter\r\n      // later in `$__set()` because we don't take `_doc` when we iterate through\r\n      // a single nested doc. That's to make sure we get the correct context.\r\n      // Otherwise we would double-call the setter, see gh-7196.\r\n      val = schema.applySetters(val, this, false, priorVal);\r\n    }\r\n\r\n    if (schema.$isMongooseDocumentArray &&\r\n        Array.isArray(val) &&\r\n        val.length > 0 &&\r\n        val[0] != null &&\r\n        val[0].$__ != null &&\r\n        val[0].$__.populated != null) {\r\n      const populatedPaths = Object.keys(val[0].$__.populated);\r\n      for (const populatedPath of populatedPaths) {\r\n        this.populated(path + '.' + populatedPath,\r\n          val.map(v => v.populated(populatedPath)),\r\n          val[0].$__.populated[populatedPath].options);\r\n      }\r\n      didPopulate = true;\r\n    }\r\n\r\n    if (!didPopulate && this.$__.populated) {\r\n      // If this array partially contains populated documents, convert them\r\n      // all to ObjectIds re: #8443\r\n      if (Array.isArray(val) && this.$__.populated[path]) {\r\n        for (let i = 0; i < val.length; ++i) {\r\n          if (val[i] instanceof Document) {\r\n            val[i] = val[i]._id;\r\n          }\r\n        }\r\n      }\r\n      delete this.$__.populated[path];\r\n    }\r\n\r\n    if (schema.$isSingleNested && val != null) {\r\n      _checkImmutableSubpaths(val, schema, priorVal);\r\n    }\r\n\r\n    this.$markValid(path);\r\n  } catch (e) {\r\n    if (e instanceof MongooseError.StrictModeError && e.isImmutableError) {\r\n      this.invalidate(path, e);\r\n    } else if (e instanceof MongooseError.CastError) {\r\n      this.invalidate(e.path, e);\r\n      if (e.$originalErrorPath) {\r\n        this.invalidate(path,\r\n          new MongooseError.CastError(schema.instance, val, path, e.$originalErrorPath));\r\n      }\r\n    } else {\r\n      this.invalidate(path,\r\n        new MongooseError.CastError(schema.instance, val, path, e));\r\n    }\r\n    shouldSet = false;\r\n  }\r\n\r\n  if (shouldSet) {\r\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\r\n  }\r\n\r\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\r\n    cleanModifiedSubpaths(this, path);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _isManuallyPopulatedArray(val, ref) {\r\n  if (!Array.isArray(val)) {\r\n    return false;\r\n  }\r\n  if (val.length === 0) {\r\n    return false;\r\n  }\r\n\r\n  for (const el of val) {\r\n    if (!(el instanceof Document)) {\r\n      return false;\r\n    }\r\n    const modelName = el.constructor.modelName;\r\n    if (modelName == null) {\r\n      return false;\r\n    }\r\n    if (el.constructor.modelName != ref && el.constructor.baseModelName != ref) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Sets the value of a path, or many paths.\r\n *\r\n * ####Example:\r\n *\r\n *     // path, value\r\n *     doc.set(path, value)\r\n *\r\n *     // object\r\n *     doc.set({\r\n *         path  : value\r\n *       , path2 : {\r\n *            path  : value\r\n *         }\r\n *     })\r\n *\r\n *     // on-the-fly cast to number\r\n *     doc.set(path, value, Number)\r\n *\r\n *     // on-the-fly cast to string\r\n *     doc.set(path, value, String)\r\n *\r\n *     // changing strict mode behavior\r\n *     doc.set(path, value, { strict: false });\r\n *\r\n * @param {String|Object} path path or object of key/vals to set\r\n * @param {Any} val the value to set\r\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\r\n * @param {Object} [options] optionally specify options that modify the behavior of the set\r\n * @api public\r\n * @method set\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.set = Document.prototype.$set;\r\n\r\n/**\r\n * Determine if we should mark this change as modified.\r\n *\r\n * @return {Boolean}\r\n * @api private\r\n * @method $__shouldModify\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__shouldModify = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\r\n  if (this.isNew) {\r\n    return true;\r\n  }\r\n\r\n  // Re: the note about gh-7196, `val` is the raw value without casting or\r\n  // setters if the full path is under a single nested subdoc because we don't\r\n  // want to double run setters. So don't set it as modified. See gh-7264.\r\n  if (this.schema.singleNestedPaths[path] != null) {\r\n    return false;\r\n  }\r\n\r\n  if (val === void 0 && !this.isSelected(path)) {\r\n    // when a path is not selected in a query, its initial\r\n    // value will be undefined.\r\n    return true;\r\n  }\r\n\r\n  if (val === void 0 && path in this.$__.activePaths.states.default) {\r\n    // we're just unsetting the default value which was never saved\r\n    return false;\r\n  }\r\n\r\n  // gh-3992: if setting a populated field to a doc, don't mark modified\r\n  // if they have the same _id\r\n  if (this.populated(path) &&\r\n      val instanceof Document &&\r\n      deepEqual(val._id, priorVal)) {\r\n    return false;\r\n  }\r\n\r\n  if (!deepEqual(val, priorVal || this.get(path))) {\r\n    return true;\r\n  }\r\n\r\n  if (!constructing &&\r\n      val !== null &&\r\n      val !== undefined &&\r\n      path in this.$__.activePaths.states.default &&\r\n      deepEqual(val, schema.getDefault(this, constructing))) {\r\n    // a path with a default was $unset on the server\r\n    // and the user is setting it to the same value again\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Handles the actual setting of the value and marking the path modified if appropriate.\r\n *\r\n * @api private\r\n * @method $__set\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__set = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\r\n  Embedded = Embedded || require('./types/embedded');\r\n\r\n  const shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts,\r\n    schema, val, priorVal);\r\n  const _this = this;\r\n\r\n  if (shouldModify) {\r\n    this.markModified(pathToMark);\r\n\r\n    // handle directly setting arrays (gh-1126)\r\n    MongooseArray || (MongooseArray = require('./types/array'));\r\n    if (val && val.isMongooseArray) {\r\n      val._registerAtomic('$set', val);\r\n\r\n      // Update embedded document parent references (gh-5189)\r\n      if (val.isMongooseDocumentArray) {\r\n        val.forEach(function(item) {\r\n          item && item.__parentArray && (item.__parentArray = val);\r\n        });\r\n      }\r\n\r\n      // Small hack for gh-1638: if we're overwriting the entire array, ignore\r\n      // paths that were modified before the array overwrite\r\n      this.$__.activePaths.forEach(function(modifiedPath) {\r\n        if (modifiedPath.startsWith(path + '.')) {\r\n          _this.$__.activePaths.ignore(modifiedPath);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  let obj = this._doc;\r\n  let i = 0;\r\n  const l = parts.length;\r\n  let cur = '';\r\n\r\n  for (; i < l; i++) {\r\n    const next = i + 1;\r\n    const last = next === l;\r\n    cur += (cur ? '.' + parts[i] : parts[i]);\r\n    if (specialProperties.has(parts[i])) {\r\n      return;\r\n    }\r\n\r\n    if (last) {\r\n      if (obj instanceof Map) {\r\n        obj.set(parts[i], val);\r\n      } else {\r\n        obj[parts[i]] = val;\r\n      }\r\n    } else {\r\n      if (utils.isPOJO(obj[parts[i]])) {\r\n        obj = obj[parts[i]];\r\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\r\n        obj = obj[parts[i]];\r\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\r\n        obj = obj[parts[i]];\r\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\r\n        obj = obj[parts[i]];\r\n      } else {\r\n        obj[parts[i]] = obj[parts[i]] || {};\r\n        obj = obj[parts[i]];\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Gets a raw value from a path (no getters)\r\n *\r\n * @param {String} path\r\n * @api private\r\n */\r\n\r\nDocument.prototype.$__getValue = function(path) {\r\n  return utils.getValue(path, this._doc);\r\n};\r\n\r\n/**\r\n * Sets a raw value for a path (no casting, setters, transformations)\r\n *\r\n * @param {String} path\r\n * @param {Object} value\r\n * @api private\r\n */\r\n\r\nDocument.prototype.$__setValue = function(path, val) {\r\n  utils.setValue(path, val, this._doc);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns the value of a path.\r\n *\r\n * ####Example\r\n *\r\n *     // path\r\n *     doc.get('age') // 47\r\n *\r\n *     // dynamic casting to a string\r\n *     doc.get('age', String) // \"47\"\r\n *\r\n * @param {String} path\r\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.virtuals=false] Apply virtuals before getting this path\r\n * @param {Boolean} [options.getters=true] If false, skip applying getters and just get the raw value\r\n * @api public\r\n */\r\n\r\nDocument.prototype.get = function(path, type, options) {\r\n  let adhoc;\r\n  options = options || {};\r\n  if (type) {\r\n    adhoc = this.schema.interpretAsType(path, type, this.schema.options);\r\n  }\r\n\r\n  let schema = this.$__path(path);\r\n  if (schema == null) {\r\n    schema = this.schema.virtualpath(path);\r\n  }\r\n  if (schema instanceof MixedSchema) {\r\n    const virtual = this.schema.virtualpath(path);\r\n    if (virtual != null) {\r\n      schema = virtual;\r\n    }\r\n  }\r\n  const pieces = path.split('.');\r\n  let obj = this._doc;\r\n\r\n  if (schema instanceof VirtualType) {\r\n    if (schema.getters.length === 0) {\r\n      return void 0;\r\n    }\r\n    return schema.applyGetters(null, this);\r\n  }\r\n\r\n  // Might need to change path for top-level alias\r\n  if (typeof this.schema.aliases[pieces[0]] == 'string') {\r\n    pieces[0] = this.schema.aliases[pieces[0]];\r\n  }\r\n\r\n  for (let i = 0, l = pieces.length; i < l; i++) {\r\n    if (obj && obj._doc) {\r\n      obj = obj._doc;\r\n    }\r\n\r\n    if (obj == null) {\r\n      obj = void 0;\r\n    } else if (obj instanceof Map) {\r\n      obj = obj.get(pieces[i], { getters: false });\r\n    } else if (i === l - 1) {\r\n      obj = utils.getValue(pieces[i], obj);\r\n    } else {\r\n      obj = obj[pieces[i]];\r\n    }\r\n  }\r\n\r\n  if (adhoc) {\r\n    obj = adhoc.cast(obj);\r\n  }\r\n\r\n  if (schema != null && options.getters !== false) {\r\n    obj = schema.applyGetters(obj, this);\r\n  } else if (this.schema.nested[path] && options.virtuals) {\r\n    // Might need to apply virtuals if this is a nested path\r\n    return applyVirtuals(this, utils.clone(obj) || {}, { path: path });\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDocument.prototype[getSymbol] = Document.prototype.get;\r\n\r\n/**\r\n * Returns the schematype for the given `path`.\r\n *\r\n * @param {String} path\r\n * @api private\r\n * @method $__path\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__path = function(path) {\r\n  const adhocs = this.$__.adhocPaths;\r\n  const adhocType = adhocs && adhocs.hasOwnProperty(path) ? adhocs[path] : null;\r\n\r\n  if (adhocType) {\r\n    return adhocType;\r\n  }\r\n  return this.schema.path(path);\r\n};\r\n\r\n/**\r\n * Marks the path as having pending changes to write to the db.\r\n *\r\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\r\n *\r\n * ####Example:\r\n *\r\n *     doc.mixed.type = 'changed';\r\n *     doc.markModified('mixed.type');\r\n *     doc.save() // changes to mixed.type are now persisted\r\n *\r\n * @param {String} path the path to mark modified\r\n * @param {Document} [scope] the scope to run validators with\r\n * @api public\r\n */\r\n\r\nDocument.prototype.markModified = function(path, scope) {\r\n  this.$__.activePaths.modify(path);\r\n  if (scope != null && !this.ownerDocument) {\r\n    this.$__.pathsToScopes[path] = scope;\r\n  }\r\n};\r\n\r\n/**\r\n * Clears the modified state on the specified path.\r\n *\r\n * ####Example:\r\n *\r\n *     doc.foo = 'bar';\r\n *     doc.unmarkModified('foo');\r\n *     doc.save(); // changes to foo will not be persisted\r\n *\r\n * @param {String} path the path to unmark modified\r\n * @api public\r\n */\r\n\r\nDocument.prototype.unmarkModified = function(path) {\r\n  this.$__.activePaths.init(path);\r\n  delete this.$__.pathsToScopes[path];\r\n};\r\n\r\n/**\r\n * Don't run validation on this path or persist changes to this path.\r\n *\r\n * ####Example:\r\n *\r\n *     doc.foo = null;\r\n *     doc.$ignore('foo');\r\n *     doc.save(); // changes to foo will not be persisted and validators won't be run\r\n *\r\n * @memberOf Document\r\n * @instance\r\n * @method $ignore\r\n * @param {String} path the path to ignore\r\n * @api public\r\n */\r\n\r\nDocument.prototype.$ignore = function(path) {\r\n  this.$__.activePaths.ignore(path);\r\n};\r\n\r\n/**\r\n * Returns the list of paths that have been directly modified. A direct\r\n * modified path is a path that you explicitly set, whether via `doc.foo = 'bar'`,\r\n * `Object.assign(doc, { foo: 'bar' })`, or `doc.set('foo', 'bar')`.\r\n *\r\n * A path `a` may be in `modifiedPaths()` but not in `directModifiedPaths()`\r\n * because a child of `a` was directly modified.\r\n *\r\n * ####Example\r\n *     const schema = new Schema({ foo: String, nested: { bar: String } });\r\n *     const Model = mongoose.model('Test', schema);\r\n *     await Model.create({ foo: 'original', nested: { bar: 'original' } });\r\n *\r\n *     const doc = await Model.findOne();\r\n *     doc.nested.bar = 'modified';\r\n *     doc.directModifiedPaths(); // ['nested.bar']\r\n *     doc.modifiedPaths(); // ['nested', 'nested.bar']\r\n *\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.directModifiedPaths = function() {\r\n  return Object.keys(this.$__.activePaths.states.modify);\r\n};\r\n\r\n/**\r\n * Returns true if the given path is nullish or only contains empty objects.\r\n * Useful for determining whether this subdoc will get stripped out by the\r\n * [minimize option](/docs/guide.html#minimize).\r\n *\r\n * ####Example:\r\n *     const schema = new Schema({ nested: { foo: String } });\r\n *     const Model = mongoose.model('Test', schema);\r\n *     const doc = new Model({});\r\n *     doc.$isEmpty('nested'); // true\r\n *     doc.nested.$isEmpty(); // true\r\n *\r\n *     doc.nested.foo = 'bar';\r\n *     doc.$isEmpty('nested'); // false\r\n *     doc.nested.$isEmpty(); // false\r\n *\r\n * @memberOf Document\r\n * @instance\r\n * @api public\r\n * @method $isEmpty\r\n * @return {Boolean}\r\n */\r\n\r\nDocument.prototype.$isEmpty = function(path) {\r\n  const isEmptyOptions = {\r\n    minimize: true,\r\n    virtuals: false,\r\n    getters: false,\r\n    transform: false\r\n  };\r\n\r\n  if (arguments.length > 0) {\r\n    const v = this.get(path);\r\n    if (v == null) {\r\n      return true;\r\n    }\r\n    if (typeof v !== 'object') {\r\n      return false;\r\n    }\r\n    if (utils.isPOJO(v)) {\r\n      return _isEmpty(v);\r\n    }\r\n    return Object.keys(v.toObject(isEmptyOptions)).length === 0;\r\n  }\r\n\r\n  return Object.keys(this.toObject(isEmptyOptions)).length === 0;\r\n};\r\n\r\nfunction _isEmpty(v) {\r\n  if (v == null) {\r\n    return true;\r\n  }\r\n  if (typeof v !== 'object' || Array.isArray(v)) {\r\n    return false;\r\n  }\r\n  for (const key of Object.keys(v)) {\r\n    if (!_isEmpty(v[key])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Returns the list of paths that have been modified.\r\n *\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.includeChildren=false] if true, returns children of modified paths as well. For example, if false, the list of modified paths for `doc.colors = { primary: 'blue' };` will **not** contain `colors.primary`. If true, `modifiedPaths()` will return an array that contains `colors.primary`.\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.modifiedPaths = function(options) {\r\n  options = options || {};\r\n  const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\r\n  const _this = this;\r\n  return directModifiedPaths.reduce(function(list, path) {\r\n    const parts = path.split('.');\r\n    list = list.concat(parts.reduce(function(chains, part, i) {\r\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\r\n    }, []).filter(function(chain) {\r\n      return (list.indexOf(chain) === -1);\r\n    }));\r\n\r\n    if (!options.includeChildren) {\r\n      return list;\r\n    }\r\n\r\n    let cur = _this.get(path);\r\n    if (cur != null && typeof cur === 'object') {\r\n      if (cur._doc) {\r\n        cur = cur._doc;\r\n      }\r\n      if (Array.isArray(cur)) {\r\n        const len = cur.length;\r\n        for (let i = 0; i < len; ++i) {\r\n          if (list.indexOf(path + '.' + i) === -1) {\r\n            list.push(path + '.' + i);\r\n            if (cur[i] != null && cur[i].$__) {\r\n              const modified = cur[i].modifiedPaths();\r\n              for (const childPath of modified) {\r\n                list.push(path + '.' + i + '.' + childPath);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        Object.keys(cur).\r\n          filter(function(key) {\r\n            return list.indexOf(path + '.' + key) === -1;\r\n          }).\r\n          forEach(function(key) {\r\n            list.push(path + '.' + key);\r\n          });\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }, []);\r\n};\r\n\r\n/**\r\n * Returns true if this document was modified, else false.\r\n *\r\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\r\n *\r\n * ####Example\r\n *\r\n *     doc.set('documents.0.title', 'changed');\r\n *     doc.isModified()                      // true\r\n *     doc.isModified('documents')           // true\r\n *     doc.isModified('documents.0.title')   // true\r\n *     doc.isModified('documents otherProp') // true\r\n *     doc.isDirectModified('documents')     // false\r\n *\r\n * @param {String} [path] optional\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.isModified = function(paths, modifiedPaths) {\r\n  if (paths) {\r\n    if (!Array.isArray(paths)) {\r\n      paths = paths.split(' ');\r\n    }\r\n    const modified = modifiedPaths || this.modifiedPaths();\r\n    const directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\r\n    const isModifiedChild = paths.some(function(path) {\r\n      return !!~modified.indexOf(path);\r\n    });\r\n    return isModifiedChild || paths.some(function(path) {\r\n      return directModifiedPaths.some(function(mod) {\r\n        return mod === path || path.startsWith(mod + '.');\r\n      });\r\n    });\r\n  }\r\n  return this.$__.activePaths.some('modify');\r\n};\r\n\r\n/**\r\n * Checks if a path is set to its default.\r\n *\r\n * ####Example\r\n *\r\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\r\n *     const m = new MyModel();\r\n *     m.$isDefault('name'); // true\r\n *\r\n * @memberOf Document\r\n * @instance\r\n * @method $isDefault\r\n * @param {String} [path]\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.$isDefault = function(path) {\r\n  return (path in this.$__.activePaths.states.default);\r\n};\r\n\r\n/**\r\n * Getter/setter, determines whether the document was removed or not.\r\n *\r\n * ####Example:\r\n *     product.remove(function (err, product) {\r\n *       product.$isDeleted(); // true\r\n *       product.remove(); // no-op, doesn't send anything to the db\r\n *\r\n *       product.$isDeleted(false);\r\n *       product.$isDeleted(); // false\r\n *       product.remove(); // will execute a remove against the db\r\n *     })\r\n *\r\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\r\n * @return {Boolean} whether mongoose thinks this doc is deleted.\r\n * @method $isDeleted\r\n * @memberOf Document\r\n * @instance\r\n * @api public\r\n */\r\n\r\nDocument.prototype.$isDeleted = function(val) {\r\n  if (arguments.length === 0) {\r\n    return !!this.$__.isDeleted;\r\n  }\r\n\r\n  this.$__.isDeleted = !!val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns true if `path` was directly set and modified, else false.\r\n *\r\n * ####Example\r\n *\r\n *     doc.set('documents.0.title', 'changed');\r\n *     doc.isDirectModified('documents.0.title') // true\r\n *     doc.isDirectModified('documents') // false\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.isDirectModified = function(path) {\r\n  return (path in this.$__.activePaths.states.modify);\r\n};\r\n\r\n/**\r\n * Checks if `path` was initialized.\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.isInit = function(path) {\r\n  return (path in this.$__.activePaths.states.init);\r\n};\r\n\r\n/**\r\n * Checks if `path` was selected in the source query which initialized this document.\r\n *\r\n * ####Example\r\n *\r\n *     Thing.findOne().select('name').exec(function (err, doc) {\r\n *        doc.isSelected('name') // true\r\n *        doc.isSelected('age')  // false\r\n *     })\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.isSelected = function isSelected(path) {\r\n  if (this.$__.selected) {\r\n    if (path === '_id') {\r\n      return this.$__.selected._id !== 0;\r\n    }\r\n\r\n    const paths = Object.keys(this.$__.selected);\r\n    let i = paths.length;\r\n    let inclusive = null;\r\n    let cur;\r\n\r\n    if (i === 1 && paths[0] === '_id') {\r\n      // only _id was selected.\r\n      return this.$__.selected._id === 0;\r\n    }\r\n\r\n    while (i--) {\r\n      cur = paths[i];\r\n      if (cur === '_id') {\r\n        continue;\r\n      }\r\n      if (!isDefiningProjection(this.$__.selected[cur])) {\r\n        continue;\r\n      }\r\n      inclusive = !!this.$__.selected[cur];\r\n      break;\r\n    }\r\n\r\n    if (inclusive === null) {\r\n      return true;\r\n    }\r\n\r\n    if (path in this.$__.selected) {\r\n      return inclusive;\r\n    }\r\n\r\n    i = paths.length;\r\n    const pathDot = path + '.';\r\n\r\n    while (i--) {\r\n      cur = paths[i];\r\n      if (cur === '_id') {\r\n        continue;\r\n      }\r\n\r\n      if (cur.startsWith(pathDot)) {\r\n        return inclusive || cur !== pathDot;\r\n      }\r\n\r\n      if (pathDot.startsWith(cur + '.')) {\r\n        return inclusive;\r\n      }\r\n    }\r\n\r\n    return !inclusive;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Checks if `path` was explicitly selected. If no projection, always returns\r\n * true.\r\n *\r\n * ####Example\r\n *\r\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\r\n *        doc.isDirectSelected('nested.name') // true\r\n *        doc.isDirectSelected('nested.otherName') // false\r\n *        doc.isDirectSelected('nested')  // false\r\n *     })\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\r\n  if (this.$__.selected) {\r\n    if (path === '_id') {\r\n      return this.$__.selected._id !== 0;\r\n    }\r\n\r\n    const paths = Object.keys(this.$__.selected);\r\n    let i = paths.length;\r\n    let inclusive = null;\r\n    let cur;\r\n\r\n    if (i === 1 && paths[0] === '_id') {\r\n      // only _id was selected.\r\n      return this.$__.selected._id === 0;\r\n    }\r\n\r\n    while (i--) {\r\n      cur = paths[i];\r\n      if (cur === '_id') {\r\n        continue;\r\n      }\r\n      if (!isDefiningProjection(this.$__.selected[cur])) {\r\n        continue;\r\n      }\r\n      inclusive = !!this.$__.selected[cur];\r\n      break;\r\n    }\r\n\r\n    if (inclusive === null) {\r\n      return true;\r\n    }\r\n\r\n    if (path in this.$__.selected) {\r\n      return inclusive;\r\n    }\r\n\r\n    return !inclusive;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Executes registered validation rules for this document.\r\n *\r\n * ####Note:\r\n *\r\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\r\n *\r\n * ####Example:\r\n *\r\n *     doc.validate(function (err) {\r\n *       if (err) handleError(err);\r\n *       else // validation passed\r\n *     });\r\n *\r\n * @param {Array|String} [pathsToValidate] list of paths to validate. If set, Mongoose will validate only the modified paths that are in the given list.\r\n * @param {Object} [options] internal options\r\n * @param {Boolean} [options.validateModifiedOnly=false] if `true` mongoose validates only modified paths.\r\n * @param {Function} [callback] optional callback called after validation completes, passing an error if one occurred\r\n * @return {Promise} Promise\r\n * @api public\r\n */\r\n\r\nDocument.prototype.validate = function(pathsToValidate, options, callback) {\r\n  let parallelValidate;\r\n  this.$op = 'validate';\r\n\r\n  if (this.ownerDocument != null) {\r\n    // Skip parallel validate check for subdocuments\r\n  } else if (this.$__.validating) {\r\n    parallelValidate = new ParallelValidateError(this, {\r\n      parentStack: options && options.parentStack,\r\n      conflictStack: this.$__.validating.stack\r\n    });\r\n  } else {\r\n    this.$__.validating = new ParallelValidateError(this, { parentStack: options && options.parentStack });\r\n  }\r\n\r\n  if (typeof pathsToValidate === 'function') {\r\n    callback = pathsToValidate;\r\n    options = null;\r\n    pathsToValidate = null;\r\n  } else if (typeof options === 'function') {\r\n    callback = options;\r\n    options = pathsToValidate;\r\n    pathsToValidate = null;\r\n  }\r\n\r\n  return promiseOrCallback(callback, cb => {\r\n    if (parallelValidate != null) {\r\n      return cb(parallelValidate);\r\n    }\r\n\r\n    this.$__validate(pathsToValidate, options, (error) => {\r\n      this.$op = null;\r\n      cb(error);\r\n    });\r\n  }, this.constructor.events);\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _evaluateRequiredFunctions(doc) {\r\n  Object.keys(doc.$__.activePaths.states.require).forEach(path => {\r\n    const p = doc.schema.path(path);\r\n\r\n    if (p != null && typeof p.originalRequiredValue === 'function') {\r\n      doc.$__.cachedRequired[path] = p.originalRequiredValue.call(doc);\r\n    }\r\n  });\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _getPathsToValidate(doc) {\r\n  const skipSchemaValidators = {};\r\n\r\n  _evaluateRequiredFunctions(doc);\r\n\r\n  // only validate required fields when necessary\r\n  let paths = new Set(Object.keys(doc.$__.activePaths.states.require).filter(function(path) {\r\n    if (!doc.isSelected(path) && !doc.isModified(path)) {\r\n      return false;\r\n    }\r\n    if (path in doc.$__.cachedRequired) {\r\n      return doc.$__.cachedRequired[path];\r\n    }\r\n    return true;\r\n  }));\r\n\r\n\r\n  Object.keys(doc.$__.activePaths.states.init).forEach(addToPaths);\r\n  Object.keys(doc.$__.activePaths.states.modify).forEach(addToPaths);\r\n  Object.keys(doc.$__.activePaths.states.default).forEach(addToPaths);\r\n  function addToPaths(p) { paths.add(p); }\r\n\r\n  const subdocs = doc.$__getAllSubdocs();\r\n  const modifiedPaths = doc.modifiedPaths();\r\n  for (const subdoc of subdocs) {\r\n    if (subdoc.$basePath) {\r\n      // Remove child paths for now, because we'll be validating the whole\r\n      // subdoc\r\n      for (const p of paths) {\r\n        if (p === null || p.startsWith(subdoc.$basePath + '.')) {\r\n          paths.delete(p);\r\n        }\r\n      }\r\n\r\n      if (doc.isModified(subdoc.$basePath, modifiedPaths) &&\r\n            !doc.isDirectModified(subdoc.$basePath) &&\r\n            !doc.$isDefault(subdoc.$basePath)) {\r\n        paths.add(subdoc.$basePath);\r\n\r\n        skipSchemaValidators[subdoc.$basePath] = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // from here on we're not removing items from paths\r\n\r\n  // gh-661: if a whole array is modified, make sure to run validation on all\r\n  // the children as well\r\n  for (const path of paths) {\r\n    const _pathType = doc.schema.path(path);\r\n    if (!_pathType ||\r\n        !_pathType.$isMongooseArray ||\r\n        // To avoid potential performance issues, skip doc arrays whose children\r\n        // are not required. `getPositionalPathType()` may be slow, so avoid\r\n        // it unless we have a case of #6364\r\n        (_pathType.$isMongooseDocumentArray && !get(_pathType, 'schemaOptions.required'))) {\r\n      continue;\r\n    }\r\n\r\n    const val = doc.$__getValue(path);\r\n    _pushNestedArrayPaths(val, paths, path);\r\n  }\r\n\r\n  function _pushNestedArrayPaths(val, paths, path) {\r\n    if (val != null) {\r\n      const numElements = val.length;\r\n      for (let j = 0; j < numElements; ++j) {\r\n        if (Array.isArray(val[j])) {\r\n          _pushNestedArrayPaths(val[j], paths, path + '.' + j);\r\n        } else {\r\n          paths.add(path + '.' + j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const flattenOptions = { skipArrays: true };\r\n  for (const pathToCheck of paths) {\r\n    if (doc.schema.nested[pathToCheck]) {\r\n      let _v = doc.$__getValue(pathToCheck);\r\n      if (isMongooseObject(_v)) {\r\n        _v = _v.toObject({ transform: false });\r\n      }\r\n      const flat = flatten(_v, pathToCheck, flattenOptions, doc.schema);\r\n      Object.keys(flat).forEach(addToPaths);\r\n    }\r\n  }\r\n\r\n\r\n  for (const path of paths) {\r\n    // Single nested paths (paths embedded under single nested subdocs) will\r\n    // be validated on their own when we call `validate()` on the subdoc itself.\r\n    // Re: gh-8468\r\n    if (doc.schema.singleNestedPaths.hasOwnProperty(path)) {\r\n      paths.delete(path);\r\n      continue;\r\n    }\r\n    const _pathType = doc.schema.path(path);\r\n    if (!_pathType || !_pathType.$isSchemaMap) {\r\n      continue;\r\n    }\r\n\r\n    const val = doc.$__getValue(path);\r\n    if (val == null) {\r\n      continue;\r\n    }\r\n    for (const key of val.keys()) {\r\n      paths.add(path + '.' + key);\r\n    }\r\n  }\r\n\r\n  paths = Array.from(paths);\r\n  return [paths, skipSchemaValidators];\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDocument.prototype.$__validate = function(pathsToValidate, options, callback) {\r\n  if (typeof pathsToValidate === 'function') {\r\n    callback = pathsToValidate;\r\n    options = null;\r\n    pathsToValidate = null;\r\n  } else if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n\r\n  const hasValidateModifiedOnlyOption = options &&\r\n      (typeof options === 'object') &&\r\n      ('validateModifiedOnly' in options);\r\n\r\n  let shouldValidateModifiedOnly;\r\n  if (hasValidateModifiedOnlyOption) {\r\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\r\n  } else {\r\n    shouldValidateModifiedOnly = this.schema.options.validateModifiedOnly;\r\n  }\r\n\r\n  const _this = this;\r\n  const _complete = () => {\r\n    let validationError = this.$__.validationError;\r\n    this.$__.validationError = undefined;\r\n\r\n    if (shouldValidateModifiedOnly && validationError != null) {\r\n      // Remove any validation errors that aren't from modified paths\r\n      const errors = Object.keys(validationError.errors);\r\n      for (const errPath of errors) {\r\n        if (!this.isModified(errPath)) {\r\n          delete validationError.errors[errPath];\r\n        }\r\n      }\r\n      if (Object.keys(validationError.errors).length === 0) {\r\n        validationError = void 0;\r\n      }\r\n    }\r\n\r\n    this.$__.cachedRequired = {};\r\n    this.emit('validate', _this);\r\n    this.constructor.emit('validate', _this);\r\n\r\n    this.$__.validating = null;\r\n    if (validationError) {\r\n      for (const key in validationError.errors) {\r\n        // Make sure cast errors persist\r\n        if (!this[documentArrayParent] &&\r\n            validationError.errors[key] instanceof MongooseError.CastError) {\r\n          this.invalidate(key, validationError.errors[key]);\r\n        }\r\n      }\r\n\r\n      return validationError;\r\n    }\r\n  };\r\n\r\n  // only validate required fields when necessary\r\n  const pathDetails = _getPathsToValidate(this);\r\n  let paths = shouldValidateModifiedOnly ?\r\n    pathDetails[0].filter((path) => this.isModified(path)) :\r\n    pathDetails[0];\r\n  const skipSchemaValidators = pathDetails[1];\r\n\r\n  if (Array.isArray(pathsToValidate)) {\r\n    paths = _handlePathsToValidate(paths, pathsToValidate);\r\n  }\r\n\r\n  if (paths.length === 0) {\r\n    return process.nextTick(function() {\r\n      const error = _complete();\r\n      if (error) {\r\n        return _this.schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\r\n          callback(error);\r\n        });\r\n      }\r\n      callback(null, _this);\r\n    });\r\n  }\r\n\r\n  const validated = {};\r\n  let total = 0;\r\n\r\n  const complete = function() {\r\n    const error = _complete();\r\n    if (error) {\r\n      return _this.schema.s.hooks.execPost('validate:error', _this, [_this], { error: error }, function(error) {\r\n        callback(error);\r\n      });\r\n    }\r\n    callback(null, _this);\r\n  };\r\n\r\n  const validatePath = function(path) {\r\n    if (path == null || validated[path]) {\r\n      return;\r\n    }\r\n\r\n    validated[path] = true;\r\n    total++;\r\n\r\n    process.nextTick(function() {\r\n      const schemaType = _this.schema.path(path);\r\n\r\n      if (!schemaType) {\r\n        return --total || complete();\r\n      }\r\n\r\n      // If user marked as invalid or there was a cast error, don't validate\r\n      if (!_this.$isValid(path)) {\r\n        --total || complete();\r\n        return;\r\n      }\r\n\r\n      let val = _this.$__getValue(path);\r\n\r\n      // If you `populate()` and get back a null value, required validators\r\n      // shouldn't fail (gh-8018). We should always fall back to the populated\r\n      // value.\r\n      let pop;\r\n      if (val == null && (pop = _this.populated(path))) {\r\n        val = pop;\r\n      }\r\n      const scope = path in _this.$__.pathsToScopes ?\r\n        _this.$__.pathsToScopes[path] :\r\n        _this;\r\n\r\n      const doValidateOptions = {\r\n        skipSchemaValidators: skipSchemaValidators[path],\r\n        path: path\r\n      };\r\n      schemaType.doValidate(val, function(err) {\r\n        if (err && (!schemaType.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\r\n          if (schemaType.$isSingleNested &&\r\n              err instanceof ValidationError &&\r\n              schemaType.schema.options.storeSubdocValidationError === false) {\r\n            return --total || complete();\r\n          }\r\n          _this.invalidate(path, err, undefined, true);\r\n        }\r\n        --total || complete();\r\n      }, scope, doValidateOptions);\r\n    });\r\n  };\r\n\r\n  const numPaths = paths.length;\r\n  for (let i = 0; i < numPaths; ++i) {\r\n    validatePath(paths[i]);\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _handlePathsToValidate(paths, pathsToValidate) {\r\n  const _pathsToValidate = new Set(pathsToValidate);\r\n  const parentPaths = new Map([]);\r\n  for (const path of pathsToValidate) {\r\n    if (path.indexOf('.') === -1) {\r\n      continue;\r\n    }\r\n    const pieces = path.split('.');\r\n    let cur = pieces[0];\r\n    for (let i = 1; i < pieces.length; ++i) {\r\n      // Since we skip subpaths under single nested subdocs to\r\n      // avoid double validation, we need to add back the\r\n      // single nested subpath if the user asked for it (gh-8626)\r\n      parentPaths.set(cur, path);\r\n      cur = cur + '.' + pieces[i];\r\n    }\r\n  }\r\n\r\n  const ret = [];\r\n  for (const path of paths) {\r\n    if (_pathsToValidate.has(path)) {\r\n      ret.push(path);\r\n    } else if (parentPaths.has(path)) {\r\n      ret.push(parentPaths.get(path));\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Executes registered validation rules (skipping asynchronous validators) for this document.\r\n *\r\n * ####Note:\r\n *\r\n * This method is useful if you need synchronous validation.\r\n *\r\n * ####Example:\r\n *\r\n *     const err = doc.validateSync();\r\n *     if (err) {\r\n *       handleError(err);\r\n *     } else {\r\n *       // validation passed\r\n *     }\r\n *\r\n * @param {Array|string} pathsToValidate only validate the given paths\r\n * @param {Object} [options] options for validation\r\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\r\n * @return {ValidationError|undefined} ValidationError if there are errors during validation, or undefined if there is no error.\r\n * @api public\r\n */\r\n\r\nDocument.prototype.validateSync = function(pathsToValidate, options) {\r\n  const _this = this;\r\n\r\n  const hasValidateModifiedOnlyOption = options &&\r\n      (typeof options === 'object') &&\r\n      ('validateModifiedOnly' in options);\r\n\r\n  let shouldValidateModifiedOnly;\r\n  if (hasValidateModifiedOnlyOption) {\r\n    shouldValidateModifiedOnly = !!options.validateModifiedOnly;\r\n  } else {\r\n    shouldValidateModifiedOnly = this.schema.options.validateModifiedOnly;\r\n  }\r\n\r\n  if (typeof pathsToValidate === 'string') {\r\n    pathsToValidate = pathsToValidate.split(' ');\r\n  }\r\n\r\n  // only validate required fields when necessary\r\n  const pathDetails = _getPathsToValidate(this);\r\n  let paths = shouldValidateModifiedOnly ?\r\n    pathDetails[0].filter((path) => this.isModified(path)) :\r\n    pathDetails[0];\r\n  const skipSchemaValidators = pathDetails[1];\r\n\r\n  if (Array.isArray(pathsToValidate)) {\r\n    paths = _handlePathsToValidate(paths, pathsToValidate);\r\n  }\r\n\r\n  const validating = {};\r\n\r\n  paths.forEach(function(path) {\r\n    if (validating[path]) {\r\n      return;\r\n    }\r\n\r\n    validating[path] = true;\r\n\r\n    const p = _this.schema.path(path);\r\n    if (!p) {\r\n      return;\r\n    }\r\n    if (!_this.$isValid(path)) {\r\n      return;\r\n    }\r\n\r\n    const val = _this.$__getValue(path);\r\n    const err = p.doValidateSync(val, _this, {\r\n      skipSchemaValidators: skipSchemaValidators[path],\r\n      path: path\r\n    });\r\n    if (err && (!p.$isMongooseDocumentArray || err.$isArrayValidatorError)) {\r\n      if (p.$isSingleNested &&\r\n          err instanceof ValidationError &&\r\n          p.schema.options.storeSubdocValidationError === false) {\r\n        return;\r\n      }\r\n      _this.invalidate(path, err, undefined, true);\r\n    }\r\n  });\r\n\r\n  const err = _this.$__.validationError;\r\n  _this.$__.validationError = undefined;\r\n  _this.emit('validate', _this);\r\n  _this.constructor.emit('validate', _this);\r\n\r\n  if (err) {\r\n    for (const key in err.errors) {\r\n      // Make sure cast errors persist\r\n      if (err.errors[key] instanceof MongooseError.CastError) {\r\n        _this.invalidate(key, err.errors[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return err;\r\n};\r\n\r\n/**\r\n * Marks a path as invalid, causing validation to fail.\r\n *\r\n * The `errorMsg` argument will become the message of the `ValidationError`.\r\n *\r\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\r\n *\r\n *     doc.invalidate('size', 'must be less than 20', 14);\r\n\r\n *     doc.validate(function (err) {\r\n *       console.log(err)\r\n *       // prints\r\n *       { message: 'Validation failed',\r\n *         name: 'ValidationError',\r\n *         errors:\r\n *          { size:\r\n *             { message: 'must be less than 20',\r\n *               name: 'ValidatorError',\r\n *               path: 'size',\r\n *               type: 'user defined',\r\n *               value: 14 } } }\r\n *     })\r\n *\r\n * @param {String} path the field to invalidate. For array elements, use the `array.i.field` syntax, where `i` is the 0-based index in the array.\r\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\r\n * @param {Object|String|Number|any} value optional invalid value\r\n * @param {String} [kind] optional `kind` property for the error\r\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\r\n * @api public\r\n */\r\n\r\nDocument.prototype.invalidate = function(path, err, val, kind) {\r\n  if (!this.$__.validationError) {\r\n    this.$__.validationError = new ValidationError(this);\r\n  }\r\n\r\n  if (this.$__.validationError.errors[path]) {\r\n    return;\r\n  }\r\n\r\n  if (!err || typeof err === 'string') {\r\n    err = new ValidatorError({\r\n      path: path,\r\n      message: err,\r\n      type: kind || 'user defined',\r\n      value: val\r\n    });\r\n  }\r\n\r\n  if (this.$__.validationError === err) {\r\n    return this.$__.validationError;\r\n  }\r\n\r\n  this.$__.validationError.addError(path, err);\r\n  return this.$__.validationError;\r\n};\r\n\r\n/**\r\n * Marks a path as valid, removing existing validation errors.\r\n *\r\n * @param {String} path the field to mark as valid\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n * @method $markValid\r\n */\r\n\r\nDocument.prototype.$markValid = function(path) {\r\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\r\n    return;\r\n  }\r\n\r\n  delete this.$__.validationError.errors[path];\r\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\r\n    this.$__.validationError = null;\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _markValidSubpaths(doc, path) {\r\n  if (!doc.$__.validationError) {\r\n    return;\r\n  }\r\n\r\n  const keys = Object.keys(doc.$__.validationError.errors);\r\n  for (const key of keys) {\r\n    if (key.startsWith(path + '.')) {\r\n      delete doc.$__.validationError.errors[key];\r\n    }\r\n  }\r\n  if (Object.keys(doc.$__.validationError.errors).length === 0) {\r\n    doc.$__.validationError = null;\r\n  }\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _checkImmutableSubpaths(subdoc, schematype, priorVal) {\r\n  const schema = schematype.schema;\r\n  if (schema == null) {\r\n    return;\r\n  }\r\n\r\n  for (const key of Object.keys(schema.paths)) {\r\n    const path = schema.paths[key];\r\n    if (path.$immutableSetter == null) {\r\n      continue;\r\n    }\r\n    const oldVal = priorVal == null ? void 0 : priorVal.$__getValue(key);\r\n    // Calling immutableSetter with `oldVal` even though it expects `newVal`\r\n    // is intentional. That's because `$immutableSetter` compares its param\r\n    // to the current value.\r\n    path.$immutableSetter.call(subdoc, oldVal);\r\n  }\r\n}\r\n\r\n/**\r\n * Saves this document by inserting a new document into the database if [document.isNew](/docs/api.html#document_Document-isNew) is `true`,\r\n * or sends an [updateOne](/docs/api.html#document_Document-updateOne) operation **only** with the modifications to the database, it does not replace the whole document in the latter case.\r\n *\r\n * ####Example:\r\n *\r\n *     product.sold = Date.now();\r\n *     product = await product.save();\r\n *\r\n * If save is successful, the returned promise will fulfill with the document\r\n * saved.\r\n *\r\n * ####Example:\r\n *\r\n *     const newProduct = await product.save();\r\n *     newProduct === product; // true\r\n *\r\n * @param {Object} [options] options optional options\r\n * @param {Session} [options.session=null] the [session](https://docs.mongodb.com/manual/reference/server-sessions/) associated with this save operation. If not specified, defaults to the [document's associated session](api.html#document_Document-$session).\r\n * @param {Object} [options.safe] (DEPRECATED) overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe). Use the `w` option instead.\r\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\r\n * @param {Boolean} [options.validateModifiedOnly=false] If `true`, Mongoose will only validate modified paths, as opposed to modified paths and `required` paths.\r\n * @param {Number|String} [options.w] set the [write concern](https://docs.mongodb.com/manual/reference/write-concern/#w-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\r\n * @param {Boolean} [options.j] set to true for MongoDB to wait until this `save()` has been [journaled before resolving the returned promise](https://docs.mongodb.com/manual/reference/write-concern/#j-option). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern)\r\n * @param {Number} [options.wtimeout] sets a [timeout for the write concern](https://docs.mongodb.com/manual/reference/write-concern/#wtimeout). Overrides the [schema-level `writeConcern` option](/docs/guide.html#writeConcern).\r\n * @param {Boolean} [options.checkKeys=true] the MongoDB driver prevents you from saving keys that start with '$' or contain '.' by default. Set this option to `false` to skip that check. See [restrictions on field names](https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names)\r\n * @param {Boolean} [options.timestamps=true] if `false` and [timestamps](./guide.html#timestamps) are enabled, skip timestamps for this `save()`.\r\n * @param {Function} [fn] optional callback\r\n * @method save\r\n * @memberOf Document\r\n * @instance\r\n * @throws {DocumentNotFoundError} if this [save updates an existing document](api.html#document_Document-isNew) but the document doesn't exist in the database. For example, you will get this error if the document is [deleted between when you retrieved the document and when you saved it](documents.html#updating).\r\n * @return {Promise|undefined} Returns undefined if used with callback or a Promise otherwise.\r\n * @api public\r\n * @see middleware http://mongoosejs.com/docs/middleware.html\r\n */\r\n\r\n/**\r\n * Checks if a path is invalid\r\n *\r\n * @param {String} path the field to check\r\n * @method $isValid\r\n * @memberOf Document\r\n * @instance\r\n * @api private\r\n */\r\n\r\nDocument.prototype.$isValid = function(path) {\r\n  return !this.$__.validationError || !this.$__.validationError.errors[path];\r\n};\r\n\r\n/**\r\n * Resets the internal modified state of this document.\r\n *\r\n * @api private\r\n * @return {Document}\r\n * @method $__reset\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__reset = function reset() {\r\n  let _this = this;\r\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\r\n\r\n  this.$__.activePaths\r\n    .map('init', 'modify', function(i) {\r\n      return _this.$__getValue(i);\r\n    })\r\n    .filter(function(val) {\r\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\r\n    })\r\n    .forEach(function(array) {\r\n      let i = array.length;\r\n      while (i--) {\r\n        const doc = array[i];\r\n        if (!doc) {\r\n          continue;\r\n        }\r\n        doc.$__reset();\r\n      }\r\n\r\n      _this.$__.activePaths.init(array.$path());\r\n\r\n      array[arrayAtomicsBackupSymbol] = array[arrayAtomicsSymbol];\r\n      array[arrayAtomicsSymbol] = {};\r\n    });\r\n\r\n  this.$__.activePaths.\r\n    map('init', 'modify', function(i) {\r\n      return _this.$__getValue(i);\r\n    }).\r\n    filter(function(val) {\r\n      return val && val.$isSingleNested;\r\n    }).\r\n    forEach(function(doc) {\r\n      doc.$__reset();\r\n      _this.$__.activePaths.init(doc.$basePath);\r\n    });\r\n\r\n  // clear atomics\r\n  this.$__dirty().forEach(function(dirt) {\r\n    const type = dirt.value;\r\n\r\n    if (type && type[arrayAtomicsSymbol]) {\r\n      type[arrayAtomicsBackupSymbol] = type[arrayAtomicsSymbol];\r\n      type[arrayAtomicsSymbol] = {};\r\n    }\r\n  });\r\n\r\n  this.$__.backup = {};\r\n  this.$__.backup.activePaths = {\r\n    modify: Object.assign({}, this.$__.activePaths.states.modify),\r\n    default: Object.assign({}, this.$__.activePaths.states.default)\r\n  };\r\n  this.$__.backup.validationError = this.$__.validationError;\r\n  this.$__.backup.errors = this.errors;\r\n\r\n  // Clear 'dirty' cache\r\n  this.$__.activePaths.clear('modify');\r\n  this.$__.activePaths.clear('default');\r\n  this.$__.validationError = undefined;\r\n  this.errors = undefined;\r\n  _this = this;\r\n  this.schema.requiredPaths().forEach(function(path) {\r\n    _this.$__.activePaths.require(path);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDocument.prototype.$__undoReset = function $__undoReset() {\r\n  if (this.$__.backup == null || this.$__.backup.activePaths == null) {\r\n    return;\r\n  }\r\n\r\n  this.$__.activePaths.states.modify = this.$__.backup.activePaths.modify;\r\n  this.$__.activePaths.states.default = this.$__.backup.activePaths.default;\r\n\r\n  this.$__.validationError = this.$__.backup.validationError;\r\n  this.errors = this.$__.backup.errors;\r\n\r\n  for (const dirt of this.$__dirty()) {\r\n    const type = dirt.value;\r\n\r\n    if (type && type[arrayAtomicsSymbol] && type[arrayAtomicsBackupSymbol]) {\r\n      type[arrayAtomicsSymbol] = type[arrayAtomicsBackupSymbol];\r\n    }\r\n  }\r\n\r\n  for (const subdoc of this.$__getAllSubdocs()) {\r\n    subdoc.$__undoReset();\r\n  }\r\n};\r\n\r\n/**\r\n * Returns this documents dirty paths / vals.\r\n *\r\n * @api private\r\n * @method $__dirty\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__dirty = function() {\r\n  const _this = this;\r\n\r\n  let all = this.$__.activePaths.map('modify', function(path) {\r\n    return {\r\n      path: path,\r\n      value: _this.$__getValue(path),\r\n      schema: _this.$__path(path)\r\n    };\r\n  });\r\n\r\n  // gh-2558: if we had to set a default and the value is not undefined,\r\n  // we have to save as well\r\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\r\n    if (path === '_id' || _this.$__getValue(path) == null) {\r\n      return;\r\n    }\r\n    return {\r\n      path: path,\r\n      value: _this.$__getValue(path),\r\n      schema: _this.$__path(path)\r\n    };\r\n  }));\r\n\r\n  // Sort dirty paths in a flat hierarchy.\r\n  all.sort(function(a, b) {\r\n    return (a.path < b.path ? -1 : (a.path > b.path ? 1 : 0));\r\n  });\r\n\r\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\r\n  const minimal = [];\r\n  let lastPath;\r\n  let top;\r\n\r\n  all.forEach(function(item) {\r\n    if (!item) {\r\n      return;\r\n    }\r\n    if (lastPath == null || item.path.indexOf(lastPath) !== 0) {\r\n      lastPath = item.path + '.';\r\n      minimal.push(item);\r\n      top = item;\r\n    } else if (top != null &&\r\n        top.value != null &&\r\n        top.value[arrayAtomicsSymbol] != null &&\r\n        top.value.hasAtomics()) {\r\n      // special case for top level MongooseArrays\r\n      // the `top` array itself and a sub path of `top` are being modified.\r\n      // the only way to honor all of both modifications is through a $set\r\n      // of entire array.\r\n      top.value[arrayAtomicsSymbol] = {};\r\n      top.value[arrayAtomicsSymbol].$set = top.value;\r\n    }\r\n  });\r\n\r\n  top = lastPath = null;\r\n  return minimal;\r\n};\r\n\r\n/**\r\n * Assigns/compiles `schema` into this documents prototype.\r\n *\r\n * @param {Schema} schema\r\n * @api private\r\n * @method $__setSchema\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__setSchema = function(schema) {\r\n  schema.plugin(idGetter, { deduplicate: true });\r\n  compile(schema.tree, this, undefined, schema.options);\r\n\r\n  // Apply default getters if virtual doesn't have any (gh-6262)\r\n  for (const key of Object.keys(schema.virtuals)) {\r\n    schema.virtuals[key]._applyDefaultGetters();\r\n  }\r\n\r\n  this.schema = schema;\r\n  this[documentSchemaSymbol] = schema;\r\n};\r\n\r\n\r\n/**\r\n * Get active path that were changed and are arrays\r\n *\r\n * @api private\r\n * @method $__getArrayPathsToValidate\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__getArrayPathsToValidate = function() {\r\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\r\n\r\n  // validate all document arrays.\r\n  return this.$__.activePaths\r\n    .map('init', 'modify', function(i) {\r\n      return this.$__getValue(i);\r\n    }.bind(this))\r\n    .filter(function(val) {\r\n      return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\r\n    }).reduce(function(seed, array) {\r\n      return seed.concat(array);\r\n    }, [])\r\n    .filter(function(doc) {\r\n      return doc;\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Get all subdocs (by bfs)\r\n *\r\n * @api private\r\n * @method $__getAllSubdocs\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__getAllSubdocs = function() {\r\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\r\n  Embedded = Embedded || require('./types/embedded');\r\n\r\n  function docReducer(doc, seed, path) {\r\n    let val = doc;\r\n    if (path) {\r\n      if (doc instanceof Document && doc[documentSchemaSymbol].paths[path]) {\r\n        val = doc._doc[path];\r\n      } else {\r\n        val = doc[path];\r\n      }\r\n    }\r\n    if (val instanceof Embedded) {\r\n      seed.push(val);\r\n    } else if (val instanceof Map) {\r\n      seed = Array.from(val.keys()).reduce(function(seed, path) {\r\n        return docReducer(val.get(path), seed, null);\r\n      }, seed);\r\n    } else if (val && val.$isSingleNested) {\r\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\r\n        return docReducer(val._doc, seed, path);\r\n      }, seed);\r\n      seed.push(val);\r\n    } else if (val && val.isMongooseDocumentArray) {\r\n      val.forEach(function _docReduce(doc) {\r\n        if (!doc || !doc._doc) {\r\n          return;\r\n        }\r\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\r\n          return docReducer(doc._doc, seed, path);\r\n        }, seed);\r\n        if (doc instanceof Embedded) {\r\n          seed.push(doc);\r\n        }\r\n      });\r\n    } else if (val instanceof Document && val.$__isNested) {\r\n      seed = Object.keys(val).reduce(function(seed, path) {\r\n        return docReducer(val, seed, path);\r\n      }, seed);\r\n    }\r\n    return seed;\r\n  }\r\n\r\n  const _this = this;\r\n  const subDocs = Object.keys(this._doc).reduce(function(seed, path) {\r\n    return docReducer(_this, seed, path);\r\n  }, []);\r\n\r\n  return subDocs;\r\n};\r\n\r\n/*!\r\n * Runs queued functions\r\n */\r\n\r\nfunction applyQueue(doc) {\r\n  const q = doc.schema && doc.schema.callQueue;\r\n  if (!q.length) {\r\n    return;\r\n  }\r\n\r\n  for (const pair of q) {\r\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\r\n      doc[pair[0]].apply(doc, pair[1]);\r\n    }\r\n  }\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDocument.prototype.$__handleReject = function handleReject(err) {\r\n  // emit on the Model if listening\r\n  if (this.listeners('error').length) {\r\n    this.emit('error', err);\r\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\r\n    this.constructor.emit('error', err);\r\n  }\r\n};\r\n\r\n/**\r\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\r\n *\r\n * @api private\r\n * @method $toObject\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$toObject = function(options, json) {\r\n  let defaultOptions = {\r\n    transform: true,\r\n    flattenDecimals: true\r\n  };\r\n\r\n  const path = json ? 'toJSON' : 'toObject';\r\n  const baseOptions = get(this, 'constructor.base.options.' + path, {});\r\n  const schemaOptions = get(this, 'schema.options', {});\r\n  // merge base default options with Schema's set default options if available.\r\n  // `clone` is necessary here because `utils.options` directly modifies the second input.\r\n  defaultOptions = utils.options(defaultOptions, clone(baseOptions));\r\n  defaultOptions = utils.options(defaultOptions, clone(schemaOptions[path] || {}));\r\n\r\n  // If options do not exist or is not an object, set it to empty object\r\n  options = utils.isPOJO(options) ? clone(options) : {};\r\n\r\n  if (!('flattenMaps' in options)) {\r\n    options.flattenMaps = defaultOptions.flattenMaps;\r\n  }\r\n\r\n  let _minimize;\r\n  if (options.minimize != null) {\r\n    _minimize = options.minimize;\r\n  } else if (defaultOptions.minimize != null) {\r\n    _minimize = defaultOptions.minimize;\r\n  } else {\r\n    _minimize = schemaOptions.minimize;\r\n  }\r\n\r\n  // The original options that will be passed to `clone()`. Important because\r\n  // `clone()` will recursively call `$toObject()` on embedded docs, so we\r\n  // need the original options the user passed in, plus `_isNested` and\r\n  // `_parentOptions` for checking whether we need to depopulate.\r\n  const cloneOptions = Object.assign(utils.clone(options), {\r\n    _isNested: true,\r\n    json: json,\r\n    minimize: _minimize\r\n  });\r\n\r\n  if (utils.hasUserDefinedProperty(options, 'getters')) {\r\n    cloneOptions.getters = options.getters;\r\n  }\r\n  if (utils.hasUserDefinedProperty(options, 'virtuals')) {\r\n    cloneOptions.virtuals = options.virtuals;\r\n  }\r\n\r\n  const depopulate = options.depopulate ||\r\n    get(options, '_parentOptions.depopulate', false);\r\n  // _isNested will only be true if this is not the top level document, we\r\n  // should never depopulate\r\n  if (depopulate && options._isNested && this.$__.wasPopulated) {\r\n    // populated paths that we set to a document\r\n    return clone(this._id, cloneOptions);\r\n  }\r\n\r\n  // merge default options with input options.\r\n  options = utils.options(defaultOptions, options);\r\n  options._isNested = true;\r\n  options.json = json;\r\n  options.minimize = _minimize;\r\n\r\n  cloneOptions._parentOptions = options;\r\n  cloneOptions._skipSingleNestedGetters = true;\r\n\r\n  const gettersOptions = Object.assign({}, cloneOptions);\r\n  gettersOptions._skipSingleNestedGetters = false;\r\n\r\n  // remember the root transform function\r\n  // to save it from being overwritten by sub-transform functions\r\n  const originalTransform = options.transform;\r\n\r\n  let ret = clone(this._doc, cloneOptions) || {};\r\n\r\n  if (options.getters) {\r\n    applyGetters(this, ret, gettersOptions);\r\n\r\n    if (options.minimize) {\r\n      ret = minimize(ret) || {};\r\n    }\r\n  }\r\n\r\n  if (options.virtuals || (options.getters && options.virtuals !== false)) {\r\n    applyVirtuals(this, ret, gettersOptions, options);\r\n  }\r\n\r\n  if (options.versionKey === false && this.schema.options.versionKey) {\r\n    delete ret[this.schema.options.versionKey];\r\n  }\r\n\r\n  let transform = options.transform;\r\n\r\n  // In the case where a subdocument has its own transform function, we need to\r\n  // check and see if the parent has a transform (options.transform) and if the\r\n  // child schema has a transform (this.schema.options.toObject) In this case,\r\n  // we need to adjust options.transform to be the child schema's transform and\r\n  // not the parent schema's\r\n  if (transform) {\r\n    applySchemaTypeTransforms(this, ret);\r\n  }\r\n\r\n  if (options.useProjection) {\r\n    omitDeselectedFields(this, ret);\r\n  }\r\n\r\n  if (transform === true || (schemaOptions.toObject && transform)) {\r\n    const opts = options.json ? schemaOptions.toJSON : schemaOptions.toObject;\r\n\r\n    if (opts) {\r\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\r\n    }\r\n  } else {\r\n    options.transform = originalTransform;\r\n  }\r\n\r\n  if (typeof transform === 'function') {\r\n    const xformed = transform(this, ret, options);\r\n    if (typeof xformed !== 'undefined') {\r\n      ret = xformed;\r\n    }\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Converts this document into a plain javascript object, ready for storage in MongoDB.\r\n *\r\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\r\n *\r\n * ####Options:\r\n *\r\n * - `getters` apply all getters (path and virtual getters), defaults to false\r\n * - `aliases` apply all aliases if `virtuals=true`, defaults to true\r\n * - `virtuals` apply virtual getters (can override `getters` option), defaults to false\r\n * - `minimize` remove empty objects, defaults to true\r\n * - `transform` a transform function to apply to the resulting document before returning\r\n * - `depopulate` depopulate any populated paths, replacing them with their original refs, defaults to false\r\n * - `versionKey` whether to include the version key, defaults to true\r\n * - `flattenMaps` convert Maps to POJOs. Useful if you want to JSON.stringify() the result of toObject(), defaults to false\r\n * - `useProjection` set to `true` to omit fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\r\n *\r\n * ####Getters/Virtuals\r\n *\r\n * Example of only applying path getters\r\n *\r\n *     doc.toObject({ getters: true, virtuals: false })\r\n *\r\n * Example of only applying virtual getters\r\n *\r\n *     doc.toObject({ virtuals: true })\r\n *\r\n * Example of applying both path and virtual getters\r\n *\r\n *     doc.toObject({ getters: true })\r\n *\r\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\r\n *\r\n *     schema.set('toObject', { virtuals: true })\r\n *\r\n * ####Transform\r\n *\r\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\r\n *\r\n * Transform functions receive three arguments\r\n *\r\n *     function (doc, ret, options) {}\r\n *\r\n * - `doc` The mongoose document which is being converted\r\n * - `ret` The plain object representation which has been converted\r\n * - `options` The options in use (either schema options or the options passed inline)\r\n *\r\n * ####Example\r\n *\r\n *     // specify the transform schema option\r\n *     if (!schema.options.toObject) schema.options.toObject = {};\r\n *     schema.options.toObject.transform = function (doc, ret, options) {\r\n *       // remove the _id of every document before returning the result\r\n *       delete ret._id;\r\n *       return ret;\r\n *     }\r\n *\r\n *     // without the transformation in the schema\r\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\r\n *\r\n *     // with the transformation\r\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\r\n *\r\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\r\n *\r\n *     if (!schema.options.toObject) schema.options.toObject = {};\r\n *     schema.options.toObject.transform = function (doc, ret, options) {\r\n *       return { movie: ret.name }\r\n *     }\r\n *\r\n *     // without the transformation in the schema\r\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\r\n *\r\n *     // with the transformation\r\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\r\n *\r\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\r\n *\r\n * Transformations may also be applied inline, overridding any transform set in the options:\r\n *\r\n *     function xform (doc, ret, options) {\r\n *       return { inline: ret.name, custom: true }\r\n *     }\r\n *\r\n *     // pass the transform as an inline option\r\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\r\n *\r\n * If you want to skip transformations, use `transform: false`:\r\n *\r\n *     schema.options.toObject.hide = '_id';\r\n *     schema.options.toObject.transform = function (doc, ret, options) {\r\n *       if (options.hide) {\r\n *         options.hide.split(' ').forEach(function (prop) {\r\n *           delete ret[prop];\r\n *         });\r\n *       }\r\n *       return ret;\r\n *     }\r\n *\r\n *     const doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\r\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\r\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\r\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\r\n *\r\n * If you pass a transform in `toObject()` options, Mongoose will apply the transform\r\n * to [subdocuments](/docs/subdocs.html) in addition to the top-level document.\r\n * Similarly, `transform: false` skips transforms for all subdocuments.\r\n * Note that this is behavior is different for transforms defined in the schema:\r\n * if you define a transform in `schema.options.toObject.transform`, that transform\r\n * will **not** apply to subdocuments.\r\n *\r\n *     const memberSchema = new Schema({ name: String, email: String });\r\n *     const groupSchema = new Schema({ members: [memberSchema], name: String, email });\r\n *     const Group = mongoose.model('Group', groupSchema);\r\n *\r\n *     const doc = new Group({\r\n *       name: 'Engineering',\r\n *       email: 'dev@mongoosejs.io',\r\n *       members: [{ name: 'Val', email: 'val@mongoosejs.io' }]\r\n *     });\r\n *\r\n *     // Removes `email` from both top-level document **and** array elements\r\n *     // { name: 'Engineering', members: [{ name: 'Val' }] }\r\n *     doc.toObject({ transform: (doc, ret) => { delete ret.email; return ret; } });\r\n *\r\n * Transforms, like all of these options, are also available for `toJSON`. See [this guide to `JSON.stringify()`](https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html) to learn why `toJSON()` and `toObject()` are separate functions.\r\n *\r\n * See [schema options](/docs/guide.html#toObject) for some more details.\r\n *\r\n * _During save, no custom options are applied to the document before being sent to the database._\r\n *\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.getters=false] if true, apply all getters, including virtuals\r\n * @param {Boolean} [options.virtuals=false] if true, apply virtuals, including aliases. Use `{ getters: true, virtuals: false }` to just apply getters, not virtuals\r\n * @param {Boolean} [options.aliases=true] if `options.virtuals = true`, you can set `options.aliases = false` to skip applying aliases. This option is a no-op if `options.virtuals = false`.\r\n * @param {Boolean} [options.minimize=true] if true, omit any empty objects from the output\r\n * @param {Function|null} [options.transform=null] if set, mongoose will call this function to allow you to transform the returned object\r\n * @param {Boolean} [options.depopulate=false] if true, replace any conventionally populated paths with the original id in the output. Has no affect on virtual populated paths.\r\n * @param {Boolean} [options.versionKey=true] if false, exclude the version key (`__v` by default) from the output\r\n * @param {Boolean} [options.flattenMaps=false] if true, convert Maps to POJOs. Useful if you want to `JSON.stringify()` the result of `toObject()`.\r\n * @param {Boolean} [options.useProjection=false] - If true, omits fields that are excluded in this document's projection. Unless you specified a projection, this will omit any field that has `select: false` in the schema.\r\n * @return {Object} js object\r\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.toObject = function(options) {\r\n  return this.$toObject(options);\r\n};\r\n\r\n/*!\r\n * Minimizes an object, removing undefined values and empty objects\r\n *\r\n * @param {Object} object to minimize\r\n * @return {Object}\r\n */\r\n\r\nfunction minimize(obj) {\r\n  const keys = Object.keys(obj);\r\n  let i = keys.length;\r\n  let hasKeys;\r\n  let key;\r\n  let val;\r\n\r\n  while (i--) {\r\n    key = keys[i];\r\n    val = obj[key];\r\n\r\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\r\n      obj[key] = minimize(val);\r\n    }\r\n\r\n    if (undefined === obj[key]) {\r\n      delete obj[key];\r\n      continue;\r\n    }\r\n\r\n    hasKeys = true;\r\n  }\r\n\r\n  return hasKeys\r\n    ? obj\r\n    : undefined;\r\n}\r\n\r\n/*!\r\n * Applies virtuals properties to `json`.\r\n */\r\n\r\nfunction applyVirtuals(self, json, options, toObjectOptions) {\r\n  const schema = self.schema;\r\n  const paths = Object.keys(schema.virtuals);\r\n  let i = paths.length;\r\n  const numPaths = i;\r\n  let path;\r\n  let assignPath;\r\n  let cur = self._doc;\r\n  let v;\r\n  const aliases = get(toObjectOptions, 'aliases', true);\r\n\r\n  if (!cur) {\r\n    return json;\r\n  }\r\n\r\n  options = options || {};\r\n  for (i = 0; i < numPaths; ++i) {\r\n    path = paths[i];\r\n\r\n    // Allow skipping aliases with `toObject({ virtuals: true, aliases: false })`\r\n    if (!aliases && schema.aliases.hasOwnProperty(path)) {\r\n      continue;\r\n    }\r\n\r\n    // We may be applying virtuals to a nested object, for example if calling\r\n    // `doc.nestedProp.toJSON()`. If so, the path we assign to, `assignPath`,\r\n    // will be a trailing substring of the `path`.\r\n    assignPath = path;\r\n    if (options.path != null) {\r\n      if (!path.startsWith(options.path + '.')) {\r\n        continue;\r\n      }\r\n      assignPath = path.substr(options.path.length + 1);\r\n    }\r\n    const parts = assignPath.split('.');\r\n    v = clone(self.get(path), options);\r\n    if (v === void 0) {\r\n      continue;\r\n    }\r\n    const plen = parts.length;\r\n    cur = json;\r\n    for (let j = 0; j < plen - 1; ++j) {\r\n      cur[parts[j]] = cur[parts[j]] || {};\r\n      cur = cur[parts[j]];\r\n    }\r\n    cur[parts[plen - 1]] = v;\r\n  }\r\n\r\n  return json;\r\n}\r\n\r\n/*!\r\n * Applies virtuals properties to `json`.\r\n *\r\n * @param {Document} self\r\n * @param {Object} json\r\n * @return {Object} `json`\r\n */\r\n\r\nfunction applyGetters(self, json, options) {\r\n  const schema = self.schema;\r\n  const paths = Object.keys(schema.paths);\r\n  let i = paths.length;\r\n  let path;\r\n  let cur = self._doc;\r\n  let v;\r\n\r\n  if (!cur) {\r\n    return json;\r\n  }\r\n\r\n  while (i--) {\r\n    path = paths[i];\r\n\r\n    const parts = path.split('.');\r\n    const plen = parts.length;\r\n    const last = plen - 1;\r\n    let branch = json;\r\n    let part;\r\n    cur = self._doc;\r\n\r\n    if (!self.isSelected(path)) {\r\n      continue;\r\n    }\r\n\r\n    for (let ii = 0; ii < plen; ++ii) {\r\n      part = parts[ii];\r\n      v = cur[part];\r\n      if (ii === last) {\r\n        const val = self.get(path);\r\n        branch[part] = clone(val, options);\r\n      } else if (v == null) {\r\n        if (part in cur) {\r\n          branch[part] = v;\r\n        }\r\n        break;\r\n      } else {\r\n        branch = branch[part] || (branch[part] = {});\r\n      }\r\n      cur = v;\r\n    }\r\n  }\r\n\r\n  return json;\r\n}\r\n\r\n/*!\r\n * Applies schema type transforms to `json`.\r\n *\r\n * @param {Document} self\r\n * @param {Object} json\r\n * @return {Object} `json`\r\n */\r\n\r\nfunction applySchemaTypeTransforms(self, json) {\r\n  const schema = self.schema;\r\n  const paths = Object.keys(schema.paths || {});\r\n  const cur = self._doc;\r\n\r\n  if (!cur) {\r\n    return json;\r\n  }\r\n\r\n  for (const path of paths) {\r\n    const schematype = schema.paths[path];\r\n    if (typeof schematype.options.transform === 'function') {\r\n      const val = self.get(path);\r\n      const transformedValue = schematype.options.transform.call(self, val);\r\n      throwErrorIfPromise(path, transformedValue);\r\n      json[path] = transformedValue;\r\n    } else if (schematype.$embeddedSchemaType != null &&\r\n        typeof schematype.$embeddedSchemaType.options.transform === 'function') {\r\n      const vals = [].concat(self.get(path));\r\n      const transform = schematype.$embeddedSchemaType.options.transform;\r\n      for (let i = 0; i < vals.length; ++i) {\r\n        const transformedValue = transform.call(self, vals[i]);\r\n        vals[i] = transformedValue;\r\n        throwErrorIfPromise(path, transformedValue);\r\n      }\r\n\r\n      json[path] = vals;\r\n    }\r\n  }\r\n\r\n  return json;\r\n}\r\n\r\nfunction throwErrorIfPromise(path, transformedValue) {\r\n  if (isPromise(transformedValue)) {\r\n    throw new Error('`transform` function must be synchronous, but the transform on path `' + path + '` returned a promise.');\r\n  }\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction omitDeselectedFields(self, json) {\r\n  const schema = self.schema;\r\n  const paths = Object.keys(schema.paths || {});\r\n  const cur = self._doc;\r\n\r\n  if (!cur) {\r\n    return json;\r\n  }\r\n\r\n  let selected = self.$__.selected;\r\n  if (selected === void 0) {\r\n    selected = {};\r\n    queryhelpers.applyPaths(selected, schema);\r\n  }\r\n  if (selected == null || Object.keys(selected).length === 0) {\r\n    return json;\r\n  }\r\n\r\n  for (const path of paths) {\r\n    if (selected[path] != null && !selected[path]) {\r\n      delete json[path];\r\n    }\r\n  }\r\n\r\n  return json;\r\n}\r\n\r\n/**\r\n * The return value of this method is used in calls to JSON.stringify(doc).\r\n *\r\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\r\n *\r\n *     schema.set('toJSON', { virtuals: true })\r\n *\r\n * See [schema options](/docs/guide.html#toJSON) for details.\r\n *\r\n * @param {Object} options\r\n * @return {Object}\r\n * @see Document#toObject #document_Document-toObject\r\n * @see JSON.stringify() in JavaScript https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript.html\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.toJSON = function(options) {\r\n  return this.$toObject(options, true);\r\n};\r\n\r\n/**\r\n * If this document is a subdocument or populated document, returns the document's\r\n * parent. Returns `undefined` otherwise.\r\n *\r\n * @api public\r\n * @method parent\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.parent = function() {\r\n  return this.$__.parent;\r\n};\r\n\r\n/**\r\n * Helper for console.log\r\n *\r\n * @api public\r\n * @method inspect\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.inspect = function(options) {\r\n  const isPOJO = utils.isPOJO(options);\r\n  let opts;\r\n  if (isPOJO) {\r\n    opts = options;\r\n    opts.minimize = false;\r\n  }\r\n  const ret = this.toObject(opts);\r\n\r\n  if (ret == null) {\r\n    // If `toObject()` returns null, `this` is still an object, so if `inspect()`\r\n    // prints out null this can cause some serious confusion. See gh-7942.\r\n    return 'MongooseDocument { ' + ret + ' }';\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\nif (inspect.custom) {\r\n  /*!\r\n  * Avoid Node deprecation warning DEP0079\r\n  */\r\n\r\n  Document.prototype[inspect.custom] = Document.prototype.inspect;\r\n}\r\n\r\n/**\r\n * Helper for console.log\r\n *\r\n * @api public\r\n * @method toString\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.toString = function() {\r\n  const ret = this.inspect();\r\n  if (typeof ret === 'string') {\r\n    return ret;\r\n  }\r\n  return inspect(ret);\r\n};\r\n\r\n/**\r\n * Returns true if the Document stores the same data as doc.\r\n *\r\n * Documents are considered equal when they have matching `_id`s, unless neither\r\n * document has an `_id`, in which case this function falls back to using\r\n * `deepEqual()`.\r\n *\r\n * @param {Document} doc a document to compare\r\n * @return {Boolean}\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.equals = function(doc) {\r\n  if (!doc) {\r\n    return false;\r\n  }\r\n\r\n  const tid = this.$__getValue('_id');\r\n  const docid = doc.$__ != null ? doc.$__getValue('_id') : doc;\r\n  if (!tid && !docid) {\r\n    return deepEqual(this, doc);\r\n  }\r\n  return tid && tid.equals\r\n    ? tid.equals(docid)\r\n    : tid === docid;\r\n};\r\n\r\n/**\r\n * Populates document references, executing the `callback` when complete.\r\n * If you want to use promises instead, use this function with\r\n * [`execPopulate()`](#document_Document-execPopulate)\r\n *\r\n * ####Example:\r\n *\r\n *     doc\r\n *     .populate('company')\r\n *     .populate({\r\n *       path: 'notes',\r\n *       match: /airline/,\r\n *       select: 'text',\r\n *       model: 'modelName'\r\n *       options: opts\r\n *     }, function (err, user) {\r\n *       assert(doc._id === user._id) // the document itself is passed\r\n *     })\r\n *\r\n *     // summary\r\n *     doc.populate(path)                   // not executed\r\n *     doc.populate(options);               // not executed\r\n *     doc.populate(path, callback)         // executed\r\n *     doc.populate(options, callback);     // executed\r\n *     doc.populate(callback);              // executed\r\n *     doc.populate(options).execPopulate() // executed, returns promise\r\n *\r\n *\r\n * ####NOTE:\r\n *\r\n * Population does not occur unless a `callback` is passed *or* you explicitly\r\n * call `execPopulate()`.\r\n * Passing the same path a second time will overwrite the previous path options.\r\n * See [Model.populate()](#model_Model.populate) for explaination of options.\r\n *\r\n * @see Model.populate #model_Model.populate\r\n * @see Document.execPopulate #document_Document-execPopulate\r\n * @param {String|Object} [path] The path to populate or an options object\r\n * @param {Function} [callback] When passed, population is invoked\r\n * @api public\r\n * @return {Document} this\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.populate = function populate() {\r\n  if (arguments.length === 0) {\r\n    return this;\r\n  }\r\n\r\n  const pop = this.$__.populate || (this.$__.populate = {});\r\n  const args = utils.args(arguments);\r\n  let fn;\r\n\r\n  if (typeof args[args.length - 1] === 'function') {\r\n    fn = args.pop();\r\n  }\r\n\r\n  // allow `doc.populate(callback)`\r\n  if (args.length) {\r\n    // use hash to remove duplicate paths\r\n    const res = utils.populate.apply(null, args);\r\n    for (const populateOptions of res) {\r\n      pop[populateOptions.path] = populateOptions;\r\n    }\r\n  }\r\n\r\n  if (fn) {\r\n    const paths = utils.object.vals(pop);\r\n    this.$__.populate = undefined;\r\n    let topLevelModel = this.constructor;\r\n    if (this.$__isNested) {\r\n      topLevelModel = this.$__[scopeSymbol].constructor;\r\n      const nestedPath = this.$__.nestedPath;\r\n      paths.forEach(function(populateOptions) {\r\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\r\n      });\r\n    }\r\n\r\n    // Use `$session()` by default if the document has an associated session\r\n    // See gh-6754\r\n    if (this.$session() != null) {\r\n      const session = this.$session();\r\n      paths.forEach(path => {\r\n        if (path.options == null) {\r\n          path.options = { session: session };\r\n          return;\r\n        }\r\n        if (!('session' in path.options)) {\r\n          path.options.session = session;\r\n        }\r\n      });\r\n    }\r\n\r\n    topLevelModel.populate(this, paths, fn);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Explicitly executes population and returns a promise. Useful for ES2015\r\n * integration.\r\n *\r\n * ####Example:\r\n *\r\n *     const promise = doc.\r\n *       populate('company').\r\n *       populate({\r\n *         path: 'notes',\r\n *         match: /airline/,\r\n *         select: 'text',\r\n *         model: 'modelName'\r\n *         options: opts\r\n *       }).\r\n *       execPopulate();\r\n *\r\n *     // summary\r\n *     doc.execPopulate().then(resolve, reject);\r\n *\r\n *   // you can also use doc.execPopulate(options) as a shorthand for\r\n *   // doc.populate(options).execPopulate()\r\n *\r\n *\r\n * ####Example:\r\n *   const promise = doc.execPopulate({ path: 'company', select: 'employees' });\r\n *\r\n *   // summary\r\n *   promise.then(resolve,reject);\r\n *\r\n * @see Document.populate #document_Document-populate\r\n * @api public\r\n * @param {Function} [callback] optional callback. If specified, a promise will **not** be returned\r\n * @return {Promise} promise that resolves to the document when population is done\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.execPopulate = function(callback) {\r\n  const isUsingShorthand = callback != null && typeof callback !== 'function';\r\n  if (isUsingShorthand) {\r\n    return this.populate.apply(this, arguments).execPopulate();\r\n  }\r\n\r\n  return promiseOrCallback(callback, cb => {\r\n    this.populate(cb);\r\n  }, this.constructor.events);\r\n};\r\n\r\n/**\r\n * Gets _id(s) used during population of the given `path`.\r\n *\r\n * ####Example:\r\n *\r\n *     Model.findOne().populate('author').exec(function (err, doc) {\r\n *       console.log(doc.author.name)         // Dr.Seuss\r\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\r\n *     })\r\n *\r\n * If the path was not populated, undefined is returned.\r\n *\r\n * @param {String} path\r\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\r\n * @memberOf Document\r\n * @instance\r\n * @api public\r\n */\r\n\r\nDocument.prototype.populated = function(path, val, options) {\r\n  // val and options are internal\r\n  if (val === null || val === void 0) {\r\n    if (!this.$__.populated) {\r\n      return undefined;\r\n    }\r\n    const v = this.$__.populated[path];\r\n    if (v) {\r\n      return v.value;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  // internal\r\n  if (val === true) {\r\n    if (!this.$__.populated) {\r\n      return undefined;\r\n    }\r\n    return this.$__.populated[path];\r\n  }\r\n\r\n  this.$__.populated || (this.$__.populated = {});\r\n  this.$__.populated[path] = { value: val, options: options };\r\n\r\n  // If this was a nested populate, make sure each populated doc knows\r\n  // about its populated children (gh-7685)\r\n  const pieces = path.split('.');\r\n  for (let i = 0; i < pieces.length - 1; ++i) {\r\n    const subpath = pieces.slice(0, i + 1).join('.');\r\n    const subdoc = this.get(subpath);\r\n    if (subdoc != null && subdoc.$__ != null && this.populated(subpath)) {\r\n      const rest = pieces.slice(i + 1).join('.');\r\n      subdoc.populated(rest, val, options);\r\n      // No need to continue because the above recursion should take care of\r\n      // marking the rest of the docs as populated\r\n      break;\r\n    }\r\n  }\r\n\r\n  return val;\r\n};\r\n\r\n/**\r\n * Takes a populated field and returns it to its unpopulated state.\r\n *\r\n * ####Example:\r\n *\r\n *     Model.findOne().populate('author').exec(function (err, doc) {\r\n *       console.log(doc.author.name); // Dr.Seuss\r\n *       console.log(doc.depopulate('author'));\r\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\r\n *     })\r\n *\r\n * If the path was not populated, this is a no-op.\r\n *\r\n * @param {String} path\r\n * @return {Document} this\r\n * @see Document.populate #document_Document-populate\r\n * @api public\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.depopulate = function(path) {\r\n  if (typeof path === 'string') {\r\n    path = path.split(' ');\r\n  }\r\n\r\n  let populatedIds;\r\n  const virtualKeys = this.$$populatedVirtuals ? Object.keys(this.$$populatedVirtuals) : [];\r\n  const populated = get(this, '$__.populated', {});\r\n\r\n  if (arguments.length === 0) {\r\n    // Depopulate all\r\n    for (const virtualKey of virtualKeys) {\r\n      delete this.$$populatedVirtuals[virtualKey];\r\n      delete this._doc[virtualKey];\r\n      delete populated[virtualKey];\r\n    }\r\n\r\n    const keys = Object.keys(populated);\r\n\r\n    for (const key of keys) {\r\n      populatedIds = this.populated(key);\r\n      if (!populatedIds) {\r\n        continue;\r\n      }\r\n      delete populated[key];\r\n      this.$set(key, populatedIds);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  for (const singlePath of path) {\r\n    populatedIds = this.populated(singlePath);\r\n    delete populated[singlePath];\r\n\r\n    if (virtualKeys.indexOf(singlePath) !== -1) {\r\n      delete this.$$populatedVirtuals[singlePath];\r\n      delete this._doc[singlePath];\r\n    } else if (populatedIds) {\r\n      this.$set(singlePath, populatedIds);\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Returns the full path to this document.\r\n *\r\n * @param {String} [path]\r\n * @return {String}\r\n * @api private\r\n * @method $__fullPath\r\n * @memberOf Document\r\n * @instance\r\n */\r\n\r\nDocument.prototype.$__fullPath = function(path) {\r\n  // overridden in SubDocuments\r\n  return path || '';\r\n};\r\n\r\n/**\r\n * Returns the changes that happened to the document\r\n * in the format that will be sent to MongoDB.\r\n *\r\n *  ###Example:\r\n *   const userSchema = new Schema({\r\n *     name: String,\r\n *     age: Number,\r\n *     country: String\r\n *   });\r\n *   const User = mongoose.model('User', userSchema);\r\n *   const user = await User.create({\r\n *     name: 'Hafez',\r\n *     age: 25,\r\n *     country: 'Egypt'\r\n *   });\r\n *\r\n *   // returns an empty object, no changes happened yet\r\n *   user.getChanges(); // { }\r\n *\r\n *   user.country = undefined;\r\n *   user.age = 26;\r\n *\r\n *   user.getChanges(); // { $set: { age: 26 }, { $unset: { country: 1 } } }\r\n *\r\n *   await user.save();\r\n *\r\n *   user.getChanges(); // { }\r\n *\r\n * @return {Object} changes\r\n */\r\n\r\nDocument.prototype.getChanges = function() {\r\n  const delta = this.$__delta();\r\n\r\n  const changes = delta ? delta[1] : {};\r\n  return changes;\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nDocument.ValidationError = ValidationError;\r\nmodule.exports = exports = Document;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/document.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/document.js	(date 499162500000)
@@ -1855,12 +1855,14 @@
     const isModifiedChild = paths.some(function(path) {
       return !!~modified.indexOf(path);
     });
+
     return isModifiedChild || paths.some(function(path) {
       return directModifiedPaths.some(function(mod) {
         return mod === path || path.startsWith(mod + '.');
       });
     });
   }
+
   return this.$__.activePaths.some('modify');
 };
 
Index: backend/templates/quince/views/article/article-add.dust
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{>\"layouts/dashboard-layout\"/}\r\n\r\n{<css}\r\n    <link rel=\"stylesheet\" href=\"css/article/wysiwyg-editor.css\">\r\n    <link rel=\"stylesheet\" href=\"css/article/article-add.css\">\r\n{/css}\r\n{<js}\r\n    <script src=\"js/general/wysiwyg-editor.js\"></script>\r\n    <script src=\"js/general/wysiwyg-image-manager.js\"></script>\r\n    <script src=\"js/general/wysiwyg-custom.js\"></script>\r\n    <script src=\"js/custom/main-error.js\"></script>\r\n    <script src=\"js/custom/error-handler.js\"></script>\r\n    <script src=\"js/article/article-add.js\"></script>\r\n    <script src=\"js/article/article-error.js\"></script>\r\n    <script src=\"js/general/form-ajax.js\"></script>\r\n    <script src=\"js/custom/uploader.js\"></script>\r\n    <script src=\"js/custom/tag.js\"></script>\r\n{/js}\r\n{<body}\r\n    <section>\r\n        <div class=\"error_info warning_error\">\r\n            <i class=\"fal fa-exclamation-circle\"></i>\r\n            <p></p>\r\n            <i class=\"fal fa-times\"></i>\r\n        </div>\r\n        <div class=\"main_field mb-5\">\r\n            <div class=\"container-fluid\">\r\n                <div class=\"row\">\r\n                    <div class=\"col-12 main_col\">\r\n                        <header class=\"header_field\">\r\n                            <h1>افزودن مقاله</h1>\r\n                            <h2>نوشتن مقاله جدید و منتشر کردن بر روی وبسایت</h2>\r\n                            <hr>\r\n                        </header>\r\n                        <div class=\"row dir-ltr\">\r\n                            <div class=\"col-8 offset-2\">\r\n                                <form name=\"article\" class=\"form_ajax text-right dir-rtl\" method=\"post\" action=\"\" autocomplete=\"off\" enctype=\"multipart/form-data\">\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_name\">نام مقاله</label>\r\n                                        <input type=\"text\" class=\"form-control main_form_design \" id=\"article_name\"  name=\"title_inp\">\r\n                                    </div>\r\n                                    <div class=\"form-group position-relative\">\r\n                                        <label for=\"article_photo\">عکس مقاله</label>\r\n                                        <span class=\"show_img mr-1\">(مشاهده عکس)</span>\r\n                                        <input type=\"file\" class=\"form-control chose_file_inp main_form_design fal ajax_file\" name=\"main_image\" id=\"article_photo\">\r\n                                        <div class=\"img_upload_field display_none\">\r\n                                            <img src=\"\" alt=\"\">\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_parent\">دسته</label>\r\n                                        <select class=\"form-control main_form_design select-category\" id=\"article_parent\" name=\"parent_inp\">\r\n                                            <option value=\"0\">-----</option>\r\n                                            {#parent_list}\r\n                                                <option value=\"{_id}\">{title}</option>\r\n                                            {/parent_list}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_child\">زیر دسته</label>\r\n                                        <select class=\"form-control main_form_design select-sub-category\" id=\"article_child\" name=\"child_inp\">\r\n                                            <option value=\"0\">-----</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_summary\">خلاصه مقاله</label>\r\n                                        <textarea class=\"form-control main_form_design\" id=\"article_summary\" name=\"summary_inp\"></textarea>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_textarea\">توضیحات مقاله</label>\r\n                                        <textarea class=\"form-control main_form_design\" id=\"article_textarea\" name=\"describe_inp\"></textarea>\r\n                                        <input type='file' name='fileupload' id='fileupload' style='display: none;'>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group position-relative\">\r\n                                        <label for=\"tags_field\">برچسب ها</label>\r\n                                        <input type=\"text\" class=\"form-control main_form_design \" id=\"tags_field\">\r\n                                        <button type=\"button\" class=\"btn add_tags\">\r\n                                            <i class=\"far fa-check\"></i>\r\n                                        </button>\r\n                                        <div class=\"tags_lable_field\">\r\n\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group \">\r\n                                        <label for=\"article_type\">نوع نمایش</label>\r\n                                        <select class=\"form-control main_form_design\" id=\"article_type\" name=\"type_inp\">\r\n                                            <option value=\"true\">فعال</option>\r\n                                            <option value=\"false\">غیر فعال</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    \r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"article_describe\">توضیحات کلیدی مقاله</label>\r\n                                        <textarea class=\"form-control main_form_design\" id=\"article_describe\" name=\"meta_describe_inp\"></textarea>\r\n                                    </div>\r\n                                    <button type=\"submit\" class=\"btn green_btn mt-3\" name=\"profile_private\">ثبت مقاله جدید</button>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n\r\n{/body}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/templates/quince/views/article/article-add.dust	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/templates/quince/views/article/article-add.dust	(date 1599624019200)
@@ -88,8 +88,8 @@
                                     <div class="form-group ">
                                         <label for="article_type">نوع نمایش</label>
                                         <select class="form-control main_form_design" id="article_type" name="type_inp">
-                                            <option value="true">فعال</option>
-                                            <option value="false">غیر فعال</option>
+                                            <option value="0">فعال</option>
+                                            <option value="1">غیر فعال</option>
                                         </select>
                                     </div>
                                     
Index: node_modules/mongoose/node_modules/mongodb/lib/core/auth/gssapi.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\nconst AuthProvider = require('./auth_provider').AuthProvider;\r\nconst retrieveKerberos = require('../utils').retrieveKerberos;\r\nlet kerberos;\r\n\r\nclass GSSAPI extends AuthProvider {\r\n  auth(authContext, callback) {\r\n    const connection = authContext.connection;\r\n    const credentials = authContext.credentials;\r\n\r\n    if (kerberos == null) {\r\n      try {\r\n        kerberos = retrieveKerberos();\r\n      } catch (e) {\r\n        return callback(e, null);\r\n      }\r\n    }\r\n\r\n    // TODO: Destructure this\r\n    const username = credentials.username;\r\n    const password = credentials.password;\r\n    const mechanismProperties = credentials.mechanismProperties;\r\n    const gssapiServiceName =\r\n      mechanismProperties['gssapiservicename'] ||\r\n      mechanismProperties['gssapiServiceName'] ||\r\n      'mongodb';\r\n\r\n    const MongoAuthProcess = kerberos.processes.MongoAuthProcess;\r\n    const authProcess = new MongoAuthProcess(\r\n      connection.host,\r\n      connection.port,\r\n      gssapiServiceName,\r\n      mechanismProperties\r\n    );\r\n\r\n    authProcess.init(username, password, err => {\r\n      if (err) return callback(err, false);\r\n\r\n      authProcess.transition('', (err, payload) => {\r\n        if (err) return callback(err, false);\r\n\r\n        const command = {\r\n          saslStart: 1,\r\n          mechanism: 'GSSAPI',\r\n          payload,\r\n          autoAuthorize: 1\r\n        };\r\n\r\n        connection.command('$external.$cmd', command, (err, result) => {\r\n          if (err) return callback(err, false);\r\n\r\n          const doc = result.result;\r\n          authProcess.transition(doc.payload, (err, payload) => {\r\n            if (err) return callback(err, false);\r\n            const command = {\r\n              saslContinue: 1,\r\n              conversationId: doc.conversationId,\r\n              payload\r\n            };\r\n\r\n            connection.command('$external.$cmd', command, (err, result) => {\r\n              if (err) return callback(err, false);\r\n\r\n              const doc = result.result;\r\n              authProcess.transition(doc.payload, (err, payload) => {\r\n                if (err) return callback(err, false);\r\n                const command = {\r\n                  saslContinue: 1,\r\n                  conversationId: doc.conversationId,\r\n                  payload\r\n                };\r\n\r\n                connection.command('$external.$cmd', command, (err, result) => {\r\n                  if (err) return callback(err, false);\r\n\r\n                  const response = result.result;\r\n                  authProcess.transition(null, err => {\r\n                    if (err) return callback(err, null);\r\n                    callback(null, response);\r\n                  });\r\n                });\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = GSSAPI;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/node_modules/mongodb/lib/core/auth/gssapi.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/node_modules/mongodb/lib/core/auth/gssapi.js	(date 499162500000)
@@ -1,91 +1,151 @@
 'use strict';
+const dns = require('dns');
+
 const AuthProvider = require('./auth_provider').AuthProvider;
 const retrieveKerberos = require('../utils').retrieveKerberos;
+const MongoError = require('../error').MongoError;
+
+const kGssapiClient = Symbol('GSSAPI_CLIENT');
 let kerberos;
 
 class GSSAPI extends AuthProvider {
-  auth(authContext, callback) {
-    const connection = authContext.connection;
+  prepare(handshakeDoc, authContext, callback) {
+    const host = authContext.options.host;
+    const port = authContext.options.port;
     const credentials = authContext.credentials;
-
+    if (!host || !port || !credentials) {
+      return callback(
+        new MongoError(
+          `Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${
+            credentials ? 'host' : 'credentials'
+          }.`
+        )
+      );
+    }
     if (kerberos == null) {
       try {
         kerberos = retrieveKerberos();
       } catch (e) {
-        return callback(e, null);
+        return callback(e);
       }
     }
-
-    // TODO: Destructure this
     const username = credentials.username;
     const password = credentials.password;
     const mechanismProperties = credentials.mechanismProperties;
-    const gssapiServiceName =
+    const serviceName =
       mechanismProperties['gssapiservicename'] ||
       mechanismProperties['gssapiServiceName'] ||
       'mongodb';
-
-    const MongoAuthProcess = kerberos.processes.MongoAuthProcess;
-    const authProcess = new MongoAuthProcess(
-      connection.host,
-      connection.port,
-      gssapiServiceName,
-      mechanismProperties
-    );
-
-    authProcess.init(username, password, err => {
-      if (err) return callback(err, false);
-
-      authProcess.transition('', (err, payload) => {
-        if (err) return callback(err, false);
+    performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {
+      if (err) return callback(err);
+      const initOptions = {};
+      if (password != null) {
+        Object.assign(initOptions, { user: username, password: password });
+      }
+      kerberos.initializeClient(
+        `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`,
+        initOptions,
+        (err, client) => {
+          if (err) return callback(new MongoError(err));
+          if (client == null) return callback();
+          this[kGssapiClient] = client;
+          callback(undefined, handshakeDoc);
+        }
+      );
+    });
+  }
+  auth(authContext, callback) {
+    const connection = authContext.connection;
+    const credentials = authContext.credentials;
+    if (credentials == null) return callback(new MongoError('credentials required'));
+    const username = credentials.username;
+    const client = this[kGssapiClient];
+    if (client == null) return callback(new MongoError('gssapi client missing'));
+    function externalCommand(command, cb) {
+      return connection.command('$external.$cmd', command, cb);
+    }
+    client.step('', (err, payload) => {
+      if (err) return callback(err);
+      externalCommand(saslStart(payload), (err, response) => {
+        const result = response.result;
+        if (err) return callback(err);
+        negotiate(client, 10, result.payload, (err, payload) => {
+          if (err) return callback(err);
+          externalCommand(saslContinue(payload, result.conversationId), (err, response) => {
+            const result = response.result;
+            if (err) return callback(err);
+            finalize(client, username, result.payload, (err, payload) => {
+              if (err) return callback(err);
+              externalCommand(
+                {
+                  saslContinue: 1,
+                  conversationId: result.conversationId,
+                  payload
+                },
+                (err, result) => {
+                  if (err) return callback(err);
+                  callback(undefined, result);
+                }
+              );
+            });
+          });
+        });
+      });
+    });
+  }
+}
+module.exports = GSSAPI;
 
-        const command = {
-          saslStart: 1,
-          mechanism: 'GSSAPI',
-          payload,
-          autoAuthorize: 1
-        };
-
-        connection.command('$external.$cmd', command, (err, result) => {
-          if (err) return callback(err, false);
-
-          const doc = result.result;
-          authProcess.transition(doc.payload, (err, payload) => {
-            if (err) return callback(err, false);
-            const command = {
-              saslContinue: 1,
-              conversationId: doc.conversationId,
-              payload
-            };
-
-            connection.command('$external.$cmd', command, (err, result) => {
-              if (err) return callback(err, false);
-
-              const doc = result.result;
-              authProcess.transition(doc.payload, (err, payload) => {
-                if (err) return callback(err, false);
-                const command = {
-                  saslContinue: 1,
-                  conversationId: doc.conversationId,
-                  payload
-                };
-
-                connection.command('$external.$cmd', command, (err, result) => {
-                  if (err) return callback(err, false);
-
-                  const response = result.result;
-                  authProcess.transition(null, err => {
-                    if (err) return callback(err, null);
-                    callback(null, response);
-                  });
-                });
-              });
-            });
-          });
-        });
-      });
-    });
-  }
+function saslStart(payload) {
+  return {
+    saslStart: 1,
+    mechanism: 'GSSAPI',
+    payload,
+    autoAuthorize: 1
+  };
+}
+function saslContinue(payload, conversationId) {
+  return {
+    saslContinue: 1,
+    conversationId,
+    payload
+  };
+}
+function negotiate(client, retries, payload, callback) {
+  client.step(payload, (err, response) => {
+    // Retries exhausted, raise error
+    if (err && retries === 0) return callback(err);
+    // Adjust number of retries and call step again
+    if (err) return negotiate(client, retries - 1, payload, callback);
+    // Return the payload
+    callback(undefined, response || '');
+  });
+}
+function finalize(client, user, payload, callback) {
+  // GSS Client Unwrap
+  client.unwrap(payload, (err, response) => {
+    if (err) return callback(err);
+    // Wrap the response
+    client.wrap(response || '', { user }, (err, wrapped) => {
+      if (err) return callback(err);
+      // Return the payload
+      callback(undefined, wrapped);
+    });
+  });
+}
+function performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {
+  const canonicalizeHostName =
+    typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean'
+      ? mechanismProperties.gssapiCanonicalizeHostName
+      : false;
+  if (!canonicalizeHostName) return callback(undefined, host);
+  // Attempt to resolve the host name
+  dns.resolveCname(host, (err, r) => {
+    if (err) return callback(err);
+    // Get the first resolve host id
+    if (Array.isArray(r) && r.length > 0) {
+      return callback(undefined, r[0]);
+    }
+    callback(undefined, host);
+  });
 }
-
-module.exports = GSSAPI;
Index: backend/backend-init.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>backend = express();\r\n\r\nbackend.disable('x-powered-by');\r\nbackend.use(express.static(`${config.app_dir}backend/templates/${config.backend_tmp}/assets`));\r\nbackend.set('views', `${config.app_dir}backend/templates/${config.backend_tmp}/views`);\r\n\r\nbackend_upload_dir = `${config.app_dir}backend/templates/${config.backend_tmp}/assets/media/`;\r\nbackend_allowd_urls = ['/login/', '/recovery/', '/recovery/verify/'];\r\nbackend_access = {\r\n    content : {\r\n        '/category/': 'دسته بندی',\r\n        '/article/': 'مقاله ها',\r\n        '/article/add/': 'مقاله ها',\r\n        '/article/list/': 'مقاله ها',\r\n        '/comments/': 'نظرات',\r\n        '/contacts/': 'تماس با ما',\r\n    },\r\n    management : {\r\n        '/groups/admins/': 'لیست مدیران',\r\n        '/groups/users/': 'لیست کاربران',\r\n        '/groups/access/': 'دسترسی ها',\r\n        '/groups/add/': 'افزودن مدیر جدید',\r\n    },\r\n    edit : {\r\n        'category/': 'ویرایش دسته ها',\r\n        'article/list/': 'ویرایش مقاله ها',\r\n        'groups/admins/': 'تنظیمات مدیران',\r\n        'groups/users/': 'تنظیمات کاربران',\r\n        'groups/access/': 'ویرایش دسترسی ها',\r\n        'comments/': 'ویرایش نظرات',\r\n        'contacts/': 'ویرایش تماس با ما',\r\n    }\r\n}\r\n\r\nbackend.locals.backend_url = config.backend_url;\r\nbackend.locals.frontend_url = config.frontend_url;\r\nbackend.locals.debug_mode = config.debug_mode;\r\nbackend.locals.captcha_url = config.captcha_url;\r\nbackend.locals.messages_status = false;\r\nbackend.locals.page_limit_slot = [5,10,20,50];\r\nbackend.locals.limit_page = 5;\r\nbackend.locals.limited_images_size = (config.image_limited_size/1024).toString();\r\nbackend.locals.backend_access = backend_access;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/backend-init.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/backend-init.js	(date 1599625351819)
@@ -12,14 +12,17 @@
         '/article/': 'مقاله ها',
         '/article/add/': 'مقاله ها',
         '/article/list/': 'مقاله ها',
-        '/comments/': 'نظرات',
-        '/contacts/': 'تماس با ما',
     },
     management : {
         '/groups/admins/': 'لیست مدیران',
         '/groups/users/': 'لیست کاربران',
         '/groups/access/': 'دسترسی ها',
         '/groups/add/': 'افزودن مدیر جدید',
+        '/files/': 'مدیریت فایل ها',
+    },
+    support : {
+        '/comments/': 'نظرات',
+        '/contacts/': 'تماس با ما',
     },
     edit : {
         'category/': 'ویرایش دسته ها',
@@ -27,8 +30,8 @@
         'groups/admins/': 'تنظیمات مدیران',
         'groups/users/': 'تنظیمات کاربران',
         'groups/access/': 'ویرایش دسترسی ها',
-        'comments/': 'ویرایش نظرات',
-        'contacts/': 'ویرایش تماس با ما',
+        'comments/': 'تنظیمات نظرات',
+        'contacts/': 'تنظیمات تماس با ما',
     }
 }
 
Index: node_modules/mongoose/lib/query.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nconst CastError = require('./error/cast');\r\nconst DocumentNotFoundError = require('./error/notFound');\r\nconst Kareem = require('kareem');\r\nconst MongooseError = require('./error/mongooseError');\r\nconst ObjectParameterError = require('./error/objectParameter');\r\nconst QueryCursor = require('./cursor/QueryCursor');\r\nconst ReadPreference = require('./driver').get().ReadPreference;\r\nconst applyGlobalMaxTimeMS = require('./helpers/query/applyGlobalMaxTimeMS');\r\nconst applyWriteConcern = require('./helpers/schema/applyWriteConcern');\r\nconst cast = require('./cast');\r\nconst castArrayFilters = require('./helpers/update/castArrayFilters');\r\nconst castUpdate = require('./helpers/query/castUpdate');\r\nconst completeMany = require('./helpers/query/completeMany');\r\nconst get = require('./helpers/get');\r\nconst promiseOrCallback = require('./helpers/promiseOrCallback');\r\nconst getDiscriminatorByValue = require('./helpers/discriminator/getDiscriminatorByValue');\r\nconst hasDollarKeys = require('./helpers/query/hasDollarKeys');\r\nconst helpers = require('./queryhelpers');\r\nconst isInclusive = require('./helpers/projection/isInclusive');\r\nconst mquery = require('mquery');\r\nconst parseProjection = require('./helpers/projection/parseProjection');\r\nconst selectPopulatedFields = require('./helpers/query/selectPopulatedFields');\r\nconst setDefaultsOnInsert = require('./helpers/setDefaultsOnInsert');\r\nconst slice = require('sliced');\r\nconst updateValidators = require('./helpers/updateValidators');\r\nconst util = require('util');\r\nconst utils = require('./utils');\r\nconst wrapThunk = require('./helpers/query/wrapThunk');\r\n\r\n/**\r\n * Query constructor used for building queries. You do not need\r\n * to instantiate a `Query` directly. Instead use Model functions like\r\n * [`Model.find()`](/docs/api.html#find_find).\r\n *\r\n * ####Example:\r\n *\r\n *     const query = MyModel.find(); // `query` is an instance of `Query`\r\n *     query.setOptions({ lean : true });\r\n *     query.collection(MyModel.collection);\r\n *     query.where('age').gte(21).exec(callback);\r\n *\r\n *     // You can instantiate a query directly. There is no need to do\r\n *     // this unless you're an advanced user with a very good reason to.\r\n *     const query = new mongoose.Query();\r\n *\r\n * @param {Object} [options]\r\n * @param {Object} [model]\r\n * @param {Object} [conditions]\r\n * @param {Object} [collection] Mongoose collection\r\n * @api public\r\n */\r\n\r\nfunction Query(conditions, options, model, collection) {\r\n  // this stuff is for dealing with custom queries created by #toConstructor\r\n  if (!this._mongooseOptions) {\r\n    this._mongooseOptions = {};\r\n  }\r\n  options = options || {};\r\n\r\n  this._transforms = [];\r\n  this._hooks = new Kareem();\r\n  this._executionCount = 0;\r\n\r\n  // this is the case where we have a CustomQuery, we need to check if we got\r\n  // options passed in, and if we did, merge them in\r\n  const keys = Object.keys(options);\r\n  for (const key of keys) {\r\n    this._mongooseOptions[key] = options[key];\r\n  }\r\n\r\n  if (collection) {\r\n    this.mongooseCollection = collection;\r\n  }\r\n\r\n  if (model) {\r\n    this.model = model;\r\n    this.schema = model.schema;\r\n  }\r\n\r\n  // this is needed because map reduce returns a model that can be queried, but\r\n  // all of the queries on said model should be lean\r\n  if (this.model && this.model._mapreduce) {\r\n    this.lean();\r\n  }\r\n\r\n  // inherit mquery\r\n  mquery.call(this, this.mongooseCollection, options);\r\n\r\n  if (conditions) {\r\n    this.find(conditions);\r\n  }\r\n\r\n  this.options = this.options || {};\r\n\r\n  // For gh-6880. mquery still needs to support `fields` by default for old\r\n  // versions of MongoDB\r\n  this.$useProjection = true;\r\n\r\n  const collation = get(this, 'schema.options.collation', null);\r\n  if (collation != null) {\r\n    this.options.collation = collation;\r\n  }\r\n}\r\n\r\n/*!\r\n * inherit mquery\r\n */\r\n\r\nQuery.prototype = new mquery;\r\nQuery.prototype.constructor = Query;\r\nQuery.base = mquery.prototype;\r\n\r\n/**\r\n * Flag to opt out of using `$geoWithin`.\r\n *\r\n *     mongoose.Query.use$geoWithin = false;\r\n *\r\n * MongoDB 2.4 deprecated the use of `$within`, replacing it with `$geoWithin`. Mongoose uses `$geoWithin` by default (which is 100% backward compatible with `$within`). If you are running an older version of MongoDB, set this flag to `false` so your `within()` queries continue to work.\r\n *\r\n * @see http://docs.mongodb.org/manual/reference/operator/geoWithin/\r\n * @default true\r\n * @property use$geoWithin\r\n * @memberOf Query\r\n * @receiver Query\r\n * @api public\r\n */\r\n\r\nQuery.use$geoWithin = mquery.use$geoWithin;\r\n\r\n/**\r\n * Converts this query to a customized, reusable query constructor with all arguments and options retained.\r\n *\r\n * ####Example\r\n *\r\n *     // Create a query for adventure movies and read from the primary\r\n *     // node in the replica-set unless it is down, in which case we'll\r\n *     // read from a secondary node.\r\n *     var query = Movie.find({ tags: 'adventure' }).read('primaryPreferred');\r\n *\r\n *     // create a custom Query constructor based off these settings\r\n *     var Adventure = query.toConstructor();\r\n *\r\n *     // Adventure is now a subclass of mongoose.Query and works the same way but with the\r\n *     // default query parameters and options set.\r\n *     Adventure().exec(callback)\r\n *\r\n *     // further narrow down our query results while still using the previous settings\r\n *     Adventure().where({ name: /^Life/ }).exec(callback);\r\n *\r\n *     // since Adventure is a stand-alone constructor we can also add our own\r\n *     // helper methods and getters without impacting global queries\r\n *     Adventure.prototype.startsWith = function (prefix) {\r\n *       this.where({ name: new RegExp('^' + prefix) })\r\n *       return this;\r\n *     }\r\n *     Object.defineProperty(Adventure.prototype, 'highlyRated', {\r\n *       get: function () {\r\n *         this.where({ rating: { $gt: 4.5 }});\r\n *         return this;\r\n *       }\r\n *     })\r\n *     Adventure().highlyRated.startsWith('Life').exec(callback)\r\n *\r\n * @return {Query} subclass-of-Query\r\n * @api public\r\n */\r\n\r\nQuery.prototype.toConstructor = function toConstructor() {\r\n  const model = this.model;\r\n  const coll = this.mongooseCollection;\r\n\r\n  const CustomQuery = function(criteria, options) {\r\n    if (!(this instanceof CustomQuery)) {\r\n      return new CustomQuery(criteria, options);\r\n    }\r\n    this._mongooseOptions = utils.clone(p._mongooseOptions);\r\n    Query.call(this, criteria, options || null, model, coll);\r\n  };\r\n\r\n  util.inherits(CustomQuery, model.Query);\r\n\r\n  // set inherited defaults\r\n  const p = CustomQuery.prototype;\r\n\r\n  p.options = {};\r\n\r\n  // Need to handle `sort()` separately because entries-style `sort()` syntax\r\n  // `sort([['prop1', 1]])` confuses mquery into losing the outer nested array.\r\n  // See gh-8159\r\n  const options = Object.assign({}, this.options);\r\n  if (options.sort != null) {\r\n    p.sort(options.sort);\r\n    delete options.sort;\r\n  }\r\n  p.setOptions(options);\r\n\r\n  p.op = this.op;\r\n  p._conditions = utils.clone(this._conditions);\r\n  p._fields = utils.clone(this._fields);\r\n  p._update = utils.clone(this._update, {\r\n    flattenDecimals: false\r\n  });\r\n  p._path = this._path;\r\n  p._distinct = this._distinct;\r\n  p._collection = this._collection;\r\n  p._mongooseOptions = this._mongooseOptions;\r\n\r\n  return CustomQuery;\r\n};\r\n\r\n/**\r\n * Specifies a javascript function or expression to pass to MongoDBs query system.\r\n *\r\n * ####Example\r\n *\r\n *     query.$where('this.comments.length === 10 || this.name.length === 5')\r\n *\r\n *     // or\r\n *\r\n *     query.$where(function () {\r\n *       return this.comments.length === 10 || this.name.length === 5;\r\n *     })\r\n *\r\n * ####NOTE:\r\n *\r\n * Only use `$where` when you have a condition that cannot be met using other MongoDB operators like `$lt`.\r\n * **Be sure to read about all of [its caveats](http://docs.mongodb.org/manual/reference/operator/where/) before using.**\r\n *\r\n * @see $where http://docs.mongodb.org/manual/reference/operator/where/\r\n * @method $where\r\n * @param {String|Function} js javascript string or function\r\n * @return {Query} this\r\n * @memberOf Query\r\n * @instance\r\n * @method $where\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `path` for use with chaining.\r\n *\r\n * ####Example\r\n *\r\n *     // instead of writing:\r\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\r\n *\r\n *     // we can instead write:\r\n *     User.where('age').gte(21).lte(65);\r\n *\r\n *     // passing query conditions is permitted\r\n *     User.find().where({ name: 'vonderful' })\r\n *\r\n *     // chaining\r\n *     User\r\n *     .where('age').gte(21).lte(65)\r\n *     .where('name', /^vonderful/i)\r\n *     .where('friends').slice(10)\r\n *     .exec(callback)\r\n *\r\n * @method where\r\n * @memberOf Query\r\n * @instance\r\n * @param {String|Object} [path]\r\n * @param {any} [val]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.slice = function() {\r\n  if (arguments.length === 0) {\r\n    return this;\r\n  }\r\n\r\n  this._validate('slice');\r\n\r\n  let path;\r\n  let val;\r\n\r\n  if (arguments.length === 1) {\r\n    const arg = arguments[0];\r\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\r\n      const keys = Object.keys(arg);\r\n      const numKeys = keys.length;\r\n      for (let i = 0; i < numKeys; ++i) {\r\n        this.slice(keys[i], arg[keys[i]]);\r\n      }\r\n      return this;\r\n    }\r\n    this._ensurePath('slice');\r\n    path = this._path;\r\n    val = arguments[0];\r\n  } else if (arguments.length === 2) {\r\n    if ('number' === typeof arguments[0]) {\r\n      this._ensurePath('slice');\r\n      path = this._path;\r\n      val = slice(arguments);\r\n    } else {\r\n      path = arguments[0];\r\n      val = arguments[1];\r\n    }\r\n  } else if (arguments.length === 3) {\r\n    path = arguments[0];\r\n    val = slice(arguments, 1);\r\n  }\r\n\r\n  const p = {};\r\n  p[path] = { $slice: val };\r\n  this.select(p);\r\n\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Specifies the complementary comparison value for paths specified with `where()`\r\n *\r\n * ####Example\r\n *\r\n *     User.where('age').equals(49);\r\n *\r\n *     // is the same as\r\n *\r\n *     User.where('age', 49);\r\n *\r\n * @method equals\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies arguments for an `$or` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\r\n *\r\n * @see $or http://docs.mongodb.org/manual/reference/operator/or/\r\n * @method or\r\n * @memberOf Query\r\n * @instance\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies arguments for a `$nor` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\r\n *\r\n * @see $nor http://docs.mongodb.org/manual/reference/operator/nor/\r\n * @method nor\r\n * @memberOf Query\r\n * @instance\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies arguments for a `$and` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.and([{ color: 'green' }, { status: 'ok' }])\r\n *\r\n * @method and\r\n * @memberOf Query\r\n * @instance\r\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$gt` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * ####Example\r\n *\r\n *     Thing.find().where('age').gt(21)\r\n *\r\n *     // or\r\n *     Thing.find().gt('age', 21)\r\n *\r\n * @method gt\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @see $gt http://docs.mongodb.org/manual/reference/operator/gt/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$gte` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method gte\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @see $gte http://docs.mongodb.org/manual/reference/operator/gte/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$lt` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method lt\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @see $lt http://docs.mongodb.org/manual/reference/operator/lt/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$lte` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method lte\r\n * @see $lte http://docs.mongodb.org/manual/reference/operator/lte/\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$ne` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @see $ne http://docs.mongodb.org/manual/reference/operator/ne/\r\n * @method ne\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies an `$in` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @see $in http://docs.mongodb.org/manual/reference/operator/in/\r\n * @method in\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies an `$nin` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @see $nin http://docs.mongodb.org/manual/reference/operator/nin/\r\n * @method nin\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies an `$all` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * ####Example:\r\n *\r\n *     MyModel.find().where('pets').all(['dog', 'cat', 'ferret']);\r\n *     // Equivalent:\r\n *     MyModel.find().all('pets', ['dog', 'cat', 'ferret']);\r\n *\r\n * @see $all http://docs.mongodb.org/manual/reference/operator/all/\r\n * @method all\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Array} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$size` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * ####Example\r\n *\r\n *     MyModel.where('tags').size(0).exec(function (err, docs) {\r\n *       if (err) return handleError(err);\r\n *\r\n *       assert(Array.isArray(docs));\r\n *       console.log('documents with 0 tags', docs);\r\n *     })\r\n *\r\n * @see $size http://docs.mongodb.org/manual/reference/operator/size/\r\n * @method size\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$regex` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @see $regex http://docs.mongodb.org/manual/reference/operator/regex/\r\n * @method regex\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {String|RegExp} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `maxDistance` query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\r\n * @method maxDistance\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$mod` condition, filters documents for documents whose\r\n * `path` property is a number that is equal to `remainder` modulo `divisor`.\r\n *\r\n * ####Example\r\n *\r\n *     // All find products whose inventory is odd\r\n *     Product.find().mod('inventory', [2, 1]);\r\n *     Product.find().where('inventory').mod([2, 1]);\r\n *     // This syntax is a little strange, but supported.\r\n *     Product.find().where('inventory').mod(2, 1);\r\n *\r\n * @method mod\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Array} val must be of length 2, first element is `divisor`, 2nd element is `remainder`.\r\n * @return {Query} this\r\n * @see $mod http://docs.mongodb.org/manual/reference/operator/mod/\r\n * @api public\r\n */\r\n\r\nQuery.prototype.mod = function() {\r\n  let val;\r\n  let path;\r\n\r\n  if (arguments.length === 1) {\r\n    this._ensurePath('mod');\r\n    val = arguments[0];\r\n    path = this._path;\r\n  } else if (arguments.length === 2 && !Array.isArray(arguments[1])) {\r\n    this._ensurePath('mod');\r\n    val = slice(arguments);\r\n    path = this._path;\r\n  } else if (arguments.length === 3) {\r\n    val = slice(arguments, 1);\r\n    path = arguments[0];\r\n  } else {\r\n    val = arguments[1];\r\n    path = arguments[0];\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n  conds.$mod = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies an `$exists` condition\r\n *\r\n * ####Example\r\n *\r\n *     // { name: { $exists: true }}\r\n *     Thing.where('name').exists()\r\n *     Thing.where('name').exists(true)\r\n *     Thing.find().exists('name')\r\n *\r\n *     // { name: { $exists: false }}\r\n *     Thing.where('name').exists(false);\r\n *     Thing.find().exists('name', false);\r\n *\r\n * @method exists\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @return {Query} this\r\n * @see $exists http://docs.mongodb.org/manual/reference/operator/exists/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies an `$elemMatch` condition\r\n *\r\n * ####Example\r\n *\r\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\r\n *\r\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\r\n *\r\n *     query.elemMatch('comment', function (elem) {\r\n *       elem.where('author').equals('autobot');\r\n *       elem.where('votes').gte(5);\r\n *     })\r\n *\r\n *     query.where('comment').elemMatch(function (elem) {\r\n *       elem.where({ author: 'autobot' });\r\n *       elem.where('votes').gte(5);\r\n *     })\r\n *\r\n * @method elemMatch\r\n * @memberOf Query\r\n * @instance\r\n * @param {String|Object|Function} path\r\n * @param {Object|Function} filter\r\n * @return {Query} this\r\n * @see $elemMatch http://docs.mongodb.org/manual/reference/operator/elemMatch/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Defines a `$within` or `$geoWithin` argument for geo-spatial queries.\r\n *\r\n * ####Example\r\n *\r\n *     query.where(path).within().box()\r\n *     query.where(path).within().circle()\r\n *     query.where(path).within().geometry()\r\n *\r\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\r\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\r\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\r\n *\r\n *     query.where('loc').within([], [], []) // polygon\r\n *     query.where('loc').within([], []) // box\r\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\r\n *\r\n * **MUST** be used after `where()`.\r\n *\r\n * ####NOTE:\r\n *\r\n * As of Mongoose 3.7, `$geoWithin` is always used for queries. To change this behavior, see [Query.use$geoWithin](#query_Query-use%2524geoWithin).\r\n *\r\n * ####NOTE:\r\n *\r\n * In Mongoose 3.7, `within` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\r\n *\r\n * @method within\r\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\r\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\r\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\r\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\r\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\r\n * @memberOf Query\r\n * @instance\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$slice` projection for an array.\r\n *\r\n * ####Example\r\n *\r\n *     query.slice('comments', 5)\r\n *     query.slice('comments', -5)\r\n *     query.slice('comments', [10, 5])\r\n *     query.where('comments').slice(5)\r\n *     query.where('comments').slice([-10, 5])\r\n *\r\n * @method slice\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Number} val number/range of elements to slice\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\r\n * @see $slice http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies the maximum number of documents the query will return.\r\n *\r\n * ####Example\r\n *\r\n *     query.limit(20)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method limit\r\n * @memberOf Query\r\n * @instance\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies the number of documents to skip.\r\n *\r\n * ####Example\r\n *\r\n *     query.skip(100).limit(20)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method skip\r\n * @memberOf Query\r\n * @instance\r\n * @param {Number} val\r\n * @see cursor.skip http://docs.mongodb.org/manual/reference/method/cursor.skip/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies the maxScan option.\r\n *\r\n * ####Example\r\n *\r\n *     query.maxScan(100)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method maxScan\r\n * @memberOf Query\r\n * @instance\r\n * @param {Number} val\r\n * @see maxScan http://docs.mongodb.org/manual/reference/operator/maxScan/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies the batchSize option.\r\n *\r\n * ####Example\r\n *\r\n *     query.batchSize(100)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method batchSize\r\n * @memberOf Query\r\n * @instance\r\n * @param {Number} val\r\n * @see batchSize http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies the `comment` option.\r\n *\r\n * ####Example\r\n *\r\n *     query.comment('login query')\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method comment\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} val\r\n * @see comment http://docs.mongodb.org/manual/reference/operator/comment/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies this query as a `snapshot` query.\r\n *\r\n * ####Example\r\n *\r\n *     query.snapshot() // true\r\n *     query.snapshot(true)\r\n *     query.snapshot(false)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method snapshot\r\n * @memberOf Query\r\n * @instance\r\n * @see snapshot http://docs.mongodb.org/manual/reference/operator/snapshot/\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Sets query hints.\r\n *\r\n * ####Example\r\n *\r\n *     query.hint({ indexA: 1, indexB: -1})\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method hint\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object} val a hint object\r\n * @return {Query} this\r\n * @see $hint http://docs.mongodb.org/manual/reference/operator/hint/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Get/set the current projection (AKA fields). Pass `null` to remove the\r\n * current projection.\r\n *\r\n * Unlike `projection()`, the `select()` function modifies the current\r\n * projection in place. This function overwrites the existing projection.\r\n *\r\n * ####Example:\r\n *\r\n *     const q = Model.find();\r\n *     q.projection(); // null\r\n *\r\n *     q.select('a b');\r\n *     q.projection(); // { a: 1, b: 1 }\r\n *\r\n *     q.projection({ c: 1 });\r\n *     q.projection(); // { c: 1 }\r\n *\r\n *     q.projection(null);\r\n *     q.projection(); // null\r\n *\r\n *\r\n * @method projection\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object|null} arg\r\n * @return {Object} the current projection\r\n * @api public\r\n */\r\n\r\nQuery.prototype.projection = function(arg) {\r\n  if (arguments.length === 0) {\r\n    return this._fields;\r\n  }\r\n\r\n  this._fields = {};\r\n  this._userProvidedFields = {};\r\n  this.select(arg);\r\n  return this._fields;\r\n};\r\n\r\n/**\r\n * Specifies which document fields to include or exclude (also known as the query \"projection\")\r\n *\r\n * When using string syntax, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included. Lastly, if a path is prefixed with `+`, it forces inclusion of the path, which is useful for paths excluded at the [schema level](/docs/api.html#schematype_SchemaType-select).\r\n *\r\n * A projection _must_ be either inclusive or exclusive. In other words, you must\r\n * either list the fields to include (which excludes all others), or list the fields\r\n * to exclude (which implies all other fields are included). The [`_id` field is the only exception because MongoDB includes it by default](https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/#suppress-id-field).\r\n *\r\n * ####Example\r\n *\r\n *     // include a and b, exclude other fields\r\n *     query.select('a b');\r\n *\r\n *     // exclude c and d, include other fields\r\n *     query.select('-c -d');\r\n *\r\n *     // Use `+` to override schema-level `select: false` without making the\r\n *     // projection inclusive.\r\n *     const schema = new Schema({\r\n *       foo: { type: String, select: false },\r\n *       bar: String\r\n *     });\r\n *     // ...\r\n *     query.select('+foo'); // Override foo's `select: false` without excluding `bar`\r\n *\r\n *     // or you may use object notation, useful when\r\n *     // you have keys already prefixed with a \"-\"\r\n *     query.select({ a: 1, b: 1 });\r\n *     query.select({ c: 0, d: 0 });\r\n *\r\n *\r\n * @method select\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object|String} arg\r\n * @return {Query} this\r\n * @see SchemaType\r\n * @api public\r\n */\r\n\r\nQuery.prototype.select = function select() {\r\n  let arg = arguments[0];\r\n  if (!arg) return this;\r\n  let i;\r\n\r\n  if (arguments.length !== 1) {\r\n    throw new Error('Invalid select: select only takes 1 argument');\r\n  }\r\n\r\n  this._validate('select');\r\n\r\n  const fields = this._fields || (this._fields = {});\r\n  const userProvidedFields = this._userProvidedFields || (this._userProvidedFields = {});\r\n\r\n  arg = parseProjection(arg);\r\n\r\n  if (utils.isObject(arg)) {\r\n    const keys = Object.keys(arg);\r\n    for (i = 0; i < keys.length; ++i) {\r\n      fields[keys[i]] = arg[keys[i]];\r\n      userProvidedFields[keys[i]] = arg[keys[i]];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  throw new TypeError('Invalid select() argument. Must be string or object.');\r\n};\r\n\r\n/**\r\n * _DEPRECATED_ Sets the slaveOk option.\r\n *\r\n * **Deprecated** in MongoDB 2.2 in favor of [read preferences](#query_Query-read).\r\n *\r\n * ####Example:\r\n *\r\n *     query.slaveOk() // true\r\n *     query.slaveOk(true)\r\n *     query.slaveOk(false)\r\n *\r\n * @method slaveOk\r\n * @memberOf Query\r\n * @instance\r\n * @deprecated use read() preferences instead if on mongodb >= 2.2\r\n * @param {Boolean} v defaults to true\r\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\r\n * @see slaveOk http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\r\n * @see read() #query_Query-read\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Determines the MongoDB nodes from which to read.\r\n *\r\n * ####Preferences:\r\n *\r\n *     primary - (default) Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\r\n *     secondary            Read from secondary if available, otherwise error.\r\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\r\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\r\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\r\n *\r\n * Aliases\r\n *\r\n *     p   primary\r\n *     pp  primaryPreferred\r\n *     s   secondary\r\n *     sp  secondaryPreferred\r\n *     n   nearest\r\n *\r\n * ####Example:\r\n *\r\n *     new Query().read('primary')\r\n *     new Query().read('p')  // same as primary\r\n *\r\n *     new Query().read('primaryPreferred')\r\n *     new Query().read('pp') // same as primaryPreferred\r\n *\r\n *     new Query().read('secondary')\r\n *     new Query().read('s')  // same as secondary\r\n *\r\n *     new Query().read('secondaryPreferred')\r\n *     new Query().read('sp') // same as secondaryPreferred\r\n *\r\n *     new Query().read('nearest')\r\n *     new Query().read('n')  // same as nearest\r\n *\r\n *     // read from secondaries with matching tags\r\n *     new Query().read('s', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }])\r\n *\r\n * Read more about how to use read preferrences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\r\n *\r\n * @method read\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} pref one of the listed preference options or aliases\r\n * @param {Array} [tags] optional tags for this query\r\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\r\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.read = function read(pref, tags) {\r\n  // first cast into a ReadPreference object to support tags\r\n  const read = new ReadPreference(pref, tags);\r\n  this.options.readPreference = read;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the [MongoDB session](https://docs.mongodb.com/manual/reference/server-sessions/)\r\n * associated with this query. Sessions are how you mark a query as part of a\r\n * [transaction](/docs/transactions.html).\r\n *\r\n * Calling `session(null)` removes the session from this query.\r\n *\r\n * ####Example:\r\n *\r\n *     const s = await mongoose.startSession();\r\n *     await mongoose.model('Person').findOne({ name: 'Axl Rose' }).session(s);\r\n *\r\n * @method session\r\n * @memberOf Query\r\n * @instance\r\n * @param {ClientSession} [session] from `await conn.startSession()`\r\n * @see Connection.prototype.startSession() /docs/api.html#connection_Connection-startSession\r\n * @see mongoose.startSession() /docs/api.html#mongoose_Mongoose-startSession\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.session = function session(v) {\r\n  if (v == null) {\r\n    delete this.options.session;\r\n  }\r\n  this.options.session = v;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\r\n * that must acknowledge this write before this write is considered successful.\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndReplace()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to the schema's [`writeConcern.w` option](/docs/guide.html#writeConcern)\r\n *\r\n * ####Example:\r\n *\r\n *     // The 'majority' option means the `deleteOne()` promise won't resolve\r\n *     // until the `deleteOne()` has propagated to the majority of the replica set\r\n *     await mongoose.model('Person').\r\n *       deleteOne({ name: 'Ned Stark' }).\r\n *       w('majority');\r\n *\r\n * @method w\r\n * @memberOf Query\r\n * @instance\r\n * @param {String|number} val 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.w = function w(val) {\r\n  if (val == null) {\r\n    delete this.options.w;\r\n  }\r\n  this.options.w = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Requests acknowledgement that this operation has been persisted to MongoDB's\r\n * on-disk journal.\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndReplace()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to the schema's [`writeConcern.j` option](/docs/guide.html#writeConcern)\r\n *\r\n * ####Example:\r\n *\r\n *     await mongoose.model('Person').deleteOne({ name: 'Ned Stark' }).j(true);\r\n *\r\n * @method j\r\n * @memberOf Query\r\n * @instance\r\n * @param {boolean} val\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.j = function j(val) {\r\n  if (val == null) {\r\n    delete this.options.j;\r\n  }\r\n  this.options.j = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * If [`w > 1`](/docs/api.html#query_Query-w), the maximum amount of time to\r\n * wait for this write to propagate through the replica set before this\r\n * operation fails. The default is `0`, which means no timeout.\r\n *\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndReplace()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to the schema's [`writeConcern.wtimeout` option](/docs/guide.html#writeConcern)\r\n *\r\n * ####Example:\r\n *\r\n *     // The `deleteOne()` promise won't resolve until this `deleteOne()` has\r\n *     // propagated to at least `w = 2` members of the replica set. If it takes\r\n *     // longer than 1 second, this `deleteOne()` will fail.\r\n *     await mongoose.model('Person').\r\n *       deleteOne({ name: 'Ned Stark' }).\r\n *       w(2).\r\n *       wtimeout(1000);\r\n *\r\n * @method wtimeout\r\n * @memberOf Query\r\n * @instance\r\n * @param {number} ms number of milliseconds to wait\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.wtimeout = function wtimeout(ms) {\r\n  if (ms == null) {\r\n    delete this.options.wtimeout;\r\n  }\r\n  this.options.wtimeout = ms;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the readConcern option for the query.\r\n *\r\n * ####Example:\r\n *\r\n *     new Query().readConcern('local')\r\n *     new Query().readConcern('l')  // same as local\r\n *\r\n *     new Query().readConcern('available')\r\n *     new Query().readConcern('a')  // same as available\r\n *\r\n *     new Query().readConcern('majority')\r\n *     new Query().readConcern('m')  // same as majority\r\n *\r\n *     new Query().readConcern('linearizable')\r\n *     new Query().readConcern('lz') // same as linearizable\r\n *\r\n *     new Query().readConcern('snapshot')\r\n *     new Query().readConcern('s')  // same as snapshot\r\n *\r\n *\r\n * ####Read Concern Level:\r\n *\r\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\r\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\r\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\r\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\r\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\r\n *\r\n * Aliases\r\n *\r\n *     l   local\r\n *     a   available\r\n *     m   majority\r\n *     lz  linearizable\r\n *     s   snapshot\r\n *\r\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\r\n *\r\n * @memberOf Query\r\n * @method readConcern\r\n * @param {String} level one of the listed read concern level or their aliases\r\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/**\r\n * Gets query options.\r\n *\r\n * ####Example:\r\n *\r\n *     var query = new Query();\r\n *     query.limit(10);\r\n *     query.setOptions({ maxTimeMS: 1000 })\r\n *     query.getOptions(); // { limit: 10, maxTimeMS: 1000 }\r\n *\r\n * @return {Object} the options\r\n * @api public\r\n */\r\n\r\nQuery.prototype.getOptions = function() {\r\n  return this.options;\r\n};\r\n\r\n/**\r\n * Sets query options. Some options only make sense for certain operations.\r\n *\r\n * ####Options:\r\n *\r\n * The following options are only for `find()`:\r\n *\r\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors)\r\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D)\r\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D)\r\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D)\r\n * - [maxscan](https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan)\r\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D)\r\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment)\r\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D)\r\n * - [readPreference](http://docs.mongodb.org/manual/applications/replication/#read-preference)\r\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint)\r\n *\r\n * The following options are only for write operations: `update()`, `updateOne()`, `updateMany()`, `replaceOne()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\r\n *\r\n * - [upsert](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\r\n * - [writeConcern](https://docs.mongodb.com/manual/reference/method/db.collection.update/)\r\n * - [timestamps](https://mongoosejs.com/docs/guide.html#timestamps): If `timestamps` is set in the schema, set this option to `false` to skip timestamps for that particular update. Has no effect if `timestamps` is not enabled in the schema options.\r\n * - omitUndefined: delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * - overwriteDiscriminatorKey: allow setting the discriminator key in the update. Will use the correct discriminator schema if the update changes the discriminator key.\r\n *\r\n * The following options are only for `find()`, `findOne()`, `findById()`, `findOneAndUpdate()`, and `findByIdAndUpdate()`:\r\n *\r\n * - [lean](./api.html#query_Query-lean)\r\n * - [populate](/docs/populate.html)\r\n * - [projection](/docs/api/query.html#query_Query-projection)\r\n *\r\n * The following options are only for all operations **except** `update()`, `updateOne()`, `updateMany()`, `remove()`, `deleteOne()`, and `deleteMany()`:\r\n *\r\n * - [maxTimeMS](https://docs.mongodb.com/manual/reference/operator/meta/maxTimeMS/)\r\n *\r\n * The following options are for `findOneAndUpdate()` and `findOneAndRemove()`\r\n *\r\n * - [useFindAndModify](/docs/deprecations.html#findandmodify)\r\n * - rawResult\r\n *\r\n * The following options are for all operations:\r\n *\r\n * - [collation](https://docs.mongodb.com/manual/reference/collation/)\r\n * - [session](https://docs.mongodb.com/manual/reference/server-sessions/)\r\n * - [explain](https://docs.mongodb.com/manual/reference/method/cursor.explain/)\r\n *\r\n * @param {Object} options\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.setOptions = function(options, overwrite) {\r\n  // overwrite is only for internal use\r\n  if (overwrite) {\r\n    // ensure that _mongooseOptions & options are two different objects\r\n    this._mongooseOptions = (options && utils.clone(options)) || {};\r\n    this.options = options || {};\r\n\r\n    if ('populate' in options) {\r\n      this.populate(this._mongooseOptions);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  if (options == null) {\r\n    return this;\r\n  }\r\n  if (typeof options !== 'object') {\r\n    throw new Error('Options must be an object, got \"' + options + '\"');\r\n  }\r\n\r\n  if (Array.isArray(options.populate)) {\r\n    const populate = options.populate;\r\n    delete options.populate;\r\n    const _numPopulate = populate.length;\r\n    for (let i = 0; i < _numPopulate; ++i) {\r\n      this.populate(populate[i]);\r\n    }\r\n  }\r\n\r\n  if ('useFindAndModify' in options) {\r\n    this._mongooseOptions.useFindAndModify = options.useFindAndModify;\r\n    delete options.useFindAndModify;\r\n  }\r\n  if ('omitUndefined' in options) {\r\n    this._mongooseOptions.omitUndefined = options.omitUndefined;\r\n    delete options.omitUndefined;\r\n  }\r\n  if ('setDefaultsOnInsert' in options) {\r\n    this._mongooseOptions.setDefaultsOnInsert = options.setDefaultsOnInsert;\r\n    delete options.setDefaultsOnInsert;\r\n  }\r\n  if ('overwriteDiscriminatorKey' in options) {\r\n    this._mongooseOptions.overwriteDiscriminatorKey = options.overwriteDiscriminatorKey;\r\n    delete options.overwriteDiscriminatorKey;\r\n  }\r\n\r\n  return Query.base.setOptions.call(this, options);\r\n};\r\n\r\n/**\r\n * Sets the [`explain` option](https://docs.mongodb.com/manual/reference/method/cursor.explain/),\r\n * which makes this query return detailed execution stats instead of the actual\r\n * query result. This method is useful for determining what index your queries\r\n * use.\r\n *\r\n * Calling `query.explain(v)` is equivalent to `query.setOption({ explain: v })`\r\n *\r\n * ####Example:\r\n *\r\n *     const query = new Query();\r\n *     const res = await query.find({ a: 1 }).explain('queryPlanner');\r\n *     console.log(res);\r\n *\r\n * @param {String} [verbose] The verbosity mode. Either 'queryPlanner', 'executionStats', or 'allPlansExecution'. The default is 'queryPlanner'\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.explain = function(verbose) {\r\n  if (arguments.length === 0) {\r\n    this.options.explain = true;\r\n    return this;\r\n  }\r\n  this.options.explain = verbose;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the [maxTimeMS](https://docs.mongodb.com/manual/reference/method/cursor.maxTimeMS/)\r\n * option. This will tell the MongoDB server to abort if the query or write op\r\n * has been running for more than `ms` milliseconds.\r\n *\r\n * Calling `query.maxTimeMS(v)` is equivalent to `query.setOption({ maxTimeMS: v })`\r\n *\r\n * ####Example:\r\n *\r\n *     const query = new Query();\r\n *     // Throws an error 'operation exceeded time limit' as long as there's\r\n *     // >= 1 doc in the queried collection\r\n *     const res = await query.find({ $where: 'sleep(1000) || true' }).maxTimeMS(100);\r\n *\r\n * @param {Number} [ms] The number of milliseconds\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.maxTimeMS = function(ms) {\r\n  this.options.maxTimeMS = ms;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns the current query filter (also known as conditions) as a POJO.\r\n *\r\n * ####Example:\r\n *\r\n *     const query = new Query();\r\n *     query.find({ a: 1 }).where('b').gt(2);\r\n *     query.getFilter(); // { a: 1, b: { $gt: 2 } }\r\n *\r\n * @return {Object} current query filter\r\n * @api public\r\n */\r\n\r\nQuery.prototype.getFilter = function() {\r\n  return this._conditions;\r\n};\r\n\r\n/**\r\n * Returns the current query filter. Equivalent to `getFilter()`.\r\n *\r\n * You should use `getFilter()` instead of `getQuery()` where possible. `getQuery()`\r\n * will likely be deprecated in a future release.\r\n *\r\n * ####Example:\r\n *\r\n *     var query = new Query();\r\n *     query.find({ a: 1 }).where('b').gt(2);\r\n *     query.getQuery(); // { a: 1, b: { $gt: 2 } }\r\n *\r\n * @return {Object} current query filter\r\n * @api public\r\n */\r\n\r\nQuery.prototype.getQuery = function() {\r\n  return this._conditions;\r\n};\r\n\r\n/**\r\n * Sets the query conditions to the provided JSON object.\r\n *\r\n * ####Example:\r\n *\r\n *     var query = new Query();\r\n *     query.find({ a: 1 })\r\n *     query.setQuery({ a: 2 });\r\n *     query.getQuery(); // { a: 2 }\r\n *\r\n * @param {Object} new query conditions\r\n * @return {undefined}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.setQuery = function(val) {\r\n  this._conditions = val;\r\n};\r\n\r\n/**\r\n * Returns the current update operations as a JSON object.\r\n *\r\n * ####Example:\r\n *\r\n *     var query = new Query();\r\n *     query.update({}, { $set: { a: 5 } });\r\n *     query.getUpdate(); // { $set: { a: 5 } }\r\n *\r\n * @return {Object} current update operations\r\n * @api public\r\n */\r\n\r\nQuery.prototype.getUpdate = function() {\r\n  return this._update;\r\n};\r\n\r\n/**\r\n * Sets the current update operation to new value.\r\n *\r\n * ####Example:\r\n *\r\n *     var query = new Query();\r\n *     query.update({}, { $set: { a: 5 } });\r\n *     query.setUpdate({ $set: { b: 6 } });\r\n *     query.getUpdate(); // { $set: { b: 6 } }\r\n *\r\n * @param {Object} new update operation\r\n * @return {undefined}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.setUpdate = function(val) {\r\n  this._update = val;\r\n};\r\n\r\n/**\r\n * Returns fields selection for this query.\r\n *\r\n * @method _fieldsForExec\r\n * @return {Object}\r\n * @api private\r\n * @receiver Query\r\n */\r\n\r\nQuery.prototype._fieldsForExec = function() {\r\n  return utils.clone(this._fields);\r\n};\r\n\r\n\r\n/**\r\n * Return an update document with corrected `$set` operations.\r\n *\r\n * @method _updateForExec\r\n * @api private\r\n * @receiver Query\r\n */\r\n\r\nQuery.prototype._updateForExec = function() {\r\n  const update = utils.clone(this._update, {\r\n    transform: false,\r\n    depopulate: true\r\n  });\r\n  const ops = Object.keys(update);\r\n  let i = ops.length;\r\n  const ret = {};\r\n\r\n  while (i--) {\r\n    const op = ops[i];\r\n\r\n    if (this.options.overwrite) {\r\n      ret[op] = update[op];\r\n      continue;\r\n    }\r\n\r\n    if ('$' !== op[0]) {\r\n      // fix up $set sugar\r\n      if (!ret.$set) {\r\n        if (update.$set) {\r\n          ret.$set = update.$set;\r\n        } else {\r\n          ret.$set = {};\r\n        }\r\n      }\r\n      ret.$set[op] = update[op];\r\n      ops.splice(i, 1);\r\n      if (!~ops.indexOf('$set')) ops.push('$set');\r\n    } else if ('$set' === op) {\r\n      if (!ret.$set) {\r\n        ret[op] = update[op];\r\n      }\r\n    } else {\r\n      ret[op] = update[op];\r\n    }\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Makes sure _path is set.\r\n *\r\n * @method _ensurePath\r\n * @param {String} method\r\n * @api private\r\n * @receiver Query\r\n */\r\n\r\n/**\r\n * Determines if `conds` can be merged using `mquery().merge()`\r\n *\r\n * @method canMerge\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object} conds\r\n * @return {Boolean}\r\n * @api private\r\n */\r\n\r\n/**\r\n * Returns default options for this query.\r\n *\r\n * @param {Model} model\r\n * @api private\r\n */\r\n\r\nQuery.prototype._optionsForExec = function(model) {\r\n  const options = utils.clone(this.options);\r\n\r\n  delete options.populate;\r\n  model = model || this.model;\r\n\r\n  if (!model) {\r\n    return options;\r\n  }\r\n\r\n  const safe = get(model, 'schema.options.safe', null);\r\n  if (!('safe' in options) && safe != null) {\r\n    setSafe(options, safe);\r\n  }\r\n\r\n  // Apply schema-level `writeConcern` option\r\n  applyWriteConcern(model.schema, options);\r\n\r\n  const readPreference = get(model, 'schema.options.read');\r\n  if (!('readPreference' in options) && readPreference) {\r\n    options.readPreference = readPreference;\r\n  }\r\n\r\n  if (options.upsert !== void 0) {\r\n    options.upsert = !!options.upsert;\r\n  }\r\n\r\n  return options;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nconst safeDeprecationWarning = 'Mongoose: the `safe` option is deprecated. ' +\r\n  'Use write concerns instead: http://bit.ly/mongoose-w';\r\n\r\nconst setSafe = util.deprecate(function setSafe(options, safe) {\r\n  options.safe = safe;\r\n}, safeDeprecationWarning);\r\n\r\n/**\r\n * Sets the lean option.\r\n *\r\n * Documents returned from queries with the `lean` option enabled are plain\r\n * javascript objects, not [Mongoose Documents](/api/document.html). They have no\r\n * `save` method, getters/setters, virtuals, or other Mongoose features.\r\n *\r\n * ####Example:\r\n *\r\n *     new Query().lean() // true\r\n *     new Query().lean(true)\r\n *     new Query().lean(false)\r\n *\r\n *     const docs = await Model.find().lean();\r\n *     docs[0] instanceof mongoose.Document; // false\r\n *\r\n * [Lean is great for high-performance, read-only cases](/docs/tutorials/lean.html),\r\n * especially when combined\r\n * with [cursors](/docs/queries.html#streaming).\r\n *\r\n * If you need virtuals, getters/setters, or defaults with `lean()`, you need\r\n * to use a plugin. See:\r\n *\r\n * - [mongoose-lean-virtuals](https://plugins.mongoosejs.io/plugins/lean-virtuals)\r\n * - [mongoose-lean-getters](https://plugins.mongoosejs.io/plugins/lean-getters)\r\n * - [mongoose-lean-defaults](https://www.npmjs.com/package/mongoose-lean-defaults)\r\n *\r\n * @param {Boolean|Object} bool defaults to true\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.lean = function(v) {\r\n  this._mongooseOptions.lean = arguments.length ? v : true;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns an object containing the Mongoose-specific options for this query,\r\n * including `lean` and `populate`.\r\n *\r\n * Mongoose-specific options are different from normal options (`sort`, `limit`, etc.)\r\n * because they are **not** sent to the MongoDB server.\r\n *\r\n * ####Example:\r\n *\r\n *     const q = new Query();\r\n *     q.mongooseOptions().lean; // undefined\r\n *\r\n *     q.lean();\r\n *     q.mongooseOptions().lean; // true\r\n *\r\n * This function is useful for writing [query middleware](/docs/middleware.html).\r\n * Below is a full list of properties the return value from this function may have:\r\n *\r\n * - `populate`\r\n * - `lean`\r\n * - `omitUndefined`\r\n * - `strict`\r\n * - `nearSphere`\r\n * - `useFindAndModify`\r\n *\r\n * @return {Object} Mongoose-specific options\r\n * @param public\r\n */\r\n\r\nQuery.prototype.mongooseOptions = function() {\r\n  return this._mongooseOptions;\r\n};\r\n\r\n/**\r\n * Adds a `$set` to this query's update without changing the operation.\r\n * This is useful for query middleware so you can add an update regardless\r\n * of whether you use `updateOne()`, `updateMany()`, `findOneAndUpdate()`, etc.\r\n *\r\n * ####Example:\r\n *\r\n *     // Updates `{ $set: { updatedAt: new Date() } }`\r\n *     new Query().updateOne({}, {}).set('updatedAt', new Date());\r\n *     new Query().updateMany({}, {}).set({ updatedAt: new Date() });\r\n *\r\n * @param {String|Object} path path or object of key/value pairs to set\r\n * @param {Any} [val] the value to set\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.set = function(path, val) {\r\n  if (typeof path === 'object') {\r\n    const keys = Object.keys(path);\r\n    for (const key of keys) {\r\n      this.set(key, path[key]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  this._update = this._update || {};\r\n  this._update.$set = this._update.$set || {};\r\n  this._update.$set[path] = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * For update operations, returns the value of a path in the update's `$set`.\r\n * Useful for writing getters/setters that can work with both update operations\r\n * and `save()`.\r\n *\r\n * ####Example:\r\n *\r\n *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });\r\n *     query.get('name'); // 'Jean-Luc Picard'\r\n *\r\n * @param {String|Object} path path or object of key/value pairs to set\r\n * @param {Any} [val] the value to set\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.get = function get(path) {\r\n  const update = this._update;\r\n  if (update == null) {\r\n    return void 0;\r\n  }\r\n  const $set = update.$set;\r\n  if ($set == null) {\r\n    return update[path];\r\n  }\r\n\r\n  if (utils.hasUserDefinedProperty(update, path)) {\r\n    return update[path];\r\n  }\r\n  if (utils.hasUserDefinedProperty($set, path)) {\r\n    return $set[path];\r\n  }\r\n\r\n  return void 0;\r\n};\r\n\r\n/**\r\n * Gets/sets the error flag on this query. If this flag is not null or\r\n * undefined, the `exec()` promise will reject without executing.\r\n *\r\n * ####Example:\r\n *\r\n *     Query().error(); // Get current error value\r\n *     Query().error(null); // Unset the current error\r\n *     Query().error(new Error('test')); // `exec()` will resolve with test\r\n *     Schema.pre('find', function() {\r\n *       if (!this.getQuery().userId) {\r\n *         this.error(new Error('Not allowed to query without setting userId'));\r\n *       }\r\n *     });\r\n *\r\n * Note that query casting runs **after** hooks, so cast errors will override\r\n * custom errors.\r\n *\r\n * ####Example:\r\n *     var TestSchema = new Schema({ num: Number });\r\n *     var TestModel = db.model('Test', TestSchema);\r\n *     TestModel.find({ num: 'not a number' }).error(new Error('woops')).exec(function(error) {\r\n *       // `error` will be a cast error because `num` failed to cast\r\n *     });\r\n *\r\n * @param {Error|null} err if set, `exec()` will fail fast before sending the query to MongoDB\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.error = function error(err) {\r\n  if (arguments.length === 0) {\r\n    return this._error;\r\n  }\r\n\r\n  this._error = err;\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nQuery.prototype._unsetCastError = function _unsetCastError() {\r\n  if (this._error != null && !(this._error instanceof CastError)) {\r\n    return;\r\n  }\r\n  return this.error(null);\r\n};\r\n\r\n/**\r\n * Getter/setter around the current mongoose-specific options for this query\r\n * Below are the current Mongoose-specific options.\r\n *\r\n * - `populate`: an array representing what paths will be populated. Should have one entry for each call to [`Query.prototype.populate()`](/docs/api.html#query_Query-populate)\r\n * - `lean`: if truthy, Mongoose will not [hydrate](/docs/api.html#model_Model.hydrate) any documents that are returned from this query. See [`Query.prototype.lean()`](/docs/api.html#query_Query-lean) for more information.\r\n * - `strict`: controls how Mongoose handles keys that aren't in the schema for updates. This option is `true` by default, which means Mongoose will silently strip any paths in the update that aren't in the schema. See the [`strict` mode docs](/docs/guide.html#strict) for more information.\r\n * - `strictQuery`: controls how Mongoose handles keys that aren't in the schema for the query `filter`. This option is `false` by default for backwards compatibility, which means Mongoose will allow `Model.find({ foo: 'bar' })` even if `foo` is not in the schema. See the [`strictQuery` docs](/docs/guide.html#strictQuery) for more information.\r\n * - `useFindAndModify`: used to work around the [`findAndModify()` deprecation warning](/docs/deprecations.html#findandmodify)\r\n * - `omitUndefined`: delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * - `nearSphere`: use `$nearSphere` instead of `near()`. See the [`Query.prototype.nearSphere()` docs](/docs/api.html#query_Query-nearSphere)\r\n *\r\n * Mongoose maintains a separate object for internal options because\r\n * Mongoose sends `Query.prototype.options` to the MongoDB server, and the\r\n * above options are not relevant for the MongoDB server.\r\n *\r\n * @param {Object} options if specified, overwrites the current options\r\n * @return {Object} the options\r\n * @api public\r\n */\r\n\r\nQuery.prototype.mongooseOptions = function(v) {\r\n  if (arguments.length > 0) {\r\n    this._mongooseOptions = v;\r\n  }\r\n  return this._mongooseOptions;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nQuery.prototype._castConditions = function() {\r\n  try {\r\n    this.cast(this.model);\r\n    this._unsetCastError();\r\n  } catch (err) {\r\n    this.error(err);\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _castArrayFilters(query) {\r\n  try {\r\n    castArrayFilters(query);\r\n  } catch (err) {\r\n    query.error(err);\r\n  }\r\n}\r\n\r\n/**\r\n * Thunk around find()\r\n *\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api private\r\n */\r\nQuery.prototype._find = wrapThunk(function(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return null;\r\n  }\r\n\r\n  callback = _wrapThunkCallback(this, callback);\r\n\r\n  this._applyPaths();\r\n  this._fields = this._castFields(this._fields);\r\n\r\n  const fields = this._fieldsForExec();\r\n  const mongooseOptions = this._mongooseOptions;\r\n  const _this = this;\r\n  const userProvidedFields = _this._userProvidedFields || {};\r\n\r\n  applyGlobalMaxTimeMS(this.options, this.model);\r\n\r\n  // Separate options to pass down to `completeMany()` in case we need to\r\n  // set a session on the document\r\n  const completeManyOptions = Object.assign({}, {\r\n    session: get(this, 'options.session', null)\r\n  });\r\n\r\n  const cb = (err, docs) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    if (docs.length === 0) {\r\n      return callback(null, docs);\r\n    }\r\n    if (this.options.explain) {\r\n      return callback(null, docs);\r\n    }\r\n\r\n    if (!mongooseOptions.populate) {\r\n      return mongooseOptions.lean ?\r\n        callback(null, docs) :\r\n        completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\r\n    }\r\n\r\n    const pop = helpers.preparePopulationOptionsMQ(_this, mongooseOptions);\r\n    completeManyOptions.populated = pop;\r\n    _this.model.populate(docs, pop, function(err, docs) {\r\n      if (err) return callback(err);\r\n      return mongooseOptions.lean ?\r\n        callback(null, docs) :\r\n        completeMany(_this.model, docs, fields, userProvidedFields, completeManyOptions, callback);\r\n    });\r\n  };\r\n\r\n  const options = this._optionsForExec();\r\n  options.projection = this._fieldsForExec();\r\n  const filter = this._conditions;\r\n\r\n  this._collection.find(filter, options, cb);\r\n  return null;\r\n});\r\n\r\n/**\r\n * Find all documents that match `selector`. The result will be an array of documents.\r\n *\r\n * If there are too many documents in the result to fit in memory, use\r\n * [`Query.prototype.cursor()`](api.html#query_Query-cursor)\r\n *\r\n * ####Example\r\n *\r\n *     // Using async/await\r\n *     const arr = await Movie.find({ year: { $gte: 1980, $lte: 1989 } });\r\n *\r\n *     // Using callbacks\r\n *     Movie.find({ year: { $gte: 1980, $lte: 1989 } }, function(err, arr) {});\r\n *\r\n * @param {Object|ObjectId} [filter] mongodb selector. If not specified, returns all documents.\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.find = function(conditions, callback) {\r\n  this.op = 'find';\r\n\r\n  if (typeof conditions === 'function') {\r\n    callback = conditions;\r\n    conditions = {};\r\n  }\r\n\r\n  conditions = utils.toObject(conditions);\r\n\r\n  if (mquery.canMerge(conditions)) {\r\n    this.merge(conditions);\r\n\r\n    prepareDiscriminatorCriteria(this);\r\n  } else if (conditions != null) {\r\n    this.error(new ObjectParameterError(conditions, 'filter', 'find'));\r\n  }\r\n\r\n  // if we don't have a callback, then just return the query object\r\n  if (!callback) {\r\n    return Query.base.find.call(this);\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Merges another Query or conditions object into this one.\r\n *\r\n * When a Query is passed, conditions, field selection and options are merged.\r\n *\r\n * @param {Query|Object} source\r\n * @return {Query} this\r\n */\r\n\r\nQuery.prototype.merge = function(source) {\r\n  if (!source) {\r\n    return this;\r\n  }\r\n\r\n  const opts = { overwrite: true };\r\n\r\n  if (source instanceof Query) {\r\n    // if source has a feature, apply it to ourselves\r\n\r\n    if (source._conditions) {\r\n      utils.merge(this._conditions, source._conditions, opts);\r\n    }\r\n\r\n    if (source._fields) {\r\n      this._fields || (this._fields = {});\r\n      utils.merge(this._fields, source._fields, opts);\r\n    }\r\n\r\n    if (source.options) {\r\n      this.options || (this.options = {});\r\n      utils.merge(this.options, source.options, opts);\r\n    }\r\n\r\n    if (source._update) {\r\n      this._update || (this._update = {});\r\n      utils.mergeClone(this._update, source._update);\r\n    }\r\n\r\n    if (source._distinct) {\r\n      this._distinct = source._distinct;\r\n    }\r\n\r\n    utils.merge(this._mongooseOptions, source._mongooseOptions);\r\n\r\n    return this;\r\n  }\r\n\r\n  // plain object\r\n  utils.merge(this._conditions, source, opts);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a collation to this op (MongoDB 3.4 and up)\r\n *\r\n * @param {Object} value\r\n * @return {Query} this\r\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\r\n * @api public\r\n */\r\n\r\nQuery.prototype.collation = function(value) {\r\n  if (this.options == null) {\r\n    this.options = {};\r\n  }\r\n  this.options.collation = value;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Hydrate a single doc from `findOne()`, `findOneAndUpdate()`, etc.\r\n *\r\n * @api private\r\n */\r\n\r\nQuery.prototype._completeOne = function(doc, res, callback) {\r\n  if (!doc && !this.options.rawResult) {\r\n    return callback(null, null);\r\n  }\r\n\r\n  const model = this.model;\r\n  const projection = utils.clone(this._fields);\r\n  const userProvidedFields = this._userProvidedFields || {};\r\n  // `populate`, `lean`\r\n  const mongooseOptions = this._mongooseOptions;\r\n  // `rawResult`\r\n  const options = this.options;\r\n\r\n  if (options.explain) {\r\n    return callback(null, doc);\r\n  }\r\n\r\n  if (!mongooseOptions.populate) {\r\n    return mongooseOptions.lean ?\r\n      _completeOneLean(doc, res, options, callback) :\r\n      completeOne(model, doc, res, options, projection, userProvidedFields,\r\n        null, callback);\r\n  }\r\n\r\n  const pop = helpers.preparePopulationOptionsMQ(this, this._mongooseOptions);\r\n  model.populate(doc, pop, (err, doc) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n    return mongooseOptions.lean ?\r\n      _completeOneLean(doc, res, options, callback) :\r\n      completeOne(model, doc, res, options, projection, userProvidedFields,\r\n        pop, callback);\r\n  });\r\n};\r\n\r\n/**\r\n * Thunk around findOne()\r\n *\r\n * @param {Function} [callback]\r\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\r\n * @api private\r\n */\r\n\r\nQuery.prototype._findOne = wrapThunk(function(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error()) {\r\n    callback(this.error());\r\n    return null;\r\n  }\r\n\r\n  this._applyPaths();\r\n  this._fields = this._castFields(this._fields);\r\n\r\n  applyGlobalMaxTimeMS(this.options, this.model);\r\n\r\n  // don't pass in the conditions because we already merged them in\r\n  Query.base.findOne.call(this, {}, (err, doc) => {\r\n    if (err) {\r\n      callback(err);\r\n      return null;\r\n    }\r\n\r\n    this._completeOne(doc, null, _wrapThunkCallback(this, callback));\r\n  });\r\n});\r\n\r\n/**\r\n * Declares the query a findOne operation. When executed, the first found document is passed to the callback.\r\n *\r\n * Passing a `callback` executes the query. The result of the query is a single document.\r\n *\r\n * * *Note:* `conditions` is optional, and if `conditions` is null or undefined,\r\n * mongoose will send an empty `findOne` command to MongoDB, which will return\r\n * an arbitrary document. If you're querying by `_id`, use `Model.findById()`\r\n * instead.\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `findOne()`\r\n *\r\n * ####Example\r\n *\r\n *     var query  = Kitten.where({ color: 'white' });\r\n *     query.findOne(function (err, kitten) {\r\n *       if (err) return handleError(err);\r\n *       if (kitten) {\r\n *         // doc may be null if no document matched\r\n *       }\r\n *     });\r\n *\r\n * @param {Object} [filter] mongodb selector\r\n * @param {Object} [projection] optional fields to return\r\n * @param {Object} [options] see [`setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\r\n * @param {Function} [callback] optional params are (error, document)\r\n * @return {Query} this\r\n * @see findOne http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\r\n * @see Query.select #query_Query-select\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOne = function(conditions, projection, options, callback) {\r\n  this.op = 'findOne';\r\n\r\n  if (typeof conditions === 'function') {\r\n    callback = conditions;\r\n    conditions = null;\r\n    projection = null;\r\n    options = null;\r\n  } else if (typeof projection === 'function') {\r\n    callback = projection;\r\n    options = null;\r\n    projection = null;\r\n  } else if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n\r\n  // make sure we don't send in the whole Document to merge()\r\n  conditions = utils.toObject(conditions);\r\n\r\n  if (options) {\r\n    this.setOptions(options);\r\n  }\r\n\r\n  if (projection) {\r\n    this.select(projection);\r\n  }\r\n\r\n  if (mquery.canMerge(conditions)) {\r\n    this.merge(conditions);\r\n\r\n    prepareDiscriminatorCriteria(this);\r\n  } else if (conditions != null) {\r\n    this.error(new ObjectParameterError(conditions, 'filter', 'findOne'));\r\n  }\r\n\r\n  if (!callback) {\r\n    // already merged in the conditions, don't need to send them in.\r\n    return Query.base.findOne.call(this);\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Thunk around count()\r\n *\r\n * @param {Function} [callback]\r\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\r\n * @api private\r\n */\r\n\r\nQuery.prototype._count = wrapThunk(function(callback) {\r\n  try {\r\n    this.cast(this.model);\r\n  } catch (err) {\r\n    this.error(err);\r\n  }\r\n\r\n  if (this.error()) {\r\n    return callback(this.error());\r\n  }\r\n\r\n  const conds = this._conditions;\r\n  const options = this._optionsForExec();\r\n\r\n  this._collection.count(conds, options, utils.tick(callback));\r\n});\r\n\r\n/**\r\n * Thunk around countDocuments()\r\n *\r\n * @param {Function} [callback]\r\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\r\n * @api private\r\n */\r\n\r\nQuery.prototype._countDocuments = wrapThunk(function(callback) {\r\n  try {\r\n    this.cast(this.model);\r\n  } catch (err) {\r\n    this.error(err);\r\n  }\r\n\r\n  if (this.error()) {\r\n    return callback(this.error());\r\n  }\r\n\r\n  const conds = this._conditions;\r\n  const options = this._optionsForExec();\r\n\r\n  this._collection.collection.countDocuments(conds, options, utils.tick(callback));\r\n});\r\n\r\n/**\r\n * Thunk around estimatedDocumentCount()\r\n *\r\n * @param {Function} [callback]\r\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\r\n * @api private\r\n */\r\n\r\nQuery.prototype._estimatedDocumentCount = wrapThunk(function(callback) {\r\n  if (this.error()) {\r\n    return callback(this.error());\r\n  }\r\n\r\n  const options = this._optionsForExec();\r\n\r\n  this._collection.collection.estimatedDocumentCount(options, utils.tick(callback));\r\n});\r\n\r\n/**\r\n * Specifies this query as a `count` query.\r\n *\r\n * This method is deprecated. If you want to count the number of documents in\r\n * a collection, e.g. `count({})`, use the [`estimatedDocumentCount()` function](/docs/api.html#query_Query-estimatedDocumentCount)\r\n * instead. Otherwise, use the [`countDocuments()`](/docs/api.html#query_Query-countDocuments) function instead.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `count()`\r\n *\r\n * ####Example:\r\n *\r\n *     var countQuery = model.where({ 'color': 'black' }).count();\r\n *\r\n *     query.count({ color: 'black' }).count(callback)\r\n *\r\n *     query.count({ color: 'black' }, callback)\r\n *\r\n *     query.where('color', 'black').count(function (err, count) {\r\n *       if (err) return handleError(err);\r\n *       console.log('there are %d kittens', count);\r\n *     })\r\n *\r\n * @deprecated\r\n * @param {Object} [filter] count documents that match this object\r\n * @param {Function} [callback] optional params are (error, count)\r\n * @return {Query} this\r\n * @see count http://docs.mongodb.org/manual/reference/method/db.collection.count/\r\n * @api public\r\n */\r\n\r\nQuery.prototype.count = function(filter, callback) {\r\n  this.op = 'count';\r\n  if (typeof filter === 'function') {\r\n    callback = filter;\r\n    filter = undefined;\r\n  }\r\n\r\n  filter = utils.toObject(filter);\r\n\r\n  if (mquery.canMerge(filter)) {\r\n    this.merge(filter);\r\n  }\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies this query as a `estimatedDocumentCount()` query. Faster than\r\n * using `countDocuments()` for large collections because\r\n * `estimatedDocumentCount()` uses collection metadata rather than scanning\r\n * the entire collection.\r\n *\r\n * `estimatedDocumentCount()` does **not** accept a filter. `Model.find({ foo: bar }).estimatedDocumentCount()`\r\n * is equivalent to `Model.find().estimatedDocumentCount()`\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `estimatedDocumentCount()`\r\n *\r\n * ####Example:\r\n *\r\n *     await Model.find().estimatedDocumentCount();\r\n *\r\n * @param {Object} [options] passed transparently to the [MongoDB driver](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount)\r\n * @param {Function} [callback] optional params are (error, count)\r\n * @return {Query} this\r\n * @see estimatedDocumentCount http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#estimatedDocumentCount\r\n * @api public\r\n */\r\n\r\nQuery.prototype.estimatedDocumentCount = function(options, callback) {\r\n  this.op = 'estimatedDocumentCount';\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n\r\n  if (typeof options === 'object' && options != null) {\r\n    this.setOptions(options);\r\n  }\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies this query as a `countDocuments()` query. Behaves like `count()`,\r\n * except it always does a full collection scan when passed an empty filter `{}`.\r\n *\r\n * There are also minor differences in how `countDocuments()` handles\r\n * [`$where` and a couple geospatial operators](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\r\n * versus `count()`.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `countDocuments()`\r\n *\r\n * ####Example:\r\n *\r\n *     const countQuery = model.where({ 'color': 'black' }).countDocuments();\r\n *\r\n *     query.countDocuments({ color: 'black' }).count(callback);\r\n *\r\n *     query.countDocuments({ color: 'black' }, callback);\r\n *\r\n *     query.where('color', 'black').countDocuments(function(err, count) {\r\n *       if (err) return handleError(err);\r\n *       console.log('there are %d kittens', count);\r\n *     });\r\n *\r\n * The `countDocuments()` function is similar to `count()`, but there are a\r\n * [few operators that `countDocuments()` does not support](https://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments).\r\n * Below are the operators that `count()` supports but `countDocuments()` does not,\r\n * and the suggested replacement:\r\n *\r\n * - `$where`: [`$expr`](https://docs.mongodb.com/manual/reference/operator/query/expr/)\r\n * - `$near`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$center`](https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center)\r\n * - `$nearSphere`: [`$geoWithin`](https://docs.mongodb.com/manual/reference/operator/query/geoWithin/) with [`$centerSphere`](https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere)\r\n *\r\n * @param {Object} [filter] mongodb selector\r\n * @param {Function} [callback] optional params are (error, count)\r\n * @return {Query} this\r\n * @see countDocuments http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#countDocuments\r\n * @api public\r\n */\r\n\r\nQuery.prototype.countDocuments = function(conditions, callback) {\r\n  this.op = 'countDocuments';\r\n  if (typeof conditions === 'function') {\r\n    callback = conditions;\r\n    conditions = undefined;\r\n  }\r\n\r\n  conditions = utils.toObject(conditions);\r\n\r\n  if (mquery.canMerge(conditions)) {\r\n    this.merge(conditions);\r\n  }\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Thunk around distinct()\r\n *\r\n * @param {Function} [callback]\r\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\r\n * @api private\r\n */\r\n\r\nQuery.prototype.__distinct = wrapThunk(function __distinct(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error()) {\r\n    callback(this.error());\r\n    return null;\r\n  }\r\n\r\n  const options = this._optionsForExec();\r\n\r\n  // don't pass in the conditions because we already merged them in\r\n  this._collection.collection.\r\n    distinct(this._distinct, this._conditions, options, callback);\r\n});\r\n\r\n/**\r\n * Declares or executes a distinct() operation.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * This function does not trigger any middleware.\r\n *\r\n * ####Example\r\n *\r\n *     distinct(field, conditions, callback)\r\n *     distinct(field, conditions)\r\n *     distinct(field, callback)\r\n *     distinct(field)\r\n *     distinct(callback)\r\n *     distinct()\r\n *\r\n * @param {String} [field]\r\n * @param {Object|Query} [filter]\r\n * @param {Function} [callback] optional params are (error, arr)\r\n * @return {Query} this\r\n * @see distinct http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\r\n * @api public\r\n */\r\n\r\nQuery.prototype.distinct = function(field, conditions, callback) {\r\n  this.op = 'distinct';\r\n  if (!callback) {\r\n    if (typeof conditions === 'function') {\r\n      callback = conditions;\r\n      conditions = undefined;\r\n    } else if (typeof field === 'function') {\r\n      callback = field;\r\n      field = undefined;\r\n      conditions = undefined;\r\n    }\r\n  }\r\n\r\n  conditions = utils.toObject(conditions);\r\n\r\n  if (mquery.canMerge(conditions)) {\r\n    this.merge(conditions);\r\n\r\n    prepareDiscriminatorCriteria(this);\r\n  } else if (conditions != null) {\r\n    this.error(new ObjectParameterError(conditions, 'filter', 'distinct'));\r\n  }\r\n\r\n  if (field != null) {\r\n    this._distinct = field;\r\n  }\r\n\r\n  if (callback != null) {\r\n    this.exec(callback);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the sort order\r\n *\r\n * If an object is passed, values allowed are `asc`, `desc`, `ascending`, `descending`, `1`, and `-1`.\r\n *\r\n * If a string is passed, it must be a space delimited list of path names. The\r\n * sort order of each path is ascending unless the path name is prefixed with `-`\r\n * which will be treated as descending.\r\n *\r\n * ####Example\r\n *\r\n *     // sort by \"field\" ascending and \"test\" descending\r\n *     query.sort({ field: 'asc', test: -1 });\r\n *\r\n *     // equivalent\r\n *     query.sort('field -test');\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Object|String} arg\r\n * @return {Query} this\r\n * @see cursor.sort http://docs.mongodb.org/manual/reference/method/cursor.sort/\r\n * @api public\r\n */\r\n\r\nQuery.prototype.sort = function(arg) {\r\n  if (arguments.length > 1) {\r\n    throw new Error('sort() only takes 1 Argument');\r\n  }\r\n\r\n  return Query.base.sort.call(this, arg);\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as a remove() operation. `remove()` is\r\n * deprecated, you should use [`deleteOne()`](#query_Query-deleteOne)\r\n * or [`deleteMany()`](#query_Query-deleteMany) instead.\r\n *\r\n * This function does not trigger any middleware\r\n *\r\n * ####Example\r\n *\r\n *     Character.remove({ name: /Stark/ }, callback);\r\n *\r\n * This function calls the MongoDB driver's [`Collection#remove()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove).\r\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\r\n * object that contains 3 properties:\r\n *\r\n * - `ok`: `1` if no errors occurred\r\n * - `deletedCount`: the number of documents deleted\r\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\r\n *\r\n * ####Example\r\n *\r\n *     const res = await Character.remove({ name: /Stark/ });\r\n *     // Number of docs deleted\r\n *     res.deletedCount;\r\n *\r\n * ####Note\r\n *\r\n * Calling `remove()` creates a [Mongoose query](./queries.html), and a query\r\n * does not execute until you either pass a callback, call [`Query#then()`](#query_Query-then),\r\n * or call [`Query#exec()`](#query_Query-exec).\r\n *\r\n *     // not executed\r\n *     const query = Character.remove({ name: /Stark/ });\r\n *\r\n *     // executed\r\n *     Character.remove({ name: /Stark/ }, callback);\r\n *     Character.remove({ name: /Stark/ }).remove(callback);\r\n *\r\n *     // executed without a callback\r\n *     Character.exec();\r\n *\r\n * @param {Object|Query} [filter] mongodb selector\r\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\r\n * @return {Query} this\r\n * @deprecated\r\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\r\n * @see MongoDB driver remove http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#remove\r\n * @api public\r\n */\r\n\r\nQuery.prototype.remove = function(filter, callback) {\r\n  this.op = 'remove';\r\n  if (typeof filter === 'function') {\r\n    callback = filter;\r\n    filter = null;\r\n  }\r\n\r\n  filter = utils.toObject(filter);\r\n\r\n  if (mquery.canMerge(filter)) {\r\n    this.merge(filter);\r\n\r\n    prepareDiscriminatorCriteria(this);\r\n  } else if (filter != null) {\r\n    this.error(new ObjectParameterError(filter, 'filter', 'remove'));\r\n  }\r\n\r\n  if (!callback) {\r\n    return Query.base.remove.call(this);\r\n  }\r\n\r\n  this.exec(callback);\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nQuery.prototype._remove = wrapThunk(function(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return this;\r\n  }\r\n\r\n  callback = _wrapThunkCallback(this, callback);\r\n\r\n  return Query.base.remove.call(this, helpers.handleDeleteWriteOpResult(callback));\r\n});\r\n\r\n/**\r\n * Declare and/or execute this query as a `deleteOne()` operation. Works like\r\n * remove, except it deletes at most one document regardless of the `single`\r\n * option.\r\n *\r\n * This function does not trigger any middleware.\r\n *\r\n * ####Example\r\n *\r\n *     Character.deleteOne({ name: 'Eddard Stark' }, callback);\r\n *     Character.deleteOne({ name: 'Eddard Stark' }).then(next);\r\n *\r\n * This function calls the MongoDB driver's [`Collection#deleteOne()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne).\r\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\r\n * object that contains 3 properties:\r\n *\r\n * - `ok`: `1` if no errors occurred\r\n * - `deletedCount`: the number of documents deleted\r\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\r\n *\r\n * ####Example\r\n *\r\n *     const res = await Character.deleteOne({ name: 'Eddard Stark' });\r\n *     // `1` if MongoDB deleted a doc, `0` if no docs matched the filter `{ name: ... }`\r\n *     res.deletedCount;\r\n *\r\n * @param {Object|Query} [filter] mongodb selector\r\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\r\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\r\n * @return {Query} this\r\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\r\n * @see MongoDB Driver deleteOne http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteOne\r\n * @api public\r\n */\r\n\r\nQuery.prototype.deleteOne = function(filter, options, callback) {\r\n  this.op = 'deleteOne';\r\n  if (typeof filter === 'function') {\r\n    callback = filter;\r\n    filter = null;\r\n    options = null;\r\n  } else if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  } else {\r\n    this.setOptions(options);\r\n  }\r\n\r\n  filter = utils.toObject(filter);\r\n\r\n  if (mquery.canMerge(filter)) {\r\n    this.merge(filter);\r\n\r\n    prepareDiscriminatorCriteria(this);\r\n  } else if (filter != null) {\r\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteOne'));\r\n  }\r\n\r\n  if (!callback) {\r\n    return Query.base.deleteOne.call(this);\r\n  }\r\n\r\n  this.exec.call(this, callback);\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Internal thunk for `deleteOne()`\r\n */\r\n\r\nQuery.prototype._deleteOne = wrapThunk(function(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return this;\r\n  }\r\n\r\n  callback = _wrapThunkCallback(this, callback);\r\n\r\n  return Query.base.deleteOne.call(this, helpers.handleDeleteWriteOpResult(callback));\r\n});\r\n\r\n/**\r\n * Declare and/or execute this query as a `deleteMany()` operation. Works like\r\n * remove, except it deletes _every_ document that matches `filter` in the\r\n * collection, regardless of the value of `single`.\r\n *\r\n * This function does not trigger any middleware\r\n *\r\n * ####Example\r\n *\r\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }, callback)\r\n *     Character.deleteMany({ name: /Stark/, age: { $gte: 18 } }).then(next)\r\n *\r\n * This function calls the MongoDB driver's [`Collection#deleteMany()` function](http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany).\r\n * The returned [promise](https://mongoosejs.com/docs/queries.html) resolves to an\r\n * object that contains 3 properties:\r\n *\r\n * - `ok`: `1` if no errors occurred\r\n * - `deletedCount`: the number of documents deleted\r\n * - `n`: the number of documents deleted. Equal to `deletedCount`.\r\n *\r\n * ####Example\r\n *\r\n *     const res = await Character.deleteMany({ name: /Stark/, age: { $gte: 18 } });\r\n *     // `0` if no docs matched the filter, number of docs deleted otherwise\r\n *     res.deletedCount;\r\n *\r\n * @param {Object|Query} [filter] mongodb selector\r\n * @param {Object} [options] optional see [`Query.prototype.setOptions()`](http://mongoosejs.com/docs/api.html#query_Query-setOptions)\r\n * @param {Function} [callback] optional params are (error, mongooseDeleteResult)\r\n * @return {Query} this\r\n * @see deleteWriteOpResult http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~deleteWriteOpResult\r\n * @see MongoDB Driver deleteMany http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#deleteMany\r\n * @api public\r\n */\r\n\r\nQuery.prototype.deleteMany = function(filter, options, callback) {\r\n  this.op = 'deleteMany';\r\n  if (typeof filter === 'function') {\r\n    callback = filter;\r\n    filter = null;\r\n    options = null;\r\n  } else if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  } else {\r\n    this.setOptions(options);\r\n  }\r\n\r\n  filter = utils.toObject(filter);\r\n\r\n  if (mquery.canMerge(filter)) {\r\n    this.merge(filter);\r\n\r\n    prepareDiscriminatorCriteria(this);\r\n  } else if (filter != null) {\r\n    this.error(new ObjectParameterError(filter, 'filter', 'deleteMany'));\r\n  }\r\n\r\n  if (!callback) {\r\n    return Query.base.deleteMany.call(this);\r\n  }\r\n\r\n  this.exec.call(this, callback);\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Internal thunk around `deleteMany()`\r\n */\r\n\r\nQuery.prototype._deleteMany = wrapThunk(function(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return this;\r\n  }\r\n\r\n  callback = _wrapThunkCallback(this, callback);\r\n\r\n  return Query.base.deleteMany.call(this, helpers.handleDeleteWriteOpResult(callback));\r\n});\r\n\r\n/*!\r\n * hydrates a document\r\n *\r\n * @param {Model} model\r\n * @param {Document} doc\r\n * @param {Object} res 3rd parameter to callback\r\n * @param {Object} fields\r\n * @param {Query} self\r\n * @param {Array} [pop] array of paths used in population\r\n * @param {Function} callback\r\n */\r\n\r\nfunction completeOne(model, doc, res, options, fields, userProvidedFields, pop, callback) {\r\n  const opts = pop ?\r\n    { populated: pop }\r\n    : undefined;\r\n\r\n  if (options.rawResult && doc == null) {\r\n    _init(null);\r\n    return null;\r\n  }\r\n\r\n  const casted = helpers.createModel(model, doc, fields, userProvidedFields);\r\n  try {\r\n    casted.init(doc, opts, _init);\r\n  } catch (error) {\r\n    _init(error);\r\n  }\r\n\r\n  function _init(err) {\r\n    if (err) {\r\n      return process.nextTick(() => callback(err));\r\n    }\r\n\r\n\r\n    if (options.rawResult) {\r\n      if (doc && casted) {\r\n        casted.$session(options.session);\r\n        res.value = casted;\r\n      } else {\r\n        res.value = null;\r\n      }\r\n      return process.nextTick(() => callback(null, res));\r\n    }\r\n    casted.$session(options.session);\r\n    process.nextTick(() => callback(null, casted));\r\n  }\r\n}\r\n\r\n/*!\r\n * If the model is a discriminator type and not root, then add the key & value to the criteria.\r\n */\r\n\r\nfunction prepareDiscriminatorCriteria(query) {\r\n  if (!query || !query.model || !query.model.schema) {\r\n    return;\r\n  }\r\n\r\n  const schema = query.model.schema;\r\n\r\n  if (schema && schema.discriminatorMapping && !schema.discriminatorMapping.isRoot) {\r\n    query._conditions[schema.discriminatorMapping.key] = schema.discriminatorMapping.value;\r\n  }\r\n}\r\n\r\n/**\r\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\r\n *\r\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found\r\n * document (if any) to the callback. The query executes if\r\n * `callback` is passed.\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `findOneAndUpdate()`\r\n *\r\n * ####Available options\r\n *\r\n * - `new`: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)\r\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\r\n * - `fields`: {Object|String} - Field selection. Equivalent to `.select(fields).findOneAndUpdate()`\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\r\n * - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\r\n * - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\r\n * - `rawResult`: if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n * - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\r\n *\r\n * ####Callback Signature\r\n *     function(error, doc) {\r\n *       // error: any errors that occurred\r\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\r\n *     }\r\n *\r\n * ####Examples\r\n *\r\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\r\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\r\n *     query.findOneAndUpdate(conditions, update, callback) // executes\r\n *     query.findOneAndUpdate(conditions, update)           // returns Query\r\n *     query.findOneAndUpdate(update, callback)             // returns Query\r\n *     query.findOneAndUpdate(update)                       // returns Query\r\n *     query.findOneAndUpdate(callback)                     // executes\r\n *     query.findOneAndUpdate()                             // returns Query\r\n *\r\n * @method findOneAndUpdate\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object|Query} [filter]\r\n * @param {Object} [doc]\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\r\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\r\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\r\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\r\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\r\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\r\n * @param {Function} [callback] optional params are (error, doc), _unless_ `rawResult` is used, in which case params are (error, writeOpResult)\r\n * @see Tutorial /docs/tutorials/findoneandupdate.html\r\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\r\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\r\n  this.op = 'findOneAndUpdate';\r\n  this._validate();\r\n\r\n  switch (arguments.length) {\r\n    case 3:\r\n      if (typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      break;\r\n    case 2:\r\n      if (typeof doc === 'function') {\r\n        callback = doc;\r\n        doc = criteria;\r\n        criteria = undefined;\r\n      }\r\n      options = undefined;\r\n      break;\r\n    case 1:\r\n      if (typeof criteria === 'function') {\r\n        callback = criteria;\r\n        criteria = options = doc = undefined;\r\n      } else {\r\n        doc = criteria;\r\n        criteria = options = undefined;\r\n      }\r\n  }\r\n\r\n  if (mquery.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  }\r\n\r\n  // apply doc\r\n  if (doc) {\r\n    this._mergeUpdate(doc);\r\n  }\r\n\r\n  options = options ? utils.clone(options) : {};\r\n\r\n  if (options.projection) {\r\n    this.select(options.projection);\r\n    delete options.projection;\r\n  }\r\n  if (options.fields) {\r\n    this.select(options.fields);\r\n    delete options.fields;\r\n  }\r\n\r\n\r\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\r\n  if (options.returnOriginal == null && returnOriginal != null) {\r\n    options.returnOriginal = returnOriginal;\r\n  }\r\n\r\n  this.setOptions(options);\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Thunk around findOneAndUpdate()\r\n *\r\n * @param {Function} [callback]\r\n * @api private\r\n */\r\n\r\nQuery.prototype._findOneAndUpdate = wrapThunk(function(callback) {\r\n  if (this.error() != null) {\r\n    return callback(this.error());\r\n  }\r\n\r\n  this._findAndModify('update', callback);\r\n});\r\n\r\n/**\r\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\r\n *\r\n * Finds a matching document, removes it, passing the found document (if any) to\r\n * the callback. Executes if `callback` is passed.\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `findOneAndRemove()`\r\n *\r\n * ####Available options\r\n *\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\r\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n *\r\n * ####Callback Signature\r\n *     function(error, doc) {\r\n *       // error: any errors that occurred\r\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\r\n *     }\r\n *\r\n * ####Examples\r\n *\r\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\r\n *     A.where().findOneAndRemove(conditions, options)  // return Query\r\n *     A.where().findOneAndRemove(conditions, callback) // executes\r\n *     A.where().findOneAndRemove(conditions) // returns Query\r\n *     A.where().findOneAndRemove(callback)   // executes\r\n *     A.where().findOneAndRemove()           // returns Query\r\n *\r\n * @method findOneAndRemove\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object} [conditions]\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Function} [callback] optional params are (error, document)\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOneAndRemove = function(conditions, options, callback) {\r\n  this.op = 'findOneAndRemove';\r\n  this._validate();\r\n\r\n  switch (arguments.length) {\r\n    case 2:\r\n      if (typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      break;\r\n    case 1:\r\n      if (typeof conditions === 'function') {\r\n        callback = conditions;\r\n        conditions = undefined;\r\n        options = undefined;\r\n      }\r\n      break;\r\n  }\r\n\r\n  if (mquery.canMerge(conditions)) {\r\n    this.merge(conditions);\r\n  }\r\n\r\n  options && this.setOptions(options);\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Issues a MongoDB [findOneAndDelete](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/) command.\r\n *\r\n * Finds a matching document, removes it, and passes the found document (if any)\r\n * to the callback. Executes if `callback` is passed.\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `findOneAndDelete()`\r\n *\r\n * This function differs slightly from `Model.findOneAndRemove()` in that\r\n * `findOneAndRemove()` becomes a [MongoDB `findAndModify()` command](https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/),\r\n * as opposed to a `findOneAndDelete()` command. For most mongoose use cases,\r\n * this distinction is purely pedantic. You should use `findOneAndDelete()`\r\n * unless you have a good reason not to.\r\n *\r\n * ####Available options\r\n *\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\r\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n *\r\n * ####Callback Signature\r\n *     function(error, doc) {\r\n *       // error: any errors that occurred\r\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\r\n *     }\r\n *\r\n * ####Examples\r\n *\r\n *     A.where().findOneAndDelete(conditions, options, callback) // executes\r\n *     A.where().findOneAndDelete(conditions, options)  // return Query\r\n *     A.where().findOneAndDelete(conditions, callback) // executes\r\n *     A.where().findOneAndDelete(conditions) // returns Query\r\n *     A.where().findOneAndDelete(callback)   // executes\r\n *     A.where().findOneAndDelete()           // returns Query\r\n *\r\n * @method findOneAndDelete\r\n * @memberOf Query\r\n * @param {Object} [conditions]\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Function} [callback] optional params are (error, document)\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOneAndDelete = function(conditions, options, callback) {\r\n  this.op = 'findOneAndDelete';\r\n  this._validate();\r\n\r\n  switch (arguments.length) {\r\n    case 2:\r\n      if (typeof options === 'function') {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      break;\r\n    case 1:\r\n      if (typeof conditions === 'function') {\r\n        callback = conditions;\r\n        conditions = undefined;\r\n        options = undefined;\r\n      }\r\n      break;\r\n  }\r\n\r\n  if (mquery.canMerge(conditions)) {\r\n    this.merge(conditions);\r\n  }\r\n\r\n  options && this.setOptions(options);\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Thunk around findOneAndDelete()\r\n *\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api private\r\n */\r\nQuery.prototype._findOneAndDelete = wrapThunk(function(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return null;\r\n  }\r\n\r\n  const filter = this._conditions;\r\n  const options = this._optionsForExec();\r\n  let fields = null;\r\n\r\n  if (this._fields != null) {\r\n    options.projection = this._castFields(utils.clone(this._fields));\r\n    fields = options.projection;\r\n    if (fields instanceof Error) {\r\n      callback(fields);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  this._collection.collection.findOneAndDelete(filter, options, _wrapThunkCallback(this, (err, res) => {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    const doc = res.value;\r\n\r\n    return this._completeOne(doc, res, callback);\r\n  }));\r\n});\r\n\r\n/**\r\n * Issues a MongoDB [findOneAndReplace](https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/) command.\r\n *\r\n * Finds a matching document, removes it, and passes the found document (if any)\r\n * to the callback. Executes if `callback` is passed.\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `findOneAndReplace()`\r\n *\r\n * ####Available options\r\n *\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n * - `maxTimeMS`: puts a time limit on the query - requires mongodb >= 2.6.0\r\n * - `rawResult`: if true, resolves to the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n *\r\n * ####Callback Signature\r\n *     function(error, doc) {\r\n *       // error: any errors that occurred\r\n *       // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\r\n *     }\r\n *\r\n * ####Examples\r\n *\r\n *     A.where().findOneAndReplace(filter, replacement, options, callback); // executes\r\n *     A.where().findOneAndReplace(filter, replacement, options); // return Query\r\n *     A.where().findOneAndReplace(filter, replacement, callback); // executes\r\n *     A.where().findOneAndReplace(filter); // returns Query\r\n *     A.where().findOneAndReplace(callback); // executes\r\n *     A.where().findOneAndReplace(); // returns Query\r\n *\r\n * @method findOneAndReplace\r\n * @memberOf Query\r\n * @param {Object} [filter]\r\n * @param {Object} [replacement]\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.rawResult] if true, returns the [raw result from the MongoDB driver](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify)\r\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.new=false] By default, `findOneAndUpdate()` returns the document as it was **before** `update` was applied. If you set `new: true`, `findOneAndUpdate()` will instead give you the object after `update` was applied.\r\n * @param {Object} [options.lean] if truthy, mongoose will return the document as a plain JavaScript object rather than a mongoose document. See [`Query.lean()`](/docs/api.html#query_Query-lean) and [the Mongoose lean tutorial](/docs/tutorials/lean.html).\r\n * @param {ClientSession} [options.session=null] The session associated with this query. See [transactions docs](/docs/transactions.html).\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\r\n * @param {Boolean} [options.returnOriginal=null] An alias for the `new` option. `returnOriginal: false` is equivalent to `new: true`.\r\n * @param {Function} [callback] optional params are (error, document)\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOneAndReplace = function(filter, replacement, options, callback) {\r\n  this.op = 'findOneAndReplace';\r\n  this._validate();\r\n\r\n  switch (arguments.length) {\r\n    case 3:\r\n      if (typeof options === 'function') {\r\n        callback = options;\r\n        options = void 0;\r\n      }\r\n      break;\r\n    case 2:\r\n      if (typeof replacement === 'function') {\r\n        callback = replacement;\r\n        replacement = void 0;\r\n      }\r\n      break;\r\n    case 1:\r\n      if (typeof filter === 'function') {\r\n        callback = filter;\r\n        filter = void 0;\r\n        replacement = void 0;\r\n        options = void 0;\r\n      }\r\n      break;\r\n  }\r\n\r\n  if (mquery.canMerge(filter)) {\r\n    this.merge(filter);\r\n  }\r\n\r\n  if (replacement != null) {\r\n    if (hasDollarKeys(replacement)) {\r\n      throw new Error('The replacement document must not contain atomic operators.');\r\n    }\r\n    this._mergeUpdate(replacement);\r\n  }\r\n\r\n  options = options || {};\r\n\r\n  const returnOriginal = get(this, 'model.base.options.returnOriginal');\r\n  if (options.returnOriginal == null && returnOriginal != null) {\r\n    options.returnOriginal = returnOriginal;\r\n  }\r\n\r\n  this.setOptions(options);\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  this.exec(callback);\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Thunk around findOneAndReplace()\r\n *\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api private\r\n */\r\nQuery.prototype._findOneAndReplace = wrapThunk(function(callback) {\r\n  this._castConditions();\r\n\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return null;\r\n  }\r\n\r\n  const filter = this._conditions;\r\n  const options = this._optionsForExec();\r\n  convertNewToReturnOriginal(options);\r\n  let fields = null;\r\n\r\n  let castedDoc = new this.model(this._update, null, true);\r\n  this._update = castedDoc;\r\n\r\n  this._applyPaths();\r\n  if (this._fields != null) {\r\n    options.projection = this._castFields(utils.clone(this._fields));\r\n    fields = options.projection;\r\n    if (fields instanceof Error) {\r\n      callback(fields);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  castedDoc.validate(err => {\r\n    if (err != null) {\r\n      return callback(err);\r\n    }\r\n\r\n    if (castedDoc.toBSON) {\r\n      castedDoc = castedDoc.toBSON();\r\n    }\r\n\r\n    this._collection.collection.findOneAndReplace(filter, castedDoc, options, _wrapThunkCallback(this, (err, res) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      const doc = res.value;\r\n\r\n      return this._completeOne(doc, res, callback);\r\n    }));\r\n  });\r\n});\r\n\r\n/*!\r\n * Support the `new` option as an alternative to `returnOriginal` for backwards\r\n * compat.\r\n */\r\n\r\nfunction convertNewToReturnOriginal(options) {\r\n  if ('new' in options) {\r\n    options.returnOriginal = !options['new'];\r\n    delete options['new'];\r\n  }\r\n}\r\n\r\n/*!\r\n * Thunk around findOneAndRemove()\r\n *\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api private\r\n */\r\nQuery.prototype._findOneAndRemove = wrapThunk(function(callback) {\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return;\r\n  }\r\n\r\n  this._findAndModify('remove', callback);\r\n});\r\n\r\n/*!\r\n * Get options from query opts, falling back to the base mongoose object.\r\n */\r\n\r\nfunction _getOption(query, option, def) {\r\n  const opts = query._optionsForExec(query.model);\r\n\r\n  if (option in opts) {\r\n    return opts[option];\r\n  }\r\n  if (option in query.model.base.options) {\r\n    return query.model.base.options[option];\r\n  }\r\n  return def;\r\n}\r\n\r\n/*!\r\n * Override mquery.prototype._findAndModify to provide casting etc.\r\n *\r\n * @param {String} type - either \"remove\" or \"update\"\r\n * @param {Function} callback\r\n * @api private\r\n */\r\n\r\nQuery.prototype._findAndModify = function(type, callback) {\r\n  if (typeof callback !== 'function') {\r\n    throw new Error('Expected callback in _findAndModify');\r\n  }\r\n\r\n  const model = this.model;\r\n  const schema = model.schema;\r\n  const _this = this;\r\n  let fields;\r\n\r\n  const castedQuery = castQuery(this);\r\n  if (castedQuery instanceof Error) {\r\n    return callback(castedQuery);\r\n  }\r\n\r\n  _castArrayFilters(this);\r\n\r\n  const opts = this._optionsForExec(model);\r\n\r\n  if ('strict' in opts) {\r\n    this._mongooseOptions.strict = opts.strict;\r\n  }\r\n\r\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\r\n  if (isOverwriting) {\r\n    this._update = new this.model(this._update, null, true);\r\n  }\r\n\r\n  if (type === 'remove') {\r\n    opts.remove = true;\r\n  } else {\r\n    if (!('new' in opts) && !('returnOriginal' in opts)) {\r\n      opts.new = false;\r\n    }\r\n    if (!('upsert' in opts)) {\r\n      opts.upsert = false;\r\n    }\r\n    if (opts.upsert || opts['new']) {\r\n      opts.remove = false;\r\n    }\r\n\r\n    if (!isOverwriting) {\r\n      this._update = castDoc(this, opts.overwrite);\r\n      const _opts = Object.assign({}, opts, {\r\n        setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\r\n      });\r\n      this._update = setDefaultsOnInsert(this._conditions, schema, this._update, _opts);\r\n      if (!this._update || Object.keys(this._update).length === 0) {\r\n        if (opts.upsert) {\r\n          // still need to do the upsert to empty doc\r\n          const doc = utils.clone(castedQuery);\r\n          delete doc._id;\r\n          this._update = { $set: doc };\r\n        } else {\r\n          this.findOne(callback);\r\n          return this;\r\n        }\r\n      } else if (this._update instanceof Error) {\r\n        return callback(this._update);\r\n      } else {\r\n        // In order to make MongoDB 2.6 happy (see\r\n        // https://jira.mongodb.org/browse/SERVER-12266 and related issues)\r\n        // if we have an actual update document but $set is empty, junk the $set.\r\n        if (this._update.$set && Object.keys(this._update.$set).length === 0) {\r\n          delete this._update.$set;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  this._applyPaths();\r\n\r\n  const options = this._mongooseOptions;\r\n\r\n  if (this._fields) {\r\n    fields = utils.clone(this._fields);\r\n    opts.projection = this._castFields(fields);\r\n    if (opts.projection instanceof Error) {\r\n      return callback(opts.projection);\r\n    }\r\n  }\r\n\r\n  if (opts.sort) convertSortToArray(opts);\r\n\r\n  const cb = function(err, doc, res) {\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    _this._completeOne(doc, res, callback);\r\n  };\r\n\r\n  let useFindAndModify = true;\r\n  const runValidators = _getOption(this, 'runValidators', false);\r\n  const base = _this.model && _this.model.base;\r\n  const conn = get(model, 'collection.conn', {});\r\n  if ('useFindAndModify' in base.options) {\r\n    useFindAndModify = base.get('useFindAndModify');\r\n  }\r\n  if ('useFindAndModify' in conn.config) {\r\n    useFindAndModify = conn.config.useFindAndModify;\r\n  }\r\n  if ('useFindAndModify' in options) {\r\n    useFindAndModify = options.useFindAndModify;\r\n  }\r\n  if (useFindAndModify === false) {\r\n    // Bypass mquery\r\n    const collection = _this._collection.collection;\r\n    convertNewToReturnOriginal(opts);\r\n\r\n    if (type === 'remove') {\r\n      collection.findOneAndDelete(castedQuery, opts, _wrapThunkCallback(_this, function(error, res) {\r\n        return cb(error, res ? res.value : res, res);\r\n      }));\r\n\r\n      return this;\r\n    }\r\n\r\n    // honors legacy overwrite option for backward compatibility\r\n    const updateMethod = isOverwriting ? 'findOneAndReplace' : 'findOneAndUpdate';\r\n\r\n    if (runValidators) {\r\n      this.validate(this._update, opts, isOverwriting, error => {\r\n        if (error) {\r\n          return callback(error);\r\n        }\r\n        if (this._update && this._update.toBSON) {\r\n          this._update = this._update.toBSON();\r\n        }\r\n\r\n        collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\r\n          return cb(error, res ? res.value : res, res);\r\n        }));\r\n      });\r\n    } else {\r\n      if (this._update && this._update.toBSON) {\r\n        this._update = this._update.toBSON();\r\n      }\r\n      collection[updateMethod](castedQuery, this._update, opts, _wrapThunkCallback(_this, function(error, res) {\r\n        return cb(error, res ? res.value : res, res);\r\n      }));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  if (runValidators) {\r\n    this.validate(this._update, opts, isOverwriting, function(error) {\r\n      if (error) {\r\n        return callback(error);\r\n      }\r\n      _legacyFindAndModify.call(_this, castedQuery, _this._update, opts, cb);\r\n    });\r\n  } else {\r\n    _legacyFindAndModify.call(_this, castedQuery, _this._update, opts, cb);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _completeOneLean(doc, res, opts, callback) {\r\n  if (opts.rawResult) {\r\n    return callback(null, res);\r\n  }\r\n  return callback(null, doc);\r\n}\r\n\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nconst _legacyFindAndModify = util.deprecate(function(filter, update, opts, cb) {\r\n  if (update && update.toBSON) {\r\n    update = update.toBSON();\r\n  }\r\n  const collection = this._collection;\r\n  const sort = opts != null && Array.isArray(opts.sort) ? opts.sort : [];\r\n  const _cb = _wrapThunkCallback(this, function(error, res) {\r\n    return cb(error, res ? res.value : res, res);\r\n  });\r\n  collection.collection._findAndModify(filter, sort, update, opts, _cb);\r\n}, 'Mongoose: `findOneAndUpdate()` and `findOneAndDelete()` without the ' +\r\n  '`useFindAndModify` option set to false are deprecated. See: ' +\r\n  'https://mongoosejs.com/docs/deprecations.html#findandmodify');\r\n\r\n/*!\r\n * Override mquery.prototype._mergeUpdate to handle mongoose objects in\r\n * updates.\r\n *\r\n * @param {Object} doc\r\n * @api private\r\n */\r\n\r\nQuery.prototype._mergeUpdate = function(doc) {\r\n  if (doc == null || (typeof doc === 'object' && Object.keys(doc).length === 0)) {\r\n    return;\r\n  }\r\n\r\n  if (!this._update) {\r\n    this._update = Array.isArray(doc) ? [] : {};\r\n  }\r\n  if (doc instanceof Query) {\r\n    if (Array.isArray(this._update)) {\r\n      throw new Error('Cannot mix array and object updates');\r\n    }\r\n    if (doc._update) {\r\n      utils.mergeClone(this._update, doc._update);\r\n    }\r\n  } else if (Array.isArray(doc)) {\r\n    if (!Array.isArray(this._update)) {\r\n      throw new Error('Cannot mix array and object updates');\r\n    }\r\n    this._update = this._update.concat(doc);\r\n  } else {\r\n    if (Array.isArray(this._update)) {\r\n      throw new Error('Cannot mix array and object updates');\r\n    }\r\n    utils.mergeClone(this._update, doc);\r\n  }\r\n};\r\n\r\n/*!\r\n * The mongodb driver 1.3.23 only supports the nested array sort\r\n * syntax. We must convert it or sorting findAndModify will not work.\r\n */\r\n\r\nfunction convertSortToArray(opts) {\r\n  if (Array.isArray(opts.sort)) {\r\n    return;\r\n  }\r\n  if (!utils.isObject(opts.sort)) {\r\n    return;\r\n  }\r\n\r\n  const sort = [];\r\n\r\n  for (const key in opts.sort) {\r\n    if (utils.object.hasOwnProperty(opts.sort, key)) {\r\n      sort.push([key, opts.sort[key]]);\r\n    }\r\n  }\r\n\r\n  opts.sort = sort;\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _updateThunk(op, callback) {\r\n  this._castConditions();\r\n\r\n  _castArrayFilters(this);\r\n\r\n  if (this.error() != null) {\r\n    callback(this.error());\r\n    return null;\r\n  }\r\n\r\n  callback = _wrapThunkCallback(this, callback);\r\n  const oldCb = callback;\r\n  callback = function(error, result) {\r\n    oldCb(error, result ? result.result : { ok: 0, n: 0, nModified: 0 });\r\n  };\r\n\r\n  const castedQuery = this._conditions;\r\n  const options = this._optionsForExec(this.model);\r\n\r\n  ++this._executionCount;\r\n\r\n  this._update = utils.clone(this._update, options);\r\n  const isOverwriting = this.options.overwrite && !hasDollarKeys(this._update);\r\n  if (isOverwriting) {\r\n    if (op === 'updateOne' || op === 'updateMany') {\r\n      return callback(new MongooseError('The MongoDB server disallows ' +\r\n        'overwriting documents using `' + op + '`. See: ' +\r\n        'https://mongoosejs.com/docs/deprecations.html#update'));\r\n    }\r\n    this._update = new this.model(this._update, null, true);\r\n  } else {\r\n    this._update = castDoc(this, options.overwrite);\r\n\r\n    if (this._update instanceof Error) {\r\n      callback(this._update);\r\n      return null;\r\n    }\r\n\r\n    if (this._update == null || Object.keys(this._update).length === 0) {\r\n      callback(null, 0);\r\n      return null;\r\n    }\r\n\r\n    const _opts = Object.assign({}, options, {\r\n      setDefaultsOnInsert: this._mongooseOptions.setDefaultsOnInsert\r\n    });\r\n    this._update = setDefaultsOnInsert(this._conditions, this.model.schema,\r\n      this._update, _opts);\r\n  }\r\n\r\n  const runValidators = _getOption(this, 'runValidators', false);\r\n  if (runValidators) {\r\n    this.validate(this._update, options, isOverwriting, err => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if (this._update.toBSON) {\r\n        this._update = this._update.toBSON();\r\n      }\r\n      this._collection[op](castedQuery, this._update, options, callback);\r\n    });\r\n    return null;\r\n  }\r\n\r\n  if (this._update.toBSON) {\r\n    this._update = this._update.toBSON();\r\n  }\r\n\r\n  this._collection[op](castedQuery, this._update, options, callback);\r\n  return null;\r\n}\r\n\r\n/*!\r\n * Mongoose calls this function internally to validate the query if\r\n * `runValidators` is set\r\n *\r\n * @param {Object} castedDoc the update, after casting\r\n * @param {Object} options the options from `_optionsForExec()`\r\n * @param {Function} callback\r\n * @api private\r\n */\r\n\r\nQuery.prototype.validate = function validate(castedDoc, options, isOverwriting, callback) {\r\n  return promiseOrCallback(callback, cb => {\r\n    try {\r\n      if (isOverwriting) {\r\n        castedDoc.validate(cb);\r\n      } else {\r\n        updateValidators(this, this.model.schema, castedDoc, options, cb);\r\n      }\r\n    } catch (err) {\r\n      process.nextTick(function() {\r\n        cb(err);\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n/*!\r\n * Internal thunk for .update()\r\n *\r\n * @param {Function} callback\r\n * @see Model.update #model_Model.update\r\n * @api private\r\n */\r\nQuery.prototype._execUpdate = wrapThunk(function(callback) {\r\n  return _updateThunk.call(this, 'update', callback);\r\n});\r\n\r\n/*!\r\n * Internal thunk for .updateMany()\r\n *\r\n * @param {Function} callback\r\n * @see Model.update #model_Model.update\r\n * @api private\r\n */\r\nQuery.prototype._updateMany = wrapThunk(function(callback) {\r\n  return _updateThunk.call(this, 'updateMany', callback);\r\n});\r\n\r\n/*!\r\n * Internal thunk for .updateOne()\r\n *\r\n * @param {Function} callback\r\n * @see Model.update #model_Model.update\r\n * @api private\r\n */\r\nQuery.prototype._updateOne = wrapThunk(function(callback) {\r\n  return _updateThunk.call(this, 'updateOne', callback);\r\n});\r\n\r\n/*!\r\n * Internal thunk for .replaceOne()\r\n *\r\n * @param {Function} callback\r\n * @see Model.replaceOne #model_Model.replaceOne\r\n * @api private\r\n */\r\nQuery.prototype._replaceOne = wrapThunk(function(callback) {\r\n  return _updateThunk.call(this, 'replaceOne', callback);\r\n});\r\n\r\n/**\r\n * Declare and/or execute this query as an update() operation.\r\n *\r\n * _All paths passed that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operations will become `$set` ops._\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `update()`\r\n *\r\n * ####Example\r\n *\r\n *     Model.where({ _id: id }).update({ title: 'words' })\r\n *\r\n *     // becomes\r\n *\r\n *     Model.where({ _id: id }).update({ $set: { title: 'words' }})\r\n *\r\n * ####Valid options:\r\n *\r\n *  - `upsert` (boolean) whether to create the doc if it doesn't match (false)\r\n *  - `multi` (boolean) whether multiple documents should be updated (false)\r\n *  - `runValidators`: if true, runs [update validators](/docs/validation.html#update-validators) on this command. Update validators validate the update operation against the model's schema.\r\n *  - `setDefaultsOnInsert`: if this and `upsert` are true, mongoose will apply the [defaults](http://mongoosejs.com/docs/defaults.html) specified in the model's schema if a new document is created. This option only works on MongoDB >= 2.4 because it relies on [MongoDB's `$setOnInsert` operator](https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/).\r\n *  - `strict` (boolean) overrides the `strict` option for this update\r\n *  - `overwrite` (boolean) disables update-only mode, allowing you to overwrite the doc (false)\r\n *  - `context` (string) if set to 'query' and `runValidators` is on, `this` will refer to the query in custom validator functions that update validation runs. Does nothing if `runValidators` is false.\r\n *  - `read`\r\n *  - `writeConcern`\r\n *\r\n * ####Note\r\n *\r\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\r\n *\r\n * ####Note\r\n *\r\n * The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the `exec()` method.\r\n *\r\n *     var q = Model.where({ _id: id });\r\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\r\n *\r\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed\r\n *\r\n *     // keys that are not [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) ops become `$set`.\r\n *     // this executes the same command as the previous example.\r\n *     q.update({ name: 'bob' }).exec();\r\n *\r\n *     // overwriting with empty docs\r\n *     var q = Model.where({ _id: id }).setOptions({ overwrite: true })\r\n *     q.update({ }, callback); // executes\r\n *\r\n *     // multi update with overwrite to empty doc\r\n *     var q = Model.where({ _id: id });\r\n *     q.setOptions({ multi: true, overwrite: true })\r\n *     q.update({ });\r\n *     q.update(callback); // executed\r\n *\r\n *     // multi updates\r\n *     Model.where()\r\n *          .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\r\n *\r\n *     // more multi updates\r\n *     Model.where()\r\n *          .setOptions({ multi: true })\r\n *          .update({ $set: { arr: [] }}, callback)\r\n *\r\n *     // single update by default\r\n *     Model.where({ email: 'address@example.com' })\r\n *          .update({ $inc: { counter: 1 }}, callback)\r\n *\r\n * API summary\r\n *\r\n *     update(filter, doc, options, cb) // executes\r\n *     update(filter, doc, options)\r\n *     update(filter, doc, cb) // executes\r\n *     update(filter, doc)\r\n *     update(doc, cb) // executes\r\n *     update(doc)\r\n *     update(cb) // executes\r\n *     update(true) // executes\r\n *     update()\r\n *\r\n * @param {Object} [filter]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\r\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\r\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\r\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\r\n * @param {Function} [callback] params are (error, writeOpResult)\r\n * @return {Query} this\r\n * @see Model.update #model_Model.update\r\n * @see Query docs https://mongoosejs.com/docs/queries.html\r\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\r\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\r\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\r\n * @api public\r\n */\r\n\r\nQuery.prototype.update = function(conditions, doc, options, callback) {\r\n  if (typeof options === 'function') {\r\n    // .update(conditions, doc, callback)\r\n    callback = options;\r\n    options = null;\r\n  } else if (typeof doc === 'function') {\r\n    // .update(doc, callback);\r\n    callback = doc;\r\n    doc = conditions;\r\n    conditions = {};\r\n    options = null;\r\n  } else if (typeof conditions === 'function') {\r\n    // .update(callback)\r\n    callback = conditions;\r\n    conditions = undefined;\r\n    doc = undefined;\r\n    options = undefined;\r\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\r\n    // .update(doc)\r\n    doc = conditions;\r\n    conditions = undefined;\r\n    options = undefined;\r\n    callback = undefined;\r\n  }\r\n\r\n  return _update(this, 'update', conditions, doc, options, callback);\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as an updateMany() operation. Same as\r\n * `update()`, except MongoDB will update _all_ documents that match\r\n * `filter` (as opposed to just the first one) regardless of the value of\r\n * the `multi` option.\r\n *\r\n * **Note** updateMany will _not_ fire update middleware. Use `pre('updateMany')`\r\n * and `post('updateMany')` instead.\r\n *\r\n * ####Example:\r\n *     const res = await Person.updateMany({ name: /Stark$/ }, { isDeleted: true });\r\n *     res.n; // Number of documents matched\r\n *     res.nModified; // Number of documents modified\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `updateMany()`\r\n *\r\n * @param {Object} [filter]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\r\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\r\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\r\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\r\n * @param {Function} [callback] params are (error, writeOpResult)\r\n * @return {Query} this\r\n * @see Model.update #model_Model.update\r\n * @see Query docs https://mongoosejs.com/docs/queries.html\r\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\r\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\r\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\r\n * @api public\r\n */\r\n\r\nQuery.prototype.updateMany = function(conditions, doc, options, callback) {\r\n  if (typeof options === 'function') {\r\n    // .update(conditions, doc, callback)\r\n    callback = options;\r\n    options = null;\r\n  } else if (typeof doc === 'function') {\r\n    // .update(doc, callback);\r\n    callback = doc;\r\n    doc = conditions;\r\n    conditions = {};\r\n    options = null;\r\n  } else if (typeof conditions === 'function') {\r\n    // .update(callback)\r\n    callback = conditions;\r\n    conditions = undefined;\r\n    doc = undefined;\r\n    options = undefined;\r\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\r\n    // .update(doc)\r\n    doc = conditions;\r\n    conditions = undefined;\r\n    options = undefined;\r\n    callback = undefined;\r\n  }\r\n\r\n  return _update(this, 'updateMany', conditions, doc, options, callback);\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as an updateOne() operation. Same as\r\n * `update()`, except it does not support the `multi` or `overwrite` options.\r\n *\r\n * - MongoDB will update _only_ the first document that matches `filter` regardless of the value of the `multi` option.\r\n * - Use `replaceOne()` if you want to overwrite an entire document rather than using [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators like `$set`.\r\n *\r\n * **Note** updateOne will _not_ fire update middleware. Use `pre('updateOne')`\r\n * and `post('updateOne')` instead.\r\n *\r\n * ####Example:\r\n *     const res = await Person.updateOne({ name: 'Jean-Luc Picard' }, { ship: 'USS Enterprise' });\r\n *     res.n; // Number of documents matched\r\n *     res.nModified; // Number of documents modified\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `updateOne()`\r\n *\r\n * @param {Object} [filter]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\r\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\r\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\r\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Note that this allows you to overwrite timestamps. Does nothing if schema-level timestamps are not set.\r\n * @param {Function} [callback] params are (error, writeOpResult)\r\n * @return {Query} this\r\n * @see Model.update #model_Model.update\r\n * @see Query docs https://mongoosejs.com/docs/queries.html\r\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\r\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\r\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\r\n * @api public\r\n */\r\n\r\nQuery.prototype.updateOne = function(conditions, doc, options, callback) {\r\n  if (typeof options === 'function') {\r\n    // .update(conditions, doc, callback)\r\n    callback = options;\r\n    options = null;\r\n  } else if (typeof doc === 'function') {\r\n    // .update(doc, callback);\r\n    callback = doc;\r\n    doc = conditions;\r\n    conditions = {};\r\n    options = null;\r\n  } else if (typeof conditions === 'function') {\r\n    // .update(callback)\r\n    callback = conditions;\r\n    conditions = undefined;\r\n    doc = undefined;\r\n    options = undefined;\r\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\r\n    // .update(doc)\r\n    doc = conditions;\r\n    conditions = undefined;\r\n    options = undefined;\r\n    callback = undefined;\r\n  }\r\n\r\n  return _update(this, 'updateOne', conditions, doc, options, callback);\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as a replaceOne() operation. Same as\r\n * `update()`, except MongoDB will replace the existing document and will\r\n * not accept any [atomic](https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern) operators (`$set`, etc.)\r\n *\r\n * **Note** replaceOne will _not_ fire update middleware. Use `pre('replaceOne')`\r\n * and `post('replaceOne')` instead.\r\n *\r\n * ####Example:\r\n *     const res = await Person.replaceOne({ _id: 24601 }, { name: 'Jean Valjean' });\r\n *     res.n; // Number of documents matched\r\n *     res.nModified; // Number of documents modified\r\n *\r\n * This function triggers the following middleware.\r\n *\r\n * - `replaceOne()`\r\n *\r\n * @param {Object} [filter]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.multipleCastError] by default, mongoose only returns the first error that occurred in casting the query. Turn on this option to aggregate all the cast errors.\r\n * @param {Boolean} [options.omitUndefined=false] If true, delete any properties whose value is `undefined` when casting an update. In other words, if this is set, Mongoose will delete `baz` from the update in `Model.updateOne({}, { foo: 'bar', baz: undefined })` before sending the update to the server.\r\n * @param {Boolean|String} [options.strict] overwrites the schema's [strict mode option](http://mongoosejs.com/docs/guide.html#strict)\r\n * @param {Boolean} [options.upsert=false] if true, and no documents found, insert a new document\r\n * @param {Object} [options.writeConcern=null] sets the [write concern](https://docs.mongodb.com/manual/reference/write-concern/) for replica sets. Overrides the [schema-level write concern](/docs/guide.html#writeConcern)\r\n * @param {Boolean} [options.timestamps=null] If set to `false` and [schema-level timestamps](/docs/guide.html#timestamps) are enabled, skip timestamps for this update. Does nothing if schema-level timestamps are not set.\r\n * @param {Function} [callback] params are (error, writeOpResult)\r\n * @return {Query} this\r\n * @see Model.update #model_Model.update\r\n * @see Query docs https://mongoosejs.com/docs/queries.html\r\n * @see update http://docs.mongodb.org/manual/reference/method/db.collection.update/\r\n * @see writeOpResult http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html#~WriteOpResult\r\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/command/update/#update-command-output\r\n * @api public\r\n */\r\n\r\nQuery.prototype.replaceOne = function(conditions, doc, options, callback) {\r\n  if (typeof options === 'function') {\r\n    // .update(conditions, doc, callback)\r\n    callback = options;\r\n    options = null;\r\n  } else if (typeof doc === 'function') {\r\n    // .update(doc, callback);\r\n    callback = doc;\r\n    doc = conditions;\r\n    conditions = {};\r\n    options = null;\r\n  } else if (typeof conditions === 'function') {\r\n    // .update(callback)\r\n    callback = conditions;\r\n    conditions = undefined;\r\n    doc = undefined;\r\n    options = undefined;\r\n  } else if (typeof conditions === 'object' && !doc && !options && !callback) {\r\n    // .update(doc)\r\n    doc = conditions;\r\n    conditions = undefined;\r\n    options = undefined;\r\n    callback = undefined;\r\n  }\r\n\r\n  this.setOptions({ overwrite: true });\r\n  return _update(this, 'replaceOne', conditions, doc, options, callback);\r\n};\r\n\r\n/*!\r\n * Internal helper for update, updateMany, updateOne, replaceOne\r\n */\r\n\r\nfunction _update(query, op, filter, doc, options, callback) {\r\n  // make sure we don't send in the whole Document to merge()\r\n  query.op = op;\r\n  filter = utils.toObject(filter);\r\n  doc = doc || {};\r\n\r\n  // strict is an option used in the update checking, make sure it gets set\r\n  if (options != null) {\r\n    if ('strict' in options) {\r\n      query._mongooseOptions.strict = options.strict;\r\n    }\r\n  }\r\n\r\n  if (!(filter instanceof Query) &&\r\n      filter != null &&\r\n      filter.toString() !== '[object Object]') {\r\n    query.error(new ObjectParameterError(filter, 'filter', op));\r\n  } else {\r\n    query.merge(filter);\r\n  }\r\n\r\n  if (utils.isObject(options)) {\r\n    query.setOptions(options);\r\n  }\r\n\r\n  query._mergeUpdate(doc);\r\n\r\n  // Hooks\r\n  if (callback) {\r\n    query.exec(callback);\r\n\r\n    return query;\r\n  }\r\n\r\n  return Query.base[op].call(query, filter, void 0, options, callback);\r\n}\r\n\r\n/**\r\n * Runs a function `fn` and treats the return value of `fn` as the new value\r\n * for the query to resolve to.\r\n *\r\n * Any functions you pass to `map()` will run **after** any post hooks.\r\n *\r\n * ####Example:\r\n *\r\n *     const res = await MyModel.findOne().map(res => {\r\n *       // Sets a `loadedAt` property on the doc that tells you the time the\r\n *       // document was loaded.\r\n *       return res == null ?\r\n *         res :\r\n *         Object.assign(res, { loadedAt: new Date() });\r\n *     });\r\n *\r\n * @method map\r\n * @memberOf Query\r\n * @instance\r\n * @param {Function} fn function to run to transform the query result\r\n * @return {Query} this\r\n */\r\n\r\nQuery.prototype.map = function(fn) {\r\n  this._transforms.push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Make this query throw an error if no documents match the given `filter`.\r\n * This is handy for integrating with async/await, because `orFail()` saves you\r\n * an extra `if` statement to check if no document was found.\r\n *\r\n * ####Example:\r\n *\r\n *     // Throws if no doc returned\r\n *     await Model.findOne({ foo: 'bar' }).orFail();\r\n *\r\n *     // Throws if no document was updated\r\n *     await Model.updateOne({ foo: 'bar' }, { name: 'test' }).orFail();\r\n *\r\n *     // Throws \"No docs found!\" error if no docs match `{ foo: 'bar' }`\r\n *     await Model.find({ foo: 'bar' }).orFail(new Error('No docs found!'));\r\n *\r\n *     // Throws \"Not found\" error if no document was found\r\n *     await Model.findOneAndUpdate({ foo: 'bar' }, { name: 'test' }).\r\n *       orFail(() => Error('Not found'));\r\n *\r\n * @method orFail\r\n * @memberOf Query\r\n * @instance\r\n * @param {Function|Error} [err] optional error to throw if no docs match `filter`. If not specified, `orFail()` will throw a `DocumentNotFoundError`\r\n * @return {Query} this\r\n */\r\n\r\nQuery.prototype.orFail = function(err) {\r\n  this.map(res => {\r\n    switch (this.op) {\r\n      case 'find':\r\n        if (res.length === 0) {\r\n          throw _orFailError(err, this);\r\n        }\r\n        break;\r\n      case 'findOne':\r\n        if (res == null) {\r\n          throw _orFailError(err, this);\r\n        }\r\n        break;\r\n      case 'update':\r\n      case 'updateMany':\r\n      case 'updateOne':\r\n        if (get(res, 'nModified') === 0) {\r\n          throw _orFailError(err, this);\r\n        }\r\n        break;\r\n      case 'findOneAndDelete':\r\n        if (get(res, 'lastErrorObject.n') === 0) {\r\n          throw _orFailError(err, this);\r\n        }\r\n        break;\r\n      case 'findOneAndUpdate':\r\n      case 'findOneAndReplace':\r\n        if (get(res, 'lastErrorObject.updatedExisting') === false) {\r\n          throw _orFailError(err, this);\r\n        }\r\n        break;\r\n      case 'deleteMany':\r\n      case 'deleteOne':\r\n      case 'remove':\r\n        if (res.n === 0) {\r\n          throw _orFailError(err, this);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return res;\r\n  });\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Get the error to throw for `orFail()`\r\n */\r\n\r\nfunction _orFailError(err, query) {\r\n  if (typeof err === 'function') {\r\n    err = err.call(query);\r\n  }\r\n\r\n  if (err == null) {\r\n    err = new DocumentNotFoundError(query.getQuery(), query.model.modelName);\r\n  }\r\n\r\n  return err;\r\n}\r\n\r\n/**\r\n * Executes the query\r\n *\r\n * ####Examples:\r\n *\r\n *     var promise = query.exec();\r\n *     var promise = query.exec('update');\r\n *\r\n *     query.exec(callback);\r\n *     query.exec('find', callback);\r\n *\r\n * @param {String|Function} [operation]\r\n * @param {Function} [callback] optional params depend on the function being called\r\n * @return {Promise}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.exec = function exec(op, callback) {\r\n  const _this = this;\r\n  // Ensure that `exec()` is the first thing that shows up in\r\n  // the stack when cast errors happen.\r\n  const castError = new CastError();\r\n\r\n  if (typeof op === 'function') {\r\n    callback = op;\r\n    op = null;\r\n  } else if (typeof op === 'string') {\r\n    this.op = op;\r\n  }\r\n\r\n  callback = this.model.$handleCallbackError(callback);\r\n\r\n  return promiseOrCallback(callback, (cb) => {\r\n    cb = this.model.$wrapCallback(cb);\r\n\r\n    if (!_this.op) {\r\n      cb();\r\n      return;\r\n    }\r\n\r\n    this._hooks.execPre('exec', this, [], (error) => {\r\n      if (error != null) {\r\n        return cb(_cleanCastErrorStack(castError, error));\r\n      }\r\n      let thunk = '_' + this.op;\r\n      if (this.op === 'update') {\r\n        thunk = '_execUpdate';\r\n      } else if (this.op === 'distinct') {\r\n        thunk = '__distinct';\r\n      }\r\n      this[thunk].call(this, (error, res) => {\r\n        if (error) {\r\n          return cb(_cleanCastErrorStack(castError, error));\r\n        }\r\n\r\n        this._hooks.execPost('exec', this, [], {}, (error) => {\r\n          if (error) {\r\n            return cb(_cleanCastErrorStack(castError, error));\r\n          }\r\n\r\n          cb(null, res);\r\n        });\r\n      });\r\n    });\r\n  }, this.model.events);\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _cleanCastErrorStack(castError, error) {\r\n  if (error instanceof CastError) {\r\n    castError.copy(error);\r\n    return castError;\r\n  }\r\n\r\n  return error;\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _wrapThunkCallback(query, cb) {\r\n  return function(error, res) {\r\n    if (error != null) {\r\n      return cb(error);\r\n    }\r\n\r\n    for (const fn of query._transforms) {\r\n      try {\r\n        res = fn(res);\r\n      } catch (error) {\r\n        return cb(error);\r\n      }\r\n    }\r\n\r\n    return cb(null, res);\r\n  };\r\n}\r\n\r\n/**\r\n * Executes the query returning a `Promise` which will be\r\n * resolved with either the doc(s) or rejected with the error.\r\n *\r\n * @param {Function} [resolve]\r\n * @param {Function} [reject]\r\n * @return {Promise}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.then = function(resolve, reject) {\r\n  return this.exec().then(resolve, reject);\r\n};\r\n\r\n/**\r\n * Executes the query returning a `Promise` which will be\r\n * resolved with either the doc(s) or rejected with the error.\r\n * Like `.then()`, but only takes a rejection handler.\r\n *\r\n * @param {Function} [reject]\r\n * @return {Promise}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.catch = function(reject) {\r\n  return this.exec().then(null, reject);\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nQuery.prototype._pre = function(fn) {\r\n  this._hooks.pre('exec', fn);\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nQuery.prototype._post = function(fn) {\r\n  this._hooks.post('exec', fn);\r\n  return this;\r\n};\r\n\r\n/*!\r\n * Casts obj for an update command.\r\n *\r\n * @param {Object} obj\r\n * @return {Object} obj after casting its values\r\n * @api private\r\n */\r\n\r\nQuery.prototype._castUpdate = function _castUpdate(obj, overwrite) {\r\n  let strict;\r\n  let schema = this.schema;\r\n\r\n  const discriminatorKey = schema.options.discriminatorKey;\r\n  const baseSchema = schema._baseSchema ? schema._baseSchema : schema;\r\n  if (this._mongooseOptions.overwriteDiscriminatorKey &&\r\n      obj[discriminatorKey] != null &&\r\n      baseSchema.discriminators) {\r\n    const _schema = baseSchema.discriminators[obj[discriminatorKey]];\r\n    if (_schema != null) {\r\n      schema = _schema;\r\n    }\r\n  }\r\n\r\n  if ('strict' in this._mongooseOptions) {\r\n    strict = this._mongooseOptions.strict;\r\n  } else if (this.schema && this.schema.options) {\r\n    strict = this.schema.options.strict;\r\n  } else {\r\n    strict = true;\r\n  }\r\n\r\n  let omitUndefined = false;\r\n  if ('omitUndefined' in this._mongooseOptions) {\r\n    omitUndefined = this._mongooseOptions.omitUndefined;\r\n  }\r\n\r\n  let useNestedStrict;\r\n  if ('useNestedStrict' in this.options) {\r\n    useNestedStrict = this.options.useNestedStrict;\r\n  }\r\n\r\n  let upsert;\r\n  if ('upsert' in this.options) {\r\n    upsert = this.options.upsert;\r\n  }\r\n\r\n  const filter = this._conditions;\r\n  if (schema != null &&\r\n      utils.hasUserDefinedProperty(filter, schema.options.discriminatorKey) &&\r\n      typeof filter[schema.options.discriminatorKey] !== 'object' &&\r\n      schema.discriminators != null) {\r\n    const discriminatorValue = filter[schema.options.discriminatorKey];\r\n    const byValue = getDiscriminatorByValue(this.model, discriminatorValue);\r\n    schema = schema.discriminators[discriminatorValue] ||\r\n      (byValue && byValue.schema) ||\r\n      schema;\r\n  }\r\n\r\n  return castUpdate(schema, obj, {\r\n    overwrite: overwrite,\r\n    strict: strict,\r\n    omitUndefined,\r\n    useNestedStrict: useNestedStrict,\r\n    upsert: upsert\r\n  }, this, this._conditions);\r\n};\r\n\r\n/*!\r\n * castQuery\r\n * @api private\r\n */\r\n\r\nfunction castQuery(query) {\r\n  try {\r\n    return query.cast(query.model);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n}\r\n\r\n/*!\r\n * castDoc\r\n * @api private\r\n */\r\n\r\nfunction castDoc(query, overwrite) {\r\n  try {\r\n    return query._castUpdate(query._update, overwrite);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n}\r\n\r\n/**\r\n * Specifies paths which should be populated with other documents.\r\n *\r\n * ####Example:\r\n *\r\n *     let book = await Book.findOne().populate('authors');\r\n *     book.title; // 'Node.js in Action'\r\n *     book.authors[0].name; // 'TJ Holowaychuk'\r\n *     book.authors[1].name; // 'Nathan Rajlich'\r\n *\r\n *     let books = await Book.find().populate({\r\n *       path: 'authors',\r\n *       // `match` and `sort` apply to the Author model,\r\n *       // not the Book model. These options do not affect\r\n *       // which documents are in `books`, just the order and\r\n *       // contents of each book document's `authors`.\r\n *       match: { name: new RegExp('.*h.*', 'i') },\r\n *       sort: { name: -1 }\r\n *     });\r\n *     books[0].title; // 'Node.js in Action'\r\n *     // Each book's `authors` are sorted by name, descending.\r\n *     books[0].authors[0].name; // 'TJ Holowaychuk'\r\n *     books[0].authors[1].name; // 'Marc Harter'\r\n *\r\n *     books[1].title; // 'Professional AngularJS'\r\n *     // Empty array, no authors' name has the letter 'h'\r\n *     books[1].authors; // []\r\n *\r\n * Paths are populated after the query executes and a response is received. A\r\n * separate query is then executed for each path specified for population. After\r\n * a response for each query has also been returned, the results are passed to\r\n * the callback.\r\n *\r\n * @param {Object|String} path either the path to populate or an object specifying all parameters\r\n * @param {Object|String} [select] Field selection for the population query\r\n * @param {Model} [model] The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's `ref` field.\r\n * @param {Object} [match] Conditions for the population query\r\n * @param {Object} [options] Options for the population query (sort, etc)\r\n * @param {String} [options.path=null] The path to populate.\r\n * @param {boolean} [options.retainNullValues=false] by default, Mongoose removes null and undefined values from populated arrays. Use this option to make `populate()` retain `null` and `undefined` array entries.\r\n * @param {boolean} [options.getters=false] if true, Mongoose will call any getters defined on the `localField`. By default, Mongoose gets the raw value of `localField`. For example, you would need to set this option to `true` if you wanted to [add a `lowercase` getter to your `localField`](/docs/schematypes.html#schematype-options).\r\n * @param {boolean} [options.clone=false] When you do `BlogPost.find().populate('author')`, blog posts with the same author will share 1 copy of an `author` doc. Enable this option to make Mongoose clone populated docs before assigning them.\r\n * @param {Object|Function} [options.match=null] Add an additional filter to the populate query. Can be a filter object containing [MongoDB query syntax](https://docs.mongodb.com/manual/tutorial/query-documents/), or a function that returns a filter object.\r\n * @param {Object} [options.options=null] Additional options like `limit` and `lean`.\r\n * @see population ./populate.html\r\n * @see Query#select #query_Query-select\r\n * @see Model.populate #model_Model.populate\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.populate = function() {\r\n  // Bail when given no truthy arguments\r\n  if (!Array.from(arguments).some(Boolean)) {\r\n    return this;\r\n  }\r\n\r\n  const res = utils.populate.apply(null, arguments);\r\n\r\n  // Propagate readConcern and readPreference and lean from parent query,\r\n  // unless one already specified\r\n  if (this.options != null) {\r\n    const readConcern = this.options.readConcern;\r\n    const readPref = this.options.readPreference;\r\n\r\n    for (const populateOptions of res) {\r\n      if (readConcern != null && get(populateOptions, 'options.readConcern') == null) {\r\n        populateOptions.options = populateOptions.options || {};\r\n        populateOptions.options.readConcern = readConcern;\r\n      }\r\n      if (readPref != null && get(populateOptions, 'options.readPreference') == null) {\r\n        populateOptions.options = populateOptions.options || {};\r\n        populateOptions.options.readPreference = readPref;\r\n      }\r\n    }\r\n  }\r\n\r\n  const opts = this._mongooseOptions;\r\n\r\n  if (opts.lean != null) {\r\n    const lean = opts.lean;\r\n    for (const populateOptions of res) {\r\n      if (get(populateOptions, 'options.lean') == null) {\r\n        populateOptions.options = populateOptions.options || {};\r\n        populateOptions.options.lean = lean;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!utils.isObject(opts.populate)) {\r\n    opts.populate = {};\r\n  }\r\n\r\n  const pop = opts.populate;\r\n\r\n  for (const populateOptions of res) {\r\n    const path = populateOptions.path;\r\n    if (pop[path] && pop[path].populate && populateOptions.populate) {\r\n      populateOptions.populate = pop[path].populate.concat(populateOptions.populate);\r\n    }\r\n\r\n    pop[populateOptions.path] = populateOptions;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Gets a list of paths to be populated by this query\r\n *\r\n * ####Example:\r\n *      bookSchema.pre('findOne', function() {\r\n *        let keys = this.getPopulatedPaths(); // ['author']\r\n *      });\r\n *      ...\r\n *      Book.findOne({}).populate('author');\r\n *\r\n * ####Example:\r\n *      // Deep populate\r\n *      const q = L1.find().populate({\r\n *        path: 'level2',\r\n *        populate: { path: 'level3' }\r\n *      });\r\n *      q.getPopulatedPaths(); // ['level2', 'level2.level3']\r\n *\r\n * @return {Array} an array of strings representing populated paths\r\n * @api public\r\n */\r\n\r\nQuery.prototype.getPopulatedPaths = function getPopulatedPaths() {\r\n  const obj = this._mongooseOptions.populate || {};\r\n  const ret = Object.keys(obj);\r\n  for (const path of Object.keys(obj)) {\r\n    const pop = obj[path];\r\n    if (!Array.isArray(pop.populate)) {\r\n      continue;\r\n    }\r\n    _getPopulatedPaths(ret, pop.populate, path + '.');\r\n  }\r\n  return ret;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _getPopulatedPaths(list, arr, prefix) {\r\n  for (const pop of arr) {\r\n    list.push(prefix + pop.path);\r\n    if (!Array.isArray(pop.populate)) {\r\n      continue;\r\n    }\r\n    _getPopulatedPaths(list, pop.populate, prefix + pop.path + '.');\r\n  }\r\n}\r\n\r\n/**\r\n * Casts this query to the schema of `model`\r\n *\r\n * ####Note\r\n *\r\n * If `obj` is present, it is cast instead of this query.\r\n *\r\n * @param {Model} [model] the model to cast to. If not set, defaults to `this.model`\r\n * @param {Object} [obj]\r\n * @return {Object}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.cast = function(model, obj) {\r\n  obj || (obj = this._conditions);\r\n\r\n  model = model || this.model;\r\n\r\n  const discriminatorKey = model.schema.options.discriminatorKey;\r\n  if (obj != null &&\r\n      obj.hasOwnProperty(discriminatorKey)) {\r\n    model = getDiscriminatorByValue(model, obj[discriminatorKey]) || model;\r\n  }\r\n\r\n  try {\r\n    return cast(model.schema, obj, {\r\n      upsert: this.options && this.options.upsert,\r\n      strict: (this.options && 'strict' in this.options) ?\r\n        this.options.strict :\r\n        get(model, 'schema.options.strict', null),\r\n      strictQuery: (this.options && this.options.strictQuery) ||\r\n        get(model, 'schema.options.strictQuery', null)\r\n    }, this);\r\n  } catch (err) {\r\n    // CastError, assign model\r\n    if (typeof err.setModel === 'function') {\r\n      err.setModel(model);\r\n    }\r\n    throw err;\r\n  }\r\n};\r\n\r\n/**\r\n * Casts selected field arguments for field selection with mongo 2.2\r\n *\r\n *     query.select({ ids: { $elemMatch: { $in: [hexString] }})\r\n *\r\n * @param {Object} fields\r\n * @see https://github.com/Automattic/mongoose/issues/1091\r\n * @see http://docs.mongodb.org/manual/reference/projection/elemMatch/\r\n * @api private\r\n */\r\n\r\nQuery.prototype._castFields = function _castFields(fields) {\r\n  let selected,\r\n      elemMatchKeys,\r\n      keys,\r\n      key,\r\n      out,\r\n      i;\r\n\r\n  if (fields) {\r\n    keys = Object.keys(fields);\r\n    elemMatchKeys = [];\r\n    i = keys.length;\r\n\r\n    // collect $elemMatch args\r\n    while (i--) {\r\n      key = keys[i];\r\n      if (fields[key].$elemMatch) {\r\n        selected || (selected = {});\r\n        selected[key] = fields[key];\r\n        elemMatchKeys.push(key);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (selected) {\r\n    // they passed $elemMatch, cast em\r\n    try {\r\n      out = this.cast(this.model, selected);\r\n    } catch (err) {\r\n      return err;\r\n    }\r\n\r\n    // apply the casted field args\r\n    i = elemMatchKeys.length;\r\n    while (i--) {\r\n      key = elemMatchKeys[i];\r\n      fields[key] = out[key];\r\n    }\r\n  }\r\n\r\n  return fields;\r\n};\r\n\r\n/**\r\n * Applies schematype selected options to this query.\r\n * @api private\r\n */\r\n\r\nQuery.prototype._applyPaths = function applyPaths() {\r\n  this._fields = this._fields || {};\r\n  helpers.applyPaths(this._fields, this.model.schema);\r\n\r\n  let _selectPopulatedPaths = true;\r\n\r\n  if ('selectPopulatedPaths' in this.model.base.options) {\r\n    _selectPopulatedPaths = this.model.base.options.selectPopulatedPaths;\r\n  }\r\n  if ('selectPopulatedPaths' in this.model.schema.options) {\r\n    _selectPopulatedPaths = this.model.schema.options.selectPopulatedPaths;\r\n  }\r\n\r\n  if (_selectPopulatedPaths) {\r\n    selectPopulatedFields(this);\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a wrapper around a [mongodb driver cursor](http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html).\r\n * A QueryCursor exposes a Streams3 interface, as well as a `.next()` function.\r\n *\r\n * The `.cursor()` function triggers pre find hooks, but **not** post find hooks.\r\n *\r\n * ####Example\r\n *\r\n *     // There are 2 ways to use a cursor. First, as a stream:\r\n *     Thing.\r\n *       find({ name: /^hello/ }).\r\n *       cursor().\r\n *       on('data', function(doc) { console.log(doc); }).\r\n *       on('end', function() { console.log('Done!'); });\r\n *\r\n *     // Or you can use `.next()` to manually get the next doc in the stream.\r\n *     // `.next()` returns a promise, so you can use promises or callbacks.\r\n *     var cursor = Thing.find({ name: /^hello/ }).cursor();\r\n *     cursor.next(function(error, doc) {\r\n *       console.log(doc);\r\n *     });\r\n *\r\n *     // Because `.next()` returns a promise, you can use co\r\n *     // to easily iterate through all documents without loading them\r\n *     // all into memory.\r\n *     co(function*() {\r\n *       const cursor = Thing.find({ name: /^hello/ }).cursor();\r\n *       for (let doc = yield cursor.next(); doc != null; doc = yield cursor.next()) {\r\n *         console.log(doc);\r\n *       }\r\n *     });\r\n *\r\n * ####Valid options\r\n *\r\n *   - `transform`: optional function which accepts a mongoose document. The return value of the function will be emitted on `data` and returned by `.next()`.\r\n *\r\n * @return {QueryCursor}\r\n * @param {Object} [options]\r\n * @see QueryCursor\r\n * @api public\r\n */\r\n\r\nQuery.prototype.cursor = function cursor(opts) {\r\n  this._applyPaths();\r\n  this._fields = this._castFields(this._fields);\r\n  this.setOptions({ projection: this._fieldsForExec() });\r\n  if (opts) {\r\n    this.setOptions(opts);\r\n  }\r\n\r\n  const options = Object.assign({}, this._optionsForExec(), {\r\n    projection: this.projection()\r\n  });\r\n  try {\r\n    this.cast(this.model);\r\n  } catch (err) {\r\n    return (new QueryCursor(this, options))._markError(err);\r\n  }\r\n\r\n  return new QueryCursor(this, options);\r\n};\r\n\r\n// the rest of these are basically to support older Mongoose syntax with mquery\r\n\r\n/**\r\n * _DEPRECATED_ Alias of `maxScan`\r\n *\r\n * @deprecated\r\n * @see maxScan #query_Query-maxScan\r\n * @method maxscan\r\n * @memberOf Query\r\n * @instance\r\n */\r\n\r\nQuery.prototype.maxscan = Query.base.maxScan;\r\n\r\n/**\r\n * Sets the tailable option (for use with capped collections).\r\n *\r\n * ####Example\r\n *\r\n *     query.tailable() // true\r\n *     query.tailable(true)\r\n *     query.tailable(false)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Boolean} bool defaults to true\r\n * @param {Object} [opts] options to set\r\n * @param {Number} [opts.numberOfRetries] if cursor is exhausted, retry this many times before giving up\r\n * @param {Number} [opts.tailableRetryInterval] if cursor is exhausted, wait this many milliseconds before retrying\r\n * @see tailable http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\r\n * @api public\r\n */\r\n\r\nQuery.prototype.tailable = function(val, opts) {\r\n  // we need to support the tailable({ awaitdata : true }) as well as the\r\n  // tailable(true, {awaitdata :true}) syntax that mquery does not support\r\n  if (val && val.constructor.name === 'Object') {\r\n    opts = val;\r\n    val = true;\r\n  }\r\n\r\n  if (val === undefined) {\r\n    val = true;\r\n  }\r\n\r\n  if (opts && typeof opts === 'object') {\r\n    for (const key in opts) {\r\n      if (key === 'awaitdata') {\r\n        // For backwards compatibility\r\n        this.options[key] = !!opts[key];\r\n      } else {\r\n        this.options[key] = opts[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return Query.base.tailable.call(this, val);\r\n};\r\n\r\n/**\r\n * Declares an intersects query for `geometry()`.\r\n *\r\n * ####Example\r\n *\r\n *     query.where('path').intersects().geometry({\r\n *         type: 'LineString'\r\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\r\n *     })\r\n *\r\n *     query.where('path').intersects({\r\n *         type: 'LineString'\r\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\r\n *     })\r\n *\r\n * ####NOTE:\r\n *\r\n * **MUST** be used after `where()`.\r\n *\r\n * ####NOTE:\r\n *\r\n * In Mongoose 3.7, `intersects` changed from a getter to a function. If you need the old syntax, use [this](https://github.com/ebensing/mongoose-within).\r\n *\r\n * @method intersects\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object} [arg]\r\n * @return {Query} this\r\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\r\n * @see geoIntersects http://docs.mongodb.org/manual/reference/operator/geoIntersects/\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$geometry` condition\r\n *\r\n * ####Example\r\n *\r\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\r\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\r\n *\r\n *     // or\r\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\r\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\r\n *\r\n *     // or\r\n *     var polyC = [ 0, 0 ]\r\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\r\n *\r\n *     // or\r\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\r\n *\r\n * The argument is assigned to the most recent path passed to `where()`.\r\n *\r\n * ####NOTE:\r\n *\r\n * `geometry()` **must** come after either `intersects()` or `within()`.\r\n *\r\n * The `object` argument must contain `type` and `coordinates` properties.\r\n * - type {String}\r\n * - coordinates {Array}\r\n *\r\n * @method geometry\r\n * @memberOf Query\r\n * @instance\r\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\r\n * @return {Query} this\r\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\r\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$near` or `$nearSphere` condition\r\n *\r\n * These operators return documents sorted by distance.\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').near({ center: [10, 10] });\r\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\r\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\r\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\r\n *\r\n * @method near\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\r\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\r\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\r\n\r\n/*!\r\n * Overwriting mquery is needed to support a couple different near() forms found in older\r\n * versions of mongoose\r\n * near([1,1])\r\n * near(1,1)\r\n * near(field, [1,2])\r\n * near(field, 1, 2)\r\n * In addition to all of the normal forms supported by mquery\r\n */\r\n\r\nQuery.prototype.near = function() {\r\n  const params = [];\r\n  const sphere = this._mongooseOptions.nearSphere;\r\n\r\n  // TODO refactor\r\n\r\n  if (arguments.length === 1) {\r\n    if (Array.isArray(arguments[0])) {\r\n      params.push({ center: arguments[0], spherical: sphere });\r\n    } else if (typeof arguments[0] === 'string') {\r\n      // just passing a path\r\n      params.push(arguments[0]);\r\n    } else if (utils.isObject(arguments[0])) {\r\n      if (typeof arguments[0].spherical !== 'boolean') {\r\n        arguments[0].spherical = sphere;\r\n      }\r\n      params.push(arguments[0]);\r\n    } else {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n  } else if (arguments.length === 2) {\r\n    if (typeof arguments[0] === 'number' && typeof arguments[1] === 'number') {\r\n      params.push({ center: [arguments[0], arguments[1]], spherical: sphere });\r\n    } else if (typeof arguments[0] === 'string' && Array.isArray(arguments[1])) {\r\n      params.push(arguments[0]);\r\n      params.push({ center: arguments[1], spherical: sphere });\r\n    } else if (typeof arguments[0] === 'string' && utils.isObject(arguments[1])) {\r\n      params.push(arguments[0]);\r\n      if (typeof arguments[1].spherical !== 'boolean') {\r\n        arguments[1].spherical = sphere;\r\n      }\r\n      params.push(arguments[1]);\r\n    } else {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n  } else if (arguments.length === 3) {\r\n    if (typeof arguments[0] === 'string' && typeof arguments[1] === 'number'\r\n        && typeof arguments[2] === 'number') {\r\n      params.push(arguments[0]);\r\n      params.push({ center: [arguments[1], arguments[2]], spherical: sphere });\r\n    } else {\r\n      throw new TypeError('invalid argument');\r\n    }\r\n  } else {\r\n    throw new TypeError('invalid argument');\r\n  }\r\n\r\n  return Query.base.near.apply(this, params);\r\n};\r\n\r\n/**\r\n * _DEPRECATED_ Specifies a `$nearSphere` condition\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').nearSphere({ center: [10, 10], maxDistance: 5 });\r\n *\r\n * **Deprecated.** Use `query.near()` instead with the `spherical` option set to `true`.\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').near({ center: [10, 10], spherical: true });\r\n *\r\n * @deprecated\r\n * @see near() #query_Query-near\r\n * @see $near http://docs.mongodb.org/manual/reference/operator/near/\r\n * @see $nearSphere http://docs.mongodb.org/manual/reference/operator/nearSphere/\r\n * @see $maxDistance http://docs.mongodb.org/manual/reference/operator/maxDistance/\r\n */\r\n\r\nQuery.prototype.nearSphere = function() {\r\n  this._mongooseOptions.nearSphere = true;\r\n  this.near.apply(this, arguments);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns an asyncIterator for use with [`for/await/of` loops](http://bit.ly/async-iterators)\r\n * This function *only* works for `find()` queries.\r\n * You do not need to call this function explicitly, the JavaScript runtime\r\n * will call it for you.\r\n *\r\n * ####Example\r\n *\r\n *     for await (const doc of Model.aggregate([{ $sort: { name: 1 } }])) {\r\n *       console.log(doc.name);\r\n *     }\r\n *\r\n * Node.js 10.x supports async iterators natively without any flags. You can\r\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\r\n *\r\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\r\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\r\n * support async iterators.\r\n *\r\n * @method Symbol.asyncIterator\r\n * @memberOf Query\r\n * @instance\r\n * @api public\r\n */\r\n\r\nif (Symbol.asyncIterator != null) {\r\n  Query.prototype[Symbol.asyncIterator] = function() {\r\n    return this.cursor().transformNull().map(doc => {\r\n      return doc == null ? { done: true } : { value: doc, done: false };\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Specifies a `$polygon` condition\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\r\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\r\n *\r\n * @method polygon\r\n * @memberOf Query\r\n * @instance\r\n * @param {String|Array} [path]\r\n * @param {Array|Object} [coordinatePairs...]\r\n * @return {Query} this\r\n * @see $polygon http://docs.mongodb.org/manual/reference/operator/polygon/\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a `$box` condition\r\n *\r\n * ####Example\r\n *\r\n *     var lowerLeft = [40.73083, -73.99756]\r\n *     var upperRight= [40.741404,  -73.988135]\r\n *\r\n *     query.where('loc').within().box(lowerLeft, upperRight)\r\n *     query.box({ ll : lowerLeft, ur : upperRight })\r\n *\r\n * @method box\r\n * @memberOf Query\r\n * @instance\r\n * @see $box http://docs.mongodb.org/manual/reference/operator/box/\r\n * @see within() Query#within #query_Query-within\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @param {Object} val\r\n * @param [Array] Upper Right Coords\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\n/*!\r\n * this is needed to support the mongoose syntax of:\r\n * box(field, { ll : [x,y], ur : [x2,y2] })\r\n * box({ ll : [x,y], ur : [x2,y2] })\r\n */\r\n\r\nQuery.prototype.box = function(ll, ur) {\r\n  if (!Array.isArray(ll) && utils.isObject(ll)) {\r\n    ur = ll.ur;\r\n    ll = ll.ll;\r\n  }\r\n  return Query.base.box.call(this, ll, ur);\r\n};\r\n\r\n/**\r\n * Specifies a `$center` or `$centerSphere` condition.\r\n *\r\n * ####Example\r\n *\r\n *     var area = { center: [50, 50], radius: 10, unique: true }\r\n *     query.where('loc').within().circle(area)\r\n *     // alternatively\r\n *     query.circle('loc', area);\r\n *\r\n *     // spherical calculations\r\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\r\n *     query.where('loc').within().circle(area)\r\n *     // alternatively\r\n *     query.circle('loc', area);\r\n *\r\n * @method circle\r\n * @memberOf Query\r\n * @instance\r\n * @param {String} [path]\r\n * @param {Object} area\r\n * @return {Query} this\r\n * @see $center http://docs.mongodb.org/manual/reference/operator/center/\r\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\r\n * @see $geoWithin http://docs.mongodb.org/manual/reference/operator/geoWithin/\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\r\n\r\n/**\r\n * _DEPRECATED_ Alias for [circle](#query_Query-circle)\r\n *\r\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\r\n *\r\n * @deprecated\r\n * @method center\r\n * @memberOf Query\r\n * @instance\r\n * @api public\r\n */\r\n\r\nQuery.prototype.center = Query.base.circle;\r\n\r\n/**\r\n * _DEPRECATED_ Specifies a `$centerSphere` condition\r\n *\r\n * **Deprecated.** Use [circle](#query_Query-circle) instead.\r\n *\r\n * ####Example\r\n *\r\n *     var area = { center: [50, 50], radius: 10 };\r\n *     query.where('loc').within().centerSphere(area);\r\n *\r\n * @deprecated\r\n * @param {String} [path]\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @see $centerSphere http://docs.mongodb.org/manual/reference/operator/centerSphere/\r\n * @api public\r\n */\r\n\r\nQuery.prototype.centerSphere = function() {\r\n  if (arguments[0] && arguments[0].constructor.name === 'Object') {\r\n    arguments[0].spherical = true;\r\n  }\r\n\r\n  if (arguments[1] && arguments[1].constructor.name === 'Object') {\r\n    arguments[1].spherical = true;\r\n  }\r\n\r\n  Query.base.circle.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * Determines if field selection has been made.\r\n *\r\n * @method selected\r\n * @memberOf Query\r\n * @instance\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\n/**\r\n * Determines if inclusive field selection has been made.\r\n *\r\n *     query.selectedInclusively() // false\r\n *     query.select('name')\r\n *     query.selectedInclusively() // true\r\n *\r\n * @method selectedInclusively\r\n * @memberOf Query\r\n * @instance\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.selectedInclusively = function selectedInclusively() {\r\n  return isInclusive(this._fields);\r\n};\r\n\r\n/**\r\n * Determines if exclusive field selection has been made.\r\n *\r\n *     query.selectedExclusively() // false\r\n *     query.select('-name')\r\n *     query.selectedExclusively() // true\r\n *     query.selectedInclusively() // false\r\n *\r\n * @method selectedExclusively\r\n * @memberOf Query\r\n * @instance\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.selectedExclusively = function selectedExclusively() {\r\n  if (!this._fields) {\r\n    return false;\r\n  }\r\n\r\n  const keys = Object.keys(this._fields);\r\n  for (const key of keys) {\r\n    if (key === '_id') {\r\n      continue;\r\n    }\r\n    if (this._fields[key] === 0 || this._fields[key] === false) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/*!\r\n * Export\r\n */\r\n\r\nmodule.exports = Query;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/query.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/query.js	(date 499162500000)
@@ -1757,8 +1757,7 @@
  *     const query = Model.updateOne({}, { $set: { name: 'Jean-Luc Picard' } });
  *     query.get('name'); // 'Jean-Luc Picard'
  *
- * @param {String|Object} path path or object of key/value pairs to set
- * @param {Any} [val] the value to set
+ * @param {String|Object} path path or object of key/value pairs to get
  * @return {Query} this
  * @api public
  */
Index: node_modules/mongoose/node_modules/mongodb/HISTORY.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Changelog\r\n\r\nAll notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\r\n\r\n## [3.6.0](https://github.com/mongodb/node-mongodb-native/compare/v3.5.7...v3.6.0) (2020-07-30)\r\n\r\n\r\n### Features\r\n\r\n* add commitQuorum option to createIndexes command ([38bcaf7](https://github.com/mongodb/node-mongodb-native/commit/38bcaf7c80f63885d4c0cf1f7389819efb0664e6))\r\n* introduce an interruptable async interval timer ([1e4e837](https://github.com/mongodb/node-mongodb-native/commit/1e4e8373308a6d99c4d7eda4ae395f8293de98eb))\r\n* support streaming ismaster responses ([f6629d9](https://github.com/mongodb/node-mongodb-native/commit/f6629d9946d6d02012a6f1f7848306bc71fb3254))\r\n* **reIndex:** deprecate and make standalone-only command ([3a53b3d](https://github.com/mongodb/node-mongodb-native/commit/3a53b3deb7b375f6ce1e1a7435706aa4df7b0a0c))\r\n* add helper to run async collection in series ([f762532](https://github.com/mongodb/node-mongodb-native/commit/f76253242a9b9c3d1fc5be215e8b677af2138772))\r\n* allow hinting the delete command ([84cf955](https://github.com/mongodb/node-mongodb-native/commit/84cf95519d55e478b6457ba2347daf448388caf2))\r\n* consider staleness and topologyVersion in error handling ([018e6ed](https://github.com/mongodb/node-mongodb-native/commit/018e6edc923f1bb7aa13bf376edd71172bfc5039))\r\n* introduce `MongoNetworkTimeoutError` ([c1e4477](https://github.com/mongodb/node-mongodb-native/commit/c1e44777f9ede629290bb776c420018a4acdc487))\r\n* support checking if network error happened before handshake ([5411786](https://github.com/mongodb/node-mongodb-native/commit/541178690d558a4484d43d2a090d0b4d5416c031))\r\n* support hedged reads ([37cd5ee](https://github.com/mongodb/node-mongodb-native/commit/37cd5eed9f872429f3d0f683ed92cc75231d4685))\r\n* support speculative authentication in scram-sha and x509 ([6231164](https://github.com/mongodb/node-mongodb-native/commit/62311645c5e9a44678e4a997b6a5944b64492bd8))\r\n* **geoHaystackSearch:** deprecate geoHaystackSearch ([3f6786b](https://github.com/mongodb/node-mongodb-native/commit/3f6786b4c00d0650eb9c8009507e9c54b2b11bbc))\r\n* **sdam:** ignore stale topology updates ([f87d243](https://github.com/mongodb/node-mongodb-native/commit/f87d243587c1712cd95624d036ddb9a643a15a84))\r\n\r\n\r\n### Bug Fixes\r\n\r\n* `resolveAuthMechanism` should not mutate credentials ([be19a21](https://github.com/mongodb/node-mongodb-native/commit/be19a2160d33d8e7473800fbcf6af1cd7f6eaeef))\r\n* always clear cancelled wait queue members during processing ([3087d48](https://github.com/mongodb/node-mongodb-native/commit/3087d48c5de17dcd77d48b35af591a8f6780d145))\r\n* always include `writeErrors` on a `BulkWriteError` instance ([40db47f](https://github.com/mongodb/node-mongodb-native/commit/40db47f5aac1e93a11e8568327e93c4c542e11da))\r\n* assert update/replace atomic requirements in bulk operations ([31ae3c9](https://github.com/mongodb/node-mongodb-native/commit/31ae3c9978d6ea4f33c3ea4ccac9cd41841e31de))\r\n* clarify handle wrong set name single topology ([21424eb](https://github.com/mongodb/node-mongodb-native/commit/21424ebb961db339be8fa74babaaeb3ada8e22c8))\r\n* createCollection only uses listCollections in strict mode ([a8ffec4](https://github.com/mongodb/node-mongodb-native/commit/a8ffec4c0b4e2ef0ce4c3bcdadc0adeccd0a3544))\r\n* db.command to not inherit options from parent ([c394284](https://github.com/mongodb/node-mongodb-native/commit/c39428421c94b4a1c5f41340e5b1a82724af95bd))\r\n* don't create multiple rtt pingers if one already exists ([56723aa](https://github.com/mongodb/node-mongodb-native/commit/56723aa1c980894ededd97531ff023a603cf4271))\r\n* don't immediately schedule monitoring after streaming failure ([188c23e](https://github.com/mongodb/node-mongodb-native/commit/188c23e0bb173a032df6bea4c7d2a916b808d9ad))\r\n* don't reapply socket timeout when socket has `moreToCome` ([ca0f2b9](https://github.com/mongodb/node-mongodb-native/commit/ca0f2b9d3fc268187d112e3afbe7bc556273e100))\r\n* don't try to calculate sMax if there are no viable servers ([4cb9b64](https://github.com/mongodb/node-mongodb-native/commit/4cb9b64bc3ff9aed8f26091cfe52acb152146898))\r\n* ensure implicit sessions are ended consistently ([8c861f3](https://github.com/mongodb/node-mongodb-native/commit/8c861f3e6c743a65ee95c8036ee0c1b1bc8c427a))\r\n* filter servers before applying reducers ([6f7d9bf](https://github.com/mongodb/node-mongodb-native/commit/6f7d9bf7f03108af3d190965a8b536ec2fb68a0b))\r\n* hint should raise error on unacknowledged writes ([54aa19e](https://github.com/mongodb/node-mongodb-native/commit/54aa19ea10a18ee6fce93f7c7eb6562c9f4042a5))\r\n* honor journal=true in connection string ([#2358](https://github.com/mongodb/node-mongodb-native/issues/2358)) ([4df4b7c](https://github.com/mongodb/node-mongodb-native/commit/4df4b7c3133925432954ce249c8bf8ae34674cb9))\r\n* IPv6 is not supported when using dns service discovery ([19ec62f](https://github.com/mongodb/node-mongodb-native/commit/19ec62fad5912b5e1f615278a4c2fba153da5030))\r\n* linting issue ([babf845](https://github.com/mongodb/node-mongodb-native/commit/babf84517675240c5ca39631c771e04ba9e248d7))\r\n* MONGODB-AWS temporary credentials are added to authContext ([769a754](https://github.com/mongodb/node-mongodb-native/commit/769a75491ede69a6af8da8f2d6572c6c85e14a62))\r\n* ReadPreference maxStalenessSeconds from options ([dfe7afa](https://github.com/mongodb/node-mongodb-native/commit/dfe7afaf646b2cde1751e728b52fa40d672beb55))\r\n* reduce default keepalive time to align with Azure defaults ([72d8969](https://github.com/mongodb/node-mongodb-native/commit/72d896983ed70fd0f96dea3a37ff05a5d91a93ba))\r\n* remove destructuring assignments for legacy node support ([d728a13](https://github.com/mongodb/node-mongodb-native/commit/d728a1330a37e847b69937b42e179c58b47038cb))\r\n* silently ignore session with unacknowledged write ([a053f4e](https://github.com/mongodb/node-mongodb-native/commit/a053f4ea3f5ad1c8c8a581c449cf03dc252aeb06))\r\n* **ChangeStream:** handle null changes ([14179a2](https://github.com/mongodb/node-mongodb-native/commit/14179a270ce4bfa62884ee53d46f4e35d28b6100))\r\n* **ChangeStream:** make CursorNotFound error resumable ([9f0b7ab](https://github.com/mongodb/node-mongodb-native/commit/9f0b7ab65a5d443f411a61fa1a3dd6cfe42b8dce))\r\n* **ChangeStream:** should resume from errors when iterating ([497952c](https://github.com/mongodb/node-mongodb-native/commit/497952cd577dc692dc2e0273028a74c818d31174))\r\n* **ChangeStream:** whitelist resumable errors ([#2337](https://github.com/mongodb/node-mongodb-native/issues/2337)) ([a9d3965](https://github.com/mongodb/node-mongodb-native/commit/a9d39651e5a3d5e565a85d1eb503f56f07c4a1d3)), closes [#17](https://github.com/mongodb/node-mongodb-native/issues/17) [#18](https://github.com/mongodb/node-mongodb-native/issues/18)\r\n* **create_indexes:** add missing `bucketSize` option to list of valid options ([66c76c3](https://github.com/mongodb/node-mongodb-native/commit/66c76c32f900499e147656e07b2df7bc5e0bb1b5))\r\n* **GridFS:** emit error on bad options  ([c71a4df](https://github.com/mongodb/node-mongodb-native/commit/c71a4dfdf1c4904321a2b50967b3379b13d774fb))\r\n* remove check for NonResumableChangeStreamError label ([f3ac635](https://github.com/mongodb/node-mongodb-native/commit/f3ac635663717dd9eb00bf8d3f938a56c98bcafb))\r\n* throw an error if `allowDiskUse` is used on MongoDB < 3.2 ([f95f697](https://github.com/mongodb/node-mongodb-native/commit/f95f697dde5ba1ae4c6a698ad29266dfd787a121))\r\n* typo with setting error labels on error object ([89638bf](https://github.com/mongodb/node-mongodb-native/commit/89638bf925482bb54c3dd956ffd6f2830d088c6a))\r\n* unordered bulk write should attempt to execute all batches ([d00a644](https://github.com/mongodb/node-mongodb-native/commit/d00a644e129ad9570a5727b7e259261204f259ae))\r\n* use async interruptable interval for server monitoring ([068ae83](https://github.com/mongodb/node-mongodb-native/commit/068ae83291fc30f76b23ea1120e77ce71053e29d))\r\n* writes within transactions are not retryable ([c13ec5c](https://github.com/mongodb/node-mongodb-native/commit/c13ec5c66623af164b688c79747eab8fe89b91d6))\r\n\r\n## [3.6.0-beta.0](https://github.com/mongodb/node-mongodb-native/compare/v3.5.5...v3.6.0-beta.0) (2020-04-14)\r\n\r\n\r\n### Features\r\n\r\n* add MONGODB-AWS as a supported auth mechanism ([7f3cfba](https://github.com/mongodb/node-mongodb-native/commit/7f3cfbac15f537aa2ca9da145063f10c61390406))\r\n* bump wire protocol version for 4.4 ([6d3f313](https://github.com/mongodb/node-mongodb-native/commit/6d3f313a9defd12489b621896439b3f9ec8cb1ae))\r\n* deprecate `oplogReplay` for find commands ([24155e7](https://github.com/mongodb/node-mongodb-native/commit/24155e7905422460afc7e6abb120c596f40712c1))\r\n* directConnection adds unify behavior for replica set discovery ([c5d60fc](https://github.com/mongodb/node-mongodb-native/commit/c5d60fc4619227697ef2102437fe5c8b111909d2))\r\n* expand use of error labels for retryable writes ([c775a4a](https://github.com/mongodb/node-mongodb-native/commit/c775a4a1c53b8476eff6c9759b5647c9cbfa4e04))\r\n* support `allowDiskUse` for find commands ([dbc0b37](https://github.com/mongodb/node-mongodb-native/commit/dbc0b3722516a128c253bf85366a3432756ff92a))\r\n* support creating collections and indexes in transactions ([17e4c88](https://github.com/mongodb/node-mongodb-native/commit/17e4c88575b734d2d8ff94ca7f68b731a0bad326))\r\n* support passing a hint to findOneAndReplace/findOneAndUpdate ([faee15b](https://github.com/mongodb/node-mongodb-native/commit/faee15b686b895b84fd0b52c1e69e0caec769732))\r\n* support shorter SCRAM conversations ([6b9ff05](https://github.com/mongodb/node-mongodb-native/commit/6b9ff0561d14818bf07f4946ade04fc54683d0b9))\r\n* use error labels for retryable writes in legacy topologies ([fefc165](https://github.com/mongodb/node-mongodb-native/commit/fefc1651a885ec28758271c9e3c36104b05bdb75))\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **ChangeStream:** whitelist change stream resumable errors ([8a9c108](https://github.com/mongodb/node-mongodb-native/commit/8a9c1084430de9d6253ca9c61c9258c85835bb94)), closes [#17](https://github.com/mongodb/node-mongodb-native/issues/17) [#18](https://github.com/mongodb/node-mongodb-native/issues/18)\r\n* always return empty array for selection on unknown topology ([af57b57](https://github.com/mongodb/node-mongodb-native/commit/af57b578dd603faa7b66983232de2bc7e417dae1))\r\n* correctly use template string for connection string error message ([814e278](https://github.com/mongodb/node-mongodb-native/commit/814e27869d90a1dfa01118bb96ff1273e0cef323))\r\n* don't depend on private node api for `Timeout` wrapper ([e6dc1f4](https://github.com/mongodb/node-mongodb-native/commit/e6dc1f48d62b68ba56b93359d7aa755c08985867))\r\n* **sdam:** use ObjectId comparison to track maxElectionId ([db991d6](https://github.com/mongodb/node-mongodb-native/commit/db991d6916306d1fe08508d4c3e8f7a37d7fd21f))\r\n* only consider MongoError subclasses for retryability ([265fe40](https://github.com/mongodb/node-mongodb-native/commit/265fe40cf29992764d1ab030a1ee4dca97cd7c7c))\r\n* pass options into `commandSupportsReadConcern` ([e855c83](https://github.com/mongodb/node-mongodb-native/commit/e855c83d8b73f4ce57a11193a1e52461ab2cd4db))\r\n* store name of collection for more informative error messages ([979d41e](https://github.com/mongodb/node-mongodb-native/commit/979d41e14f5acf69bac094b3863591ee8e01fd9c))\r\n* support write concern provided as string in `fromOptions` ([637f428](https://github.com/mongodb/node-mongodb-native/commit/637f4288c1edb799267ccbce6d25a49304f6149c))\r\n* use properly camel cased form of `mapReduce` for command ([c1ed2c1](https://github.com/mongodb/node-mongodb-native/commit/c1ed2c1ce4c6f2d40cd1c7b84ad672a90a09c83b))\r\n\r\n<a name=\"3.6.0-beta.0\"></a>\r\n# [3.6.0-beta.0](https://github.com/mongodb/node-mongodb-native/compare/v3.5.5...v3.6.0-beta.0) (2020-04-14)\r\n\r\n### Bug Fixes\r\n\r\n* always return empty array for selection on unknown topology ([af57b57](https://github.com/mongodb/node-mongodb-native/commit/af57b57))\r\n* always return empty array for selection on unknown topology ([f9e786a](https://github.com/mongodb/node-mongodb-native/commit/f9e786a))\r\n* correctly use template string for connection string error message ([814e278](https://github.com/mongodb/node-mongodb-native/commit/814e278))\r\n* createCollection only uses listCollections in strict mode ([d368f12](https://github.com/mongodb/node-mongodb-native/commit/d368f12))\r\n* don't depend on private node api for `Timeout` wrapper ([e6dc1f4](https://github.com/mongodb/node-mongodb-native/commit/e6dc1f4))\r\n* don't throw if `withTransaction()` callback rejects with a null reason ([153646c](https://github.com/mongodb/node-mongodb-native/commit/153646c))\r\n* **cursor:** transforms should only be applied once to documents ([704f30a](https://github.com/mongodb/node-mongodb-native/commit/704f30a))\r\n* only consider MongoError subclasses for retryability ([265fe40](https://github.com/mongodb/node-mongodb-native/commit/265fe40))\r\n* **ChangeStream:** whitelist change stream resumable errors ([8a9c108](https://github.com/mongodb/node-mongodb-native/commit/8a9c108)), closes [#17](https://github.com/mongodb/node-mongodb-native/issues/17) [#18](https://github.com/mongodb/node-mongodb-native/issues/18)\r\n* **sdam:** use ObjectId comparison to track maxElectionId ([db991d6](https://github.com/mongodb/node-mongodb-native/commit/db991d6))\r\n* only mark server session dirty if the client session is alive ([611be8d](https://github.com/mongodb/node-mongodb-native/commit/611be8d))\r\n* pass options into `commandSupportsReadConcern` ([e855c83](https://github.com/mongodb/node-mongodb-native/commit/e855c83))\r\n* polyfill for util.promisify ([1c4cf6c](https://github.com/mongodb/node-mongodb-native/commit/1c4cf6c))\r\n* single `readPreferenceTags` should be parsed as an array ([a50611b](https://github.com/mongodb/node-mongodb-native/commit/a50611b))\r\n* store name of collection for more informative error messages ([979d41e](https://github.com/mongodb/node-mongodb-native/commit/979d41e))\r\n* support write concern provided as string in `fromOptions` ([637f428](https://github.com/mongodb/node-mongodb-native/commit/637f428))\r\n* use properly camel cased form of `mapReduce` for command ([c1ed2c1](https://github.com/mongodb/node-mongodb-native/commit/c1ed2c1))\r\n\r\n\r\n### Features\r\n\r\n* add MONGODB-AWS as a supported auth mechanism ([7f3cfba](https://github.com/mongodb/node-mongodb-native/commit/7f3cfba))\r\n* bump wire protocol version for 4.4 ([6d3f313](https://github.com/mongodb/node-mongodb-native/commit/6d3f313))\r\n* deprecate `oplogReplay` for find commands ([24155e7](https://github.com/mongodb/node-mongodb-native/commit/24155e7))\r\n* directConnection adds unify behavior for replica set discovery ([c5d60fc](https://github.com/mongodb/node-mongodb-native/commit/c5d60fc))\r\n* expand use of error labels for retryable writes ([c775a4a](https://github.com/mongodb/node-mongodb-native/commit/c775a4a))\r\n* support `allowDiskUse` for find commands ([dbc0b37](https://github.com/mongodb/node-mongodb-native/commit/dbc0b37))\r\n* support creating collections and indexes in transactions ([17e4c88](https://github.com/mongodb/node-mongodb-native/commit/17e4c88))\r\n* support passing a hint to findOneAndReplace/findOneAndUpdate ([faee15b](https://github.com/mongodb/node-mongodb-native/commit/faee15b))\r\n* support shorter SCRAM conversations ([6b9ff05](https://github.com/mongodb/node-mongodb-native/commit/6b9ff05))\r\n* use error labels for retryable writes in legacy topologies ([fefc165](https://github.com/mongodb/node-mongodb-native/commit/fefc165))\r\n\r\n\r\n\r\n\r\n<a name=\"3.5.7\"></a>\r\n## [3.5.7](https://github.com/mongodb/node-mongodb-native/compare/v3.5.6...v3.5.7) (2020-04-29)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* limit growth of server sessions through lazy acquisition ([3d05a6d](https://github.com/mongodb/node-mongodb-native/commit/3d05a6d))\r\n* remove circular dependency warnings on node 14 ([56a1b8a](https://github.com/mongodb/node-mongodb-native/commit/56a1b8a))\r\n\r\n\r\n\r\n<a name=\"3.5.6\"></a>\r\n## [3.5.6](https://github.com/mongodb/node-mongodb-native/compare/v3.5.5...v3.5.6) (2020-04-14)\r\n\r\n### Bug Fixes\r\n\r\n* always return empty array for selection on unknown topology ([f9e786a](https://github.com/mongodb/node-mongodb-native/commit/f9e786a))\r\n* createCollection only uses listCollections in strict mode ([d368f12](https://github.com/mongodb/node-mongodb-native/commit/d368f12))\r\n* don't throw if `withTransaction()` callback rejects with a null reason ([153646c](https://github.com/mongodb/node-mongodb-native/commit/153646c))\r\n* only mark server session dirty if the client session is alive ([611be8d](https://github.com/mongodb/node-mongodb-native/commit/611be8d))\r\n* polyfill for util.promisify ([1c4cf6c](https://github.com/mongodb/node-mongodb-native/commit/1c4cf6c))\r\n* single `readPreferenceTags` should be parsed as an array ([a50611b](https://github.com/mongodb/node-mongodb-native/commit/a50611b))\r\n* **cursor:** transforms should only be applied once to documents ([704f30a](https://github.com/mongodb/node-mongodb-native/commit/704f30a))\r\n\r\n\r\n\r\n<a name=\"3.5.5\"></a>\r\n## [3.5.5](https://github.com/mongodb/node-mongodb-native/compare/v3.5.4...v3.5.5) (2020-03-11)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* correctly use template string for connection string error message ([6238c84](https://github.com/mongodb/node-mongodb-native/commit/6238c84))\r\n* don't depend on private node api for `Timeout` wrapper ([3ddaa3e](https://github.com/mongodb/node-mongodb-native/commit/3ddaa3e))\r\n* multiple concurrent attempts to process the queue may fail ([f69f51c](https://github.com/mongodb/node-mongodb-native/commit/f69f51c))\r\n* pass optional promise lib to maybePromise ([cde11ec](https://github.com/mongodb/node-mongodb-native/commit/cde11ec))\r\n* **cursor:** hasNext consumes documents on cursor with limit ([ef04d00](https://github.com/mongodb/node-mongodb-native/commit/ef04d00))\r\n\r\n\r\n\r\n<a name=\"3.5.4\"></a>\r\n## [3.5.4](https://github.com/mongodb/node-mongodb-native/compare/v3.5.3...v3.5.4) (2020-02-25)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **cmap:** don't run min connection thread if no minimum specified ([2d1b713](https://github.com/mongodb/node-mongodb-native/commit/2d1b713))\r\n* **sdam:** use ObjectId comparison to track maxElectionId ([a1e0849](https://github.com/mongodb/node-mongodb-native/commit/a1e0849))\r\n* **topology:** ensure selection wait queue is always processed ([bf701d6](https://github.com/mongodb/node-mongodb-native/commit/bf701d6))\r\n* **topology:** enter `STATE_CLOSING` before draining waitQueue ([494dffb](https://github.com/mongodb/node-mongodb-native/commit/494dffb))\r\n* don't consume first document when calling `hasNext` on cursor ([bb359a1](https://github.com/mongodb/node-mongodb-native/commit/bb359a1))\r\n\r\n\r\n### Features\r\n\r\n* add utility helper for returning promises or using callbacks ([ac9e4c9](https://github.com/mongodb/node-mongodb-native/commit/ac9e4c9))\r\n\r\n\r\n\r\n<a name=\"3.5.3\"></a>\r\n## [3.5.3](https://github.com/mongodb/node-mongodb-native/compare/v3.5.2...v3.5.3) (2020-02-12)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **message-stream:** support multiple inbound message packets ([8388443](https://github.com/mongodb/node-mongodb-native/commit/8388443))\r\n* **server:** non-timeout network errors transition to Unknown state ([fa4b01b](https://github.com/mongodb/node-mongodb-native/commit/fa4b01b))\r\n\r\n\r\n### Features\r\n\r\n* **connection:** support exhaust behavior at the transport level ([9ccf268](https://github.com/mongodb/node-mongodb-native/commit/9ccf268))\r\n\r\n\r\n\r\n<a name=\"3.5.2\"></a>\r\n## [3.5.2](https://github.com/mongodb/node-mongodb-native/compare/v3.5.1...v3.5.2) (2020-01-20)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* properly handle err messages in MongoDB 2.6 servers ([0f4ab38](https://github.com/mongodb/node-mongodb-native/commit/0f4ab38))\r\n* **topology:** always emit SDAM unrecoverable errors ([57f158f](https://github.com/mongodb/node-mongodb-native/commit/57f158f))\r\n\r\n\r\n\r\n<a name=\"3.5.1\"></a>\r\n## [3.5.1](https://github.com/mongodb/node-mongodb-native/compare/v3.5.0...v3.5.1) (2020-01-17)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **cmap:** accept all node TLS options as pool options ([5995d1d](https://github.com/mongodb/node-mongodb-native/commit/5995d1d))\r\n* **cmap:** error wait queue members on failed connection creation ([d13b153](https://github.com/mongodb/node-mongodb-native/commit/d13b153))\r\n* **connect:** listen to `secureConnect` for tls connections ([f8bdb8d](https://github.com/mongodb/node-mongodb-native/commit/f8bdb8d))\r\n* **transactions:** use options helper to resolve read preference ([9698a76](https://github.com/mongodb/node-mongodb-native/commit/9698a76))\r\n* **uri_parser:** TLS uri variants imply `ssl=true` ([c8d182e](https://github.com/mongodb/node-mongodb-native/commit/c8d182e))\r\n\r\n\r\n\r\n<a name=\"3.5.0\"></a>\r\n# [3.5.0](https://github.com/mongodb/node-mongodb-native/compare/v3.4.1...v3.5.0) (2020-01-14)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* copy `ssl` option to pool connection options ([563ced6](https://github.com/mongodb/node-mongodb-native/commit/563ced6))\r\n* destroy connections marked as closed on checkIn / checkOut ([2bd17a6](https://github.com/mongodb/node-mongodb-native/commit/2bd17a6))\r\n* ensure sync errors are thrown, and don't callback twice ([cca5b49](https://github.com/mongodb/node-mongodb-native/commit/cca5b49))\r\n* ignore connection errors during pool destruction ([b8805dc](https://github.com/mongodb/node-mongodb-native/commit/b8805dc))\r\n* not all message payloads are arrays of Buffer ([e4df5f4](https://github.com/mongodb/node-mongodb-native/commit/e4df5f4))\r\n* recover on network error during initial connect ([a13dc68](https://github.com/mongodb/node-mongodb-native/commit/a13dc68))\r\n* remove servers with me mismatch in `updateRsFromPrimary` ([95a772e](https://github.com/mongodb/node-mongodb-native/commit/95a772e))\r\n* report the correct platform in client metadata ([35d0274](https://github.com/mongodb/node-mongodb-native/commit/35d0274))\r\n* reschedule monitoring before emitting heartbeat events ([7fcbeb5](https://github.com/mongodb/node-mongodb-native/commit/7fcbeb5))\r\n* socket timeout for handshake should be `connectTimeoutMS` ([c83af9a](https://github.com/mongodb/node-mongodb-native/commit/c83af9a))\r\n* timed out streams should be destroyed on `timeout` event ([5319ff9](https://github.com/mongodb/node-mongodb-native/commit/5319ff9))\r\n* use remote address for stream identifier ([f13c20b](https://github.com/mongodb/node-mongodb-native/commit/f13c20b))\r\n* used weighted RTT calculation for server selection ([d446be5](https://github.com/mongodb/node-mongodb-native/commit/d446be5))\r\n* **execute-operation:** don't swallow synchronous errors ([0a2d4e9](https://github.com/mongodb/node-mongodb-native/commit/0a2d4e9))\r\n* **gridfs:** make a copy of chunk before writing to server ([b4ec5b8](https://github.com/mongodb/node-mongodb-native/commit/b4ec5b8))\r\n\r\n\r\n### Features\r\n\r\n* add a `withConnection` helper to the connection pool ([d59dced](https://github.com/mongodb/node-mongodb-native/commit/d59dced))\r\n* include `connectionId` for APM with new CMAP connection pool ([9bd360c](https://github.com/mongodb/node-mongodb-native/commit/9bd360c))\r\n* integrate CMAP connection pool into unified topology ([9dd3939](https://github.com/mongodb/node-mongodb-native/commit/9dd3939))\r\n* introduce `MongoServerSelectionError` ([0cf7ec9](https://github.com/mongodb/node-mongodb-native/commit/0cf7ec9))\r\n* introduce a class for tracking stream specific attributes ([f6bf82c](https://github.com/mongodb/node-mongodb-native/commit/f6bf82c))\r\n* introduce a new `Monitor` type for server monitoring ([2bfe2a1](https://github.com/mongodb/node-mongodb-native/commit/2bfe2a1))\r\n* relay all CMAP events to MongoClient ([1aea4de](https://github.com/mongodb/node-mongodb-native/commit/1aea4de))\r\n* support socket timeouts on a per-connection level ([93e8ad0](https://github.com/mongodb/node-mongodb-native/commit/93e8ad0))\r\n\r\n\r\n\r\n<a name=\"3.4.1\"></a>\r\n## [3.4.1](https://github.com/mongodb/node-mongodb-native/compare/v3.4.0...v3.4.1) (2019-12-19)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **bulk:** use original indexes as map for current op index ([20800ac](https://github.com/mongodb/node-mongodb-native/commit/20800ac))\r\n* always check for network errors during SCRAM conversation ([e46a70e](https://github.com/mongodb/node-mongodb-native/commit/e46a70e))\r\n\r\n\r\n\r\n<a name=\"3.4.0\"></a>\r\n# [3.4.0](https://github.com/mongodb/node-mongodb-native/compare/v3.3.5...v3.4.0) (2019-12-10)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **bulk:** use operation index from input to report operation error ([f713b13](https://github.com/mongodb/node-mongodb-native/commit/f713b13))\r\n* **command:** only add TransientTransactionError label when in a transaction ([478d714](https://github.com/mongodb/node-mongodb-native/commit/478d714))\r\n* **compression:** recalculate opcode after determine OP_COMPRESSED ([022f51b](https://github.com/mongodb/node-mongodb-native/commit/022f51b))\r\n* **connect:** connect with family 0 instead of family 4 ([db07366](https://github.com/mongodb/node-mongodb-native/commit/db07366))\r\n* **connection:** timed out connections should not be half closed ([850f4f5](https://github.com/mongodb/node-mongodb-native/commit/850f4f5))\r\n* **cursor:** call `initialize` after session support check ([e50c51a](https://github.com/mongodb/node-mongodb-native/commit/e50c51a))\r\n* **encryption:** autoEncryption must error on mongodb < 4.2 ([c274615](https://github.com/mongodb/node-mongodb-native/commit/c274615))\r\n* **encryption:** do not attempt to merge autoEncryption options ([e27fdf9](https://github.com/mongodb/node-mongodb-native/commit/e27fdf9))\r\n* **encryption:** encryption uses smaller batch size ([cb78e69](https://github.com/mongodb/node-mongodb-native/commit/cb78e69))\r\n* **encryption:** respect bypassAutoEncryption ([e927499](https://github.com/mongodb/node-mongodb-native/commit/e927499))\r\n* **encryption:** respect user bson options when using autoEncryption ([cb7a3f7](https://github.com/mongodb/node-mongodb-native/commit/cb7a3f7))\r\n* add calculated duration to server as `roundTripTime` ([cb107a8](https://github.com/mongodb/node-mongodb-native/commit/cb107a8))\r\n* **mongodb+srv:** respect overriding SRV-provided properties ([ea83360](https://github.com/mongodb/node-mongodb-native/commit/ea83360))\r\n* **pool:** flush workItems after next tick to avoid dupe selection ([3ec49e5](https://github.com/mongodb/node-mongodb-native/commit/3ec49e5))\r\n* **pool:** support a `drain` event for use with unified topology ([da931ea](https://github.com/mongodb/node-mongodb-native/commit/da931ea))\r\n* **scram:** verify server digest, ensuring mutual authentication ([806cd62](https://github.com/mongodb/node-mongodb-native/commit/806cd62))\r\n* **srv-poller:** always provide a valid number for `intervalMS` ([afb125f](https://github.com/mongodb/node-mongodb-native/commit/afb125f))\r\n* **topology:** correct logic for checking for sessions support ([8d157c8](https://github.com/mongodb/node-mongodb-native/commit/8d157c8))\r\n* **topology:** don't drain iteration timers on server selection ([fed6a57](https://github.com/mongodb/node-mongodb-native/commit/fed6a57))\r\n\r\n\r\n### Features\r\n\r\n* add `MessageStream` for streamed wire protocol messaging ([8c44044](https://github.com/mongodb/node-mongodb-native/commit/8c44044))\r\n* introduce a modern `Connection` replacement for CMAP ([7890e48](https://github.com/mongodb/node-mongodb-native/commit/7890e48))\r\n* support connection establishment cancellation ([2014b7b](https://github.com/mongodb/node-mongodb-native/commit/2014b7b))\r\n* support driver info for drivers wrapping the node driver ([1b6670b](https://github.com/mongodb/node-mongodb-native/commit/1b6670b))\r\n\r\n\r\n\r\n<a name=\"3.3.5\"></a>\r\n## [3.3.5](https://github.com/mongodb/node-mongodb-native/compare/v3.3.4...v3.3.5) (2019-11-26)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **bulk:** use operation index from input to report operation error ([08ee53e](https://github.com/mongodb/node-mongodb-native/commit/08ee53e))\r\n* **command:** only add TransientTransactionError label when in a transaction ([8bab074](https://github.com/mongodb/node-mongodb-native/commit/8bab074))\r\n* **connect:** connect with family 0 instead of family 4 ([7a41279](https://github.com/mongodb/node-mongodb-native/commit/7a41279))\r\n* **cursor:** call `initialize` after session support check ([3b076b3](https://github.com/mongodb/node-mongodb-native/commit/3b076b3))\r\n* **mongodb+srv:** respect overriding SRV-provided properties ([5ed4c07](https://github.com/mongodb/node-mongodb-native/commit/5ed4c07))\r\n* **pool:** support a `drain` event for use with unified topology ([3471c28](https://github.com/mongodb/node-mongodb-native/commit/3471c28))\r\n* **topology:** correct logic for checking for sessions support ([2d976bd](https://github.com/mongodb/node-mongodb-native/commit/2d976bd))\r\n* **topology:** don't drain iteration timers on server selection ([261f1e5](https://github.com/mongodb/node-mongodb-native/commit/261f1e5))\r\n\r\n\r\n### Features\r\n\r\n* support driver info for drivers wrapping the node driver ([d85c4a8](https://github.com/mongodb/node-mongodb-native/commit/d85c4a8))\r\n\r\n\r\n\r\n<a name=\"3.3.4\"></a>\r\n## [3.3.4](https://github.com/mongodb/node-mongodb-native/compare/v3.3.3...v3.3.4) (2019-11-11)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **close:** the unified topology emits a close event on close now ([ee0db01](https://github.com/mongodb/node-mongodb-native/commit/ee0db01))\r\n* **connect:** prevent multiple callbacks in error scenarios ([5f6a787](https://github.com/mongodb/node-mongodb-native/commit/5f6a787))\r\n* **monitoring:** incorrect states used to determine rescheduling ([ec1e04c](https://github.com/mongodb/node-mongodb-native/commit/ec1e04c))\r\n* **pool:** don't reset a pool if we'not already connected ([32316e4](https://github.com/mongodb/node-mongodb-native/commit/32316e4))\r\n* **pool:** only transition to `DISCONNECTED` if reconnect enabled ([43d461e](https://github.com/mongodb/node-mongodb-native/commit/43d461e))\r\n* **replset:** don't leak servers failing to connect ([f209160](https://github.com/mongodb/node-mongodb-native/commit/f209160))\r\n* **replset:** use correct `topologyId` for event emission ([19549ff](https://github.com/mongodb/node-mongodb-native/commit/19549ff))\r\n* **sdam:** `minHeartbeatIntervalMS` => `minHeartbeatFrequencyMS` ([af9fb45](https://github.com/mongodb/node-mongodb-native/commit/af9fb45))\r\n* **sdam:** don't emit `close` every time a child server closes ([818055a](https://github.com/mongodb/node-mongodb-native/commit/818055a))\r\n* **sdam:** don't lose servers when they fail monitoring ([8a534bb](https://github.com/mongodb/node-mongodb-native/commit/8a534bb))\r\n* **sdam:** don't remove unknown servers in topology updates ([1147ebf](https://github.com/mongodb/node-mongodb-native/commit/1147ebf))\r\n* **sdam:** ignore server errors when closing/closed ([49d7235](https://github.com/mongodb/node-mongodb-native/commit/49d7235))\r\n* **server:** don't emit error in connect if closing/closed ([62ada2a](https://github.com/mongodb/node-mongodb-native/commit/62ada2a))\r\n* **server:** ensure state is transitioned to closed on connect fail ([a471707](https://github.com/mongodb/node-mongodb-native/commit/a471707))\r\n* **topology:** report unified topology as `nodejs` ([d126665](https://github.com/mongodb/node-mongodb-native/commit/d126665))\r\n* **topology:** set max listeners to infinity for db event relay ([edb1335](https://github.com/mongodb/node-mongodb-native/commit/edb1335))\r\n\r\n\r\n### Features\r\n\r\n* **sdam_viz:** add new tool for visualizing driver sdam changes ([738189a](https://github.com/mongodb/node-mongodb-native/commit/738189a))\r\n* **sdam_viz:** support legacy topologies in sdam_viz tool ([1a5537e](https://github.com/mongodb/node-mongodb-native/commit/1a5537e))\r\n* **update-hints:** add support for `hint` to all update methods ([720f5e5](https://github.com/mongodb/node-mongodb-native/commit/720f5e5))\r\n\r\n\r\n\r\n<a name=\"3.3.3\"></a>\r\n## [3.3.3](https://github.com/mongodb/node-mongodb-native/compare/v3.3.2...v3.3.3) (2019-10-16)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **change_stream:** emit 'close' event if reconnecting failed ([f24c084](https://github.com/mongodb/node-mongodb-native/commit/f24c084))\r\n* **ChangeStream:** remove startAtOperationTime once we have resumeToken ([362afd8](https://github.com/mongodb/node-mongodb-native/commit/362afd8))\r\n* **connect:** Switch new Buffer(size) -> Buffer.alloc(size) ([da90c3a](https://github.com/mongodb/node-mongodb-native/commit/da90c3a))\r\n* **MongoClient:** only check own properties for valid options ([9cde4b9](https://github.com/mongodb/node-mongodb-native/commit/9cde4b9))\r\n* **mongos:** disconnect proxies which are not mongos instances ([ee53983](https://github.com/mongodb/node-mongodb-native/commit/ee53983))\r\n* **mongos:** force close servers during reconnect flow ([186263f](https://github.com/mongodb/node-mongodb-native/commit/186263f))\r\n* **monitoring:** correct spelling mistake for heartbeat event ([21aa117](https://github.com/mongodb/node-mongodb-native/commit/21aa117))\r\n* **replset:** correct server leak on initial connect ([da39d1e](https://github.com/mongodb/node-mongodb-native/commit/da39d1e))\r\n* **replset:** destroy primary before removing from replsetstate ([45ac09a](https://github.com/mongodb/node-mongodb-native/commit/45ac09a))\r\n* **replset:** destroy servers that are removed during SDAM flow ([9ea0190](https://github.com/mongodb/node-mongodb-native/commit/9ea0190))\r\n* **saslprep:** add in missing saslprep dependency ([41f1165](https://github.com/mongodb/node-mongodb-native/commit/41f1165))\r\n* **topology:** don't early abort server selection on network errors ([2b6a359](https://github.com/mongodb/node-mongodb-native/commit/2b6a359))\r\n* **topology:** don't emit server closed event on network error ([194dcf0](https://github.com/mongodb/node-mongodb-native/commit/194dcf0))\r\n* **topology:** include all BSON types in ctor for bson-ext support ([aa4c832](https://github.com/mongodb/node-mongodb-native/commit/aa4c832))\r\n* **topology:** respect the `force` parameter for topology close ([d6e8936](https://github.com/mongodb/node-mongodb-native/commit/d6e8936))\r\n\r\n### Features\r\n\r\n* **Update:** add the ability to specify a pipeline to an update command ([#2017](https://github.com/mongodb/node-mongodb-native/issues/2017)) ([44a4110](https://github.com/mongodb/node-mongodb-native/commit/44a4110))\r\n* **urlParser:** default useNewUrlParser to true ([52d76e3](https://github.com/mongodb/node-mongodb-native/commit/52d76e3))\r\n\r\n<a name=\"3.2.7\"></a>\r\n## [3.2.7](https://github.com/mongodb/node-mongodb-native/compare/v3.2.6...v3.2.7) (2019-06-04)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **core:** updating core to version 3.2.7 ([2f91466](https://github.com/mongodb/node-mongodb-native/commit/2f91466))\r\n* **findOneAndReplace:** throw error if atomic operators provided for findOneAndReplace ([6a860a3](https://github.com/mongodb/node-mongodb-native/commit/6a860a3))\r\n\r\n\r\n\r\n<a name=\"3.3.2\"></a>\r\n## [3.3.2](https://github.com/mongodb/node-mongodb-native/compare/v3.3.1...v3.3.2) (2019-08-28)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **change-stream:** default to server default batch size ([b3ae4c5](https://github.com/mongodb/node-mongodb-native/commit/b3ae4c5))\r\n* **execute-operation:** return promise on session support check ([a976c14](https://github.com/mongodb/node-mongodb-native/commit/a976c14))\r\n* **gridfs-stream:** ensure `close` is emitted after last chunk ([ae94cb9](https://github.com/mongodb/node-mongodb-native/commit/ae94cb9))\r\n\r\n\r\n\r\n<a name=\"3.3.1\"></a>\r\n## [3.3.1](https://github.com/mongodb/node-mongodb-native/compare/v3.3.0...v3.3.1) (2019-08-23)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **find:** respect client-level provided read preference ([fec4f15](https://github.com/mongodb/node-mongodb-native/commit/fec4f15))\r\n* correct inverted defaults for unified topology ([cf598e1](https://github.com/mongodb/node-mongodb-native/commit/cf598e1))\r\n\r\n\r\n\r\n<a name=\"3.3.0\"></a>\r\n# [3.3.0](https://github.com/mongodb/node-mongodb-native/compare/v3.3.0-alpha1...v3.3.0) (2019-08-13)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregate-operation:** move type assertions to constructor ([25b27ff](https://github.com/mongodb/node-mongodb-native/commit/25b27ff))\r\n* **autoEncryption:** tear down mongocryptd client when main client closes ([fe2f57e](https://github.com/mongodb/node-mongodb-native/commit/fe2f57e))\r\n* **autoEncryption:** use new url parser for autoEncryption client ([d3670c2](https://github.com/mongodb/node-mongodb-native/commit/d3670c2))\r\n* **Bulk:** change BulkWriteError message to first item from writeErrors ([#2013](https://github.com/mongodb/node-mongodb-native/issues/2013)) ([6bcf1e4](https://github.com/mongodb/node-mongodb-native/commit/6bcf1e4))\r\n* **change_stream:** emit 'close' event if reconnecting failed ([41aba90](https://github.com/mongodb/node-mongodb-native/commit/41aba90))\r\n* **change_stream:** emit close event after cursor is closed during error ([c2d80b2](https://github.com/mongodb/node-mongodb-native/commit/c2d80b2))\r\n* **change-streams:** don't copy irrelevant resume options ([f190072](https://github.com/mongodb/node-mongodb-native/commit/f190072))\r\n* **changestream:** removes all event listeners on close ([30eeeb5](https://github.com/mongodb/node-mongodb-native/commit/30eeeb5))\r\n* **ChangeStream:** remove startAtOperationTime once we have resumeToken ([8d27e6e](https://github.com/mongodb/node-mongodb-native/commit/8d27e6e))\r\n* **ClientSessions:** initialize clientOptions and cluster time ([b95d64e](https://github.com/mongodb/node-mongodb-native/commit/b95d64e))\r\n* **connect:** don't treat 'connect' as an error event ([170a011](https://github.com/mongodb/node-mongodb-native/commit/170a011))\r\n* **connect:** fixed syntax issue in connect error handler ([ff7166d](https://github.com/mongodb/node-mongodb-native/commit/ff7166d))\r\n* **connections_stepdown_tests:** use correct version of mongo for tests ([ce2c9af](https://github.com/mongodb/node-mongodb-native/commit/ce2c9af))\r\n* **createCollection:** Db.createCollection should pass readConcern to new collection ([#2026](https://github.com/mongodb/node-mongodb-native/issues/2026)) ([6145d4b](https://github.com/mongodb/node-mongodb-native/commit/6145d4b))\r\n* **cursor:** do not truncate an existing Long ([317055b](https://github.com/mongodb/node-mongodb-native/commit/317055b)), closes [mongodb-js/mongodb-core#441](https://github.com/mongodb-js/mongodb-core/issues/441)\r\n* **distinct:** return full response if `full` option was specified ([95a7d05](https://github.com/mongodb/node-mongodb-native/commit/95a7d05))\r\n* **MongoClient:** allow Object.prototype items as db names ([dc6fc37](https://github.com/mongodb/node-mongodb-native/commit/dc6fc37))\r\n* **MongoClient:** only check own properties for valid options ([c9dc717](https://github.com/mongodb/node-mongodb-native/commit/c9dc717))\r\n* **OpMsg:** cap requestIds at 0x7fffffff ([c0e87d5](https://github.com/mongodb/node-mongodb-native/commit/c0e87d5))\r\n* **read-operations:** send sessions on all read operations ([4d45c8a](https://github.com/mongodb/node-mongodb-native/commit/4d45c8a))\r\n* **ReadPreference:** improve ReadPreference error message and remove irrelevant sharding test ([dd34ce4](https://github.com/mongodb/node-mongodb-native/commit/dd34ce4))\r\n* **ReadPreference:** only allow valid ReadPreference modes ([06bbef2](https://github.com/mongodb/node-mongodb-native/commit/06bbef2))\r\n* **replset:** correct legacy max staleness calculation ([2eab8aa](https://github.com/mongodb/node-mongodb-native/commit/2eab8aa))\r\n* **replset:** introduce a fixed-time server selection loop ([cf53299](https://github.com/mongodb/node-mongodb-native/commit/cf53299))\r\n* **server:** emit \"first connect\" error if initial connect fails due to ECONNREFUSED ([#2016](https://github.com/mongodb/node-mongodb-native/issues/2016)) ([5a7b15b](https://github.com/mongodb/node-mongodb-native/commit/5a7b15b))\r\n* **serverSelection:** make sure to pass session to serverSelection ([eb5cc6b](https://github.com/mongodb/node-mongodb-native/commit/eb5cc6b))\r\n* **sessions:** ensure an error is thrown when attempting sharded transactions ([3a1fdc1](https://github.com/mongodb/node-mongodb-native/commit/3a1fdc1))\r\n* **topology:** add new error for retryWrites on MMAPv1 ([392f5a6](https://github.com/mongodb/node-mongodb-native/commit/392f5a6))\r\n* don't check non-unified topologies for session support check ([2bccd3f](https://github.com/mongodb/node-mongodb-native/commit/2bccd3f))\r\n* maintain internal database name on collection rename ([884d46f](https://github.com/mongodb/node-mongodb-native/commit/884d46f))\r\n* only check for transaction state if session exists ([360975a](https://github.com/mongodb/node-mongodb-native/commit/360975a))\r\n* preserve aggregate explain support for legacy servers ([032b204](https://github.com/mongodb/node-mongodb-native/commit/032b204))\r\n* read concern only supported for `mapReduce` without inline ([51a36f3](https://github.com/mongodb/node-mongodb-native/commit/51a36f3))\r\n* reintroduce support for 2.6 listIndexes ([c3bfc05](https://github.com/mongodb/node-mongodb-native/commit/c3bfc05))\r\n* return `executeOperation` for explain, if promise is desired ([b4a7ad7](https://github.com/mongodb/node-mongodb-native/commit/b4a7ad7))\r\n* validate atomic operations in all update methods ([88bb77e](https://github.com/mongodb/node-mongodb-native/commit/88bb77e))\r\n* **transactions:** fix error message for attempting sharded ([eb5dfc9](https://github.com/mongodb/node-mongodb-native/commit/eb5dfc9))\r\n* **transactions:** fix sharded transaction error logic ([083e18a](https://github.com/mongodb/node-mongodb-native/commit/083e18a))\r\n\r\n\r\n### Features\r\n\r\n* **Aggregate:** support ReadConcern in aggregates with $out ([21cdcf0](https://github.com/mongodb/node-mongodb-native/commit/21cdcf0))\r\n* **AutoEncryption:** improve error message for missing mongodb-client-encryption ([583f29f](https://github.com/mongodb/node-mongodb-native/commit/583f29f))\r\n* **ChangeStream:** adds new resume functionality to ChangeStreams ([9ec9b8f](https://github.com/mongodb/node-mongodb-native/commit/9ec9b8f))\r\n* **ChangeStreamCursor:** introduce new cursor type for change streams ([8813eb0](https://github.com/mongodb/node-mongodb-native/commit/8813eb0))\r\n* **cryptdConnectionString:** makes mongocryptd uri configurable ([#2049](https://github.com/mongodb/node-mongodb-native/issues/2049)) ([a487be4](https://github.com/mongodb/node-mongodb-native/commit/a487be4))\r\n* **eachAsync:** dedupe async iteration with a common helper ([c296f3a](https://github.com/mongodb/node-mongodb-native/commit/c296f3a))\r\n* **execute-operation:** allow execution with server selection ([36bc1fd](https://github.com/mongodb/node-mongodb-native/commit/36bc1fd))\r\n* **pool:** add support for resetting the connection pool ([2d1ff40](https://github.com/mongodb/node-mongodb-native/commit/2d1ff40))\r\n* **sessions:** track dirty state of sessions, drop after use ([f61df16](https://github.com/mongodb/node-mongodb-native/commit/f61df16))\r\n* add concept of `data-bearing` type to `ServerDescription` ([852e14f](https://github.com/mongodb/node-mongodb-native/commit/852e14f))\r\n* **transaction:** allow applications to set maxTimeMS for commitTransaction ([b3948aa](https://github.com/mongodb/node-mongodb-native/commit/b3948aa))\r\n* **Update:** add the ability to specify a pipeline to an update command ([#2017](https://github.com/mongodb/node-mongodb-native/issues/2017)) ([dc1387e](https://github.com/mongodb/node-mongodb-native/commit/dc1387e))\r\n* add `known`, `data-bearing` filters to `TopologyDescription` ([d0ccb56](https://github.com/mongodb/node-mongodb-native/commit/d0ccb56))\r\n* perform selection before cursor operation execution if needed ([808cf37](https://github.com/mongodb/node-mongodb-native/commit/808cf37))\r\n* perform selection before operation execution if needed ([1a25876](https://github.com/mongodb/node-mongodb-native/commit/1a25876))\r\n* support explain operations in `CommandOperationV2` ([86f5ba5](https://github.com/mongodb/node-mongodb-native/commit/86f5ba5))\r\n* support operations passed to a `Cursor` or subclass ([b78bb89](https://github.com/mongodb/node-mongodb-native/commit/b78bb89))\r\n\r\n\r\n\r\n<a name=\"3.2.7\"></a>\r\n## [3.2.7](https://github.com/mongodb/node-mongodb-native/compare/v3.2.6...v3.2.7) (2019-06-04)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **core:** updating core to version 3.2.7 ([2f91466](https://github.com/mongodb/node-mongodb-native/commit/2f91466))\r\n* **findOneAndReplace:** throw error if atomic operators provided for findOneAndReplace ([6a860a3](https://github.com/mongodb/node-mongodb-native/commit/6a860a3))\r\n\r\n\r\n\r\n<a name=\"3.2.6\"></a>\r\n## [3.2.6](https://github.com/mongodb/node-mongodb-native/compare/v3.2.5...v3.2.6) (2019-05-24)\r\n\r\n\r\n\r\n<a name=\"3.2.5\"></a>\r\n## [3.2.5](https://github.com/mongodb/node-mongodb-native/compare/v3.2.4...v3.2.5) (2019-05-17)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **core:** updating core to 3.2.5 ([a2766c1](https://github.com/mongodb/node-mongodb-native/commit/a2766c1))\r\n\r\n\r\n\r\n<a name=\"3.2.4\"></a>\r\n## [3.2.4](https://github.com/mongodb/node-mongodb-native/compare/v3.2.2...v3.2.4) (2019-05-08)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregation:** fix field name typo ([4235d04](https://github.com/mongodb/node-mongodb-native/commit/4235d04))\r\n* **async:** rewrote asyncGenerator in node < 10 syntax ([49c8cef](https://github.com/mongodb/node-mongodb-native/commit/49c8cef))\r\n* **BulkOp:** run unordered bulk ops in serial ([f548bd7](https://github.com/mongodb/node-mongodb-native/commit/f548bd7))\r\n* **bulkWrite:** fix issue with bulkWrite continuing w/ callback ([2a4a42c](https://github.com/mongodb/node-mongodb-native/commit/2a4a42c))\r\n* **docs:** correctly document that default for `sslValidate` is false ([1f8e7fa](https://github.com/mongodb/node-mongodb-native/commit/1f8e7fa))\r\n* **gridfs-stream:** honor chunk size ([9eeb114](https://github.com/mongodb/node-mongodb-native/commit/9eeb114))\r\n* **unified-topology:** only clone pool size if provided ([8dc2416](https://github.com/mongodb/node-mongodb-native/commit/8dc2416))\r\n\r\n\r\n### Features\r\n\r\n* update to mongodb-core v3.2.3 ([1c5357a](https://github.com/mongodb/node-mongodb-native/commit/1c5357a))\r\n* **core:** update to mongodb-core v3.2.4 ([2059260](https://github.com/mongodb/node-mongodb-native/commit/2059260))\r\n* **lib:** implement executeOperationV2 ([67d4edf](https://github.com/mongodb/node-mongodb-native/commit/67d4edf))\r\n\r\n\r\n\r\n<a name=\"3.2.3\"></a>\r\n## [3.2.3](https://github.com/mongodb/node-mongodb-native/compare/v3.2.2...v3.2.3) (2019-04-05)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregation:** fix field name typo ([4235d04](https://github.com/mongodb/node-mongodb-native/commit/4235d04))\r\n* **async:** rewrote asyncGenerator in node < 10 syntax ([49c8cef](https://github.com/mongodb/node-mongodb-native/commit/49c8cef))\r\n* **bulkWrite:** fix issue with bulkWrite continuing w/ callback ([2a4a42c](https://github.com/mongodb/node-mongodb-native/commit/2a4a42c))\r\n* **docs:** correctly document that default for `sslValidate` is false ([1f8e7fa](https://github.com/mongodb/node-mongodb-native/commit/1f8e7fa))\r\n\r\n\r\n### Features\r\n\r\n* update to mongodb-core v3.2.3 ([1c5357a](https://github.com/mongodb/node-mongodb-native/commit/1c5357a))\r\n\r\n\r\n\r\n<a name=\"3.2.2\"></a>\r\n## [3.2.2](https://github.com/mongodb/node-mongodb-native/compare/v3.2.1...v3.2.2) (2019-03-22)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **asyncIterator:** stronger guard against importing async generator ([e0826fb](https://github.com/mongodb/node-mongodb-native/commit/e0826fb))\r\n\r\n\r\n### Features\r\n\r\n* update to mongodb-core v3.2.2 ([868cfc3](https://github.com/mongodb/node-mongodb-native/commit/868cfc3))\r\n\r\n\r\n\r\n<a name=\"3.2.1\"></a>\r\n## [3.2.1](https://github.com/mongodb/node-mongodb-native/compare/v3.2.0...v3.2.1) (2019-03-21)\r\n\r\n\r\n### Features\r\n\r\n* **core:** update to mongodb-core v3.2.1 ([30b0100](https://github.com/mongodb/node-mongodb-native/commit/30b0100))\r\n\r\n\r\n\r\n<a name=\"3.2.0\"></a>\r\n# [3.2.0](https://github.com/mongodb/node-mongodb-native/compare/v3.1.13...v3.2.0) (2019-03-21)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregate:** do not send batchSize for aggregation with $out ([ddb8d90](https://github.com/mongodb/node-mongodb-native/commit/ddb8d90))\r\n* **bulkWrite:** always count undefined values in bson size for bulk ([436d340](https://github.com/mongodb/node-mongodb-native/commit/436d340))\r\n* **db_ops:** rename db to add user on ([79931af](https://github.com/mongodb/node-mongodb-native/commit/79931af))\r\n* **mongo_client_ops:** only skip authentication if no authMechanism is specified ([3b6957d](https://github.com/mongodb/node-mongodb-native/commit/3b6957d))\r\n* **mongo-client:** ensure close callback is called with client ([f39e881](https://github.com/mongodb/node-mongodb-native/commit/f39e881))\r\n\r\n\r\n### Features\r\n\r\n* **core:** pin to mongodb-core v3.2.0 ([22af15a](https://github.com/mongodb/node-mongodb-native/commit/22af15a))\r\n* **Cursor:** adds support for AsyncIterator in cursors ([b972c1e](https://github.com/mongodb/node-mongodb-native/commit/b972c1e))\r\n* **db:** add database-level aggregation ([b629b21](https://github.com/mongodb/node-mongodb-native/commit/b629b21))\r\n* **mongo-client:** remove deprecated `logout` and print warning ([542859d](https://github.com/mongodb/node-mongodb-native/commit/542859d))\r\n* **topology-base:** support passing callbacks to `close` method ([7c111e0](https://github.com/mongodb/node-mongodb-native/commit/7c111e0))\r\n* **transactions:** support pinning mongos for sharded txns ([3886127](https://github.com/mongodb/node-mongodb-native/commit/3886127))\r\n* **unified-sdam:** backport unified SDAM to master for v3.2.0 ([79f33ca](https://github.com/mongodb/node-mongodb-native/commit/79f33ca))\r\n\r\n\r\n\r\n<a name=\"3.1.13\"></a>\r\n## [3.1.13](https://github.com/mongodb/node-mongodb-native/compare/v3.1.12...v3.1.13) (2019-01-23)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* restore ability to webpack by removing `makeLazyLoader` ([050267d](https://github.com/mongodb/node-mongodb-native/commit/050267d))\r\n* **bulk:** honor ignoreUndefined in initializeUnorderedBulkOp ([e806be4](https://github.com/mongodb/node-mongodb-native/commit/e806be4))\r\n* **changeStream:** properly handle changeStream event mid-close ([#1902](https://github.com/mongodb/node-mongodb-native/issues/1902)) ([5ad9fa9](https://github.com/mongodb/node-mongodb-native/commit/5ad9fa9))\r\n* **db_ops:** ensure we async resolve errors in createCollection ([210c71d](https://github.com/mongodb/node-mongodb-native/commit/210c71d))\r\n\r\n\r\n\r\n<a name=\"3.1.12\"></a>\r\n## [3.1.12](https://github.com/mongodb/node-mongodb-native/compare/v3.1.11...v3.1.12) (2019-01-16)\r\n\r\n\r\n### Features\r\n\r\n* **core:** update to mongodb-core v3.1.11 ([9bef6e7](https://github.com/mongodb/node-mongodb-native/commit/9bef6e7))\r\n\r\n\r\n\r\n<a name=\"3.1.11\"></a>\r\n## [3.1.11](https://github.com/mongodb/node-mongodb-native/compare/v3.1.10...v3.1.11) (2019-01-15)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **bulk:** fix error propagation in empty bulk.execute ([a3adb3f](https://github.com/mongodb/node-mongodb-native/commit/a3adb3f))\r\n* **bulk:** make sure that any error in bulk write is propagated ([bedc2d2](https://github.com/mongodb/node-mongodb-native/commit/bedc2d2))\r\n* **bulk:** properly calculate batch size for bulk writes ([aafe71b](https://github.com/mongodb/node-mongodb-native/commit/aafe71b))\r\n* **operations:** do not call require in a hot path ([ff82ff4](https://github.com/mongodb/node-mongodb-native/commit/ff82ff4))\r\n\r\n\r\n\r\n<a name=\"3.1.10\"></a>\r\n## [3.1.10](https://github.com/mongodb/node-mongodb-native/compare/v3.1.9...v3.1.10) (2018-11-16)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **auth:** remember to default to admin database ([c7dec28](https://github.com/mongodb/node-mongodb-native/commit/c7dec28))\r\n\r\n\r\n### Features\r\n\r\n* **core:** update to mongodb-core v3.1.9 ([bd3355b](https://github.com/mongodb/node-mongodb-native/commit/bd3355b))\r\n\r\n\r\n\r\n<a name=\"3.1.9\"></a>\r\n## [3.1.9](https://github.com/mongodb/node-mongodb-native/compare/v3.1.8...v3.1.9) (2018-11-06)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **db:** move db constants to other file to avoid circular ref ([#1858](https://github.com/mongodb/node-mongodb-native/issues/1858)) ([239036f](https://github.com/mongodb/node-mongodb-native/commit/239036f))\r\n* **estimated-document-count:** support options other than maxTimeMs ([36c3c7d](https://github.com/mongodb/node-mongodb-native/commit/36c3c7d))\r\n\r\n\r\n### Features\r\n\r\n* **core:** update to mongodb-core v3.1.8 ([80d7c79](https://github.com/mongodb/node-mongodb-native/commit/80d7c79))\r\n\r\n\r\n\r\n<a name=\"3.1.8\"></a>\r\n## [3.1.8](https://github.com/mongodb/node-mongodb-native/compare/v3.1.7...v3.1.8) (2018-10-10)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **connect:** use reported default databse from new uri parser ([811f8f8](https://github.com/mongodb/node-mongodb-native/commit/811f8f8))\r\n\r\n\r\n### Features\r\n\r\n* **core:** update to mongodb-core v3.1.7 ([dbfc905](https://github.com/mongodb/node-mongodb-native/commit/dbfc905))\r\n\r\n\r\n\r\n<a name=\"3.1.7\"></a>\r\n## [3.1.7](https://github.com/mongodb/node-mongodb-native/compare/v3.1.6...v3.1.7) (2018-10-09)\r\n\r\n\r\n### Features\r\n\r\n* **core:** update mongodb-core to v3.1.6 ([61b054e](https://github.com/mongodb/node-mongodb-native/commit/61b054e))\r\n\r\n\r\n\r\n<a name=\"3.1.6\"></a>\r\n## [3.1.6](https://github.com/mongodb/node-mongodb-native/compare/v3.1.5...v3.1.6) (2018-09-15)\r\n\r\n\r\n### Features\r\n\r\n* **core:** update to core v3.1.5 ([c5f823d](https://github.com/mongodb/node-mongodb-native/commit/c5f823d))\r\n\r\n\r\n\r\n<a name=\"3.1.5\"></a>\r\n## [3.1.5](https://github.com/mongodb/node-mongodb-native/compare/v3.1.4...v3.1.5) (2018-09-14)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **cursor:** allow `$meta` based sort when passing an array to `sort()` ([f93a8c3](https://github.com/mongodb/node-mongodb-native/commit/f93a8c3))\r\n* **utils:** only set retryWrites to true for valid operations ([3b725ef](https://github.com/mongodb/node-mongodb-native/commit/3b725ef))\r\n\r\n\r\n### Features\r\n\r\n* **core:** bump core to v3.1.4 ([805d58a](https://github.com/mongodb/node-mongodb-native/commit/805d58a))\r\n\r\n\r\n\r\n<a name=\"3.1.4\"></a>\r\n## [3.1.4](https://github.com/mongodb/node-mongodb-native/compare/v3.1.3...v3.1.4) (2018-08-25)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **buffer:** use safe-buffer polyfill to maintain compatibility ([327da95](https://github.com/mongodb/node-mongodb-native/commit/327da95))\r\n* **change-stream:** properly support resumablity in stream mode ([c43a34b](https://github.com/mongodb/node-mongodb-native/commit/c43a34b))\r\n* **connect:** correct replacement of topology on connect callback ([918a1e0](https://github.com/mongodb/node-mongodb-native/commit/918a1e0))\r\n* **cursor:** remove deprecated notice on forEach ([a474158](https://github.com/mongodb/node-mongodb-native/commit/a474158))\r\n* **url-parser:** bail early on validation when using domain socket ([3cb3da3](https://github.com/mongodb/node-mongodb-native/commit/3cb3da3))\r\n\r\n\r\n### Features\r\n\r\n* **client-ops:** allow bypassing creation of topologies on connect ([fe39b93](https://github.com/mongodb/node-mongodb-native/commit/fe39b93))\r\n* **core:** update mongodb-core to 3.1.3 ([a029047](https://github.com/mongodb/node-mongodb-native/commit/a029047))\r\n* **test:** use connection strings for all calls to `newClient` ([1dac18f](https://github.com/mongodb/node-mongodb-native/commit/1dac18f))\r\n\r\n\r\n\r\n<a name=\"3.1.3\"></a>\r\n## [3.1.3](https://github.com/mongodb/node-mongodb-native/compare/v3.1.2...v3.1.3) (2018-08-13)\r\n\r\n\r\n### Features\r\n\r\n* **core:** update to mongodb-core 3.1.2 ([337cb79](https://github.com/mongodb/node-mongodb-native/commit/337cb79))\r\n\r\n\r\n\r\n<a name=\"3.1.2\"></a>\r\n## [3.1.2](https://github.com/mongodb/node-mongodb-native/compare/v3.0.6...v3.1.2) (2018-08-13)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregate:** support user-provided `batchSize` ([ad10dee](https://github.com/mongodb/node-mongodb-native/commit/ad10dee))\r\n* **buffer:** replace deprecated Buffer constructor ([759dd85](https://github.com/mongodb/node-mongodb-native/commit/759dd85))\r\n* **bulk:** fixing retryable writes for mass-change ops ([0604036](https://github.com/mongodb/node-mongodb-native/commit/0604036))\r\n* **bulk:** handle MongoWriteConcernErrors ([12ff392](https://github.com/mongodb/node-mongodb-native/commit/12ff392))\r\n* **change_stream:** do not check isGetMore if error[mongoErrorContextSymbol] is undefined ([#1720](https://github.com/mongodb/node-mongodb-native/issues/1720)) ([844c2c8](https://github.com/mongodb/node-mongodb-native/commit/844c2c8))\r\n* **change-stream:** fix change stream resuming with promises ([3063f00](https://github.com/mongodb/node-mongodb-native/commit/3063f00))\r\n* **client-ops:** return transform map to map rather than function ([cfb7d83](https://github.com/mongodb/node-mongodb-native/commit/cfb7d83))\r\n* **collection:** correctly shallow clone passed in options ([7727700](https://github.com/mongodb/node-mongodb-native/commit/7727700))\r\n* **collection:** countDocuments throws error when query doesn't match docs ([09c7d8e](https://github.com/mongodb/node-mongodb-native/commit/09c7d8e))\r\n* **collection:** depend on `resolveReadPreference` for inheritance ([a649e35](https://github.com/mongodb/node-mongodb-native/commit/a649e35))\r\n* **collection:** ensure findAndModify always use readPreference primary ([86344f4](https://github.com/mongodb/node-mongodb-native/commit/86344f4))\r\n* **collection:** isCapped returns false instead of undefined ([b8471f1](https://github.com/mongodb/node-mongodb-native/commit/b8471f1))\r\n* **collection:** only send bypassDocumentValidation if true ([fdb828b](https://github.com/mongodb/node-mongodb-native/commit/fdb828b))\r\n* **count-documents:** return callback on error case ([fca1185](https://github.com/mongodb/node-mongodb-native/commit/fca1185))\r\n* **cursor:** cursor count with collation fix ([71879c3](https://github.com/mongodb/node-mongodb-native/commit/71879c3))\r\n* **cursor:** cursor hasNext returns false when exhausted ([184b817](https://github.com/mongodb/node-mongodb-native/commit/184b817))\r\n* **cursor:** cursor.count not respecting parent readPreference ([5a9fdf0](https://github.com/mongodb/node-mongodb-native/commit/5a9fdf0))\r\n* **cursor:** set readPreference for cursor.count ([13d776f](https://github.com/mongodb/node-mongodb-native/commit/13d776f))\r\n* **db:** don't send session down to createIndex command ([559c195](https://github.com/mongodb/node-mongodb-native/commit/559c195))\r\n* **db:** throw readable error when creating `_id` with background: true ([b3ff3ed](https://github.com/mongodb/node-mongodb-native/commit/b3ff3ed))\r\n* **db_ops:** call collection.find() with correct parameters ([#1795](https://github.com/mongodb/node-mongodb-native/issues/1795)) ([36e92f1](https://github.com/mongodb/node-mongodb-native/commit/36e92f1))\r\n* **db_ops:** fix two incorrectly named variables ([15dc808](https://github.com/mongodb/node-mongodb-native/commit/15dc808))\r\n* **findOneAndUpdate:** ensure that update documents contain atomic operators ([eb68074](https://github.com/mongodb/node-mongodb-native/commit/eb68074))\r\n* **index:** export MongoNetworkError ([98ab29e](https://github.com/mongodb/node-mongodb-native/commit/98ab29e))\r\n* **mongo_client:** translate options for connectWithUrl ([78f6977](https://github.com/mongodb/node-mongodb-native/commit/78f6977))\r\n* **mongo-client:** pass arguments to ctor when new keyword is used ([d6c3417](https://github.com/mongodb/node-mongodb-native/commit/d6c3417))\r\n* **mongos:** bubble up close events after the first one ([#1713](https://github.com/mongodb/node-mongodb-native/issues/1713)) ([3e91d77](https://github.com/mongodb/node-mongodb-native/commit/3e91d77)), closes [Automattic/mongoose#6249](https://github.com/Automattic/mongoose/issues/6249) [#1685](https://github.com/mongodb/node-mongodb-native/issues/1685)\r\n* **parallelCollectionScan:** do not use implicit sessions on cursors ([2de470a](https://github.com/mongodb/node-mongodb-native/commit/2de470a))\r\n* **retryWrites:** fixes more bulk ops to not use retryWrites ([69e5254](https://github.com/mongodb/node-mongodb-native/commit/69e5254))\r\n* **server:** remove unnecessary print statement ([2bcbc12](https://github.com/mongodb/node-mongodb-native/commit/2bcbc12))\r\n* **teardown:** properly destroy a topology when initial connect fails ([b8d2f1d](https://github.com/mongodb/node-mongodb-native/commit/b8d2f1d))\r\n* **topology-base:** sending `endSessions` is always skipped now ([a276cbe](https://github.com/mongodb/node-mongodb-native/commit/a276cbe))\r\n* **txns:** omit writeConcern when in a transaction ([b88c938](https://github.com/mongodb/node-mongodb-native/commit/b88c938))\r\n* **utils:** restructure inheritance rules for read preferences ([6a7dac1](https://github.com/mongodb/node-mongodb-native/commit/6a7dac1))\r\n\r\n\r\n### Features\r\n\r\n* **auth:** add support for SCRAM-SHA-256 ([f53195d](https://github.com/mongodb/node-mongodb-native/commit/f53195d))\r\n* **changeStream:** Adding new 4.0 ChangeStream features ([2cb4894](https://github.com/mongodb/node-mongodb-native/commit/2cb4894))\r\n* **changeStream:** allow resuming on getMore errors ([4ba5adc](https://github.com/mongodb/node-mongodb-native/commit/4ba5adc))\r\n* **changeStream:** expanding changeStream resumable errors ([49fbafd](https://github.com/mongodb/node-mongodb-native/commit/49fbafd))\r\n* **ChangeStream:** update default startAtOperationTime ([50a9f65](https://github.com/mongodb/node-mongodb-native/commit/50a9f65))\r\n* **collection:** add colleciton level document mapping/unmapping ([d03335e](https://github.com/mongodb/node-mongodb-native/commit/d03335e))\r\n* **collection:** Implement new count API ([a5240ae](https://github.com/mongodb/node-mongodb-native/commit/a5240ae))\r\n* **Collection:** warn if callback is not function in find and findOne ([cddaba0](https://github.com/mongodb/node-mongodb-native/commit/cddaba0))\r\n* **core:** bump core dependency to v3.1.0 ([4937240](https://github.com/mongodb/node-mongodb-native/commit/4937240))\r\n* **cursor:** new cursor.transformStream method ([397fcd2](https://github.com/mongodb/node-mongodb-native/commit/397fcd2))\r\n* **deprecation:** create deprecation function ([4f907a0](https://github.com/mongodb/node-mongodb-native/commit/4f907a0))\r\n* **deprecation:** wrap deprecated functions ([a5d0f1d](https://github.com/mongodb/node-mongodb-native/commit/a5d0f1d))\r\n* **GridFS:** add option to disable md5 in file upload ([704a88e](https://github.com/mongodb/node-mongodb-native/commit/704a88e))\r\n* **listCollections:** add support for nameOnly option ([d2d0367](https://github.com/mongodb/node-mongodb-native/commit/d2d0367))\r\n* **parallelCollectionScan:** does not allow user to pass a session ([4da9e03](https://github.com/mongodb/node-mongodb-native/commit/4da9e03))\r\n* **read-preference:** add transaction to inheritance rules ([18ca41d](https://github.com/mongodb/node-mongodb-native/commit/18ca41d))\r\n* **read-preference:** unify means of read preference resolution ([#1738](https://github.com/mongodb/node-mongodb-native/issues/1738)) ([2995e11](https://github.com/mongodb/node-mongodb-native/commit/2995e11))\r\n* **urlParser:** use core URL parser ([c1c5d8d](https://github.com/mongodb/node-mongodb-native/commit/c1c5d8d))\r\n* **withSession:** add top level helper for session lifetime ([9976b86](https://github.com/mongodb/node-mongodb-native/commit/9976b86))\r\n\r\n\r\n### Reverts\r\n\r\n* **collection:** reverting collection-mapping features ([7298c76](https://github.com/mongodb/node-mongodb-native/commit/7298c76)), closes [#1698](https://github.com/mongodb/node-mongodb-native/issues/1698) [mongodb/js-bson#253](https://github.com/mongodb/js-bson/issues/253)\r\n\r\n\r\n\r\n<a name=\"3.1.1\"></a>\r\n## [3.1.1](https://github.com/mongodb/node-mongodb-native/compare/v3.1.0...v3.1.1) (2018-07-05)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **client-ops:** return transform map to map rather than function ([b8b4bfa](https://github.com/mongodb/node-mongodb-native/commit/b8b4bfa))\r\n* **collection:** correctly shallow clone passed in options ([2e6c4fa](https://github.com/mongodb/node-mongodb-native/commit/2e6c4fa))\r\n* **collection:** countDocuments throws error when query doesn't match docs ([4e83556](https://github.com/mongodb/node-mongodb-native/commit/4e83556))\r\n* **server:** remove unnecessary print statement ([20e11b3](https://github.com/mongodb/node-mongodb-native/commit/20e11b3))\r\n\r\n\r\n\r\n<a name=\"3.1.0\"></a>\r\n# [3.1.0](https://github.com/mongodb/node-mongodb-native/compare/v3.0.6...v3.1.0) (2018-06-27)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregate:** support user-provided `batchSize` ([ad10dee](https://github.com/mongodb/node-mongodb-native/commit/ad10dee))\r\n* **bulk:** fixing retryable writes for mass-change ops ([0604036](https://github.com/mongodb/node-mongodb-native/commit/0604036))\r\n* **bulk:** handle MongoWriteConcernErrors ([12ff392](https://github.com/mongodb/node-mongodb-native/commit/12ff392))\r\n* **change_stream:** do not check isGetMore if error[mongoErrorContextSymbol] is undefined ([#1720](https://github.com/mongodb/node-mongodb-native/issues/1720)) ([844c2c8](https://github.com/mongodb/node-mongodb-native/commit/844c2c8))\r\n* **change-stream:** fix change stream resuming with promises ([3063f00](https://github.com/mongodb/node-mongodb-native/commit/3063f00))\r\n* **collection:** depend on `resolveReadPreference` for inheritance ([a649e35](https://github.com/mongodb/node-mongodb-native/commit/a649e35))\r\n* **collection:** only send bypassDocumentValidation if true ([fdb828b](https://github.com/mongodb/node-mongodb-native/commit/fdb828b))\r\n* **cursor:** cursor count with collation fix ([71879c3](https://github.com/mongodb/node-mongodb-native/commit/71879c3))\r\n* **cursor:** cursor hasNext returns false when exhausted ([184b817](https://github.com/mongodb/node-mongodb-native/commit/184b817))\r\n* **cursor:** cursor.count not respecting parent readPreference ([5a9fdf0](https://github.com/mongodb/node-mongodb-native/commit/5a9fdf0))\r\n* **db:** don't send session down to createIndex command ([559c195](https://github.com/mongodb/node-mongodb-native/commit/559c195))\r\n* **db:** throw readable error when creating `_id` with background: true ([b3ff3ed](https://github.com/mongodb/node-mongodb-native/commit/b3ff3ed))\r\n* **findOneAndUpdate:** ensure that update documents contain atomic operators ([eb68074](https://github.com/mongodb/node-mongodb-native/commit/eb68074))\r\n* **index:** export MongoNetworkError ([98ab29e](https://github.com/mongodb/node-mongodb-native/commit/98ab29e))\r\n* **mongo-client:** pass arguments to ctor when new keyword is used ([d6c3417](https://github.com/mongodb/node-mongodb-native/commit/d6c3417))\r\n* **mongos:** bubble up close events after the first one ([#1713](https://github.com/mongodb/node-mongodb-native/issues/1713)) ([3e91d77](https://github.com/mongodb/node-mongodb-native/commit/3e91d77)), closes [Automattic/mongoose#6249](https://github.com/Automattic/mongoose/issues/6249) [#1685](https://github.com/mongodb/node-mongodb-native/issues/1685)\r\n* **parallelCollectionScan:** do not use implicit sessions on cursors ([2de470a](https://github.com/mongodb/node-mongodb-native/commit/2de470a))\r\n* **retryWrites:** fixes more bulk ops to not use retryWrites ([69e5254](https://github.com/mongodb/node-mongodb-native/commit/69e5254))\r\n* **topology-base:** sending `endSessions` is always skipped now ([a276cbe](https://github.com/mongodb/node-mongodb-native/commit/a276cbe))\r\n* **txns:** omit writeConcern when in a transaction ([b88c938](https://github.com/mongodb/node-mongodb-native/commit/b88c938))\r\n* **utils:** restructure inheritance rules for read preferences ([6a7dac1](https://github.com/mongodb/node-mongodb-native/commit/6a7dac1))\r\n\r\n\r\n### Features\r\n\r\n* **auth:** add support for SCRAM-SHA-256 ([f53195d](https://github.com/mongodb/node-mongodb-native/commit/f53195d))\r\n* **changeStream:** Adding new 4.0 ChangeStream features ([2cb4894](https://github.com/mongodb/node-mongodb-native/commit/2cb4894))\r\n* **changeStream:** allow resuming on getMore errors ([4ba5adc](https://github.com/mongodb/node-mongodb-native/commit/4ba5adc))\r\n* **changeStream:** expanding changeStream resumable errors ([49fbafd](https://github.com/mongodb/node-mongodb-native/commit/49fbafd))\r\n* **ChangeStream:** update default startAtOperationTime ([50a9f65](https://github.com/mongodb/node-mongodb-native/commit/50a9f65))\r\n* **collection:** add colleciton level document mapping/unmapping ([d03335e](https://github.com/mongodb/node-mongodb-native/commit/d03335e))\r\n* **collection:** Implement new count API ([a5240ae](https://github.com/mongodb/node-mongodb-native/commit/a5240ae))\r\n* **Collection:** warn if callback is not function in find and findOne ([cddaba0](https://github.com/mongodb/node-mongodb-native/commit/cddaba0))\r\n* **core:** bump core dependency to v3.1.0 ([855bfdb](https://github.com/mongodb/node-mongodb-native/commit/855bfdb))\r\n* **cursor:** new cursor.transformStream method ([397fcd2](https://github.com/mongodb/node-mongodb-native/commit/397fcd2))\r\n* **GridFS:** add option to disable md5 in file upload ([704a88e](https://github.com/mongodb/node-mongodb-native/commit/704a88e))\r\n* **listCollections:** add support for nameOnly option ([d2d0367](https://github.com/mongodb/node-mongodb-native/commit/d2d0367))\r\n* **parallelCollectionScan:** does not allow user to pass a session ([4da9e03](https://github.com/mongodb/node-mongodb-native/commit/4da9e03))\r\n* **read-preference:** add transaction to inheritance rules ([18ca41d](https://github.com/mongodb/node-mongodb-native/commit/18ca41d))\r\n* **read-preference:** unify means of read preference resolution ([#1738](https://github.com/mongodb/node-mongodb-native/issues/1738)) ([2995e11](https://github.com/mongodb/node-mongodb-native/commit/2995e11))\r\n* **urlParser:** use core URL parser ([c1c5d8d](https://github.com/mongodb/node-mongodb-native/commit/c1c5d8d))\r\n* **withSession:** add top level helper for session lifetime ([9976b86](https://github.com/mongodb/node-mongodb-native/commit/9976b86))\r\n\r\n\r\n### Reverts\r\n\r\n* **collection:** reverting collection-mapping features ([7298c76](https://github.com/mongodb/node-mongodb-native/commit/7298c76)), closes [#1698](https://github.com/mongodb/node-mongodb-native/issues/1698) [mongodb/js-bson#253](https://github.com/mongodb/js-bson/issues/253)\r\n\r\n\r\n\r\n<a name=\"3.0.6\"></a>\r\n## [3.0.6](https://github.com/mongodb/node-mongodb-native/compare/v3.0.5...v3.0.6) (2018-04-09)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **db:** ensure `dropDatabase` always uses primary read preference ([e62e5c9](https://github.com/mongodb/node-mongodb-native/commit/e62e5c9))\r\n* **driverBench:** driverBench has default options object now ([c557817](https://github.com/mongodb/node-mongodb-native/commit/c557817))\r\n\r\n\r\n### Features\r\n\r\n* **command-monitoring:** support enabling command monitoring ([5903680](https://github.com/mongodb/node-mongodb-native/commit/5903680))\r\n* **core:** update to mongodb-core v3.0.6 ([cfdd0ae](https://github.com/mongodb/node-mongodb-native/commit/cfdd0ae))\r\n* **driverBench:** Implementing DriverBench ([d10fbad](https://github.com/mongodb/node-mongodb-native/commit/d10fbad))\r\n\r\n\r\n\r\n<a name=\"3.0.5\"></a>\r\n## [3.0.5](https://github.com/mongodb/node-mongodb-native/compare/v3.0.4...v3.0.5) (2018-03-23)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **AggregationCursor:** adding session tracking to AggregationCursor ([baca5b7](https://github.com/mongodb/node-mongodb-native/commit/baca5b7))\r\n* **Collection:** fix session leak in parallelCollectonScan ([3331ec9](https://github.com/mongodb/node-mongodb-native/commit/3331ec9))\r\n* **comments:** adding fixes for PR comments ([ee110ac](https://github.com/mongodb/node-mongodb-native/commit/ee110ac))\r\n* **url_parser:** support a default database on mongodb+srv uris ([6d39b2a](https://github.com/mongodb/node-mongodb-native/commit/6d39b2a))\r\n\r\n\r\n### Features\r\n\r\n* **sessions:** adding implicit cursor session support ([a81245b](https://github.com/mongodb/node-mongodb-native/commit/a81245b))\r\n\r\n\r\n\r\n<a name=\"3.0.4\"></a>\r\n## [3.0.4](https://github.com/mongodb/node-mongodb-native/compare/v3.0.2...v3.0.4) (2018-03-05)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **collection:** fix error when calling remove with no args ([#1657](https://github.com/mongodb/node-mongodb-native/issues/1657)) ([4c9b0f8](https://github.com/mongodb/node-mongodb-native/commit/4c9b0f8))\r\n* **executeOperation:** don't mutate options passed to commands ([934a43a](https://github.com/mongodb/node-mongodb-native/commit/934a43a))\r\n* **jsdoc:** mark db.collection callback as optional + typo fix ([#1658](https://github.com/mongodb/node-mongodb-native/issues/1658)) ([c519b9b](https://github.com/mongodb/node-mongodb-native/commit/c519b9b))\r\n* **sessions:** move active session tracking to topology base ([#1665](https://github.com/mongodb/node-mongodb-native/issues/1665)) ([b1f296f](https://github.com/mongodb/node-mongodb-native/commit/b1f296f))\r\n* **utils:** fixes executeOperation to clean up sessions ([04e6ef6](https://github.com/mongodb/node-mongodb-native/commit/04e6ef6))\r\n\r\n\r\n### Features\r\n\r\n* **default-db:** use dbName from uri if none provided ([23b1938](https://github.com/mongodb/node-mongodb-native/commit/23b1938))\r\n* **mongodb-core:** update to mongodb-core 3.0.4 ([1fdbaa5](https://github.com/mongodb/node-mongodb-native/commit/1fdbaa5))\r\n\r\n\r\n\r\n<a name=\"3.0.3\"></a>\r\n## [3.0.3](https://github.com/mongodb/node-mongodb-native/compare/v3.0.2...v3.0.3) (2018-02-23)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **collection:** fix error when calling remove with no args ([#1657](https://github.com/mongodb/node-mongodb-native/issues/1657)) ([4c9b0f8](https://github.com/mongodb/node-mongodb-native/commit/4c9b0f8))\r\n* **executeOperation:** don't mutate options passed to commands ([934a43a](https://github.com/mongodb/node-mongodb-native/commit/934a43a))\r\n* **jsdoc:** mark db.collection callback as optional + typo fix ([#1658](https://github.com/mongodb/node-mongodb-native/issues/1658)) ([c519b9b](https://github.com/mongodb/node-mongodb-native/commit/c519b9b))\r\n* **sessions:** move active session tracking to topology base ([#1665](https://github.com/mongodb/node-mongodb-native/issues/1665)) ([b1f296f](https://github.com/mongodb/node-mongodb-native/commit/b1f296f))\r\n\r\n\r\n\r\n<a name=\"3.0.2\"></a>\r\n## [3.0.2](https://github.com/mongodb/node-mongodb-native/compare/v3.0.1...v3.0.2) (2018-01-29)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **collection:** ensure dynamic require of `db` is wrapped in parentheses ([efa78f0](https://github.com/mongodb/node-mongodb-native/commit/efa78f0))\r\n* **db:** only callback with MongoError NODE-1293 ([#1652](https://github.com/mongodb/node-mongodb-native/issues/1652)) ([45bc722](https://github.com/mongodb/node-mongodb-native/commit/45bc722))\r\n* **topology base:** allow more than 10 event listeners ([#1630](https://github.com/mongodb/node-mongodb-native/issues/1630)) ([d9fb750](https://github.com/mongodb/node-mongodb-native/commit/d9fb750))\r\n* **url parser:** preserve auth creds when composing conn string  ([#1640](https://github.com/mongodb/node-mongodb-native/issues/1640)) ([eddca5e](https://github.com/mongodb/node-mongodb-native/commit/eddca5e))\r\n\r\n\r\n### Features\r\n\r\n* **bulk:** forward 'checkKeys' option for ordered and unordered bulk operations ([421a6b2](https://github.com/mongodb/node-mongodb-native/commit/421a6b2))\r\n* **collection:** expose `dbName` property of collection ([6fd05c1](https://github.com/mongodb/node-mongodb-native/commit/6fd05c1))\r\n\r\n\r\n\r\n<a name=\"3.0.1\"></a>\r\n## [3.0.1](https://github.com/mongodb/node-mongodb-native/compare/v3.0.0...v3.0.1) (2017-12-24)\r\n\r\n* update mongodb-core to 3.0.1\r\n\r\n<a name=\"3.0.0\"></a>\r\n# [3.0.0](https://github.com/mongodb/node-mongodb-native/compare/v3.0.0-rc0...v3.0.0) (2017-12-24)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregate:** remove support for inline results for aggregate ([#1620](https://github.com/mongodb/node-mongodb-native/issues/1620)) ([84457ec](https://github.com/mongodb/node-mongodb-native/commit/84457ec))\r\n* **topologies:** unify topologies connect API ([#1615](https://github.com/mongodb/node-mongodb-native/issues/1615)) ([0fb4658](https://github.com/mongodb/node-mongodb-native/commit/0fb4658))\r\n\r\n\r\n### Features\r\n\r\n* **keepAlive:** make keepAlive options consistent ([#1612](https://github.com/mongodb/node-mongodb-native/issues/1612)) ([f608f44](https://github.com/mongodb/node-mongodb-native/commit/f608f44))\r\n\r\n\r\n### BREAKING CHANGES\r\n\r\n* **topologies:** Function signature for `.connect` method on replset and mongos has changed. You shouldn't have been using this anyway, but if you were, you only should pass `options` and `callback`.\r\n\r\nPart of NODE-1089\r\n* **keepAlive:** option `keepAlive` is now split into boolean `keepAlive` and\r\nnumber `keepAliveInitialDelay`\r\n\r\nFixes NODE-998\r\n\r\n\r\n\r\n<a name=\"3.0.0-rc0\"></a>\r\n# [3.0.0-rc0](https://github.com/mongodb/node-mongodb-native/compare/v2.2.31...v3.0.0-rc0) (2017-12-05)\r\n\r\n\r\n### Bug Fixes\r\n\r\n* **aggregation:** ensure that the `cursor` key is always present ([f16f314](https://github.com/mongodb/node-mongodb-native/commit/f16f314))\r\n* **apm:** give users access to raw server responses ([88b206b](https://github.com/mongodb/node-mongodb-native/commit/88b206b))\r\n* **apm:** only rebuilt cursor if reply is non-null ([96052c8](https://github.com/mongodb/node-mongodb-native/commit/96052c8))\r\n* **apm:** rebuild lost `cursor` info on pre-OP_QUERY responses ([4242d49](https://github.com/mongodb/node-mongodb-native/commit/4242d49))\r\n* **bulk-unordered:** add check for ignoreUndefined ([f38641a](https://github.com/mongodb/node-mongodb-native/commit/f38641a))\r\n* **change stream examples:** use timeouts, cleanup ([c5fec5f](https://github.com/mongodb/node-mongodb-native/commit/c5fec5f))\r\n* **change-streams:** ensure a majority read concern on initial agg ([23011e9](https://github.com/mongodb/node-mongodb-native/commit/23011e9))\r\n* **changeStreams:** fixing node4 issue with util.inherits ([#1587](https://github.com/mongodb/node-mongodb-native/issues/1587)) ([168bb3d](https://github.com/mongodb/node-mongodb-native/commit/168bb3d))\r\n* **collection:** allow { upsert: 1 } for findOneAndUpdate() and update() ([5bcedd6](https://github.com/mongodb/node-mongodb-native/commit/5bcedd6))\r\n* **collection:** allow passing `noCursorTimeout` as an option to `find()` ([e9c4ffc](https://github.com/mongodb/node-mongodb-native/commit/e9c4ffc))\r\n* **collection:** make the parameters of findOne very explicit ([3054f1a](https://github.com/mongodb/node-mongodb-native/commit/3054f1a))\r\n* **cursor:** `hasNext` should propagate errors when using callback ([6339625](https://github.com/mongodb/node-mongodb-native/commit/6339625))\r\n* **cursor:** close readable on `null` response for dead cursor ([6aca2c5](https://github.com/mongodb/node-mongodb-native/commit/6aca2c5))\r\n* **dns txt records:** check options are set ([e5caf4f](https://github.com/mongodb/node-mongodb-native/commit/e5caf4f))\r\n* **docs:** Represent each valid option in docs in both places ([fde6e5d](https://github.com/mongodb/node-mongodb-native/commit/fde6e5d))\r\n* **grid-store:** add missing callback ([66a9a05](https://github.com/mongodb/node-mongodb-native/commit/66a9a05))\r\n* **grid-store:** move into callback scope ([b53f65f](https://github.com/mongodb/node-mongodb-native/commit/b53f65f))\r\n* **GridFS:**  fix TypeError: doc.data.length is not a function ([#1570](https://github.com/mongodb/node-mongodb-native/issues/1570)) ([22a4628](https://github.com/mongodb/node-mongodb-native/commit/22a4628))\r\n* **list-collections:** ensure default of primary ReadPreference ([4a0cfeb](https://github.com/mongodb/node-mongodb-native/commit/4a0cfeb))\r\n* **mongo client:** close client before calling done ([c828aab](https://github.com/mongodb/node-mongodb-native/commit/c828aab))\r\n* **mongo client:** do not connect if url parse error ([cd10084](https://github.com/mongodb/node-mongodb-native/commit/cd10084))\r\n* **mongo client:** send error to cb ([eafc9e2](https://github.com/mongodb/node-mongodb-native/commit/eafc9e2))\r\n* **mongo-client:** move to inside of callback ([68b0fca](https://github.com/mongodb/node-mongodb-native/commit/68b0fca))\r\n* **mongo-client:** options should not be passed to `connect` ([474ac65](https://github.com/mongodb/node-mongodb-native/commit/474ac65))\r\n* **tests:** migrate 2.x tests to 3.x ([3a5232a](https://github.com/mongodb/node-mongodb-native/commit/3a5232a))\r\n* **updateOne/updateMany:** ensure that update documents contain atomic operators ([8b4255a](https://github.com/mongodb/node-mongodb-native/commit/8b4255a))\r\n* **url parser:** add check for options as cb ([52b6039](https://github.com/mongodb/node-mongodb-native/commit/52b6039))\r\n* **url parser:** compare srv address and parent domains ([daa186d](https://github.com/mongodb/node-mongodb-native/commit/daa186d))\r\n* **url parser:** compare string from first period on ([9e5d77e](https://github.com/mongodb/node-mongodb-native/commit/9e5d77e))\r\n* **url parser:** default to ssl true for mongodb+srv ([0fbca4b](https://github.com/mongodb/node-mongodb-native/commit/0fbca4b))\r\n* **url parser:** error when multiple hostnames used ([c1aa681](https://github.com/mongodb/node-mongodb-native/commit/c1aa681))\r\n* **url parser:** keep original uri options and default to ssl true ([e876a72](https://github.com/mongodb/node-mongodb-native/commit/e876a72))\r\n* **url parser:** log instead of throw error for unsupported url options ([155de2d](https://github.com/mongodb/node-mongodb-native/commit/155de2d))\r\n* **url parser:** make sure uri has 3 parts ([aa9871b](https://github.com/mongodb/node-mongodb-native/commit/aa9871b))\r\n* **url parser:** only 1 txt record allowed with 2 possible options ([d9f4218](https://github.com/mongodb/node-mongodb-native/commit/d9f4218))\r\n* **url parser:** only check for multiple hostnames with srv protocol ([5542bcc](https://github.com/mongodb/node-mongodb-native/commit/5542bcc))\r\n* **url parser:** remove .only from test ([642e39e](https://github.com/mongodb/node-mongodb-native/commit/642e39e))\r\n* **url parser:** return callback ([6096afc](https://github.com/mongodb/node-mongodb-native/commit/6096afc))\r\n* **url parser:** support single text record with multiple strings ([356fa57](https://github.com/mongodb/node-mongodb-native/commit/356fa57))\r\n* **url parser:** try catch bug, not actually returning from try loop ([758892b](https://github.com/mongodb/node-mongodb-native/commit/758892b))\r\n* **url parser:** use warn instead of info ([40ed27d](https://github.com/mongodb/node-mongodb-native/commit/40ed27d))\r\n* **url-parser:** remove comment, send error to cb ([d44420b](https://github.com/mongodb/node-mongodb-native/commit/d44420b))\r\n\r\n\r\n### Features\r\n\r\n* **aggregate:** support hit field for aggregate command ([aa7da15](https://github.com/mongodb/node-mongodb-native/commit/aa7da15))\r\n* **aggregation:** adds support for comment in aggregation command ([#1571](https://github.com/mongodb/node-mongodb-native/issues/1571)) ([4ac475c](https://github.com/mongodb/node-mongodb-native/commit/4ac475c))\r\n* **aggregation:** fail aggregation on explain + readConcern/writeConcern ([e0ca1b4](https://github.com/mongodb/node-mongodb-native/commit/e0ca1b4))\r\n* **causal-consistency:** support `afterClusterTime` in readConcern ([a9097f7](https://github.com/mongodb/node-mongodb-native/commit/a9097f7))\r\n* **change-streams:** add support for change streams ([c02d25c](https://github.com/mongodb/node-mongodb-native/commit/c02d25c))\r\n* **collection:** updating find API ([f26362d](https://github.com/mongodb/node-mongodb-native/commit/f26362d))\r\n* **execute-operation:** implementation for common op execution ([67c344f](https://github.com/mongodb/node-mongodb-native/commit/67c344f))\r\n* **listDatabases:** add support for nameOnly option to listDatabases ([eb79b5a](https://github.com/mongodb/node-mongodb-native/commit/eb79b5a))\r\n* **maxTimeMS:** adding maxTimeMS option to createIndexes and dropIndexes ([90d4a63](https://github.com/mongodb/node-mongodb-native/commit/90d4a63))\r\n* **mongo-client:** implement `MongoClient.prototype.startSession` ([bce5adf](https://github.com/mongodb/node-mongodb-native/commit/bce5adf))\r\n* **retryable-writes:** add support for `retryWrites` cs option ([2321870](https://github.com/mongodb/node-mongodb-native/commit/2321870))\r\n* **sessions:** MongoClient will now track sessions and release ([6829f47](https://github.com/mongodb/node-mongodb-native/commit/6829f47))\r\n* **sessions:** support passing sessions via objects in all methods ([a531f05](https://github.com/mongodb/node-mongodb-native/commit/a531f05))\r\n* **shared:** add helper utilities for assertion and suite setup ([b6cc34e](https://github.com/mongodb/node-mongodb-native/commit/b6cc34e))\r\n* **ssl:** adds missing ssl options ssl options for `ciphers` and `ecdhCurve` ([441b7b1](https://github.com/mongodb/node-mongodb-native/commit/441b7b1))\r\n* **test-shared:** add `notEqual` assertion ([41d93fd](https://github.com/mongodb/node-mongodb-native/commit/41d93fd))\r\n* **test-shared:** add `strictEqual` assertion method ([cad8e19](https://github.com/mongodb/node-mongodb-native/commit/cad8e19))\r\n* **topologies:** expose underlaying `logicalSessionTimeoutMinutes' ([1609a37](https://github.com/mongodb/node-mongodb-native/commit/1609a37))\r\n* **url parser:** better error message for slash in hostname ([457bc29](https://github.com/mongodb/node-mongodb-native/commit/457bc29))\r\n\r\n\r\n### BREAKING CHANGES\r\n\r\n* **aggregation:** If you use aggregation, and try to use the explain flag while you\r\nhave a readConcern or writeConcern, your query will fail\r\n* **collection:** `find` and `findOne` no longer support the `fields` parameter.\r\nYou can achieve the same results as the `fields` parameter by\r\neither using `Cursor.prototype.project`, or by passing the `projection`\r\nproperty in on the `options` object. Additionally, `find` does not\r\nsupport individual options like `skip` and `limit` as positional\r\nparameters. You must pass in these parameters in the `options` object\r\n\r\n\r\n\r\n3.0.0 2017-??-??\r\n----------------\r\n* NODE-1043 URI-escaping authentication and hostname details in connection string\r\n\r\n2.2.31 2017-08-08\r\n-----------------\r\n* update mongodb-core to 2.2.15\r\n* allow auth option in MongoClient.connect\r\n* remove duplicate option `promoteLongs` from MongoClient's `connect`\r\n* bulk operations should not throw an error on empty batch\r\n\r\n2.2.30 2017-07-07\r\n-----------------\r\n* Update mongodb-core to 2.2.14\r\n* MongoClient\r\n  * add `appname` to list of valid option names\r\n  * added test for passing appname as option\r\n* NODE-1052 ensure user options are applied while parsing connection string uris\r\n\r\n2.2.29 2017-06-19\r\n-----------------\r\n* Update mongodb-core to 2.1.13\r\n  * NODE-1039 ensure we force destroy server instances, forcing queue to be flushed.\r\n  *  Use actual server type in standalone SDAM events.\r\n* Allow multiple map calls (Issue #1521, https://github.com/Robbilie).\r\n* Clone insertMany options before mutating (Issue #1522, https://github.com/vkarpov15).\r\n* NODE-1034 Fix GridStore issue caused by Node 8.0.0 breaking backward compatible fs.read API.\r\n* NODE-1026, use  operator instead of skip function in order to avoid useless fetch stage.\r\n\r\n2.2.28 2017-06-02\r\n-----------------\r\n* Update mongodb-core to 2.1.12\r\n  * NODE-1019 Set keepAlive to 300 seconds or 1/2 of socketTimeout if socketTimeout < keepAlive.\r\n  * Minor fix to report the correct state on error.\r\n  * NODE-1020 'family' was added to options to provide high priority for ipv6 addresses (Issue #1518, https://github.com/firej).\r\n  * Fix require_optional loading of bson-ext.\r\n  * Ensure no errors are thrown by replset if topology is destroyed before it finished connecting.\r\n  * NODE-999 SDAM fixes for Mongos and single Server event emitting.\r\n  * NODE-1014 Set socketTimeout to default to 360 seconds.\r\n  * NODE-1019 Set keepAlive to 300 seconds or 1/2 of socketTimeout if socketTimeout < keepAlive.\r\n* Just handle Collection name errors distinctly from general callback errors avoiding double callbacks in Db.collection.\r\n* NODE-999 SDAM fixes for Mongos and single Server event emitting.\r\n* NODE-1000 Added guard condition for upload.js checkDone function in case of race condition caused by late arriving chunk write.\r\n\r\n2.2.27 2017-05-22\r\n-----------------\r\n* Updated mongodb-core to 2.1.11\r\n    * NODE-987 Clear out old intervalIds on when calling topologyMonitor.\r\n    * NODE-987 Moved filtering to pingServer method and added test case.\r\n    * Check for connection destroyed just before writing out and flush out operations correctly if it is (Issue #179, https://github.com/jmholzinger).\r\n    * NODE-989 Refactored Replicaset monitoring to correcly monitor newly added servers, Also extracted setTimeout and setInterval to use custom wrappers Timeout and Interval.\r\n* NODE-985 Deprecated Db.authenticate and Admin.authenticate and moved auth methods into authenticate.js to ensure MongoClient.connect does not print deprecation warnings.\r\n* NODE-988 Merged readConcern and hint correctly on collection(...).find(...).count()\r\n* Fix passing the readConcern option to MongoClient.connect (Issue #1514, https://github.com/bausmeier).\r\n* NODE-996 Propegate all events up to a MongoClient instance.\r\n* Allow saving doc with null `_id` (Issue #1517, https://github.com/vkarpov15).\r\n* NODE-993 Expose hasNext for command cursor and add docs for both CommandCursor and Aggregation Cursor.\r\n\r\n2.2.26 2017-04-18\r\n-----------------\r\n* Updated mongodb-core to 2.1.10\r\n    * NODE-981 delegate auth to replset/mongos if inTopology is set.\r\n    * NODE-978 Wrap connection.end in try/catch for node 0.10.x issue causing exceptions to be thrown, Also surfaced getConnection for mongos and replset.\r\n    * Remove dynamic require (Issue #175, https://github.com/tellnes).\r\n    * NODE-696 Handle interrupted error for createIndexes.\r\n    * Fixed isse when user is executing find command using Server.command and it get interpreted as a wire protcol message, #172.\r\n    * NODE-966 promoteValues not being promoted correctly to getMore.\r\n    * Merged in fix for flushing out monitoring operations.\r\n* NODE-983 Add cursorId to aggregate and listCollections commands (Issue, #1510).\r\n* Mark group and profilingInfo as deprecated methods\r\n* NODE-956 DOCS Examples.\r\n* Update readable-stream to version 2.2.7.\r\n* NODE-978 Added test case to uncover connection.end issue for node 0.10.x.\r\n* NODE-972 Fix(db): don't remove database name if collectionName == dbName (Issue, #1502)\r\n* Fixed merging of writeConcerns on db.collection method.\r\n* NODE-970 mix in readPreference for strict mode listCollections callback.\r\n* NODE-966 added testcase for promoteValues being applied to getMore commands.\r\n* NODE-962 Merge in ignoreUndefined from collection level for find/findOne.\r\n* Remove multi option from updateMany tests/docs (Issue #1499, https://github.com/spratt).\r\n* NODE-963 Correctly handle cursor.count when using APM.\r\n\r\n2.2.25 2017-03-17\r\n-----------------\r\n* Don't rely on global toString() for checking if object (Issue #1494, https://github.com/vkarpov15).\r\n* Remove obsolete option uri_decode_auth (Issue #1488, https://github.com/kamagatos).\r\n* NODE-936 Correctly translate ReadPreference to CoreReadPreference for mongos queries.\r\n* Exposed BSONRegExp type.\r\n* NODE-950 push correct index for INSERT ops (https://github.com/mbroadst).\r\n* NODE-951 Added support for sslCRL option and added a test case for it.\r\n* NODE-953 Made batchSize issue general at cursor level.\r\n* NODE-954 Remove write concern from reindex helper as it will not be supported in 3.6.\r\n* Updated mongodb-core to 2.1.9.\r\n    * Return lastIsMaster correctly when connecting with secondaryOnlyConnectionAllowed is set to true and only a secondary is available in replica state.\r\n    * Clone options when passed to wireProtocol handler to avoid intermittent modifications causing errors.\r\n    * Ensure SSL error propegates better for Replset connections when there is a SSL validation error.\r\n    * NODE-957 Fixed issue where < batchSize not causing cursor to be closed on execution of first batch.\r\n    * NODE-958 Store reconnectConnection on pool object to allow destroy to close immediately.\r\n\r\n2.2.24 2017-02-14\r\n-----------------\r\n* NODE-935, NODE-931 Make MongoClient strict options validation optional and instead print annoying console.warn entries.\r\n\r\n2.2.23 2017-02-13\r\n-----------------\r\n* Updated mongodb-core to 2.1.8.\r\n  * NODE-925 ensure we reschedule operations while pool is < poolSize while pool is growing and there are no connections with not currently performing work.\r\n  * NODE-927 fixes issue where authentication was performed against arbiter instances.\r\n  * NODE-915 Normalize all host names to avoid comparison issues.\r\n  * Fixed issue where pool.destroy would never finish due to a single operation not being executed and keeping it open.\r\n* NODE-931 Validates all the options for MongoClient.connect and fixes missing connection settings.\r\n* NODE-929 Update SSL tutorial to correctly reflect the non-need for server/mongos/replset subobjects\r\n* Fix sensitive command check (Issue #1473, https://github.com/Annoraaq)\r\n\r\n2.2.22 2017-01-24\r\n-----------------\r\n* Updated mongodb-core to 2.1.7.\r\n  * NODE-919 ReplicaSet connection does not close immediately (Issue #156).\r\n  * NODE-901 Fixed bug when normalizing host names.\r\n  * NODE-909 Fixed readPreference issue caused by direct connection to primary.\r\n  * NODE-910 Fixed issue when bufferMaxEntries == 0 and read preference set to nearest.\r\n* Add missing unref implementations for replset, mongos (Issue #1455, https://github.com/zbjornson)\r\n\r\n2.2.21 2017-01-13\r\n-----------------\r\n* Updated mongodb-core to 2.1.6.\r\n  * NODE-908 Keep auth contexts in replset and mongos topology to ensure correct application of authentication credentials when primary is first server to be detected causing an immediate connect event to happen.\r\n\r\n2.2.20 2017-01-11\r\n-----------------\r\n* Updated mongodb-core to 2.1.5 to include bson 1.0.4 and bson-ext 1.0.4 due to Buffer.from being broken in early node 4.x versions.\r\n\r\n2.2.19 2017-01-03\r\n-----------------\r\n* Corrupted Npm release fix.\r\n\r\n2.2.18 2017-01-03\r\n-----------------\r\n* Updated mongodb-core to 2.1.4 to fix bson ObjectId toString issue with utils.inspect messing with toString parameters in node 6.\r\n\r\n2.2.17 2017-01-02\r\n-----------------\r\n* updated createCollection doc options and linked to create command.\r\n* Updated mongodb-core to 2.1.3.\r\n  * Monitoring operations are re-scheduled in pool if it cannot find a connection that does not already have scheduled work on it, this is to avoid the monitoring socket timeout being applied to any existing operations on the socket due to pipelining\r\n  * Moved replicaset monitoring away from serial mode and to parallel mode.\r\n  * updated bson and bson-ext dependencies to 1.0.2.\r\n\r\n2.2.16 2016-12-13\r\n-----------------\r\n* NODE-899 reversed upsertedId change to bring back old behavior.\r\n\r\n2.2.15 2016-12-10\r\n-----------------\r\n* Updated mongodb-core to 2.1.2.\r\n  * Delay topologyMonitoring on successful attemptReconnect as no need to run a full scan immediately.\r\n  * Emit reconnect event in primary joining when in connected status for a replicaset (Fixes mongoose reconnect issue).\r\n\r\n2.2.14 2016-12-08\r\n-----------------\r\n* Updated mongodb-core to 2.1.1.\r\n* NODE-892 Passthrough options.readPreference to mongodb-core ReplSet instance.\r\n\r\n2.2.13 2016-12-05\r\n-----------------\r\n* Updated mongodb-core to 2.1.0.\r\n* NODE-889 Fixed issue where legacy killcursor wire protocol messages would not be sent when APM is enabled.\r\n* Expose parserType as property on topology objects.\r\n\r\n2.2.12 2016-11-29\r\n-----------------\r\n* Updated mongodb-core to 2.0.14.\r\n  * Updated bson library to 0.5.7.\r\n  * Dont leak connection.workItems elments when killCursor is called (Issue #150, https://github.com/mdlavin).\r\n  * Remove unnecessary errors formatting (Issue #149, https://github.com/akryvomaz).\r\n  * Only check isConnected against availableConnections (Issue #142).\r\n  * NODE-838 Provide better error message on failed to connect on first retry for Mongos topology.\r\n  * Set default servername to host is not passed through for sni.\r\n  * Made monitoring happen on exclusive connection and using connectionTimeout to handle the wait time before failure (Issue #148).\r\n  * NODE-859 Make minimum value of maxStalenessSeconds 90 seconds.\r\n  * NODE-852 Fix Kerberos module deprecations on linux and windows and release new kerberos version.\r\n  * NODE-850 Update Max Staleness implementation.\r\n  * NODE-849 username no longer required for MONGODB-X509 auth.\r\n  * NODE-848 BSON Regex flags must be alphabetically ordered.\r\n  * NODE-846 Create notice for all third party libraries.\r\n  * NODE-843 Executing bulk operations overwrites write concern parameter.\r\n  * NODE-842 Re-sync SDAM and SDAM Monitoring tests from Specs repo.\r\n  * NODE-840 Resync CRUD spec tests.\r\n  * Unescapable while(true) loop (Issue #152).\r\n* NODE-864 close event not emits during network issues using single server topology.\r\n* Introduced maxStalenessSeconds.\r\n* NODE-840 Added CRUD specification test cases and fix minor issues with upserts reporting matchedCount > 0.\r\n* Don't ignore Db-level authSource when using auth method.  (https://github.com/donaldguy).\r\n\r\n2.2.11 2016-10-21\r\n-----------------\r\n* Updated mongodb-core to 2.0.13.\r\n  - Fire callback when topology was destroyed (Issue #147, https://github.com/vkarpov15).\r\n  - Refactoring to support pipelining ala 1.4.x branch will retaining the benefits of the growing/shrinking pool (Issue #146).\r\n  - Fix typo in serverHeartbeatFailed event name (Issue #143, https://github.com/jakesjews).\r\n  - NODE-798 Driver hangs on count command in replica set with one member (Issue #141, https://github.com/isayme).\r\n* Updated bson library to 0.5.6.\r\n  - Included cyclic dependency detection\r\n* Fix typo in serverHeartbeatFailed event name (Issue #1418, https://github.com/jakesjews).\r\n* NODE-824, readPreference \"nearest\" does not work when specified at collection level.\r\n* NODE-822, GridFSBucketWriteStream end method does not handle optional parameters.\r\n* NODE-823, GridFSBucketWriteStream end: callback is invoked with invalid parameters.\r\n* NODE-829, Using Start/End offset option in GridFSBucketReadStream doesn't return the right sized buffer.\r\n\r\n2.2.10 2016-09-15\r\n-----------------\r\n* Updated mongodb-core to 2.0.12.\r\n* fix debug logging message not printing server name.\r\n* fixed application metadata being sent by wrong ismaster.\r\n* NODE-812 Fixed mongos stall due to proxy monitoring ismaster failure causing reconnect.\r\n* NODE-818 Replicaset timeouts in initial connect sequence can \"no primary found\".\r\n* Updated bson library to 0.5.5.\r\n* Added DBPointer up conversion to DBRef.\r\n* MongoDB 3.4-RC Pass **appname** through MongoClient.connect uri or options to allow metadata to be passed.\r\n* MongoDB 3.4-RC Pass collation options on update, findOne, find, createIndex, aggregate.\r\n* MongoDB 3.4-RC Allow write concerns to be passed to all supporting server commands.\r\n* MongoDB 3.4-RC Allow passing of **servername** as SSL options to support SNI.\r\n\r\n2.2.9 2016-08-29\r\n----------------\r\n* Updated mongodb-core to 2.0.11.\r\n* NODE-803, Fixed issue in how the latency window is calculated for Mongos topology causing issues for single proxy connections.\r\n* Avoid timeout in attemptReconnect causing multiple attemptReconnect attempts to happen (Issue #134, https://github.com/dead-horse).\r\n* Ensure promoteBuffers is propegated in same fashion as promoteValues and promoteLongs.\r\n* Don't treat ObjectId as object for mapReduce scope (Issue #1397, https://github.com/vkarpov15).\r\n\r\n2.2.8 2016-08-23\r\n----------------\r\n* Updated mongodb-core to 2.0.10.\r\n* Added promoteValues flag (default to true) to allow user to specify they only want wrapped BSON values back instead of promotion to native types.\r\n* Do not close mongos proxy connection on failed ismaster check in ha process (Issue #130).\r\n\r\n2.2.7 2016-08-19\r\n----------------\r\n* If only a single mongos is provided in the seedlist, fix issue where it would be assigned as single standalone server instead of mongos topology (Issue #130).\r\n* Updated mongodb-core to 2.0.9.\r\n* Allow promoteLongs to be passed in through Response.parse method and overrides default set on the connection.\r\n* NODE-798 Driver hangs on count command in replica set with one member.\r\n* Allow promoteLongs to be passed in through Response.parse method and overrides default set on the connection.\r\n* Allow passing in servername for TLS connections for SNI support.\r\n\r\n2.2.6 2016-08-16\r\n----------------\r\n* Updated mongodb-core to 2.0.8.\r\n* Allow execution of store operations independent of having both a primary and secondary available (Issue #123).\r\n* Fixed command execution issue for mongos to ensure buffering of commands when no mongos available.\r\n* Allow passing in an array of tags to ReadPreference constructor (Issue #1382, https://github.com/vkarpov15)\r\n* Added hashed connection names and fullResult.\r\n* Updated bson library to 0.5.3.\r\n* Enable maxTimeMS in count, distinct, findAndModify.\r\n\r\n2.2.5 2016-07-28\r\n----------------\r\n* Updated mongodb-core to 2.0.7.\r\n* Allow primary to be returned when secondaryPreferred is passed (Issue #117, https://github.com/dhendo).\r\n* Added better warnings when passing in illegal seed list members to a Mongos topology.\r\n* Minor attemptReconnect bug that would cause multiple attemptReconnect to run in parallel.\r\n* Fix wrong opType passed to disconnectHandler.add (Issue #121, https://github.com/adrian-gierakowski)\r\n* Implemented domain backward comp support enabled via domainsEnabled options on Server/ReplSet/Mongos and MongoClient.connect.\r\n\r\n2.2.4 2016-07-19\r\n----------------\r\n* NPM corrupted upload fix.\r\n\r\n2.2.3 2016-07-19\r\n----------------\r\n* Updated mongodb-core to 2.0.6.\r\n* Destroy connection on socket timeout due to newer node versions not closing the socket.\r\n\r\n2.2.2 2016-07-15\r\n----------------\r\n* Updated mongodb-core to 2.0.5.\r\n* Minor fixes to handle faster MongoClient connectivity from the driver, allowing single server instances to detect if they are a proxy.\r\n* Added numberOfConsecutiveTimeouts to pool that will destroy the pool if the number of consecutive timeouts > reconnectTries.\r\n* Print warning if seedlist servers host name does not match the one provided in it's ismaster.me field for Replicaset members.\r\n* Fix issue where Replicaset connection would not succeeed if there the replicaset was a single primary server setup.\r\n\r\n2.2.1 2016-07-11\r\n----------------\r\n* Updated mongodb-core to 2.0.4.\r\n* handle situation where user is providing seedlist names that do not match host list. fix allows for a single full discovery connection sweep before erroring out.\r\n* NODE-747 Polyfill for Object.assign for 0.12.x or 0.10.x.\r\n* NODE-746 Improves replicaset errors for wrong setName.\r\n\r\n2.2.0 2016-07-05\r\n----------------\r\n* Updated mongodb-core to 2.0.3.\r\n* Moved all authentication and handling of growing/shrinking of pool connections into actual pool.\r\n* All authentication methods now handle both auth/reauthenticate and logout events.\r\n* Introduced logout method to get rid of onAll option for logout command.\r\n* Updated bson to 0.5.0 that includes Decimal128 support.\r\n* Fixed logger error serialization issue.\r\n* Documentation fixes.\r\n* Implemented Server Selection Specification test suite.\r\n* Added warning level to logger.\r\n* Added warning message when sockeTimeout < haInterval for Replset/Mongos.\r\n* Mongos emits close event on no proxies available or when reconnect attempt fails.\r\n* Replset emits close event when no servers available or when attemptReconnect fails to reconnect.\r\n* Don't throw in auth methods but return error in callback.\r\n\r\n2.1.21 2016-05-30\r\n-----------------\r\n* Updated mongodb-core to 1.3.21.\r\n* Pool gets stuck if a connection marked for immediateRelease times out (Issue #99, https://github.com/nbrachet).\r\n* Make authentication process retry up to authenticationRetries at authenticationRetryIntervalMS interval.\r\n* Made ismaster replicaset calls operate with connectTimeout or monitorSocketTimeout to lower impact of big socketTimeouts on monitoring performance.\r\n* Make sure connections mark as \"immediateRelease\" don't linger the inUserConnections list. Otherwise, after that connection times out, getAll() incorrectly returns more connections than are effectively present, causing the pool to not get restarted by reconnectServer. (Issue #99, https://github.com/nbrachet).\r\n* Make cursor getMore or killCursor correctly trigger pool reconnect to single server if pool has not been destroyed.\r\n* Make ismaster monitoring for single server connection default to avoid user confusion due to change in behavior.\r\n\r\n2.1.20 2016-05-25\r\n-----------------\r\n* Refactored MongoClient options handling to simplify the logic, unifying it.\r\n* NODE-707 Implemented openUploadStreamWithId on GridFS to allow for custom fileIds so users are able to customize shard key and shard distribution.\r\n* NODE-710 Allow setting driver loggerLevel and logger function from MongoClient options.\r\n* Updated mongodb-core to 1.3.20.\r\n* Minor fix for SSL errors on connection attempts, minor fix to reconnect handler for the server.\r\n* Don't write to socket before having registered the callback for commands, work around for windows issuing error events twice on node.js when socket gets destroyed by firewall.\r\n* Fix minor issue where connectingServers would not be removed correctly causing single server connections to not auto-reconnect.\r\n\r\n2.1.19 2016-05-17\r\n----------------\r\n* Handle situation where a server connection in a replicaset sometimes fails to be destroyed properly due to being in the middle of authentication when the destroy method is called on the replicaset causing it to be orphaned and never collected.\r\n* Ensure replicaset topology destroy is never called by SDAM.\r\n* Ensure all paths are correctly returned on inspectServer in replset.\r\n* Updated mongodb-core to 1.3.19 to fix minor connectivity issue on quick open/close of MongoClient connections on auth enabled mongodb Replicasets.\r\n\r\n2.1.18 2016-04-27\r\n-----------------\r\n* Updated mongodb-core to 1.3.18 to fix Node 6.0 issues.\r\n\r\n2.1.17 2016-04-26\r\n-----------------\r\n* Updated mongodb-core to 1.3.16 to work around issue with early versions of node 0.10.x due to missing unref method on ClearText streams.\r\n* INT-1308: Allow listIndexes to inherit readPreference from Collection or DB.\r\n* Fix timeout issue using new flags #1361.\r\n* Updated mongodb-core to 1.3.17.\r\n* Better handling of unique createIndex error.\r\n* Emit error only if db instance has an error listener.\r\n* DEFAULT authMechanism; don't throw error if explicitly set by user.\r\n\r\n2.1.16 2016-04-06\r\n-----------------\r\n* Updated mongodb-core to 1.3.16.\r\n\r\n2.1.15 2016-04-06\r\n-----------------\r\n* Updated mongodb-core to 1.3.15.\r\n* Set ssl, sslValidate etc to mongosOptions on url_parser (Issue #1352, https://github.com/rubenstolk).\r\n- NODE-687 Fixed issue where a server object failed to be destroyed if the replicaset state did not update successfully. This could leave active connections accumulating over time.\r\n- Fixed some situations where all connections are flushed due to a single connection in the connection pool closing.\r\n\r\n2.1.14 2016-03-29\r\n-----------------\r\n* Updated mongodb-core to 1.3.13.\r\n* Handle missing cursor on getMore when going through a mongos proxy by pinning to socket connection and not server.\r\n\r\n2.1.13 2016-03-29\r\n-----------------\r\n* Updated mongodb-core to 1.3.12.\r\n\r\n2.1.12 2016-03-29\r\n-----------------\r\n* Updated mongodb-core to 1.3.11.\r\n* Mongos setting acceptableLatencyMS exposed to control the latency women for mongos selection.\r\n* Mongos pickProxies fall back to closest mongos if no proxies meet latency window specified.\r\n* isConnected method for mongos uses same selection code as getServer.\r\n* Exceptions in cursor getServer trapped and correctly delegated to high level handler.\r\n\r\n2.1.11 2016-03-23\r\n-----------------\r\n* Updated mongodb-core to 1.3.10.\r\n* Introducing simplified connections settings.\r\n\r\n2.1.10 2016-03-21\r\n-----------------\r\n* Updated mongodb-core to 1.3.9.\r\n* Fixing issue that prevented mapReduce stats from being resolved (Issue #1351, https://github.com/davidgtonge)\r\n* Forwards SDAM monitoring events from mongodb-core.\r\n\r\n2.1.9 2016-03-16\r\n----------------\r\n* Updated mongodb-core to 1.3.7 to fix intermittent race condition that causes some users to experience big amounts of socket connections.\r\n* Makde bson parser in ordered/unordered bulk be directly from mongodb-core to avoid intermittent null error on mongoose.\r\n\r\n2.1.8 2016-03-14\r\n----------------\r\n* Updated mongodb-core to 1.3.5.\r\n* NODE-660 TypeError: Cannot read property 'noRelease' of undefined.\r\n* Harden MessageHandler in server.js to avoid issues where we cannot find a callback for an operation.\r\n* Ensure RequestId can never be larger than Max Number integer size.\r\n* NODE-661 typo in url_parser.js resulting in replSetServerOptions is not defined when connecting over ssl.\r\n* Confusing error with invalid partial index filter (Issue #1341, https://github.com/vkarpov15).\r\n* NODE-669 Should only error out promise for bulkWrite when error is a driver level error not a write error or write concern error.\r\n* NODE-662 shallow copy options on methods that are not currently doing it to avoid passed in options mutiation.\r\n* NODE-663 added lookup helper on aggregation cursor.\r\n* NODE-585 Result object specified incorrectly for findAndModify?.\r\n* NODE-666 harden validation for findAndModify CRUD methods.\r\n\r\n2.1.7 2016-02-09\r\n----------------\r\n* NODE-656 fixed corner case where cursor count command could be left without a connection available.\r\n* NODE-658 Work around issue that bufferMaxEntries:-1 for js gets interpreted wrongly due to double nature of Javascript numbers.\r\n* Fix: GridFS always returns the oldest version due to incorrect field name (Issue #1338, https://github.com/mdebruijne).\r\n* NODE-655 GridFS stream support for cancelling upload streams and download streams (Issue #1339, https://github.com/vkarpov15).\r\n* NODE-657 insertOne don`t return promise in some cases.\r\n* Added destroy alias for abort function on GridFSBucketWriteStream.\r\n\r\n2.1.6 2016-02-05\r\n----------------\r\n* Updated mongodb-core to 1.3.1.\r\n\r\n2.1.5 2016-02-04\r\n----------------\r\n* Updated mongodb-core to 1.3.0.\r\n* Added raw support for the command function on topologies.\r\n* Fixed issue where raw results that fell on batchSize boundaries failed (Issue #72)\r\n* Copy over all the properties to the callback returned from bindToDomain, (Issue #72)\r\n* Added connection hash id to be able to reference connection host/name without leaking it outside of driver.\r\n* NODE-638, Cannot authenticate database user with utf-8 password.\r\n* Refactored pool to be worker queue based, minimizing the impact a slow query have on throughput as long as # slow queries < # connections in the pool.\r\n* Pool now grows and shrinks correctly depending on demand not causing a full pool reconnect.\r\n* Improvements in monitoring of a Replicaset where in certain situations the inquiry process could get exited.\r\n* Switched to using Array.push instead of concat for use cases of a lot of documents.\r\n* Fixed issue where re-authentication could loose the credentials if whole Replicaset disconnected at once.\r\n* Added peer optional dependencies support using require_optional module.\r\n* Bug is listCollections for collection names that start with db name (Issue #1333, https://github.com/flyingfisher)\r\n* Emit error before closing stream (Issue #1335, https://github.com/eagleeye)\r\n\r\n2.1.4 2016-01-12\r\n----------------\r\n* Restricted node engine to >0.10.3 (https://jira.mongodb.org/browse/NODE-635).\r\n* Multiple database names ignored without a warning (https://jira.mongodb.org/browse/NODE-636, Issue #1324, https://github.com/yousefhamza).\r\n* Convert custom readPreference objects in collection.js (Issue #1326, https://github.com/Machyne).\r\n\r\n2.1.3 2016-01-04\r\n----------------\r\n* Updated mongodb-core to 1.2.31.\r\n* Allow connection to secondary if primaryPreferred or secondaryPreferred (Issue #70, https://github.com/leichter)\r\n\r\n2.1.2 2015-12-23\r\n----------------\r\n* Updated mongodb-core to 1.2.30.\r\n* Pool allocates size + 1 connections when using replicasets, reserving additional pool connection for monitoring exclusively.\r\n* Fixes bug when all replicaset members are down, that would cause it to fail to reconnect using the originally provided seedlist.\r\n\r\n2.1.1 2015-12-13\r\n----------------\r\n* Surfaced checkServerIdentity options for MongoClient, Server, ReplSet and Mongos to allow for control of the checkServerIdentity method available in Node.s 0.12.x or higher.\r\n* Added readPreference support to listCollections and listIndexes helpers.\r\n* Updated mongodb-core to 1.2.28.\r\n\r\n2.1.0 2015-12-06\r\n----------------\r\n* Implements the connection string specification, https://github.com/mongodb/specifications/blob/master/source/connection-string/connection-string-spec.rst.\r\n* Implements the new GridFS specification, https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.rst.\r\n* Full MongoDB 3.2 support.\r\n* NODE-601 Added maxAwaitTimeMS support for 3.2 getMore to allow for custom timeouts on tailable cursors.\r\n* Updated mongodb-core to 1.2.26.\r\n* Return destination in GridStore pipe function.\r\n* NODE-606 better error handling on destroyed topology for db.js methods.\r\n* Added isDestroyed method to server, replset and mongos topologies.\r\n* Upgraded test suite to run using mongodb-topology-manager.\r\n\r\n2.0.53 2015-12-23\r\n-----------------\r\n* Updated mongodb-core to 1.2.30.\r\n* Pool allocates size + 1 connections when using replicasets, reserving additional pool connection for monitoring exclusively.\r\n* Fixes bug when all replicaset members are down, that would cause it to fail to reconnect using the originally provided seedlist.\r\n\r\n2.0.52 2015-12-14\r\n-----------------\r\n* removed remove from Gridstore.close.\r\n\r\n2.0.51 2015-12-13\r\n-----------------\r\n* Surfaced checkServerIdentity options for MongoClient, Server, ReplSet and Mongos to allow for control of the checkServerIdentity method available in Node.s 0.12.x or higher.\r\n* Added readPreference support to listCollections and listIndexes helpers.\r\n* Updated mongodb-core to 1.2.28.\r\n\r\n2.0.50 2015-12-06\r\n-----------------\r\n* Updated mongodb-core to 1.2.26.\r\n\r\n2.0.49 2015-11-20\r\n-----------------\r\n* Updated mongodb-core to 1.2.24 with several fixes.\r\n  * Fix Automattic/mongoose#3481; flush callbacks on error, (Issue #57, https://github.com/vkarpov15).\r\n  * $explain query for wire protocol 2.6 and 2.4 does not set number of returned documents to -1 but to 0.\r\n  * ismaster runs against admin.$cmd instead of system.$cmd.\r\n  * Fixes to handle getMore command errors for MongoDB 3.2\r\n  * Allows the process to properly close upon a Db.close() call on the replica set by shutting down the haTimer and closing arbiter connections.\r\n\r\n2.0.48 2015-11-07\r\n-----------------\r\n* GridFS no longer performs any deletes when writing a brand new file that does not have any previous <db>.fs.chunks or <db>.fs.files documents.\r\n* Updated mongodb-core to 1.2.21.\r\n* Hardened the checking for replicaset equality checks.\r\n* OpReplay flag correctly set on Wire protocol query.\r\n* Mongos load balancing added, introduced localThresholdMS to control the feature.\r\n* Kerberos now a peerDependency, making it not install it by default in Node 5.0 or higher.\r\n\r\n2.0.47 2015-10-28\r\n-----------------\r\n* Updated mongodb-core to 1.2.20.\r\n* Fixed bug in arbiter connection capping code.\r\n* NODE-599 correctly handle arrays of server tags in order of priority.\r\n* Fix for 2.6 wire protocol handler related to readPreference handling.\r\n* Added maxAwaitTimeMS support for 3.2 getMore to allow for custom timeouts on tailable cursors.\r\n* Make CoreCursor check for $err before saying that 'next' succeeded (Issue #53, https://github.com/vkarpov15).\r\n\r\n2.0.46 2015-10-15\r\n-----------------\r\n* Updated mongodb-core to 1.2.19.\r\n* NODE-578 Order of sort fields is lost for numeric field names.\r\n* Expose BSON Map (ES6 Map or polyfill).\r\n* Minor fixes for APM support to pass extended APM test suite.\r\n\r\n2.0.45 2015-09-30\r\n-----------------\r\n* NODE-566 Fix issue with rewind on capped collections causing cursor state to be reset on connection loss.\r\n\r\n2.0.44 2015-09-28\r\n-----------------\r\n* Bug fixes for APM upconverting of legacy INSERT/UPDATE/REMOVE wire protocol messages.\r\n* NODE-562, fixed issue where a Replicaset MongoDB URI with a single seed and replSet name set would cause a single direct connection instead of topology discovery.\r\n* Updated mongodb-core to 1.2.14.\r\n* NODE-563 Introduced options.ignoreUndefined for db class and MongoClient db options, made serialize undefined to null default again but allowing for overrides on insert/update/delete operations.\r\n* Use handleCallback if result is an error for count queries. (Issue #1298, https://github.com/agclever)\r\n* Rewind cursor to correctly force reconnect on capped collections when first query comes back empty.\r\n* NODE-571 added code 59 to legacy server errors when SCRAM-SHA-1 mechanism fails.\r\n* NODE-572 Remove examples that use the second parameter to `find()`.\r\n\r\n2.0.43 2015-09-14\r\n-----------------\r\n* Propagate timeout event correctly to db instances.\r\n* Application Monitoring API (APM) implemented.\r\n* NOT providing replSet name in MongoClient connection URI will force single server connection. Fixes issue where it was impossible to directly connect to a replicaset member server.\r\n* Updated mongodb-core to 1.2.12.\r\n* NODE-541 Initial Support \"read committed\" isolation level where \"committed\" means confimed by the voting majority of a replica set.\r\n* GridStore doesn't share readPreference setting from connection string. (Issue #1295, https://github.com/zhangyaoxing)\r\n* fixed forceServerObjectId calls (Issue #1292, https://github.com/d-mon-)\r\n* Pass promise library through to DB function (Issue #1294, https://github.com/RovingCodeMonkey)\r\n\r\n2.0.42 2015-08-18\r\n-----------------\r\n* Added test case to exercise all non-crud methods on mongos topologies, fixed numberOfConnectedServers on mongos topology instance.\r\n\r\n2.0.41 2015-08-14\r\n-----------------\r\n* Added missing Mongos.prototype.parserType function.\r\n* Updated mongodb-core to 1.2.10.\r\n\r\n2.0.40 2015-07-14\r\n-----------------\r\n* Updated mongodb-core to 1.2.9 for 2.4 wire protocol error handler fix.\r\n* NODE-525 Reset connectionTimeout after it's overwritten by tls.connect.\r\n* NODE-518 connectTimeoutMS is doubled in 2.0.39.\r\n* NODE-506 Ensures that errors from bulk unordered and ordered are instanceof Error (Issue #1282, https://github.com/owenallenaz).\r\n* NODE-526 Unique index not throwing duplicate key error.\r\n* NODE-528 Ignore undefined fields in Collection.find().\r\n* NODE-527 The API example for collection.createIndex shows Db.createIndex functionality.\r\n\r\n2.0.39 2015-07-14\r\n-----------------\r\n* Updated mongodb-core to 1.2.6 for NODE-505.\r\n\r\n2.0.38 2015-07-14\r\n-----------------\r\n* NODE-505 Query fails to find records that have a 'result' property with an array value.\r\n\r\n2.0.37 2015-07-14\r\n-----------------\r\n* NODE-504 Collection * Default options when using promiseLibrary.\r\n* NODE-500 Accidental repeat of hostname in seed list multiplies total connections persistently.\r\n* Updated mongodb-core to 1.2.5 to fix NODE-492.\r\n\r\n2.0.36 2015-07-07\r\n-----------------\r\n* Fully promisified allowing the use of ES6 generators and libraries like co. Also allows for BYOP (Bring your own promises).\r\n* NODE-493 updated mongodb-core to 1.2.4 to ensure we cannot DDOS the mongod or mongos process on large connection pool sizes.\r\n\r\n2.0.35 2015-06-17\r\n-----------------\r\n* Upgraded to mongodb-core 1.2.2 including removing warnings when C++ bson parser is not available and a fix for SCRAM authentication.\r\n\r\n2.0.34 2015-06-17\r\n-----------------\r\n* Upgraded to mongodb-core 1.2.1 speeding up serialization and removing the need for the c++ bson extension.\r\n* NODE-486 fixed issue related to limit and skip when calling toArray in 2.0 driver.\r\n* NODE-483 throw error if capabilities of topology is queries before topology has performed connection setup.\r\n* NODE-482 fixed issue where MongoClient.connect would incorrectly identify a replset seed list server as a non replicaset member.\r\n* NODE-487 fixed issue where killcursor command was not being sent correctly on limit and skip queries.\r\n\r\n2.0.33 2015-05-20\r\n-----------------\r\n* Bumped mongodb-core to 1.1.32.\r\n\r\n2.0.32 2015-05-19\r\n-----------------\r\n* NODE-463 db.close immediately executes its callback.\r\n* Don't only emit server close event once (Issue #1276, https://github.com/vkarpov15).\r\n* NODE-464 Updated mongodb-core to 1.1.31 that uses a single socket connection to arbiters and hidden servers as well as emitting all event correctly.\r\n\r\n2.0.31 2015-05-08\r\n-----------------\r\n* NODE-461 Tripping on error \"no chunks found for file, possibly corrupt\" when there is no error.\r\n\r\n2.0.30 2015-05-07\r\n-----------------\r\n* NODE-460 fix; don't set authMechanism for user in db.authenticate() to avoid mongoose authentication issue.\r\n\r\n2.0.29 2015-05-07\r\n-----------------\r\n* NODE-444 Possible memory leak, too many listeners added.\r\n* NODE-459 Auth failure using Node 0.8.28, MongoDB 3.0.2 & mongodb-node-native 1.4.35.\r\n* Bumped mongodb-core to 1.1.26.\r\n\r\n2.0.28 2015-04-24\r\n-----------------\r\n* Bumped mongodb-core to 1.1.25\r\n* Added Cursor.prototype.setCursorOption to allow for setting node specific cursor options for tailable cursors.\r\n* NODE-430 Cursor.count() opts argument masked by var opts = {}\r\n* NODE-406 Implemented Cursor.prototype.map function tapping into MongoClient cursor transforms.\r\n* NODE-438 replaceOne is not returning the result.ops property as described in the docs.\r\n* NODE-433 _read, pipe and write all open gridstore automatically if not open.\r\n* NODE-426 ensure drain event is emitted after write function returns, fixes intermittent issues in writing files to gridstore.\r\n* NODE-440 GridStoreStream._read() doesn't check GridStore.read() error.\r\n* Always use readPreference = primary for findAndModify command (ignore passed in read preferences) (Issue #1274, https://github.com/vkarpov15).\r\n* Minor fix in GridStore.exists for dealing with regular expressions searches.\r\n\r\n2.0.27 2015-04-07\r\n-----------------\r\n* NODE-410 Correctly handle issue with pause/resume in Node 0.10.x that causes exceptions when using the Node 0.12.0 style streams.\r\n\r\n2.0.26 2015-04-07\r\n-----------------\r\n* Implements the Common Index specification Standard API at https://github.com/mongodb/specifications/blob/master/source/index-management.rst.\r\n* NODE-408 Expose GridStore.currentChunk.chunkNumber.\r\n\r\n2.0.25 2015-03-26\r\n-----------------\r\n* Upgraded mongodb-core to 1.1.21, making the C++ bson code an optional dependency to the bson module.\r\n\r\n2.0.24 2015-03-24\r\n-----------------\r\n* NODE-395 Socket Not Closing, db.close called before full set finished initalizing leading to server connections in progress not being closed properly.\r\n* Upgraded mongodb-core to 1.1.20.\r\n\r\n2.0.23 2015-03-21\r\n-----------------\r\n* NODE-380 Correctly return MongoError from toError method.\r\n* Fixed issue where addCursorFlag was not correctly setting the flag on the command for mongodb-core.\r\n* NODE-388 Changed length from method to property on order.js/unordered.js bulk operations.\r\n* Upgraded mongodb-core to 1.1.19.\r\n\r\n2.0.22 2015-03-16\r\n-----------------\r\n* NODE-377, fixed issue where tags would correctly be checked on secondary and nearest to filter out eligible server candidates.\r\n* Upgraded mongodb-core to 1.1.17.\r\n\r\n2.0.21 2015-03-06\r\n-----------------\r\n* Upgraded mongodb-core to 1.1.16 making sslValidate default to true to force validation on connection unless overriden by the user.\r\n\r\n2.0.20 2015-03-04\r\n-----------------\r\n* Updated mongodb-core 1.1.15 to relax pickserver method.\r\n\r\n2.0.19 2015-03-03\r\n-----------------\r\n* NODE-376 Fixes issue * Unordered batch incorrectly tracks batch size when switching batch types (Issue #1261, https://github.com/meirgottlieb)\r\n* NODE-379 Fixes bug in cursor.count() that causes the result to always be zero for dotted collection names (Issue #1262, https://github.com/vsivsi)\r\n* Expose MongoError from mongodb-core (Issue #1260, https://github.com/tjconcept)\r\n\r\n2.0.18 2015-02-27\r\n-----------------\r\n* Bumped mongodb-core 1.1.14 to ensure passives are correctly added as secondaries.\r\n\r\n2.0.17 2015-02-27\r\n-----------------\r\n* NODE-336 Added length function to ordered and unordered bulk operations to be able know the amount of current operations in bulk.\r\n* Bumped mongodb-core 1.1.13 to ensure passives are correctly added as secondaries.\r\n\r\n2.0.16 2015-02-16\r\n-----------------\r\n* listCollection now returns filtered result correctly removing db name for 2.6 or earlier servers.\r\n* Bumped mongodb-core 1.1.12 to correctly work for node 0.12.0 and io.js.\r\n* Add ability to get collection name from cursor (Issue #1253, https://github.com/vkarpov15)\r\n\r\n2.0.15 2015-02-02\r\n-----------------\r\n* Unified behavior of listCollections results so 3.0 and pre 3.0 return same type of results.\r\n* Bumped mongodb-core to 1.1.11 to support per document tranforms in cursors as well as relaxing the setName requirement.\r\n* NODE-360 Aggregation cursor and command correctly passing down the maxTimeMS property.\r\n* Added ~1.0 mongodb-tools module for test running.\r\n* Remove the required setName for replicaset connections, if not set it will pick the first setName returned.\r\n\r\n2.0.14 2015-01-21\r\n-----------------\r\n* Fixed some MongoClient.connect options pass through issues and added test coverage.\r\n* Bumped mongodb-core to 1.1.9 including fixes for io.js\r\n\r\n2.0.13 2015-01-09\r\n-----------------\r\n* Bumped mongodb-core to 1.1.8.\r\n* Optimized query path for performance, moving Object.defineProperty outside of constructors.\r\n\r\n2.0.12 2014-12-22\r\n-----------------\r\n* Minor fixes to listCollections to ensure correct querying of a collection when using a string.\r\n\r\n2.0.11 2014-12-19\r\n-----------------\r\n* listCollections filters out index namespaces on < 2.8 correctly\r\n* Bumped mongo-client to 1.1.7\r\n\r\n2.0.10 2014-12-18\r\n-----------------\r\n* NODE-328 fixed db.open return when no callback available issue and added test.\r\n* NODE-327 Refactored listCollections to return cursor to support 2.8.\r\n* NODE-327 Added listIndexes method and refactored internal methods to use the new command helper.\r\n* NODE-335 Cannot create index for nested objects fixed by relaxing key checking for createIndex helper.\r\n* Enable setting of connectTimeoutMS (Issue #1235, https://github.com/vkarpov15)\r\n* Bumped mongo-client to 1.1.6\r\n\r\n2.0.9 2014-12-01\r\n----------------\r\n* Bumped mongodb-core to 1.1.3 fixing global leaked variables and introducing strict across all classes.\r\n* All classes are now strict (Issue #1233)\r\n* NODE-324 Refactored insert/update/remove and all other crud opts to rely on internal methods to avoid any recursion.\r\n* Fixed recursion issues in debug logging due to JSON.stringify()\r\n* Documentation fixes (Issue #1232, https://github.com/wsmoak)\r\n* Fix writeConcern in Db.prototype.ensureIndex (Issue #1231, https://github.com/Qard)\r\n\r\n2.0.8 2014-11-28\r\n----------------\r\n* NODE-322 Finished up prototype refactoring of Db class.\r\n* NODE-322 Exposed Cursor in index.js for New Relic.\r\n\r\n2.0.7 2014-11-20\r\n----------------\r\n* Bumped mongodb-core to 1.1.2 fixing a UTF8 encoding issue for collection names.\r\n* NODE-318 collection.update error while setting a function with serializeFunctions option.\r\n* Documentation fixes.\r\n\r\n2.0.6 2014-11-14\r\n----------------\r\n* Refactored code to be prototype based instead of privileged methods.\r\n* Bumped mongodb-core to 1.1.1 to take advantage of the prototype based refactorings.\r\n* Implemented missing aspects of the CRUD specification.\r\n* Fixed documentation issues.\r\n* Fixed global leak REFERENCE_BY_ID in gridfs grid_store (Issue #1225, https://github.com/j)\r\n* Fix LearnBoost/mongoose#2313: don't let user accidentally clobber geoNear params (Issue #1223, https://github.com/vkarpov15)\r\n\r\n2.0.5 2014-10-29\r\n----------------\r\n* Minor fixes to documentation and generation of documentation.\r\n* NODE-306 (No results in aggregation cursor when collection name contains a dot), Merged code for cursor and aggregation cursor.\r\n\r\n2.0.4 2014-10-23\r\n----------------\r\n* Allow for single replicaset seed list with no setName specified (Issue #1220, https://github.com/imaman)\r\n* Made each rewind on each call allowing for re-using the cursor.\r\n* Fixed issue where incorrect iterations would happen on each for extensive batchSizes.\r\n* NODE-301 specifying maxTimeMS on find causes all fields to be omitted from result.\r\n\r\n2.0.3 2014-10-14\r\n----------------\r\n* NODE-297 Aggregate Broken for case of pipeline with no options.\r\n\r\n2.0.2 2014-10-08\r\n----------------\r\n* Bumped mongodb-core to 1.0.2.\r\n* Fixed bson module dependency issue by relying on the mongodb-core one.\r\n* Use findOne instead of find followed by nextObject (Issue #1216, https://github.com/sergeyksv)\r\n\r\n2.0.1 2014-10-07\r\n----------------\r\n* Dependency fix\r\n\r\n2.0.0 2014-10-07\r\n----------------\r\n* First release of 2.0 driver\r\n\r\n2.0.0-alpha2 2014-10-02\r\n-----------------------\r\n* CRUD API (insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, bulkWrite, findOneAndDelete, findOneAndUpdate, findOneAndReplace)\r\n* Cluster Management Spec compatible.\r\n\r\n2.0.0-alpha1 2014-09-08\r\n-----------------------\r\n* Insert method allows only up 1000 pr batch for legacy as well as 2.6 mode\r\n* Streaming behavior is 0.10.x or higher with backwards compatibility using readable-stream npm package\r\n* Gridfs stream only available through .stream() method due to overlapping names on Gridstore object and streams in 0.10.x and higher of node\r\n* remove third result on update and remove and return the whole result document instead (getting rid of the weird 3 result parameters)\r\n    * Might break some application\r\n* Returns the actual mongodb-core result instead of just the number of records changed for insert/update/remove\r\n* MongoClient only has the connect method (no ability instantiate with Server, ReplSet or similar)\r\n* Removed Grid class\r\n* GridStore only supports w+ for metadata updates, no appending to file as it's not thread safe and can cause corruption of the data\r\n    + seek will fail if attempt to use with w or w+\r\n    + write will fail if attempted with w+ or r\r\n    + w+ only works for updating metadata on a file\r\n* Cursor toArray and each resets and re-runs the cursor\r\n* FindAndModify returns whole result document instead of just value\r\n* Extend cursor to allow for setting all the options via methods instead of dealing with the current messed up find\r\n* Removed db.dereference method\r\n* Removed db.cursorInfo method\r\n* Removed db.stats method\r\n* Removed db.collectionNames not needed anymore as it's just a specialized case of listCollections\r\n* Removed db.collectionInfo removed due to not being compatible with new storage engines in 2.8 as they need to use the listCollections command due to system collections not working for namespaces.\r\n* Added db.listCollections to replace several methods above\r\n\r\n1.4.10 2014-09-04\r\n-----------------\r\n* Fixed BSON and Kerberos compilation issues\r\n* Bumped BSON to ~0.2 always installing latest BSON 0.2.x series\r\n* Fixed Kerberos and bumped to 0.0.4\r\n\r\n1.4.9 2014-08-26\r\n----------------\r\n* Check _bsonType for Binary (Issue #1202, https://github.com/mchapman)\r\n* Remove duplicate Cursor constructor (Issue #1201, https://github.com/KenPowers)\r\n* Added missing parameter in the documentation (Issue #1199, https://github.com/wpjunior)\r\n* Documented third parameter on the update callback(Issue #1196, https://github.com/gabmontes)\r\n* NODE-240 Operations on SSL connection hang on node 0.11.x\r\n* NODE-235 writeResult is not being passed on when error occurs in insert\r\n* NODE-229 Allow count to work with query hints\r\n* NODE-233 collection.save() does not support fullResult\r\n* NODE-244 Should parseError also emit a `disconnected` event?\r\n* NODE-246 Cursors are inefficiently constructed and consequently cannot be promisified.\r\n* NODE-248 Crash with X509 auth\r\n* NODE-252 Uncaught Exception in Base.__executeAllServerSpecificErrorCallbacks\r\n* Bumped BSON parser to 0.2.12\r\n\r\n\r\n1.4.8 2014-08-01\r\n----------------\r\n* NODE-205 correctly emit authenticate event\r\n* NODE-210 ensure no undefined connection error when checking server state\r\n* NODE-212 correctly inherit socketTimeoutMS from replicaset when HA process adds new servers or reconnects to existing ones\r\n* NODE-220 don't throw error if ensureIndex errors out in Gridstore\r\n* Updated bson to 0.2.11 to ensure correct toBSON behavior when returning non object in nested classes\r\n* Fixed test running filters\r\n* Wrap debug log in a call to format (Issue #1187, https://github.com/andyroyle)\r\n* False option values should not trigger w:1 (Issue #1186, https://github.com/jsdevel)\r\n* Fix aggregatestream.close(Issue #1194, https://github.com/jonathanong)\r\n* Fixed parsing issue for w:0 in url parser when in connection string\r\n* Modified collection.geoNear to support a geoJSON point or legacy coordinate pair (Issue #1198, https://github.com/mmacmillan)\r\n\r\n1.4.7 2014-06-18\r\n----------------\r\n* Make callbacks to be executed in right domain when server comes back up (Issue #1184, https://github.com/anton-kotenko)\r\n* Fix issue where currentOp query against mongos would fail due to mongos passing through $readPreference field to mongod (CS-X)\r\n\r\n1.4.6 2014-06-12\r\n----------------\r\n* Added better support for MongoClient IP6 parsing (Issue #1181, https://github.com/micovery)\r\n* Remove options check on index creation (Issue #1179, Issue #1183, https://github.com/jdesboeufs, https://github.com/rubenvereecken)\r\n* Added missing type check before calling optional callback function (Issue #1180)\r\n\r\n1.4.5 2014-05-21\r\n----------------\r\n* Added fullResult flag to insert/update/remove which will pass raw result document back. Document contents will vary depending on the server version the driver is talking to. No attempt is made to coerce a joint response.\r\n* Fix to avoid MongoClient.connect hanging during auth when secondaries building indexes pre 2.6.\r\n* return the destination stream in GridStore.pipe (Issue #1176, https://github.com/iamdoron)\r\n\r\n1.4.4 2014-05-13\r\n----------------\r\n* Bumped BSON version to use the NaN 1.0 package, fixed strict comparison issue for ObjectID\r\n* Removed leaking global variable (Issue #1174, https://github.com/dainis)\r\n* MongoClient respects connectTimeoutMS for initial discovery process (NODE-185)\r\n* Fix bug with return messages larger than 16MB but smaller than max BSON Message Size (NODE-184)\r\n\r\n1.4.3 2014-05-01\r\n----------------\r\n* Clone options for commands to avoid polluting original options passed from Mongoose (Issue #1171, https://github.com/vkarpov15)\r\n* Made geoNear and geoHaystackSearch only clean out allowed options from command generation (Issue #1167)\r\n* Fixed typo for allowDiskUse (Issue #1168, https://github.com/joaofranca)\r\n* A 'mapReduce' function changed 'function' to instance '\\<Object\\>' of 'Code' class (Issue #1165, https://github.com/exabugs)\r\n* Made findAndModify set sort only when explicitly set (Issue #1163, https://github.com/sars)\r\n* Rewriting a gridStore file by id should use a new filename if provided (Issue #1169, https://github.com/vsivsi)\r\n\r\n1.4.2 2014-04-15\r\n----------------\r\n* Fix for inheritance of readPreferences from MongoClient NODE-168/NODE-169\r\n* Merged in fix for ping strategy to avoid hitting non-pinged servers (Issue #1161, https://github.com/vaseker)\r\n* Merged in fix for correct debug output for connection messages (Issue #1158, https://github.com/vaseker)\r\n* Fixed global variable leak (Issue #1160, https://github.com/vaseker)\r\n\r\n1.4.1 2014-04-09\r\n----------------\r\n* Correctly emit joined event when primary change\r\n* Add _id to documents correctly when using bulk operations\r\n\r\n1.4.0 2014-04-03\r\n----------------\r\n* All node exceptions will no longer be caught if on('error') is defined\r\n* Added X509 auth support\r\n* Fix for MongoClient connection timeout issue (NODE-97)\r\n* Pass through error messages from parseError instead of just text (Issue #1125)\r\n* Close db connection on error (Issue #1128, https://github.com/benighted)\r\n* Fixed documentation generation\r\n* Added aggregation cursor for 2.6 and emulated cursor for pre 2.6 (uses stream2)\r\n* New Bulk API implementation using write commands for 2.6 and down converts for pre 2.6\r\n* Insert/Update/Remove using new write commands when available\r\n* Added support for new roles based API's in 2.6 for addUser/removeUser\r\n* Added bufferMaxEntries to start failing if the buffer hits the specified number of entries\r\n* Upgraded BSON parser to version 0.2.7 to work with < 0.11.10 C++ API changes\r\n* Support for OP_LOG_REPLAY flag (NODE-94)\r\n* Fixes for SSL HA ping and discovery.\r\n* Uses createIndexes if available for ensureIndex/createIndex\r\n* Added parallelCollectionScan method to collection returning CommandCursor instances for cursors\r\n* Made CommandCursor behave as Readable stream.\r\n* Only Db honors readPreference settings, removed Server.js legacy readPreference settings due to user confusion.\r\n* Reconnect event emitted by ReplSet/Mongos/Server after reconnect and before replaying of buffered operations.\r\n* GridFS buildMongoObject returns error on illegal md5 (NODE-157, https://github.com/iantocristian)\r\n* Default GridFS chunk size changed to (255 * 1024) bytes to optimize for collections defaulting to power of 2 sizes on 2.6.\r\n* Refactored commands to all go through command function ensuring consistent command execution.\r\n* Fixed issues where readPreferences where not correctly passed to mongos.\r\n* Catch error == null and make err detection more prominent (NODE-130)\r\n* Allow reads from arbiter for single server connection (NODE-117)\r\n* Handle error coming back with no documents (NODE-130)\r\n* Correctly use close parameter in Gridstore.write() (NODE-125)\r\n* Throw an error on a bulk find with no selector (NODE-129, https://github.com/vkarpov15)\r\n* Use a shallow copy of options in find() (NODE-124, https://github.com/vkarpov15)\r\n* Fix statistical strategy (NODE-158, https://github.com/vkarpov15)\r\n* GridFS off-by-one bug in lastChunkNumber() causes uncaught throw and data loss (Issue #1154, https://github.com/vsivsi)\r\n* GridStore drops passed `aliases` option, always results in `null` value in GridFS files (Issue #1152, https://github.com/vsivsi)\r\n* Remove superfluous connect object copying in index.js (Issue #1145, https://github.com/thomseddon)\r\n* Do not return false when the connection buffer is still empty (Issue #1143, https://github.com/eknkc)\r\n* Check ReadPreference object on ReplSet.canRead (Issue #1142, https://github.com/eknkc)\r\n* Fix unpack error on _executeQueryCommand (Issue #1141, https://github.com/eknkc)\r\n* Close db on failed connect so node can exit (Issue #1128, https://github.com/benighted)\r\n* Fix global leak with _write_concern (Issue #1126, https://github.com/shanejonas)\r\n\r\n1.3.19 2013-08-21\r\n-----------------\r\n* Correctly rethrowing errors after change from event emission to callbacks, compatibility with 0.10.X domains without breaking 0.8.X support.\r\n* Small fix to return the entire findAndModify result as the third parameter (Issue #1068)\r\n* No removal of \"close\" event handlers on server reconnect, emits \"reconnect\" event when reconnection happens. Reconnect Only applies for single server connections as of now as semantics for ReplSet and Mongos is not clear (Issue #1056)\r\n\r\n1.3.18 2013-08-10\r\n-----------------\r\n* Fixed issue when throwing exceptions in MongoClient.connect/Db.open (Issue #1057)\r\n* Fixed an issue where _events is not cleaned up correctly causing a slow steady memory leak.\r\n\r\n1.3.17 2013-08-07\r\n-----------------\r\n* Ignore return commands that have no registered callback\r\n* Made collection.count not use the db.command function\r\n* Fix throw exception on ping command (Issue #1055)\r\n\r\n1.3.16 2013-08-02\r\n-----------------\r\n* Fixes connection issue where lots of connections would happen if a server is in recovery mode during connection (Issue #1050, NODE-50, NODE-51)\r\n* Bug in unlink mulit filename (Issue #1054)\r\n\r\n1.3.15 2013-08-01\r\n-----------------\r\n* Memory leak issue due to node Issue #4390 where _events[id] is set to undefined instead of deleted leading to leaks in the Event Emitter over time\r\n\r\n1.3.14 2013-08-01\r\n-----------------\r\n* Fixed issue with checkKeys where it would error on X.X\r\n\r\n1.3.13 2013-07-31\r\n-----------------\r\n* Added override for checkKeys on insert/update (Warning will expose you to injection attacks) (Issue #1046)\r\n* BSON size checking now done pre serialization (Issue #1037)\r\n* Added isConnected returns false when no connection Pool exists (Issue #1043)\r\n* Unified command handling to ensure same handling (Issue #1041, #1042)\r\n* Correctly emit \"open\" and \"fullsetup\" across all Db's associated with Mongos, ReplSet or Server (Issue #1040)\r\n* Correctly handles bug in authentication when attempting to connect to a recovering node in a replicaset.\r\n* Correctly remove recovering servers from available servers in replicaset. Piggybacks on the ping command.\r\n* Removed findAndModify chaining to be compliant with behavior in other official drivers and to fix a known mongos issue.\r\n* Fixed issue with Kerberos authentication on Windows for re-authentication.\r\n* Fixed Mongos failover behavior to correctly throw out old servers.\r\n* Ensure stored queries/write ops are executed correctly after connection timeout\r\n* Added promoteLongs option for to allow for overriding the promotion of Longs to Numbers and return the actual Long.\r\n\r\n1.3.12 2013-07-19\r\n-----------------\r\n* Fixed issue where timeouts sometimes would behave wrongly (Issue #1032)\r\n* Fixed bug with callback third parameter on some commands (Issue #1033)\r\n* Fixed possible issue where killcursor command might leave hanging functions\r\n* Fixed issue where Mongos was not correctly removing dead servers from the pool of eligable servers\r\n* Throw error if dbName or collection name contains null character (at command level and at collection level)\r\n* Updated bson parser to 0.2.1 with security fix and non-promotion of Long values to javascript Numbers (once a long always a long)\r\n\r\n1.3.11 2013-07-04\r\n-----------------\r\n* Fixed errors on geoNear and geoSearch (Issue #1024, https://github.com/ebensing)\r\n* Add driver version to export (Issue #1021, https://github.com/aheckmann)\r\n* Add text to readpreference obedient commands (Issue #1019)\r\n* Drivers should check the query failure bit even on getmore response (Issue #1018)\r\n* Map reduce has incorrect expectations of 'inline' value for 'out' option (Issue #1016, https://github.com/rcotter)\r\n* Support SASL PLAIN authentication (Issue #1009)\r\n* Ability to use different Service Name on the driver for Kerberos Authentication (Issue #1008)\r\n* Remove unnecessary octal literal to allow the code to run in strict mode (Issue #1005, https://github.com/jamesallardice)\r\n* Proper handling of recovering nodes (when they go into recovery and when they return from recovery, Issue #1027)\r\n\r\n1.3.10 2013-06-17\r\n-----------------\r\n* Guard against possible undefined in server::canCheckoutWriter (Issue #992, https://github.com/willyaranda)\r\n* Fixed some duplicate test names (Issue #993, https://github.com/kawanet)\r\n* Introduced write and read concerns for GridFS (Issue #996)\r\n* Fixed commands not correctly respecting Collection level read preference (Issue #995, #999)\r\n* Fixed issue with pool size on replicaset connections (Issue #1000)\r\n* Execute all query commands on master switch (Issue #1002, https://github.com/fogaztuc)\r\n\r\n1.3.9 2013-06-05\r\n----------------\r\n* Fixed memory leak when findAndModify errors out on w>1 and chained callbacks not properly cleaned up.\r\n\r\n1.3.8 2013-05-31\r\n----------------\r\n* Fixed issue with socket death on windows where it emits error event instead of close event (Issue #987)\r\n* Emit authenticate event on db after authenticate method has finished on db instance (Issue #984)\r\n* Allows creation of MongoClient and do new MongoClient().connect(..). Emits open event when connection correct allowing for apps to react on event.\r\n\r\n1.3.7 2013-05-29\r\n----------------\r\n* After reconnect, tailable getMores go on inconsistent connections (Issue #981, #982, https://github.com/glasser)\r\n* Updated Bson to 0.1.9 to fix ARM support (Issue #985)\r\n\r\n1.3.6 2013-05-21\r\n----------------\r\n* Fixed issue where single server reconnect attempt would throw due to missing options variable (Issue #979)\r\n* Fixed issue where difference in ismaster server name and seed list caused connections issues, (Issue #976)\r\n\r\n1.3.5 2013-05-14\r\n----------------\r\n* Fixed issue where HA for replicaset would pick the same broken connection when attempting to ping the replicaset causing the replicaset to never recover.\r\n\r\n1.3.4 2013-05-14\r\n----------------\r\n* Fixed bug where options not correctly passed in for uri parser (Issue #973, https://github.com/supershabam)\r\n* Fixed bug when passing a named index hint (Issue #974)\r\n\r\n1.3.3 2013-05-09\r\n----------------\r\n* Fixed auto-reconnect issue with single server instance.\r\n\r\n1.3.2 2013-05-08\r\n----------------\r\n* Fixes for an issue where replicaset would be pronounced dead when high priority primary caused double elections.\r\n\r\n1.3.1 2013-05-06\r\n----------------\r\n* Fix for replicaset consisting of primary/secondary/arbiter with priority applied failing to reconnect properly\r\n* Applied auth before server instance is set as connected when single server connection\r\n* Throw error if array of documents passed to save method\r\n\r\n1.3.0 2013-04-25\r\n----------------\r\n* Whole High availability handling for Replicaset, Server and Mongos connections refactored to ensure better handling of failover cases.\r\n* Fixed issue where findAndModify would not correctly skip issuing of chained getLastError (Issue #941)\r\n* Fixed throw error issue on errors with findAndModify during write out operation (Issue #939, https://github.com/autopulated)\r\n* Gridstore.prototype.writeFile now returns gridstore object correctly (Issue #938)\r\n* Kerberos support is now an optional module that allows for use of GSSAPI authentication using MongoDB Subscriber edition\r\n* Fixed issue where cursor.toArray could blow the stack on node 0.10.X (#950)\r\n\r\n1.2.14 2013-03-14\r\n-----------------\r\n* Refactored test suite to speed up running of replicaset tests\r\n* Fix of async error handling when error happens in callback (Issue #909, https://github.com/medikoo)\r\n* Corrected a slaveOk setting issue (Issue #906, #905)\r\n* Fixed HA issue where ping's would not go to correct server on HA server connection failure.\r\n* Uses setImmediate if on 0.10 otherwise nextTick for cursor stream\r\n* Fixed race condition in Cursor stream (NODE-31)\r\n* Fixed issues related to node 0.10 and process.nextTick now correctly using setImmediate where needed on node 0.10\r\n* Added support for maxMessageSizeBytes if available (DRIVERS-1)\r\n* Added support for authSource (2.4) to MongoClient URL and db.authenticate method (DRIVER-69/NODE-34)\r\n* Fixed issue in GridStore seek and GridStore read to correctly work on multiple seeks (Issue #895)\r\n\r\n1.2.13 2013-02-22\r\n-----------------\r\n* Allow strategy 'none' for repliaset if no strategy wanted (will default to round robin selection of servers on a set readPreference)\r\n* Fixed missing MongoErrors on some cursor methods (Issue #882)\r\n* Correctly returning a null for the db instance on MongoClient.connect when auth fails (Issue #890)\r\n* Added dropTarget option support for renameCollection/rename (Issue #891, help from https://github.com/jbottigliero)\r\n* Fixed issue where connection using MongoClient.connect would fail if first server did not exist (Issue #885)\r\n\r\n1.2.12 2013-02-13\r\n-----------------\r\n* Added limit/skip options to Collection.count (Issue #870)\r\n* Added applySkipLimit option to Cursor.count (Issue #870)\r\n* Enabled ping strategy as default for Replicaset if none specified (Issue #876)\r\n* Should correctly pick nearest server for SECONDARY/SECONDARY_PREFERRED/NEAREST (Issue #878)\r\n\r\n1.2.11 2013-01-29\r\n-----------------\r\n* Added fixes for handling type 2 binary due to PHP driver (Issue #864)\r\n* Moved callBackStore to Base class to have single unified store (Issue #866)\r\n* Ping strategy now reuses sockets unless they are closed by the server to avoid overhead\r\n\r\n1.2.10 2013-01-25\r\n-----------------\r\n* Merged in SSL support for 2.4 supporting certificate validation and presenting certificates to the server.\r\n* Only open a new HA socket when previous one dead (Issue #859, #857)\r\n* Minor fixes\r\n\r\n1.2.9 2013-01-15\r\n----------------\r\n* Fixed bug in SSL support for MongoClient/Db.connect when discovering servers (Issue #849)\r\n* Connection string with no db specified should default to admin db (Issue #848)\r\n* Support port passed as string to Server class (Issue #844)\r\n* Removed noOpen support for MongoClient/Db.connect as auto discovery of servers for Mongod/Mongos makes it not possible (Issue #842)\r\n* Included toError wrapper code moved to utils.js file (Issue #839, #840)\r\n* Rewrote cursor handling to avoid process.nextTick using trampoline instead to avoid stack overflow, speedup about 40%\r\n\r\n1.2.8 2013-01-07\r\n----------------\r\n* Accept function in a Map Reduce scope object not only a function string (Issue #826, https://github.com/aheckmann)\r\n* Typo in db.authenticate caused a check (for provided connection) to return false, causing a connection AND onAll=true to be passed into __executeQueryCommand downstream (Issue #831, https://github.com/m4tty)\r\n* Allow gridfs objects to use non ObjectID ids (Issue #825, https://github.com/nailgun)\r\n* Removed the double wrap, by not passing an Error object to the wrap function (Issue #832, https://github.com/m4tty)\r\n* Fix connection leak (gh-827) for HA replicaset health checks (Issue #833, https://github.com/aheckmann)\r\n* Modified findOne to use nextObject instead of toArray avoiding a nextTick operation (Issue #836)\r\n* Fixes for cursor stream to avoid multiple getmore issues when one in progress (Issue #818)\r\n* Fixes .open replaying all backed up commands correctly if called after operations performed, (Issue #829 and #823)\r\n\r\n1.2.7 2012-12-23\r\n----------------\r\n* Rolled back batches as they hang in certain situations\r\n* Fixes for NODE-25, keep reading from secondaries when primary goes down\r\n\r\n1.2.6 2012-12-21\r\n----------------\r\n* domain sockets shouldn't require a port arg (Issue #815, https://github.com/aheckmann)\r\n* Cannot read property 'info' of null (Issue #809, https://github.com/thesmart)\r\n* Cursor.each should work in batches (Issue #804, https://github.com/Swatinem)\r\n* Cursor readPreference bug for non-supported read preferences (Issue #817)\r\n\r\n1.2.5 2012-12-12\r\n----------------\r\n* Fixed ssl regression, added more test coverage (Issue #800)\r\n* Added better error reporting to the Db.connect if no valid serverConfig setup found (Issue #798)\r\n\r\n1.2.4 2012-12-11\r\n----------------\r\n* Fix to ensure authentication is correctly applied across all secondaries when using MongoClient.\r\n\r\n1.2.3 2012-12-10\r\n----------------\r\n* Fix for new replicaset members correctly authenticating when being added (Issue #791, https://github.com/m4tty)\r\n* Fixed seek issue in gridstore when using stream (Issue #790)\r\n\r\n1.2.2 2012-12-03\r\n----------------\r\n* Fix for journal write concern not correctly being passed under some circumstances.\r\n* Fixed correct behavior and re-auth for servers that get stepped down (Issue #779).\r\n\r\n1.2.1 2012-11-30\r\n----------------\r\n* Fix for double callback on insert with w:0 specified (Issue #783)\r\n* Small cleanup of urlparser.\r\n\r\n1.2.0 2012-11-27\r\n----------------\r\n* Honor connectTimeoutMS option for replicasets (Issue #750, https://github.com/aheckmann)\r\n* Fix ping strategy regression (Issue #738, https://github.com/aheckmann)\r\n* Small cleanup of code (Issue #753, https://github.com/sokra/node-mongodb-native)\r\n* Fixed index declaration using objects/arrays from other contexts (Issue #755, https://github.com/sokra/node-mongodb-native)\r\n* Intermittent (and rare) null callback exception when using ReplicaSets (Issue #752)\r\n* Force correct setting of read_secondary based on the read preference (Issue #741)\r\n* If using read preferences with secondaries queries will not fail if primary is down (Issue #744)\r\n* noOpen connection for Db.connect removed as not compatible with autodetection of Mongo type\r\n* Mongos connection with auth not working (Issue #737)\r\n* Use the connect method directly from the require. require('mongodb')(\"mongodb://localhost:27017/db\")\r\n* new MongoClient introduced as the point of connecting to MongoDB's instead of the Db\r\n  * open/close/db/connect methods implemented\r\n* Implemented common URL connection format using MongoClient.connect allowing for simialar interface across all drivers.\r\n* Fixed a bug with aggregation helper not properly accepting readPreference\r\n\r\n1.1.11 2012-10-10\r\n-----------------\r\n* Removed strict mode and introduced normal handling of safe at DB level.\r\n\r\n1.1.10 2012-10-08\r\n-----------------\r\n* fix Admin.serverStatus (Issue #723, https://github.com/Contra)\r\n* logging on connection open/close(Issue #721, https://github.com/asiletto)\r\n* more fixes for windows bson install (Issue #724)\r\n\r\n1.1.9 2012-10-05\r\n----------------\r\n* Updated bson to 0.1.5 to fix build problem on sunos/windows.\r\n\r\n1.1.8 2012-10-01\r\n----------------\r\n* Fixed db.eval to correctly handle system.js global javascript functions (Issue #709)\r\n* Cleanup of non-closing connections (Issue #706)\r\n* More cleanup of connections under replicaset (Issue #707, https://github.com/elbert3)\r\n* Set keepalive on as default, override if not needed\r\n* Cleanup of jsbon install to correctly build without install.js script (https://github.com/shtylman)\r\n* Added domain socket support new Server(\"/tmp/mongodb.sock\") style\r\n\r\n1.1.7 2012-09-10\r\n----------------\r\n* Protect against starting PingStrategy being called more than once (Issue #694, https://github.com/aheckmann)\r\n* Make PingStrategy interval configurable (was 1 second, relaxed to 5) (Issue #693, https://github.com/aheckmann)\r\n* Made PingStrategy api more consistant, callback to start/stop methods are optional (Issue #693, https://github.com/aheckmann)\r\n* Proper stopping of strategy on replicaset stop\r\n* Throw error when gridstore file is not found in read mode (Issue #702, https://github.com/jbrumwell)\r\n* Cursor stream resume now using nextTick to avoid duplicated records (Issue #696)\r\n\r\n1.1.6 2012-09-01\r\n----------------\r\n* Fix for readPreference NEAREST for replicasets (Issue #693, https://github.com/aheckmann)\r\n* Emit end correctly on stream cursor (Issue #692, https://github.com/Raynos)\r\n\r\n1.1.5 2012-08-29\r\n----------------\r\n* Fix for eval on replicaset Issue #684\r\n* Use helpful error msg when native parser not compiled (Issue #685, https://github.com/aheckmann)\r\n* Arbiter connect hotfix (Issue #681, https://github.com/fengmk2)\r\n* Upgraded bson parser to 0.1.2 using gyp, deprecated support for node 0.4.X\r\n* Added name parameter to createIndex/ensureIndex to be able to override index names larger than 128 bytes\r\n* Added exhaust option for find for feature completion (not recommended for normal use)\r\n* Added tailableRetryInterval to find for tailable cursors to allow to control getMore retry time interval\r\n* Fixes for read preferences when using MongoS to correctly handle no read preference set when iterating over a cursor (Issue #686)\r\n\r\n1.1.4 2012-08-12\r\n----------------\r\n* Added Mongos connection type with a fallback list for mongos proxies, supports ha (on by default) and will attempt to reconnect to failed proxies.\r\n* Documents can now have a toBSON method that lets the user control the serialization behavior for documents being saved.\r\n* Gridstore instance object now works as a readstream or writestream (thanks to code from Aaron heckmann (https://github.com/aheckmann/gridfs-stream)).\r\n* Fix gridfs readstream (Issue #607, https://github.com/tedeh).\r\n* Added disableDriverBSONSizeCheck property to Server.js for people who wish to push the inserts to the limit (Issue #609).\r\n* Fixed bug where collection.group keyf given as Code is processed as a regular object (Issue #608, https://github.com/rrusso2007).\r\n* Case mismatch between driver's ObjectID and mongo's ObjectId, allow both (Issue #618).\r\n* Cleanup map reduce (Issue #614, https://github.com/aheckmann).\r\n* Add proper error handling to gridfs (Issue #615, https://github.com/aheckmann).\r\n* Ensure cursor is using same connection for all operations to avoid potential jump of servers when using replicasets.\r\n* Date identification handled correctly in bson js parser when running in vm context.\r\n* Documentation updates\r\n* GridStore filename not set on read (Issue #621)\r\n* Optimizations on the C++ bson parser to fix a potential memory leak and avoid non-needed calls\r\n* Added support for awaitdata for tailable cursors (Issue #624)\r\n* Implementing read preference setting at collection and cursor level\r\n   * collection.find().setReadPreference(Server.SECONDARY_PREFERRED)\r\n   * db.collection(\"some\", {readPreference:Server.SECONDARY})\r\n* Replicaset now returns when the master is discovered on db.open and lets the rest of the connections happen asynchronous.\r\n  * ReplSet/ReplSetServers emits \"fullsetup\" when all servers have been connected to\r\n* Prevent callback from executing more than once in getMore function (Issue #631, https://github.com/shankar0306)\r\n* Corrupt bson messages now errors out to all callbacks and closes up connections correctly, Issue #634\r\n* Replica set member status update when primary changes bug (Issue #635, https://github.com/alinsilvian)\r\n* Fixed auth to work better when multiple connections are involved.\r\n* Default connection pool size increased to 5 connections.\r\n* Fixes for the ReadStream class to work properly with 0.8 of Node.js\r\n* Added explain function support to aggregation helper\r\n* Added socketTimeoutMS and connectTimeoutMS to socket options for repl_set.js and server.js\r\n* Fixed addUser to correctly handle changes in 2.2 for getLastError authentication required\r\n* Added index to gridstore chunks on file_id (Issue #649, https://github.com/jacobbubu)\r\n* Fixed Always emit db events (Issue #657)\r\n* Close event not correctly resets DB openCalled variable to allow reconnect\r\n* Added open event on connection established for replicaset, mongos and server\r\n* Much faster BSON C++ parser thanks to Lucasfilm Singapore.\r\n* Refactoring of replicaset connection logic to simplify the code.\r\n* Add `options.connectArbiter` to decide connect arbiters or not (Issue #675)\r\n* Minor optimization for findAndModify when not using j,w or fsync for safe\r\n\r\n1.0.2 2012-05-15\r\n----------------\r\n* Reconnect functionality for replicaset fix for mongodb 2.0.5\r\n\r\n1.0.1 2012-05-12\r\n----------------\r\n* Passing back getLastError object as 3rd parameter on findAndModify command.\r\n* Fixed a bunch of performance regressions in objectId and cursor.\r\n* Fixed issue #600 allowing for single document delete to be passed in remove command.\r\n\r\n1.0.0 2012-04-25\r\n----------------\r\n* Fixes to handling of failover on server error\r\n* Only emits error messages if there are error listeners to avoid uncaught events\r\n* Server.isConnected using the server state variable not the connection pool state\r\n\r\n0.9.9.8 2012-04-12\r\n------------------\r\n* _id=0 is being turned into an ObjectID (Issue #551)\r\n* fix for error in GridStore write method (Issue #559)\r\n* Fix for reading a GridStore from arbitrary, non-chunk aligned offsets, added test (Issue #563, https://github.com/subroutine)\r\n* Modified limitRequest to allow negative limits to pass through to Mongo, added test (Issue #561)\r\n* Corrupt GridFS files when chunkSize < fileSize, fixed concurrency issue (Issue #555)\r\n* Handle dead tailable cursors (Issue #568, https://github.com/aheckmann)\r\n* Connection pools handles closing themselves down and clearing the state\r\n* Check bson size of documents against maxBsonSize and throw client error instead of server error, (Issue #553)\r\n* Returning update status document at the end of the callback for updates, (Issue #569)\r\n* Refactor use of Arguments object to gain performance (Issue #574, https://github.com/AaronAsAChimp)\r\n\r\n0.9.9.7 2012-03-16\r\n------------------\r\n* Stats not returned from map reduce with inline results (Issue #542)\r\n* Re-enable testing of whether or not the callback is called in the multi-chunk seek, fix small GridStore bug (Issue #543, https://github.com/pgebheim)\r\n* Streaming large files from GridFS causes truncation (Issue #540)\r\n* Make callback type checks agnostic to V8 context boundaries (Issue #545)\r\n* Correctly throw error if an attempt is made to execute an insert/update/remove/createIndex/ensureIndex with safe enabled and no callback\r\n* Db.open throws if the application attemps to call open again without calling close first\r\n\r\n0.9.9.6 2012-03-12\r\n------------------\r\n* BSON parser is externalized in it's own repository, currently using git master\r\n* Fixes for Replicaset connectivity issue (Issue #537)\r\n* Fixed issues with node 0.4.X vs 0.6.X (Issue #534)\r\n* Removed SimpleEmitter and replaced with standard EventEmitter\r\n* GridStore.seek fails to change chunks and call callback when in read mode (Issue #532)\r\n\r\n0.9.9.5 2012-03-07\r\n------------------\r\n* Merged in replSetGetStatus helper to admin class (Issue #515, https://github.com/mojodna)\r\n* Merged in serverStatus helper to admin class (Issue #516, https://github.com/mojodna)\r\n* Fixed memory leak in C++ bson parser (Issue #526)\r\n* Fix empty MongoError \"message\" property (Issue #530, https://github.com/aheckmann)\r\n* Cannot save files with the same file name to GridFS (Issue #531)\r\n\r\n0.9.9.4 2012-02-26\r\n------------------\r\n* bugfix for findAndModify: Error: corrupt bson message < 5 bytes long (Issue #519)\r\n\r\n0.9.9.3 2012-02-23\r\n------------------\r\n* document: save callback arguments are both undefined, (Issue #518)\r\n* Native BSON parser install error with npm, (Issue #517)\r\n\r\n0.9.9.2 2012-02-17\r\n------------------\r\n* Improved detection of Buffers using Buffer.isBuffer instead of instanceof.\r\n* Added wrap error around db.dropDatabase to catch all errors (Issue #512)\r\n* Added aggregate helper to collection, only for MongoDB >= 2.1\r\n\r\n0.9.9.1 2012-02-15\r\n------------------\r\n* Better handling of safe when using some commands such as createIndex, ensureIndex, addUser, removeUser, createCollection.\r\n* Mapreduce now throws error if out parameter is not specified.\r\n\r\n0.9.9 2012-02-13\r\n----------------\r\n* Added createFromTime method on ObjectID to allow for queries against _id more easily using the timestamp.\r\n* Db.close(true) now makes connection unusable as it's been force closed by app.\r\n* Fixed mapReduce and group functions to correctly send slaveOk on queries.\r\n* Fixes for find method to correctly work with find(query, fields, callback) (Issue #506).\r\n* A fix for connection error handling when using the SSL on MongoDB.\r\n\r\n0.9.8-7 2012-02-06\r\n------------------\r\n* Simplified findOne to use the find command instead of the custom code (Issue #498).\r\n* BSON JS parser not also checks for _bsonType variable in case BSON object is in weird scope (Issue #495).\r\n\r\n0.9.8-6 2012-02-04\r\n------------------\r\n* Removed the check for replicaset change code as it will never work with node.js.\r\n\r\n0.9.8-5 2012-02-02\r\n------------------\r\n* Added geoNear command to Collection.\r\n* Added geoHaystackSearch command to Collection.\r\n* Added indexes command to collection to retrieve the indexes on a Collection.\r\n* Added stats command to collection to retrieve the statistics on a Collection.\r\n* Added listDatabases command to admin object to allow retrieval of all available dbs.\r\n* Changed createCreateIndexCommand to work better with options.\r\n* Fixed dereference method on Db class to correctly dereference Db reference objects.\r\n* Moved connect object onto Db class(Db.connect) as well as keeping backward compatibility.\r\n* Removed writeBuffer method from gridstore, write handles switching automatically now.\r\n* Changed readBuffer to read on Gridstore, Gridstore now only supports Binary Buffers no Strings anymore.\r\n* Moved Long class to bson directory.\r\n\r\n0.9.8-4 2012-01-28\r\n------------------\r\n* Added reIndex command to collection and db level.\r\n* Added support for $returnKey, $maxScan, $min, $max, $showDiskLoc, $comment to cursor and find/findOne methods.\r\n* Added dropDups and v option to createIndex and ensureIndex.\r\n* Added isCapped method to Collection.\r\n* Added indexExists method to Collection.\r\n* Added findAndRemove method to Collection.\r\n* Fixed bug for replicaset connection when no active servers in the set.\r\n* Fixed bug for replicaset connections when errors occur during connection.\r\n* Merged in patch for BSON Number handling from Lee Salzman, did some small fixes and added test coverage.\r\n\r\n0.9.8-3 2012-01-21\r\n------------------\r\n* Workaround for issue with Object.defineProperty (Issue #484)\r\n* ObjectID generation with date does not set rest of fields to zero (Issue #482)\r\n\r\n0.9.8-2 2012-01-20\r\n------------------\r\n* Fixed a missing this in the ReplSetServers constructor.\r\n\r\n0.9.8-1 2012-01-17\r\n------------------\r\n* FindAndModify bug fix for duplicate errors (Issue #481)\r\n\r\n0.9.8 2012-01-17\r\n----------------\r\n* Replicasets now correctly adjusts to live changes in the replicaset configuration on the servers, reconnecting correctly.\r\n  * Set the interval for checking for changes setting the replicaSetCheckInterval property when creating the ReplSetServers instance or on db.serverConfig.replicaSetCheckInterval. (default 1000 miliseconds)\r\n* Fixes formattedOrderClause in collection.js to accept a plain hash as a parameter (Issue #469) https://github.com/tedeh\r\n* Removed duplicate code for formattedOrderClause and moved to utils module\r\n* Pass in poolSize for ReplSetServers to set default poolSize for new replicaset members\r\n* Bug fix for BSON JS deserializer. Isolating the eval functions in separate functions to avoid V8 deoptimizations\r\n* Correct handling of illegal BSON messages during deserialization\r\n* Fixed Infinite loop when reading GridFs file with no chunks (Issue #471)\r\n* Correctly update existing user password when using addUser (Issue #470)\r\n\r\n0.9.7.3-5 2012-01-04\r\n--------------------\r\n* Fix for RegExp serialization for 0.4.X where typeof /regexp/ == 'function' vs in 0.6.X typeof /regexp/ == 'object'\r\n* Don't allow keepAlive and setNoDelay for 0.4.X as it throws errors\r\n\r\n0.9.7.3-4 2012-01-04\r\n--------------------\r\n* Chased down potential memory leak on findAndModify, Issue #467 (node.js removeAllListeners leaves the key in the _events object, node.js bug on eventlistener?, leads to extremely slow memory leak on listener object)\r\n* Sanity checks for GridFS performance with benchmark added\r\n\r\n0.9.7.3-3 2012-01-04\r\n--------------------\r\n* Bug fixes for performance issues going form 0.9.6.X to 0.9.7.X on linux\r\n* BSON bug fixes for performance\r\n\r\n0.9.7.3-2 2012-01-02\r\n--------------------\r\n* Fixed up documentation to reflect the preferred way of instantiating bson types\r\n* GC bug fix for JS bson parser to avoid stop-and-go GC collection\r\n\r\n0.9.7.3-1 2012-01-02\r\n--------------------\r\n* Fix to make db.bson_serializer and db.bson_deserializer work as it did previously\r\n\r\n0.9.7.3 2011-12-30\r\n--------------------\r\n* Moved BSON_BINARY_SUBTYPE_DEFAULT from BSON object to Binary object and removed the BSON_BINARY_ prefixes\r\n* Removed Native BSON types, C++ parser uses JS types (faster due to cost of crossing the JS-C++ barrier for each call)\r\n* Added build fix for 0.4.X branch of Node.js where GetOwnPropertyNames is not defined in v8\r\n* Fix for wire protocol parser for corner situation where the message is larger than the maximum socket buffer in node.js (Issue #464, #461, #447)\r\n* Connection pool status set to connected on poolReady, isConnected returns false on anything but connected status (Issue #455)\r\n\r\n0.9.7.2-5 2011-12-22\r\n--------------------\r\n* Brand spanking new Streaming Cursor support Issue #458 (https://github.com/christkv/node-mongodb-native/pull/458) thanks to Mr Aaron Heckmann\r\n\r\n0.9.7.2-4 2011-12-21\r\n--------------------\r\n* Refactoring of callback code to work around performance regression on linux\r\n* Fixed group function to correctly use the command mode as default\r\n\r\n0.9.7.2-3 2011-12-18\r\n--------------------\r\n* Fixed error handling for findAndModify while still working for mongodb 1.8.6 (Issue #450).\r\n* Allow for force send query to primary, pass option (read:'primary') on find command.\r\n    * ``find({a:1}, {read:'primary'}).toArray(function(err, items) {});``\r\n\r\n0.9.7.2-2 2011-12-16\r\n--------------------\r\n* Fixes infinite streamRecords QueryFailure fix when using Mongos (Issue #442)\r\n\r\n0.9.7.2-1 2011-12-16\r\n--------------------\r\n* ~10% perf improvement for ObjectId#toHexString (Issue #448, https://github.com/aheckmann)\r\n* Only using process.nextTick on errors emitted on callbacks not on all parsing, reduces number of ticks in the driver\r\n* Changed parsing off bson messages to use process.nextTick to do bson parsing in batches if the message is over 10K as to yield more time to the event look increasing concurrency on big mongoreply messages with multiple documents\r\n\r\n0.9.7.2 2011-12-15\r\n------------------\r\n* Added SSL support for future version of mongodb (VERY VERY EXPERIMENTAL)\r\n    * pass in the ssl:true option to the server or replicaset server config to enable\r\n    * a bug either in mongodb or node.js does not allow for more than 1 connection pr db instance (poolSize:1).\r\n* Added getTimestamp() method to objectID that returns a date object\r\n* Added finalize function to collection.group\r\n    * function group (keys, condition, initial, reduce, finalize, command, callback)\r\n* Reaper no longer using setTimeout to handle reaping. Triggering is done in the general flow leading to predictable behavior.\r\n    * reaperInterval, set interval for reaper (default 10000 miliseconds)\r\n    * reaperTimeout, set timeout for calls (default 30000 miliseconds)\r\n    * reaper, enable/disable reaper (default false)\r\n* Work around for issues with findAndModify during high concurrency load, insure that the behavior is the same across the 1.8.X branch and 2.X branch of MongoDb\r\n* Reworked multiple db's sharing same connection pool to behave correctly on error, timeout and close\r\n* EnsureIndex command can be executed without a callback (Issue #438)\r\n* Eval function no accepts options including nolock (Issue #432)\r\n    * eval(code, parameters, options, callback) (where options = {nolock:true})\r\n\r\n0.9.7.1-4 2011-11-27\r\n--------------------\r\n* Replaced install.sh with install.js to install correctly on all supported os's\r\n\r\n0.9.7.1-3 2011-11-27\r\n--------------------\r\n* Fixes incorrect scope for ensureIndex error wrapping (Issue #419) https://github.com/ritch\r\n\r\n0.9.7.1-2 2011-11-27\r\n--------------------\r\n* Set statistical selection strategy as default for secondary choice.\r\n\r\n0.9.7.1-1 2011-11-27\r\n--------------------\r\n* Better handling of single server reconnect (fixes some bugs)\r\n* Better test coverage of single server failure\r\n* Correct handling of callbacks on replicaset servers when firewall dropping packets, correct reconnect\r\n\r\n0.9.7.1 2011-11-24\r\n------------------\r\n* Better handling of dead server for single server instances\r\n* FindOne and find treats selector == null as {}, Issue #403\r\n* Possible to pass in a strategy for the replicaset to pick secondary reader node\r\n    * parameter strategy\r\n        * ping (default), pings the servers and picks the one with the lowest ping time\r\n        * statistical, measures each request and pick the one with the lowest mean and std deviation\r\n* Set replicaset read preference replicaset.setReadPreference()\r\n    * Server.READ_PRIMARY (use primary server for reads)\r\n    * Server.READ_SECONDARY (from a secondary server (uses the strategy set))\r\n    * tags, {object of tags}\r\n* Added replay of commands issued to a closed connection when the connection is re-established\r\n* Fix isConnected and close on unopened connections. Issue #409, fix by (https://github.com/sethml)\r\n* Moved reaper to db.open instead of constructor (Issue #406)\r\n* Allows passing through of socket connection settings to Server or ReplSetServer under the option socketOptions\r\n    * timeout = set seconds before connection times out (default 0)\r\n    * noDelay = Disables the Nagle algorithm (default true)\r\n    * keepAlive = Set if keepAlive is used (default 0, which means no keepAlive, set higher than 0 for keepAlive)\r\n    * encoding = ['ascii', 'utf8', or 'base64'] (default null)\r\n* Fixes for handling of errors during shutdown off a socket connection\r\n* Correctly applies socket options including timeout\r\n* Cleanup of test management code to close connections correctly\r\n* Handle parser errors better, closing down the connection and emitting an error\r\n* Correctly emit errors from server.js only wrapping errors that are strings\r\n\r\n0.9.7 2011-11-10\r\n----------------\r\n* Added priority setting to replicaset manager\r\n* Added correct handling of passive servers in replicaset\r\n* Reworked socket code for simpler clearer handling\r\n* Correct handling of connections in test helpers\r\n* Added control of retries on failure\r\n    * control with parameters retryMiliSeconds and numberOfRetries when creating a db instance\r\n* Added reaper that will timeout and cleanup queries that never return\r\n    * control with parameters reaperInterval and reaperTimeout when creating a db instance\r\n* Refactored test helper classes for replicaset tests\r\n* Allows raw (no bson parser mode for insert, update, remove, find and findOne)\r\n    * control raw mode passing in option raw:true on the commands\r\n    * will return buffers with the binary bson objects\r\n* Fixed memory leak in cursor.toArray\r\n* Fixed bug in command creation for mongodb server with wrong scope of call\r\n* Added db(dbName) method to db.js to allow for reuse of connections against other databases\r\n* Serialization of functions in an object is off by default, override with parameter\r\n    * serializeFunctions [true/false] on db level, collection level or individual insert/update/findAndModify\r\n* Added Long.fromString to c++ class and fixed minor bug in the code (Test case for $gt operator on 64-bit integers, Issue #394)\r\n* FindOne and find now share same code execution and will work in the same manner, Issue #399\r\n* Fix for tailable cursors, Issue #384\r\n* Fix for Cursor rewind broken, Issue #389\r\n* Allow Gridstore.exist to query using regexp, Issue #387, fix by (https://github.com/kaij)\r\n* Updated documentation on https://github.com/christkv/node-mongodb-native\r\n* Fixed toJSON methods across all objects for BSON, Binary return Base64 Encoded data\r\n\r\n0.9.6-22 2011-10-15\r\n-------------------\r\n* Fixed bug in js bson parser that could cause wrong object size on serialization, Issue #370\r\n* Fixed bug in findAndModify that did not throw error on replicaset timeout, Issue #373\r\n\r\n0.9.6-21 2011-10-05\r\n-------------------\r\n* Reworked reconnect code to work correctly\r\n* Handling errors in different parts of the code to ensure that it does not lock the connection\r\n* Consistent error handling for Object.createFromHexString for JS and C++\r\n\r\n0.9.6-20 2011-10-04\r\n-------------------\r\n* Reworked bson.js parser to get rid off Array.shift() due to it allocating new memory for each call. Speedup varies between 5-15% depending on doc\r\n* Reworked bson.cc to throw error when trying to serialize js bson types\r\n* Added MinKey, MaxKey and Double support for JS and C++ parser\r\n* Reworked socket handling code to emit errors on unparsable messages\r\n* Added logger option for Db class, lets you pass in a function in the shape\r\n    {\r\n        log : function(message, object) {},\r\n        error : function(errorMessage, errorObject) {},\r\n        debug : function(debugMessage, object) {},\r\n    }\r\n\r\n  Usage is new Db(new Server(..), {logger: loggerInstance})\r\n\r\n0.9.6-19 2011-09-29\r\n-------------------\r\n* Fixing compatibility issues between C++ bson parser and js parser\r\n* Added Symbol support to C++ parser\r\n* Fixed socket handling bug for seldom misaligned message from mongodb\r\n* Correctly handles serialization of functions using the C++ bson parser\r\n\r\n0.9.6-18 2011-09-22\r\n-------------------\r\n* Fixed bug in waitForConnection that would lead to 100% cpu usage, Issue #352\r\n\r\n0.9.6-17 2011-09-21\r\n-------------------\r\n* Fixed broken exception test causing bamboo to hang\r\n* Handling correctly command+lastError when both return results as in findAndModify, Issue #351\r\n\r\n0.9.6-16 2011-09-14\r\n-------------------\r\n* Fixing a bunch of issues with compatibility with MongoDB 2.0.X branch. Some fairly big changes in behavior from 1.8.X to 2.0.X on the server.\r\n* Error Connection MongoDB V2.0.0 with Auth=true, Issue #348\r\n\r\n0.9.6-15 2011-09-09\r\n-------------------\r\n* Fixed issue where pools would not be correctly cleaned up after an error, Issue #345\r\n* Fixed authentication issue with secondary servers in Replicaset, Issue #334\r\n* Duplicate replica-set servers when omitting port, Issue #341\r\n* Fixing findAndModify to correctly work with Replicasets ensuring proper error handling, Issue #336\r\n* Merged in code from (https://github.com/aheckmann) that checks for global variable leaks\r\n\r\n0.9.6-14 2011-09-05\r\n-------------------\r\n* Minor fixes for error handling in cursor streaming (https://github.com/sethml), Issue #332\r\n* Minor doc fixes\r\n* Some more cursor sort tests added, Issue #333\r\n* Fixes to work with 0.5.X branch\r\n* Fix Db not removing reconnect listener from serverConfig, (https://github.com/sbrekken), Issue #337\r\n* Removed node_events.h includes (https://github.com/jannehietamaki), Issue #339\r\n* Implement correct safe/strict mode for findAndModify.\r\n\r\n0.9.6-13 2011-08-24\r\n-------------------\r\n* Db names correctly error checked for illegal characters\r\n\r\n0.9.6-12 2011-08-24\r\n-------------------\r\n* Nasty bug in GridFS if you changed the default chunk size\r\n* Fixed error handling bug in findOne\r\n\r\n0.9.6-11 2011-08-23\r\n-------------------\r\n* Timeout option not correctly making it to the cursor, Issue #320, Fix from (https://github.com/year2013)\r\n* Fixes for memory leaks when using buffers and C++ parser\r\n* Fixes to make tests pass on 0.5.X\r\n* Cleanup of bson.js to remove duplicated code paths\r\n* Fix for errors occurring in ensureIndex, Issue #326\r\n* Removing require.paths to make tests work with the 0.5.X branch\r\n\r\n0.9.6-10 2011-08-11\r\n-------------------\r\n* Specific type Double for capped collections (https://github.com/mbostock), Issue #312\r\n* Decorating Errors with all all object info from Mongo (https://github.com/laurie71), Issue #308\r\n* Implementing fixes for mongodb 1.9.1 and higher to make tests pass\r\n* Admin validateCollection now takes an options argument for you to pass in full option\r\n* Implemented keepGoing parameter for mongodb 1.9.1 or higher, Issue #310\r\n* Added test for read_secondary count issue, merged in fix from (https://github.com/year2013), Issue #317\r\n\r\n0.9.6-9\r\n-------\r\n* Bug fix for bson parsing the key '':'' correctly without crashing\r\n\r\n0.9.6-8\r\n-------\r\n* Changed to using node.js crypto library MD5 digest\r\n* Connect method support documented mongodb: syntax by (https://github.com/sethml)\r\n* Support Symbol type for BSON, serializes to it's own type Symbol, Issue #302, #288\r\n* Code object without scope serializing to correct BSON type\r\n* Lot's of fixes to avoid double callbacks (https://github.com/aheckmann) Issue #304\r\n* Long deserializes as Number for values in the range -2^53 to 2^53, Issue #305 (https://github.com/sethml)\r\n* Fixed C++ parser to reflect JS parser handling of long deserialization\r\n* Bson small optimizations\r\n\r\n0.9.6-7 2011-07-13\r\n------------------\r\n* JS Bson deserialization bug #287\r\n\r\n0.9.6-6 2011-07-12\r\n------------------\r\n* FindAndModify not returning error message as other methods Issue #277\r\n* Added test coverage for $push, $pushAll and $inc atomic operations\r\n* Correct Error handling for non 12/24 bit ids on Pure JS ObjectID class Issue #276\r\n* Fixed terrible deserialization bug in js bson code #285\r\n* Fix by andrewjstone to avoid throwing errors when this.primary not defined\r\n\r\n0.9.6-5 2011-07-06\r\n------------------\r\n* Rewritten BSON js parser now faster than the C parser on my core2duo laptop\r\n* Added option full to indexInformation to get all index info Issue #265\r\n* Passing in ObjectID for new Gridstore works correctly Issue #272\r\n\r\n0.9.6-4 2011-07-01\r\n------------------\r\n* Added test and bug fix for insert/update/remove without callback supplied\r\n\r\n0.9.6-3 2011-07-01\r\n------------------\r\n* Added simple grid class called Grid with put, get, delete methods\r\n* Fixed writeBuffer/readBuffer methods on GridStore so they work correctly\r\n* Automatic handling of buffers when using write method on GridStore\r\n* GridStore now accepts a ObjectID instead of file name for write and read methods\r\n* GridStore.list accepts id option to return of file ids instead of filenames\r\n* GridStore close method returns document for the file allowing user to reference _id field\r\n\r\n0.9.6-2 2011-06-30\r\n------------------\r\n* Fixes for reconnect logic for server object (replays auth correctly)\r\n* More testcases for auth\r\n* Fixes in error handling for replicaset\r\n* Fixed bug with safe parameter that would fail to execute safe when passing w or wtimeout\r\n* Fixed slaveOk bug for findOne method\r\n* Implemented auth support for replicaset and test cases\r\n* Fixed error when not passing in rs_name\r\n\r\n0.9.6-1 2011-06-25\r\n------------------\r\n* Fixes for test to run properly using c++ bson parser\r\n* Fixes for dbref in native parser (correctly handles ref without db component)\r\n* Connection fixes for replicasets to avoid runtime conditions in cygwin (https://github.com/vincentcr)\r\n* Fixes for timestamp in js bson parser (distinct timestamp type now)\r\n\r\n0.9.6 2011-06-21\r\n----------------\r\n* Worked around npm version handling bug\r\n* Race condition fix for cygwin (https://github.com/vincentcr)\r\n\r\n0.9.5-1 2011-06-21\r\n------------------\r\n* Extracted Timestamp as separate class for bson js parser to avoid instanceof problems\r\n* Fixed driver strict mode issue\r\n\r\n0.9.5 2011-06-20\r\n----------------\r\n* Replicaset support (failover and reading from secondary servers)\r\n* Removed ServerPair and ServerCluster\r\n* Added connection pool functionality\r\n* Fixed serious bug in C++ bson parser where bytes > 127 would generate 2 byte sequences\r\n* Allows for forcing the server to assign ObjectID's using the option {forceServerObjectId: true}\r\n\r\n0.6.8\r\n-----\r\n* Removed multiple message concept from bson\r\n* Changed db.open(db) to be db.open(err, db)\r\n\r\n0.1 2010-01-30\r\n--------------\r\n* Initial release support of driver using native node.js interface\r\n* Supports gridfs specification\r\n* Supports admin functionality\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/node_modules/mongodb/HISTORY.md	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/node_modules/mongodb/HISTORY.md	(date 499162500000)
@@ -1,93 +1,22 @@
-# Changelog
+# Change Log
 
 All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.
 
-## [3.6.0](https://github.com/mongodb/node-mongodb-native/compare/v3.5.7...v3.6.0) (2020-07-30)
-
-
-### Features
-
-* add commitQuorum option to createIndexes command ([38bcaf7](https://github.com/mongodb/node-mongodb-native/commit/38bcaf7c80f63885d4c0cf1f7389819efb0664e6))
-* introduce an interruptable async interval timer ([1e4e837](https://github.com/mongodb/node-mongodb-native/commit/1e4e8373308a6d99c4d7eda4ae395f8293de98eb))
-* support streaming ismaster responses ([f6629d9](https://github.com/mongodb/node-mongodb-native/commit/f6629d9946d6d02012a6f1f7848306bc71fb3254))
-* **reIndex:** deprecate and make standalone-only command ([3a53b3d](https://github.com/mongodb/node-mongodb-native/commit/3a53b3deb7b375f6ce1e1a7435706aa4df7b0a0c))
-* add helper to run async collection in series ([f762532](https://github.com/mongodb/node-mongodb-native/commit/f76253242a9b9c3d1fc5be215e8b677af2138772))
-* allow hinting the delete command ([84cf955](https://github.com/mongodb/node-mongodb-native/commit/84cf95519d55e478b6457ba2347daf448388caf2))
-* consider staleness and topologyVersion in error handling ([018e6ed](https://github.com/mongodb/node-mongodb-native/commit/018e6edc923f1bb7aa13bf376edd71172bfc5039))
-* introduce `MongoNetworkTimeoutError` ([c1e4477](https://github.com/mongodb/node-mongodb-native/commit/c1e44777f9ede629290bb776c420018a4acdc487))
-* support checking if network error happened before handshake ([5411786](https://github.com/mongodb/node-mongodb-native/commit/541178690d558a4484d43d2a090d0b4d5416c031))
-* support hedged reads ([37cd5ee](https://github.com/mongodb/node-mongodb-native/commit/37cd5eed9f872429f3d0f683ed92cc75231d4685))
-* support speculative authentication in scram-sha and x509 ([6231164](https://github.com/mongodb/node-mongodb-native/commit/62311645c5e9a44678e4a997b6a5944b64492bd8))
-* **geoHaystackSearch:** deprecate geoHaystackSearch ([3f6786b](https://github.com/mongodb/node-mongodb-native/commit/3f6786b4c00d0650eb9c8009507e9c54b2b11bbc))
-* **sdam:** ignore stale topology updates ([f87d243](https://github.com/mongodb/node-mongodb-native/commit/f87d243587c1712cd95624d036ddb9a643a15a84))
+<a name="3.6.1"></a>
+## [3.6.1](https://github.com/mongodb/node-mongodb-native/compare/v3.6.0...v3.6.1) (2020-09-02)
 
 
 ### Bug Fixes
 
-* `resolveAuthMechanism` should not mutate credentials ([be19a21](https://github.com/mongodb/node-mongodb-native/commit/be19a2160d33d8e7473800fbcf6af1cd7f6eaeef))
-* always clear cancelled wait queue members during processing ([3087d48](https://github.com/mongodb/node-mongodb-native/commit/3087d48c5de17dcd77d48b35af591a8f6780d145))
-* always include `writeErrors` on a `BulkWriteError` instance ([40db47f](https://github.com/mongodb/node-mongodb-native/commit/40db47f5aac1e93a11e8568327e93c4c542e11da))
-* assert update/replace atomic requirements in bulk operations ([31ae3c9](https://github.com/mongodb/node-mongodb-native/commit/31ae3c9978d6ea4f33c3ea4ccac9cd41841e31de))
-* clarify handle wrong set name single topology ([21424eb](https://github.com/mongodb/node-mongodb-native/commit/21424ebb961db339be8fa74babaaeb3ada8e22c8))
-* createCollection only uses listCollections in strict mode ([a8ffec4](https://github.com/mongodb/node-mongodb-native/commit/a8ffec4c0b4e2ef0ce4c3bcdadc0adeccd0a3544))
-* db.command to not inherit options from parent ([c394284](https://github.com/mongodb/node-mongodb-native/commit/c39428421c94b4a1c5f41340e5b1a82724af95bd))
-* don't create multiple rtt pingers if one already exists ([56723aa](https://github.com/mongodb/node-mongodb-native/commit/56723aa1c980894ededd97531ff023a603cf4271))
-* don't immediately schedule monitoring after streaming failure ([188c23e](https://github.com/mongodb/node-mongodb-native/commit/188c23e0bb173a032df6bea4c7d2a916b808d9ad))
-* don't reapply socket timeout when socket has `moreToCome` ([ca0f2b9](https://github.com/mongodb/node-mongodb-native/commit/ca0f2b9d3fc268187d112e3afbe7bc556273e100))
-* don't try to calculate sMax if there are no viable servers ([4cb9b64](https://github.com/mongodb/node-mongodb-native/commit/4cb9b64bc3ff9aed8f26091cfe52acb152146898))
-* ensure implicit sessions are ended consistently ([8c861f3](https://github.com/mongodb/node-mongodb-native/commit/8c861f3e6c743a65ee95c8036ee0c1b1bc8c427a))
-* filter servers before applying reducers ([6f7d9bf](https://github.com/mongodb/node-mongodb-native/commit/6f7d9bf7f03108af3d190965a8b536ec2fb68a0b))
-* hint should raise error on unacknowledged writes ([54aa19e](https://github.com/mongodb/node-mongodb-native/commit/54aa19ea10a18ee6fce93f7c7eb6562c9f4042a5))
-* honor journal=true in connection string ([#2358](https://github.com/mongodb/node-mongodb-native/issues/2358)) ([4df4b7c](https://github.com/mongodb/node-mongodb-native/commit/4df4b7c3133925432954ce249c8bf8ae34674cb9))
-* IPv6 is not supported when using dns service discovery ([19ec62f](https://github.com/mongodb/node-mongodb-native/commit/19ec62fad5912b5e1f615278a4c2fba153da5030))
-* linting issue ([babf845](https://github.com/mongodb/node-mongodb-native/commit/babf84517675240c5ca39631c771e04ba9e248d7))
-* MONGODB-AWS temporary credentials are added to authContext ([769a754](https://github.com/mongodb/node-mongodb-native/commit/769a75491ede69a6af8da8f2d6572c6c85e14a62))
-* ReadPreference maxStalenessSeconds from options ([dfe7afa](https://github.com/mongodb/node-mongodb-native/commit/dfe7afaf646b2cde1751e728b52fa40d672beb55))
-* reduce default keepalive time to align with Azure defaults ([72d8969](https://github.com/mongodb/node-mongodb-native/commit/72d896983ed70fd0f96dea3a37ff05a5d91a93ba))
-* remove destructuring assignments for legacy node support ([d728a13](https://github.com/mongodb/node-mongodb-native/commit/d728a1330a37e847b69937b42e179c58b47038cb))
-* silently ignore session with unacknowledged write ([a053f4e](https://github.com/mongodb/node-mongodb-native/commit/a053f4ea3f5ad1c8c8a581c449cf03dc252aeb06))
-* **ChangeStream:** handle null changes ([14179a2](https://github.com/mongodb/node-mongodb-native/commit/14179a270ce4bfa62884ee53d46f4e35d28b6100))
-* **ChangeStream:** make CursorNotFound error resumable ([9f0b7ab](https://github.com/mongodb/node-mongodb-native/commit/9f0b7ab65a5d443f411a61fa1a3dd6cfe42b8dce))
-* **ChangeStream:** should resume from errors when iterating ([497952c](https://github.com/mongodb/node-mongodb-native/commit/497952cd577dc692dc2e0273028a74c818d31174))
-* **ChangeStream:** whitelist resumable errors ([#2337](https://github.com/mongodb/node-mongodb-native/issues/2337)) ([a9d3965](https://github.com/mongodb/node-mongodb-native/commit/a9d39651e5a3d5e565a85d1eb503f56f07c4a1d3)), closes [#17](https://github.com/mongodb/node-mongodb-native/issues/17) [#18](https://github.com/mongodb/node-mongodb-native/issues/18)
-* **create_indexes:** add missing `bucketSize` option to list of valid options ([66c76c3](https://github.com/mongodb/node-mongodb-native/commit/66c76c32f900499e147656e07b2df7bc5e0bb1b5))
-* **GridFS:** emit error on bad options  ([c71a4df](https://github.com/mongodb/node-mongodb-native/commit/c71a4dfdf1c4904321a2b50967b3379b13d774fb))
-* remove check for NonResumableChangeStreamError label ([f3ac635](https://github.com/mongodb/node-mongodb-native/commit/f3ac635663717dd9eb00bf8d3f938a56c98bcafb))
-* throw an error if `allowDiskUse` is used on MongoDB < 3.2 ([f95f697](https://github.com/mongodb/node-mongodb-native/commit/f95f697dde5ba1ae4c6a698ad29266dfd787a121))
-* typo with setting error labels on error object ([89638bf](https://github.com/mongodb/node-mongodb-native/commit/89638bf925482bb54c3dd956ffd6f2830d088c6a))
-* unordered bulk write should attempt to execute all batches ([d00a644](https://github.com/mongodb/node-mongodb-native/commit/d00a644e129ad9570a5727b7e259261204f259ae))
-* use async interruptable interval for server monitoring ([068ae83](https://github.com/mongodb/node-mongodb-native/commit/068ae83291fc30f76b23ea1120e77ce71053e29d))
-* writes within transactions are not retryable ([c13ec5c](https://github.com/mongodb/node-mongodb-native/commit/c13ec5c66623af164b688c79747eab8fe89b91d6))
-
-## [3.6.0-beta.0](https://github.com/mongodb/node-mongodb-native/compare/v3.5.5...v3.6.0-beta.0) (2020-04-14)
+* add host/port to cmap connection ([06a2444](https://github.com/mongodb/node-mongodb-native/commit/06a2444))
+* update full list of index options ([0af3191](https://github.com/mongodb/node-mongodb-native/commit/0af3191))
 
 
 ### Features
 
-* add MONGODB-AWS as a supported auth mechanism ([7f3cfba](https://github.com/mongodb/node-mongodb-native/commit/7f3cfbac15f537aa2ca9da145063f10c61390406))
-* bump wire protocol version for 4.4 ([6d3f313](https://github.com/mongodb/node-mongodb-native/commit/6d3f313a9defd12489b621896439b3f9ec8cb1ae))
-* deprecate `oplogReplay` for find commands ([24155e7](https://github.com/mongodb/node-mongodb-native/commit/24155e7905422460afc7e6abb120c596f40712c1))
-* directConnection adds unify behavior for replica set discovery ([c5d60fc](https://github.com/mongodb/node-mongodb-native/commit/c5d60fc4619227697ef2102437fe5c8b111909d2))
-* expand use of error labels for retryable writes ([c775a4a](https://github.com/mongodb/node-mongodb-native/commit/c775a4a1c53b8476eff6c9759b5647c9cbfa4e04))
-* support `allowDiskUse` for find commands ([dbc0b37](https://github.com/mongodb/node-mongodb-native/commit/dbc0b3722516a128c253bf85366a3432756ff92a))
-* support creating collections and indexes in transactions ([17e4c88](https://github.com/mongodb/node-mongodb-native/commit/17e4c88575b734d2d8ff94ca7f68b731a0bad326))
-* support passing a hint to findOneAndReplace/findOneAndUpdate ([faee15b](https://github.com/mongodb/node-mongodb-native/commit/faee15b686b895b84fd0b52c1e69e0caec769732))
-* support shorter SCRAM conversations ([6b9ff05](https://github.com/mongodb/node-mongodb-native/commit/6b9ff0561d14818bf07f4946ade04fc54683d0b9))
-* use error labels for retryable writes in legacy topologies ([fefc165](https://github.com/mongodb/node-mongodb-native/commit/fefc1651a885ec28758271c9e3c36104b05bdb75))
+* **db:** deprecate createCollection strict mode ([4cc6bcc](https://github.com/mongodb/node-mongodb-native/commit/4cc6bcc))
 
 
-### Bug Fixes
-
-* **ChangeStream:** whitelist change stream resumable errors ([8a9c108](https://github.com/mongodb/node-mongodb-native/commit/8a9c1084430de9d6253ca9c61c9258c85835bb94)), closes [#17](https://github.com/mongodb/node-mongodb-native/issues/17) [#18](https://github.com/mongodb/node-mongodb-native/issues/18)
-* always return empty array for selection on unknown topology ([af57b57](https://github.com/mongodb/node-mongodb-native/commit/af57b578dd603faa7b66983232de2bc7e417dae1))
-* correctly use template string for connection string error message ([814e278](https://github.com/mongodb/node-mongodb-native/commit/814e27869d90a1dfa01118bb96ff1273e0cef323))
-* don't depend on private node api for `Timeout` wrapper ([e6dc1f4](https://github.com/mongodb/node-mongodb-native/commit/e6dc1f48d62b68ba56b93359d7aa755c08985867))
-* **sdam:** use ObjectId comparison to track maxElectionId ([db991d6](https://github.com/mongodb/node-mongodb-native/commit/db991d6916306d1fe08508d4c3e8f7a37d7fd21f))
-* only consider MongoError subclasses for retryability ([265fe40](https://github.com/mongodb/node-mongodb-native/commit/265fe40cf29992764d1ab030a1ee4dca97cd7c7c))
-* pass options into `commandSupportsReadConcern` ([e855c83](https://github.com/mongodb/node-mongodb-native/commit/e855c83d8b73f4ce57a11193a1e52461ab2cd4db))
-* store name of collection for more informative error messages ([979d41e](https://github.com/mongodb/node-mongodb-native/commit/979d41e14f5acf69bac094b3863591ee8e01fd9c))
-* support write concern provided as string in `fromOptions` ([637f428](https://github.com/mongodb/node-mongodb-native/commit/637f4288c1edb799267ccbce6d25a49304f6149c))
-* use properly camel cased form of `mapReduce` for command ([c1ed2c1](https://github.com/mongodb/node-mongodb-native/commit/c1ed2c1ce4c6f2d40cd1c7b84ad672a90a09c83b))
 
 <a name="3.6.0-beta.0"></a>
 # [3.6.0-beta.0](https://github.com/mongodb/node-mongodb-native/compare/v3.5.5...v3.6.0-beta.0) (2020-04-14)
Index: node_modules/mongoose/node_modules/mongodb/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"_from\": \"mongodb@3.6.0\",\r\n  \"_id\": \"mongodb@3.6.0\",\r\n  \"_inBundle\": false,\r\n  \"_integrity\": \"sha512-/XWWub1mHZVoqEsUppE0GV7u9kanLvHxho6EvBxQbShXTKYF9trhZC2NzbulRGeG7xMJHD8IOWRcdKx5LPjAjQ==\",\r\n  \"_location\": \"/mongoose/mongodb\",\r\n  \"_phantomChildren\": {},\r\n  \"_requested\": {\r\n    \"type\": \"version\",\r\n    \"registry\": true,\r\n    \"raw\": \"mongodb@3.6.0\",\r\n    \"name\": \"mongodb\",\r\n    \"escapedName\": \"mongodb\",\r\n    \"rawSpec\": \"3.6.0\",\r\n    \"saveSpec\": null,\r\n    \"fetchSpec\": \"3.6.0\"\r\n  },\r\n  \"_requiredBy\": [\r\n    \"/mongoose\"\r\n  ],\r\n  \"_resolved\": \"https://registry.npmjs.org/mongodb/-/mongodb-3.6.0.tgz\",\r\n  \"_shasum\": \"babd7172ec717e2ed3f85e079b3f1aa29dce4724\",\r\n  \"_spec\": \"mongodb@3.6.0\",\r\n  \"_where\": \"F:\\\\Programming\\\\Node Js Projects\\\\Quince\\\\node_modules\\\\mongoose\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/mongodb/node-mongodb-native/issues\"\r\n  },\r\n  \"bundleDependencies\": false,\r\n  \"dependencies\": {\r\n    \"bl\": \"^2.2.0\",\r\n    \"bson\": \"^1.1.4\",\r\n    \"denque\": \"^1.4.1\",\r\n    \"require_optional\": \"^1.0.1\",\r\n    \"safe-buffer\": \"^5.1.2\",\r\n    \"saslprep\": \"^1.0.0\"\r\n  },\r\n  \"deprecated\": false,\r\n  \"description\": \"The official MongoDB driver for Node.js\",\r\n  \"devDependencies\": {\r\n    \"chai\": \"^4.1.1\",\r\n    \"chai-subset\": \"^1.6.0\",\r\n    \"chalk\": \"^2.4.2\",\r\n    \"co\": \"4.6.0\",\r\n    \"coveralls\": \"^2.11.6\",\r\n    \"eslint\": \"^4.5.0\",\r\n    \"eslint-plugin-prettier\": \"^2.2.0\",\r\n    \"istanbul\": \"^0.4.5\",\r\n    \"jsdoc\": \"3.5.5\",\r\n    \"lodash.camelcase\": \"^4.3.0\",\r\n    \"mocha\": \"5.2.0\",\r\n    \"mocha-sinon\": \"^2.1.0\",\r\n    \"mongodb-extjson\": \"^2.1.1\",\r\n    \"mongodb-mock-server\": \"^1.0.1\",\r\n    \"prettier\": \"^1.19.1\",\r\n    \"semver\": \"^5.5.0\",\r\n    \"sinon\": \"^4.3.0\",\r\n    \"sinon-chai\": \"^3.2.0\",\r\n    \"snappy\": \"^6.3.4\",\r\n    \"standard-version\": \"^4.4.0\",\r\n    \"util.promisify\": \"^1.0.1\",\r\n    \"worker-farm\": \"^1.5.0\",\r\n    \"wtfnode\": \"^0.8.0\",\r\n    \"yargs\": \"^14.2.0\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=4\"\r\n  },\r\n  \"files\": [\r\n    \"index.js\",\r\n    \"lib\"\r\n  ],\r\n  \"homepage\": \"https://github.com/mongodb/node-mongodb-native\",\r\n  \"keywords\": [\r\n    \"mongodb\",\r\n    \"driver\",\r\n    \"official\"\r\n  ],\r\n  \"license\": \"Apache-2.0\",\r\n  \"main\": \"index.js\",\r\n  \"name\": \"mongodb\",\r\n  \"optionalDependencies\": {\r\n    \"saslprep\": \"^1.0.0\"\r\n  },\r\n  \"peerOptionalDependencies\": {\r\n    \"kerberos\": \"^1.1.0\",\r\n    \"mongodb-client-encryption\": \"^1.0.0\",\r\n    \"mongodb-extjson\": \"^2.1.2\",\r\n    \"snappy\": \"^6.3.4\",\r\n    \"bson-ext\": \"^2.0.0\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+ssh://git@github.com/mongodb/node-mongodb-native.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"atlas\": \"mocha --opts '{}' ./test/manual/atlas_connectivity.test.js\",\r\n    \"bench\": \"node test/benchmarks/driverBench/\",\r\n    \"coverage\": \"istanbul cover mongodb-test-runner -- -t 60000 test/core test/unit test/functional\",\r\n    \"format\": \"prettier --print-width 100 --tab-width 2 --single-quote --write 'test/**/*.js' 'lib/**/*.js'\",\r\n    \"generate-evergreen\": \"node .evergreen/generate_evergreen_tasks.js\",\r\n    \"lint\": \"eslint -v && eslint lib test\",\r\n    \"release\": \"standard-version -i HISTORY.md\",\r\n    \"test\": \"npm run lint && mocha --recursive test/functional test/unit test/core\",\r\n    \"test-nolint\": \"mocha --recursive test/functional test/unit test/core\"\r\n  },\r\n  \"version\": \"3.6.0\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/node_modules/mongodb/package.json	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/node_modules/mongodb/package.json	(date 1599636090923)
@@ -1,26 +1,26 @@
 {
-  "_from": "mongodb@3.6.0",
-  "_id": "mongodb@3.6.0",
+  "_from": "mongodb@3.6.1",
+  "_id": "mongodb@3.6.1",
   "_inBundle": false,
-  "_integrity": "sha512-/XWWub1mHZVoqEsUppE0GV7u9kanLvHxho6EvBxQbShXTKYF9trhZC2NzbulRGeG7xMJHD8IOWRcdKx5LPjAjQ==",
+  "_integrity": "sha512-uH76Zzr5wPptnjEKJRQnwTsomtFOU/kQEU8a9hKHr2M7y9qVk7Q4Pkv0EQVp88742z9+RwvsdTw6dRjDZCNu1g==",
   "_location": "/mongoose/mongodb",
   "_phantomChildren": {},
   "_requested": {
     "type": "version",
     "registry": true,
-    "raw": "mongodb@3.6.0",
+    "raw": "mongodb@3.6.1",
     "name": "mongodb",
     "escapedName": "mongodb",
-    "rawSpec": "3.6.0",
+    "rawSpec": "3.6.1",
     "saveSpec": null,
-    "fetchSpec": "3.6.0"
+    "fetchSpec": "3.6.1"
   },
   "_requiredBy": [
     "/mongoose"
   ],
-  "_resolved": "https://registry.npmjs.org/mongodb/-/mongodb-3.6.0.tgz",
-  "_shasum": "babd7172ec717e2ed3f85e079b3f1aa29dce4724",
-  "_spec": "mongodb@3.6.0",
+  "_resolved": "https://registry.npmjs.org/mongodb/-/mongodb-3.6.1.tgz",
+  "_shasum": "2c5cc2a81456ba183e8c432d80e78732cc72dabd",
+  "_spec": "mongodb@3.6.1",
   "_where": "F:\\Programming\\Node Js Projects\\Quince\\node_modules\\mongoose",
   "bugs": {
     "url": "https://github.com/mongodb/node-mongodb-native/issues"
@@ -95,6 +95,9 @@
   "scripts": {
     "atlas": "mocha --opts '{}' ./test/manual/atlas_connectivity.test.js",
     "bench": "node test/benchmarks/driverBench/",
+    "check:kerberos": "mocha --opts '{}' -t 60000 test/manual/kerberos.test.js",
+    "check:ldap": "mocha --opts '{}' test/manual/ldap.test.js",
+    "check:tls": "mocha --opts '{}' test/manual/tls_support.test.js",
     "coverage": "istanbul cover mongodb-test-runner -- -t 60000 test/core test/unit test/functional",
     "format": "prettier --print-width 100 --tab-width 2 --single-quote --write 'test/**/*.js' 'lib/**/*.js'",
     "generate-evergreen": "node .evergreen/generate_evergreen_tasks.js",
@@ -103,5 +106,5 @@
     "test": "npm run lint && mocha --recursive test/functional test/unit test/core",
     "test-nolint": "mocha --recursive test/functional test/unit test/core"
   },
-  "version": "3.6.0"
+  "version": "3.6.1"
 }
Index: node_modules/mongoose/lib/helpers/model/discriminator.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst defineKey = require('../document/compile').defineKey;\r\nconst get = require('../get');\r\nconst utils = require('../../utils');\r\n\r\nconst CUSTOMIZABLE_DISCRIMINATOR_OPTIONS = {\r\n  toJSON: true,\r\n  toObject: true,\r\n  _id: true,\r\n  id: true\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nmodule.exports = function discriminator(model, name, schema, tiedValue, applyPlugins) {\r\n  if (!(schema && schema.instanceOfSchema)) {\r\n    throw new Error('You must pass a valid discriminator Schema');\r\n  }\r\n\r\n  if (model.schema.discriminatorMapping &&\r\n      !model.schema.discriminatorMapping.isRoot) {\r\n    throw new Error('Discriminator \"' + name +\r\n        '\" can only be a discriminator of the root model');\r\n  }\r\n\r\n  if (applyPlugins) {\r\n    const applyPluginsToDiscriminators = get(model.base,\r\n      'options.applyPluginsToDiscriminators', false);\r\n    // Even if `applyPluginsToDiscriminators` isn't set, we should still apply\r\n    // global plugins to schemas embedded in the discriminator schema (gh-7370)\r\n    model.base._applyPlugins(schema, {\r\n      skipTopLevel: !applyPluginsToDiscriminators\r\n    });\r\n  }\r\n\r\n  const key = model.schema.options.discriminatorKey;\r\n\r\n  const existingPath = model.schema.path(key);\r\n  if (existingPath != null) {\r\n    if (!utils.hasUserDefinedProperty(existingPath.options, 'select')) {\r\n      existingPath.options.select = true;\r\n    }\r\n    existingPath.options.$skipDiscriminatorCheck = true;\r\n  } else {\r\n    const baseSchemaAddition = {};\r\n    baseSchemaAddition[key] = {\r\n      default: void 0,\r\n      select: true,\r\n      $skipDiscriminatorCheck: true\r\n    };\r\n    baseSchemaAddition[key][model.schema.options.typeKey] = String;\r\n    model.schema.add(baseSchemaAddition);\r\n    defineKey(key, null, model.prototype, null, [key], model.schema.options);\r\n  }\r\n\r\n  if (schema.path(key) && schema.path(key).options.$skipDiscriminatorCheck !== true) {\r\n    throw new Error('Discriminator \"' + name +\r\n        '\" cannot have field with name \"' + key + '\"');\r\n  }\r\n\r\n  let value = name;\r\n  if (typeof tiedValue == 'string' && tiedValue.length) {\r\n    value = tiedValue;\r\n  }\r\n\r\n  function merge(schema, baseSchema) {\r\n    // Retain original schema before merging base schema\r\n    schema._baseSchema = baseSchema;\r\n    if (baseSchema.paths._id &&\r\n        baseSchema.paths._id.options &&\r\n        !baseSchema.paths._id.options.auto) {\r\n      schema.remove('_id');\r\n    }\r\n\r\n    // Find conflicting paths: if something is a path in the base schema\r\n    // and a nested path in the child schema, overwrite the base schema path.\r\n    // See gh-6076\r\n    const baseSchemaPaths = Object.keys(baseSchema.paths);\r\n    const conflictingPaths = [];\r\n\r\n    for (const path of baseSchemaPaths) {\r\n      if (schema.nested[path]) {\r\n        conflictingPaths.push(path);\r\n      }\r\n\r\n      if (path.indexOf('.') === -1) {\r\n        continue;\r\n      }\r\n      const sp = path.split('.');\r\n      let cur = '';\r\n      for (const piece of sp) {\r\n        cur += (cur.length ? '.' : '') + piece;\r\n        if (schema.paths[cur] || schema.singleNestedPaths[cur]) {\r\n          conflictingPaths.push(path);\r\n        }\r\n      }\r\n    }\r\n\r\n    utils.merge(schema, baseSchema, {\r\n      omit: { discriminators: true, base: true },\r\n      omitNested: conflictingPaths.reduce((cur, path) => {\r\n        cur['tree.' + path] = true;\r\n        return cur;\r\n      }, {})\r\n    });\r\n\r\n    // Clean up conflicting paths _after_ merging re: gh-6076\r\n    for (const conflictingPath of conflictingPaths) {\r\n      delete schema.paths[conflictingPath];\r\n    }\r\n\r\n    // Rebuild schema models because schemas may have been merged re: #7884\r\n    schema.childSchemas.forEach(obj => {\r\n      obj.model.prototype.$__setSchema(obj.schema);\r\n    });\r\n\r\n    const obj = {};\r\n    obj[key] = {\r\n      default: value,\r\n      select: true,\r\n      set: function(newName) {\r\n        if (newName === value) {\r\n          return value;\r\n        }\r\n        throw new Error('Can\\'t set discriminator key \"' + key + '\"');\r\n      },\r\n      $skipDiscriminatorCheck: true\r\n    };\r\n    obj[key][schema.options.typeKey] = existingPath ?\r\n      existingPath.instance :\r\n      String;\r\n    schema.add(obj);\r\n    schema.discriminatorMapping = { key: key, value: value, isRoot: false };\r\n\r\n    if (baseSchema.options.collection) {\r\n      schema.options.collection = baseSchema.options.collection;\r\n    }\r\n\r\n    const toJSON = schema.options.toJSON;\r\n    const toObject = schema.options.toObject;\r\n    const _id = schema.options._id;\r\n    const id = schema.options.id;\r\n\r\n    const keys = Object.keys(schema.options);\r\n    schema.options.discriminatorKey = baseSchema.options.discriminatorKey;\r\n\r\n    for (const _key of keys) {\r\n      if (!CUSTOMIZABLE_DISCRIMINATOR_OPTIONS[_key]) {\r\n        // Special case: compiling a model sets `pluralization = true` by default. Avoid throwing an error\r\n        // for that case. See gh-9238\r\n        if (_key === 'pluralization' && schema.options[_key] == true && baseSchema.options[_key] == null) {\r\n          continue;\r\n        }\r\n\r\n        if (!utils.deepEqual(schema.options[_key], baseSchema.options[_key])) {\r\n          throw new Error('Can\\'t customize discriminator option ' + _key +\r\n            ' (can only modify ' +\r\n            Object.keys(CUSTOMIZABLE_DISCRIMINATOR_OPTIONS).join(', ') +\r\n            ')');\r\n        }\r\n      }\r\n    }\r\n    schema.options = utils.clone(baseSchema.options);\r\n    if (toJSON) schema.options.toJSON = toJSON;\r\n    if (toObject) schema.options.toObject = toObject;\r\n    if (typeof _id !== 'undefined') {\r\n      schema.options._id = _id;\r\n    }\r\n    schema.options.id = id;\r\n    schema.s.hooks = model.schema.s.hooks.merge(schema.s.hooks);\r\n\r\n    schema.plugins = Array.prototype.slice.call(baseSchema.plugins);\r\n    schema.callQueue = baseSchema.callQueue.concat(schema.callQueue);\r\n    delete schema._requiredpaths; // reset just in case Schema#requiredPaths() was called on either schema\r\n  }\r\n\r\n  // merges base schema into new discriminator schema and sets new type field.\r\n  merge(schema, model.schema);\r\n\r\n  if (!model.discriminators) {\r\n    model.discriminators = {};\r\n  }\r\n\r\n  if (!model.schema.discriminatorMapping) {\r\n    model.schema.discriminatorMapping = { key: key, value: null, isRoot: true };\r\n  }\r\n  if (!model.schema.discriminators) {\r\n    model.schema.discriminators = {};\r\n  }\r\n\r\n  model.schema.discriminators[name] = schema;\r\n\r\n  if (model.discriminators[name]) {\r\n    throw new Error('Discriminator with name \"' + name + '\" already exists');\r\n  }\r\n\r\n  return schema;\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/helpers/model/discriminator.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/helpers/model/discriminator.js	(date 499162500000)
@@ -1,5 +1,6 @@
 'use strict';
 
+const Mixed = require('../../schema/mixed');
 const defineKey = require('../document/compile').defineKey;
 const get = require('../get');
 const utils = require('../../utils');
@@ -89,11 +90,12 @@
       if (path.indexOf('.') === -1) {
         continue;
       }
-      const sp = path.split('.');
+      const sp = path.split('.').slice(0, -1);
       let cur = '';
       for (const piece of sp) {
         cur += (cur.length ? '.' : '') + piece;
-        if (schema.paths[cur] || schema.singleNestedPaths[cur]) {
+        if (schema.paths[cur] instanceof Mixed ||
+            schema.singleNestedPaths[cur] instanceof Mixed) {
           conflictingPaths.push(path);
         }
       }
Index: node_modules/mongoose/node_modules/mongodb/lib/db.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst inherits = require('util').inherits;\r\nconst getSingleProperty = require('./utils').getSingleProperty;\r\nconst CommandCursor = require('./command_cursor');\r\nconst handleCallback = require('./utils').handleCallback;\r\nconst filterOptions = require('./utils').filterOptions;\r\nconst toError = require('./utils').toError;\r\nconst ReadPreference = require('./core').ReadPreference;\r\nconst MongoError = require('./core').MongoError;\r\nconst ObjectID = require('./core').ObjectID;\r\nconst Logger = require('./core').Logger;\r\nconst Collection = require('./collection');\r\nconst mergeOptionsAndWriteConcern = require('./utils').mergeOptionsAndWriteConcern;\r\nconst executeLegacyOperation = require('./utils').executeLegacyOperation;\r\nconst ChangeStream = require('./change_stream');\r\nconst deprecate = require('util').deprecate;\r\nconst deprecateOptions = require('./utils').deprecateOptions;\r\nconst MongoDBNamespace = require('./utils').MongoDBNamespace;\r\nconst CONSTANTS = require('./constants');\r\nconst WriteConcern = require('./write_concern');\r\nconst ReadConcern = require('./read_concern');\r\nconst AggregationCursor = require('./aggregation_cursor');\r\n\r\n// Operations\r\nconst createListener = require('./operations/db_ops').createListener;\r\nconst ensureIndex = require('./operations/db_ops').ensureIndex;\r\nconst evaluate = require('./operations/db_ops').evaluate;\r\nconst profilingInfo = require('./operations/db_ops').profilingInfo;\r\nconst validateDatabaseName = require('./operations/db_ops').validateDatabaseName;\r\n\r\nconst AggregateOperation = require('./operations/aggregate');\r\nconst AddUserOperation = require('./operations/add_user');\r\nconst CollectionsOperation = require('./operations/collections');\r\nconst CommandOperation = require('./operations/command');\r\nconst RunCommandOperation = require('./operations/run_command');\r\nconst CreateCollectionOperation = require('./operations/create_collection');\r\nconst CreateIndexesOperation = require('./operations/create_indexes');\r\nconst DropCollectionOperation = require('./operations/drop').DropCollectionOperation;\r\nconst DropDatabaseOperation = require('./operations/drop').DropDatabaseOperation;\r\nconst ExecuteDbAdminCommandOperation = require('./operations/execute_db_admin_command');\r\nconst IndexInformationOperation = require('./operations/index_information');\r\nconst ListCollectionsOperation = require('./operations/list_collections');\r\nconst ProfilingLevelOperation = require('./operations/profiling_level');\r\nconst RemoveUserOperation = require('./operations/remove_user');\r\nconst RenameOperation = require('./operations/rename');\r\nconst SetProfilingLevelOperation = require('./operations/set_profiling_level');\r\n\r\nconst executeOperation = require('./operations/execute_operation');\r\n\r\n/**\r\n * @fileOverview The **Db** class is a class that represents a MongoDB Database.\r\n *\r\n * @example\r\n * const MongoClient = require('mongodb').MongoClient;\r\n * // Connection url\r\n * const url = 'mongodb://localhost:27017';\r\n * // Database Name\r\n * const dbName = 'test';\r\n * // Connect using MongoClient\r\n * MongoClient.connect(url, function(err, client) {\r\n *   // Select the database by name\r\n *   const testDb = client.db(dbName);\r\n *   client.close();\r\n * });\r\n */\r\n\r\n// Allowed parameters\r\nconst legalOptionNames = [\r\n  'w',\r\n  'wtimeout',\r\n  'fsync',\r\n  'j',\r\n  'readPreference',\r\n  'readPreferenceTags',\r\n  'native_parser',\r\n  'forceServerObjectId',\r\n  'pkFactory',\r\n  'serializeFunctions',\r\n  'raw',\r\n  'bufferMaxEntries',\r\n  'authSource',\r\n  'ignoreUndefined',\r\n  'promoteLongs',\r\n  'promiseLibrary',\r\n  'readConcern',\r\n  'retryMiliSeconds',\r\n  'numberOfRetries',\r\n  'parentDb',\r\n  'noListener',\r\n  'loggerLevel',\r\n  'logger',\r\n  'promoteBuffers',\r\n  'promoteLongs',\r\n  'promoteValues',\r\n  'compression',\r\n  'retryWrites'\r\n];\r\n\r\n/**\r\n * Creates a new Db instance\r\n * @class\r\n * @param {string} databaseName The name of the database this instance represents.\r\n * @param {(Server|ReplSet|Mongos)} topology The server topology for the database.\r\n * @param {object} [options] Optional settings.\r\n * @param {string} [options.authSource] If the database authentication is dependent on another databaseName.\r\n * @param {(number|string)} [options.w] The write concern.\r\n * @param {number} [options.wtimeout] The write concern timeout.\r\n * @param {boolean} [options.j=false] Specify a journal write concern.\r\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver.\r\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\r\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\r\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\r\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\r\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\r\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\r\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\r\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\r\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\r\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\r\n * @property {(Server|ReplSet|Mongos)} serverConfig Get the current db topology.\r\n * @property {number} bufferMaxEntries Current bufferMaxEntries value for the database\r\n * @property {string} databaseName The name of the database this instance represents.\r\n * @property {object} options The options associated with the db instance.\r\n * @property {boolean} native_parser The current value of the parameter native_parser.\r\n * @property {boolean} slaveOk The current slaveOk value for the db instance.\r\n * @property {object} writeConcern The current write concern values.\r\n * @property {object} topology Access the topology object (single server, replicaset or mongos).\r\n * @fires Db#close\r\n * @fires Db#reconnect\r\n * @fires Db#error\r\n * @fires Db#timeout\r\n * @fires Db#parseError\r\n * @fires Db#fullsetup\r\n * @return {Db} a Db instance.\r\n */\r\nfunction Db(databaseName, topology, options) {\r\n  options = options || {};\r\n  if (!(this instanceof Db)) return new Db(databaseName, topology, options);\r\n  EventEmitter.call(this);\r\n\r\n  // Get the promiseLibrary\r\n  const promiseLibrary = options.promiseLibrary || Promise;\r\n\r\n  // Filter the options\r\n  options = filterOptions(options, legalOptionNames);\r\n\r\n  // Ensure we put the promiseLib in the options\r\n  options.promiseLibrary = promiseLibrary;\r\n\r\n  // Internal state of the db object\r\n  this.s = {\r\n    // DbCache\r\n    dbCache: {},\r\n    // Children db's\r\n    children: [],\r\n    // Topology\r\n    topology: topology,\r\n    // Options\r\n    options: options,\r\n    // Logger instance\r\n    logger: Logger('Db', options),\r\n    // Get the bson parser\r\n    bson: topology ? topology.bson : null,\r\n    // Unpack read preference\r\n    readPreference: ReadPreference.fromOptions(options),\r\n    // Set buffermaxEntries\r\n    bufferMaxEntries: typeof options.bufferMaxEntries === 'number' ? options.bufferMaxEntries : -1,\r\n    // Parent db (if chained)\r\n    parentDb: options.parentDb || null,\r\n    // Set up the primary key factory or fallback to ObjectID\r\n    pkFactory: options.pkFactory || ObjectID,\r\n    // Get native parser\r\n    nativeParser: options.nativeParser || options.native_parser,\r\n    // Promise library\r\n    promiseLibrary: promiseLibrary,\r\n    // No listener\r\n    noListener: typeof options.noListener === 'boolean' ? options.noListener : false,\r\n    // ReadConcern\r\n    readConcern: ReadConcern.fromOptions(options),\r\n    writeConcern: WriteConcern.fromOptions(options),\r\n    // Namespace\r\n    namespace: new MongoDBNamespace(databaseName)\r\n  };\r\n\r\n  // Ensure we have a valid db name\r\n  validateDatabaseName(databaseName);\r\n\r\n  // Add a read Only property\r\n  getSingleProperty(this, 'serverConfig', this.s.topology);\r\n  getSingleProperty(this, 'bufferMaxEntries', this.s.bufferMaxEntries);\r\n  getSingleProperty(this, 'databaseName', this.s.namespace.db);\r\n\r\n  // This is a child db, do not register any listeners\r\n  if (options.parentDb) return;\r\n  if (this.s.noListener) return;\r\n\r\n  // Add listeners\r\n  topology.on('error', createListener(this, 'error', this));\r\n  topology.on('timeout', createListener(this, 'timeout', this));\r\n  topology.on('close', createListener(this, 'close', this));\r\n  topology.on('parseError', createListener(this, 'parseError', this));\r\n  topology.once('open', createListener(this, 'open', this));\r\n  topology.once('fullsetup', createListener(this, 'fullsetup', this));\r\n  topology.once('all', createListener(this, 'all', this));\r\n  topology.on('reconnect', createListener(this, 'reconnect', this));\r\n}\r\n\r\ninherits(Db, EventEmitter);\r\n\r\n// Topology\r\nObject.defineProperty(Db.prototype, 'topology', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.topology;\r\n  }\r\n});\r\n\r\n// Options\r\nObject.defineProperty(Db.prototype, 'options', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.options;\r\n  }\r\n});\r\n\r\n// slaveOk specified\r\nObject.defineProperty(Db.prototype, 'slaveOk', {\r\n  enumerable: true,\r\n  get: function() {\r\n    if (\r\n      this.s.options.readPreference != null &&\r\n      (this.s.options.readPreference !== 'primary' ||\r\n        this.s.options.readPreference.mode !== 'primary')\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Db.prototype, 'readConcern', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.readConcern;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Db.prototype, 'readPreference', {\r\n  enumerable: true,\r\n  get: function() {\r\n    if (this.s.readPreference == null) {\r\n      // TODO: check client\r\n      return ReadPreference.primary;\r\n    }\r\n\r\n    return this.s.readPreference;\r\n  }\r\n});\r\n\r\n// get the write Concern\r\nObject.defineProperty(Db.prototype, 'writeConcern', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.writeConcern;\r\n  }\r\n});\r\n\r\nObject.defineProperty(Db.prototype, 'namespace', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return this.s.namespace.toString();\r\n  }\r\n});\r\n\r\n/**\r\n * Execute a command\r\n * @method\r\n * @param {object} command The command hash\r\n * @param {object} [options] Optional settings.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.command = function(command, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = Object.assign({}, options);\r\n\r\n  const commandOperation = new RunCommandOperation(this, command, options);\r\n\r\n  return executeOperation(this.s.topology, commandOperation, callback);\r\n};\r\n\r\n/**\r\n * Execute an aggregation framework pipeline against the database, needs MongoDB >= 3.6\r\n * @method\r\n * @param {object} [pipeline=[]] Array containing all the aggregation framework commands for the execution.\r\n * @param {object} [options] Optional settings.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\r\n * @param {object} [options.cursor] Return the query as cursor, on 2.6 > it returns as a real cursor on pre 2.6 it returns as an emulated cursor.\r\n * @param {number} [options.cursor.batchSize=1000] Deprecated. Use `options.batchSize`\r\n * @param {boolean} [options.explain=false] Explain returns the aggregation execution plan (requires mongodb 2.6 >).\r\n * @param {boolean} [options.allowDiskUse=false] allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 >).\r\n * @param {number} [options.maxTimeMS] maxTimeMS specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\r\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query.\r\n * @param {boolean} [options.bypassDocumentValidation=false] Allow driver to bypass schema validation in MongoDB 3.2 or higher.\r\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\r\n * @param {boolean} [options.promoteLongs=true] Promotes Long values to number if they fit inside the 53 bits resolution.\r\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\r\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\r\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\r\n * @param {string} [options.comment] Add a comment to an aggregation command\r\n * @param {string|object} [options.hint] Add an index selection hint to an aggregation command\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Database~aggregationCallback} callback The command result callback\r\n * @return {(null|AggregationCursor)}\r\n */\r\nDb.prototype.aggregate = function(pipeline, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n\r\n  // If we have no options or callback we are doing\r\n  // a cursor based aggregation\r\n  if (options == null && callback == null) {\r\n    options = {};\r\n  }\r\n\r\n  const cursor = new AggregationCursor(\r\n    this.s.topology,\r\n    new AggregateOperation(this, pipeline, options),\r\n    options\r\n  );\r\n\r\n  // TODO: remove this when NODE-2074 is resolved\r\n  if (typeof callback === 'function') {\r\n    callback(null, cursor);\r\n    return;\r\n  }\r\n\r\n  return cursor;\r\n};\r\n\r\n/**\r\n * Return the Admin db instance\r\n * @method\r\n * @return {Admin} return the new Admin db instance\r\n */\r\nDb.prototype.admin = function() {\r\n  const Admin = require('./admin');\r\n\r\n  return new Admin(this, this.s.topology, this.s.promiseLibrary);\r\n};\r\n\r\n/**\r\n * The callback format for the collection method, must be used if strict is specified\r\n * @callback Db~collectionResultCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {Collection} collection The collection instance.\r\n */\r\n\r\n/**\r\n * The callback format for an aggregation call\r\n * @callback Database~aggregationCallback\r\n * @param {MongoError} error An error instance representing the error during the execution.\r\n * @param {AggregationCursor} cursor The cursor if the aggregation command was executed successfully.\r\n */\r\n\r\nconst collectionKeys = [\r\n  'pkFactory',\r\n  'readPreference',\r\n  'serializeFunctions',\r\n  'strict',\r\n  'readConcern',\r\n  'ignoreUndefined',\r\n  'promoteValues',\r\n  'promoteBuffers',\r\n  'promoteLongs'\r\n];\r\n\r\n/**\r\n * Fetch a specific collection (containing the actual collection information). If the application does not use strict mode you\r\n * can use it without a callback in the following way: `const collection = db.collection('mycollection');`\r\n *\r\n * @method\r\n * @param {string} name the collection name we wish to access.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] The write concern.\r\n * @param {number} [options.wtimeout] The write concern timeout.\r\n * @param {boolean} [options.j=false] Specify a journal write concern.\r\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\r\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\r\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\r\n * @param {object} [options.readConcern] Specify a read concern for the collection. (only MongoDB 3.2 or higher supported)\r\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\r\n * @param {Db~collectionResultCallback} [callback] The collection result callback\r\n * @return {Collection} return the new Collection instance if not in strict mode\r\n */\r\nDb.prototype.collection = function(name, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n  options = Object.assign({}, options);\r\n\r\n  // Set the promise library\r\n  options.promiseLibrary = this.s.promiseLibrary;\r\n\r\n  // If we have not set a collection level readConcern set the db level one\r\n  options.readConcern = options.readConcern\r\n    ? new ReadConcern(options.readConcern.level)\r\n    : this.readConcern;\r\n\r\n  // Do we have ignoreUndefined set\r\n  if (this.s.options.ignoreUndefined) {\r\n    options.ignoreUndefined = this.s.options.ignoreUndefined;\r\n  }\r\n\r\n  // Merge in all needed options and ensure correct writeConcern merging from db level\r\n  options = mergeOptionsAndWriteConcern(options, this.s.options, collectionKeys, true);\r\n\r\n  // Execute\r\n  if (options == null || !options.strict) {\r\n    try {\r\n      const collection = new Collection(\r\n        this,\r\n        this.s.topology,\r\n        this.databaseName,\r\n        name,\r\n        this.s.pkFactory,\r\n        options\r\n      );\r\n      if (callback) callback(null, collection);\r\n      return collection;\r\n    } catch (err) {\r\n      if (err instanceof MongoError && callback) return callback(err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // Strict mode\r\n  if (typeof callback !== 'function') {\r\n    throw toError(`A callback is required in strict mode. While getting collection ${name}`);\r\n  }\r\n\r\n  // Did the user destroy the topology\r\n  if (this.serverConfig && this.serverConfig.isDestroyed()) {\r\n    return callback(new MongoError('topology was destroyed'));\r\n  }\r\n\r\n  const listCollectionOptions = Object.assign({}, options, { nameOnly: true });\r\n\r\n  // Strict mode\r\n  this.listCollections({ name: name }, listCollectionOptions).toArray((err, collections) => {\r\n    if (err != null) return handleCallback(callback, err, null);\r\n    if (collections.length === 0)\r\n      return handleCallback(\r\n        callback,\r\n        toError(`Collection ${name} does not exist. Currently in strict mode.`),\r\n        null\r\n      );\r\n\r\n    try {\r\n      return handleCallback(\r\n        callback,\r\n        null,\r\n        new Collection(this, this.s.topology, this.databaseName, name, this.s.pkFactory, options)\r\n      );\r\n    } catch (err) {\r\n      return handleCallback(callback, err, null);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Create a new collection on a server with the specified options. Use this to create capped collections.\r\n * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\r\n *\r\n * @method\r\n * @param {string} name the collection name we wish to access.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] The write concern.\r\n * @param {number} [options.wtimeout] The write concern timeout.\r\n * @param {boolean} [options.j=false] Specify a journal write concern.\r\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers.\r\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.\r\n * @param {boolean} [options.strict=false] Returns an error if the collection does not exist\r\n * @param {boolean} [options.capped=false] Create a capped collection.\r\n * @param {boolean} [options.autoIndexId=true] DEPRECATED: Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0\r\n * @param {number} [options.size] The size of the capped collection in bytes.\r\n * @param {number} [options.max] The maximum number of documents in the capped collection.\r\n * @param {number} [options.flags] Optional. Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag.\r\n * @param {object} [options.storageEngine] Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher.\r\n * @param {object} [options.validator] Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher.\r\n * @param {string} [options.validationLevel] Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher.\r\n * @param {string} [options.validationAction] Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher.\r\n * @param {object} [options.indexOptionDefaults] Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher.\r\n * @param {string} [options.viewOn] The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher.\r\n * @param {array} [options.pipeline] An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher.\r\n * @param {object} [options.collation] Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~collectionResultCallback} [callback] The results callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.createCollection = deprecateOptions(\r\n  {\r\n    name: 'Db.createCollection',\r\n    deprecatedOptions: ['autoIndexId'],\r\n    optionsIndex: 1\r\n  },\r\n  function(name, options, callback) {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options || {};\r\n    options.promiseLibrary = options.promiseLibrary || this.s.promiseLibrary;\r\n    options.readConcern = options.readConcern\r\n      ? new ReadConcern(options.readConcern.level)\r\n      : this.readConcern;\r\n    const createCollectionOperation = new CreateCollectionOperation(this, name, options);\r\n\r\n    return executeOperation(this.s.topology, createCollectionOperation, callback);\r\n  }\r\n);\r\n\r\n/**\r\n * Get all the db statistics.\r\n *\r\n * @method\r\n * @param {object} [options] Optional settings.\r\n * @param {number} [options.scale] Divide the returned sizes by scale value.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The collection result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.stats = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n  // Build command object\r\n  const commandObject = { dbStats: true };\r\n  // Check if we have the scale value\r\n  if (options['scale'] != null) commandObject['scale'] = options['scale'];\r\n\r\n  // If we have a readPreference set\r\n  if (options.readPreference == null && this.s.readPreference) {\r\n    options.readPreference = this.s.readPreference;\r\n  }\r\n\r\n  const statsOperation = new CommandOperation(this, options, null, commandObject);\r\n\r\n  // Execute the command\r\n  return executeOperation(this.s.topology, statsOperation, callback);\r\n};\r\n\r\n/**\r\n * Get the list of all collection information for the specified db.\r\n *\r\n * @method\r\n * @param {object} [filter={}] Query to filter collections by\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.nameOnly=false] Since 4.0: If true, will only return the collection name in the response, and will omit additional info\r\n * @param {number} [options.batchSize=1000] The batchSize for the returned command cursor or if pre 2.8 the systems batch collection\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @return {CommandCursor}\r\n */\r\nDb.prototype.listCollections = function(filter, options) {\r\n  filter = filter || {};\r\n  options = options || {};\r\n\r\n  return new CommandCursor(\r\n    this.s.topology,\r\n    new ListCollectionsOperation(this, filter, options),\r\n    options\r\n  );\r\n};\r\n\r\n/**\r\n * Evaluate JavaScript on the server\r\n *\r\n * @method\r\n * @param {Code} code JavaScript to execute on server.\r\n * @param {(object|array)} parameters The parameters for the call.\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.nolock=false] Tell MongoDB not to block on the evaluation of the javascript.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The results callback\r\n * @deprecated Eval is deprecated on MongoDB 3.2 and forward\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.eval = deprecate(function(code, parameters, options, callback) {\r\n  const args = Array.prototype.slice.call(arguments, 1);\r\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\r\n  parameters = args.length ? args.shift() : parameters;\r\n  options = args.length ? args.shift() || {} : {};\r\n\r\n  return executeLegacyOperation(this.s.topology, evaluate, [\r\n    this,\r\n    code,\r\n    parameters,\r\n    options,\r\n    callback\r\n  ]);\r\n}, 'Db.eval is deprecated as of MongoDB version 3.2');\r\n\r\n/**\r\n * Rename a collection.\r\n *\r\n * @method\r\n * @param {string} fromCollection Name of current collection to rename.\r\n * @param {string} toCollection New name of of the collection.\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.dropTarget=false] Drop the target name collection if it previously exists.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~collectionResultCallback} [callback] The results callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.renameCollection = function(fromCollection, toCollection, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\r\n\r\n  // Add return new collection\r\n  options.new_collection = true;\r\n\r\n  const renameOperation = new RenameOperation(\r\n    this.collection(fromCollection),\r\n    toCollection,\r\n    options\r\n  );\r\n\r\n  return executeOperation(this.s.topology, renameOperation, callback);\r\n};\r\n\r\n/**\r\n * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\r\n *\r\n * @method\r\n * @param {string} name Name of collection to drop\r\n * @param {Object} [options] Optional settings\r\n * @param {WriteConcern} [options.writeConcern] A full WriteConcern object\r\n * @param {(number|string)} [options.w] The write concern\r\n * @param {number} [options.wtimeout] The write concern timeout\r\n * @param {boolean} [options.j] The journal write concern\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The results callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.dropCollection = function(name, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const dropCollectionOperation = new DropCollectionOperation(this, name, options);\r\n\r\n  return executeOperation(this.s.topology, dropCollectionOperation, callback);\r\n};\r\n\r\n/**\r\n * Drop a database, removing it permanently from the server.\r\n *\r\n * @method\r\n * @param {Object} [options] Optional settings\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The results callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.dropDatabase = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const dropDatabaseOperation = new DropDatabaseOperation(this, options);\r\n\r\n  return executeOperation(this.s.topology, dropDatabaseOperation, callback);\r\n};\r\n\r\n/**\r\n * Fetch all collections for the current db.\r\n *\r\n * @method\r\n * @param {Object} [options] Optional settings\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~collectionsResultCallback} [callback] The results callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.collections = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const collectionsOperation = new CollectionsOperation(this, options);\r\n\r\n  return executeOperation(this.s.topology, collectionsOperation, callback);\r\n};\r\n\r\n/**\r\n * Runs a command on the database as admin.\r\n * @method\r\n * @param {object} command The command hash\r\n * @param {object} [options] Optional settings.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.executeDbAdminCommand = function(selector, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n  options.readPreference = ReadPreference.resolve(this, options);\r\n\r\n  const executeDbAdminCommandOperation = new ExecuteDbAdminCommandOperation(\r\n    this,\r\n    selector,\r\n    options\r\n  );\r\n\r\n  return executeOperation(this.s.topology, executeDbAdminCommandOperation, callback);\r\n};\r\n\r\n/**\r\n * Creates an index on the db and collection.\r\n * @method\r\n * @param {string} name Name of the collection to create the index on.\r\n * @param {(string|object)} fieldOrSpec Defines the index.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] The write concern.\r\n * @param {number} [options.wtimeout] The write concern timeout.\r\n * @param {boolean} [options.j=false] Specify a journal write concern.\r\n * @param {boolean} [options.unique=false] Creates an unique index.\r\n * @param {boolean} [options.sparse=false] Creates a sparse index.\r\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\r\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\r\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\r\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\r\n * @param {number} [options.v] Specify the format version of the indexes.\r\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\r\n * @param {string} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\r\n * @param {object} [options.partialFilterExpression] Creates a partial index based on the given filter object (MongoDB 3.2 or higher)\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {(number|string)} [options.commitQuorum] (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes.\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.createIndex = function(name, fieldOrSpec, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options ? Object.assign({}, options) : {};\r\n\r\n  const createIndexesOperation = new CreateIndexesOperation(this, name, fieldOrSpec, options);\r\n\r\n  return executeOperation(this.s.topology, createIndexesOperation, callback);\r\n};\r\n\r\n/**\r\n * Ensures that an index exists, if it does not it creates it\r\n * @method\r\n * @deprecated since version 2.0\r\n * @param {string} name The index name\r\n * @param {(string|object)} fieldOrSpec Defines the index.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] The write concern.\r\n * @param {number} [options.wtimeout] The write concern timeout.\r\n * @param {boolean} [options.j=false] Specify a journal write concern.\r\n * @param {boolean} [options.unique=false] Creates an unique index.\r\n * @param {boolean} [options.sparse=false] Creates a sparse index.\r\n * @param {boolean} [options.background=false] Creates the index in the background, yielding whenever possible.\r\n * @param {boolean} [options.dropDups=false] A unique index cannot be created on a key that has pre-existing duplicate values. If you would like to create the index anyway, keeping the first document the database indexes and deleting all subsequent documents that have duplicate value\r\n * @param {number} [options.min] For geospatial indexes set the lower bound for the co-ordinates.\r\n * @param {number} [options.max] For geospatial indexes set the high bound for the co-ordinates.\r\n * @param {number} [options.v] Specify the format version of the indexes.\r\n * @param {number} [options.expireAfterSeconds] Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher)\r\n * @param {number} [options.name] Override the autogenerated index name (useful if the resulting name is larger than 128 bytes)\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.ensureIndex = deprecate(function(name, fieldOrSpec, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  return executeLegacyOperation(this.s.topology, ensureIndex, [\r\n    this,\r\n    name,\r\n    fieldOrSpec,\r\n    options,\r\n    callback\r\n  ]);\r\n}, 'Db.ensureIndex is deprecated as of MongoDB version 3.0 / driver version 2.0');\r\n\r\nDb.prototype.addChild = function(db) {\r\n  if (this.s.parentDb) return this.s.parentDb.addChild(db);\r\n  this.s.children.push(db);\r\n};\r\n\r\n/**\r\n * Add a user to the database.\r\n * @method\r\n * @param {string} username The username.\r\n * @param {string} password The password.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] The write concern.\r\n * @param {number} [options.wtimeout] The write concern timeout.\r\n * @param {boolean} [options.j=false] Specify a journal write concern.\r\n * @param {object} [options.customData] Custom data associated with the user (only Mongodb 2.6 or higher)\r\n * @param {object[]} [options.roles] Roles associated with the created user (only Mongodb 2.6 or higher)\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.addUser = function(username, password, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  // Special case where there is no password ($external users)\r\n  if (typeof username === 'string' && password != null && typeof password === 'object') {\r\n    options = password;\r\n    password = null;\r\n  }\r\n\r\n  const addUserOperation = new AddUserOperation(this, username, password, options);\r\n\r\n  return executeOperation(this.s.topology, addUserOperation, callback);\r\n};\r\n\r\n/**\r\n * Remove a user from a database\r\n * @method\r\n * @param {string} username The username.\r\n * @param {object} [options] Optional settings.\r\n * @param {(number|string)} [options.w] The write concern.\r\n * @param {number} [options.wtimeout] The write concern timeout.\r\n * @param {boolean} [options.j=false] Specify a journal write concern.\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.removeUser = function(username, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const removeUserOperation = new RemoveUserOperation(this, username, options);\r\n\r\n  return executeOperation(this.s.topology, removeUserOperation, callback);\r\n};\r\n\r\n/**\r\n * Set the current profiling level of MongoDB\r\n *\r\n * @param {string} level The new profiling level (off, slow_only, all).\r\n * @param {Object} [options] Optional settings\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.setProfilingLevel = function(level, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const setProfilingLevelOperation = new SetProfilingLevelOperation(this, level, options);\r\n\r\n  return executeOperation(this.s.topology, setProfilingLevelOperation, callback);\r\n};\r\n\r\n/**\r\n * Retrieve the current profiling information for MongoDB\r\n *\r\n * @param {Object} [options] Optional settings\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback.\r\n * @return {Promise} returns Promise if no callback passed\r\n * @deprecated Query the system.profile collection directly.\r\n */\r\nDb.prototype.profilingInfo = deprecate(function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  return executeLegacyOperation(this.s.topology, profilingInfo, [this, options, callback]);\r\n}, 'Db.profilingInfo is deprecated. Query the system.profile collection directly.');\r\n\r\n/**\r\n * Retrieve the current profiling Level for MongoDB\r\n *\r\n * @param {Object} [options] Optional settings\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.profilingLevel = function(options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const profilingLevelOperation = new ProfilingLevelOperation(this, options);\r\n\r\n  return executeOperation(this.s.topology, profilingLevelOperation, callback);\r\n};\r\n\r\n/**\r\n * Retrieves this collections index info.\r\n * @method\r\n * @param {string} name The name of the collection.\r\n * @param {object} [options] Optional settings.\r\n * @param {boolean} [options.full=false] Returns the full raw index information.\r\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @param {Db~resultCallback} [callback] The command result callback\r\n * @return {Promise} returns Promise if no callback passed\r\n */\r\nDb.prototype.indexInformation = function(name, options, callback) {\r\n  if (typeof options === 'function') (callback = options), (options = {});\r\n  options = options || {};\r\n\r\n  const indexInformationOperation = new IndexInformationOperation(this, name, options);\r\n\r\n  return executeOperation(this.s.topology, indexInformationOperation, callback);\r\n};\r\n\r\n/**\r\n * Unref all sockets\r\n * @method\r\n */\r\nDb.prototype.unref = function() {\r\n  this.s.topology.unref();\r\n};\r\n\r\n/**\r\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this database. Will ignore all changes to system collections.\r\n * @method\r\n * @since 3.1.0\r\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\r\n * @param {object} [options] Optional settings\r\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\r\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\r\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\r\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\r\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\r\n * @param {ReadPreference} [options.readPreference] The read preference. Defaults to the read preference of the database. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\r\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\r\n * @param {ClientSession} [options.session] optional session to use for this operation\r\n * @return {ChangeStream} a ChangeStream instance.\r\n */\r\nDb.prototype.watch = function(pipeline, options) {\r\n  pipeline = pipeline || [];\r\n  options = options || {};\r\n\r\n  // Allow optionally not specifying a pipeline\r\n  if (!Array.isArray(pipeline)) {\r\n    options = pipeline;\r\n    pipeline = [];\r\n  }\r\n\r\n  return new ChangeStream(this, pipeline, options);\r\n};\r\n\r\n/**\r\n * Return the db logger\r\n * @method\r\n * @return {Logger} return the db logger\r\n * @ignore\r\n */\r\nDb.prototype.getLogger = function() {\r\n  return this.s.logger;\r\n};\r\n\r\n/**\r\n * Db close event\r\n *\r\n * Emitted after a socket closed against a single server or mongos proxy.\r\n *\r\n * @event Db#close\r\n * @type {MongoError}\r\n */\r\n\r\n/**\r\n * Db reconnect event\r\n *\r\n *  * Server: Emitted when the driver has reconnected and re-authenticated.\r\n *  * ReplicaSet: N/A\r\n *  * Mongos: Emitted when the driver reconnects and re-authenticates successfully against a Mongos.\r\n *\r\n * @event Db#reconnect\r\n * @type {object}\r\n */\r\n\r\n/**\r\n * Db error event\r\n *\r\n * Emitted after an error occurred against a single server or mongos proxy.\r\n *\r\n * @event Db#error\r\n * @type {MongoError}\r\n */\r\n\r\n/**\r\n * Db timeout event\r\n *\r\n * Emitted after a socket timeout occurred against a single server or mongos proxy.\r\n *\r\n * @event Db#timeout\r\n * @type {MongoError}\r\n */\r\n\r\n/**\r\n * Db parseError event\r\n *\r\n * The parseError event is emitted if the driver detects illegal or corrupt BSON being received from the server.\r\n *\r\n * @event Db#parseError\r\n * @type {MongoError}\r\n */\r\n\r\n/**\r\n * Db fullsetup event, emitted when all servers in the topology have been connected to at start up time.\r\n *\r\n * * Server: Emitted when the driver has connected to the single server and has authenticated.\r\n * * ReplSet: Emitted after the driver has attempted to connect to all replicaset members.\r\n * * Mongos: Emitted after the driver has attempted to connect to all mongos proxies.\r\n *\r\n * @event Db#fullsetup\r\n * @type {Db}\r\n */\r\n\r\n// Constants\r\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\r\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\r\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\r\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\r\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\r\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\r\n\r\nmodule.exports = Db;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/node_modules/mongodb/lib/db.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/node_modules/mongodb/lib/db.js	(date 499162500000)
@@ -492,7 +492,7 @@
  * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys.
  * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST).
  * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object.
- * @param {boolean} [options.strict=false] Returns an error if the collection does not exist
+ * @param {boolean} [options.strict=false] DEPRECATED: Returns an error if the collection does not exist
  * @param {boolean} [options.capped=false] Create a capped collection.
  * @param {boolean} [options.autoIndexId=true] DEPRECATED: Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0
  * @param {number} [options.size] The size of the capped collection in bytes.
@@ -513,7 +513,7 @@
 Db.prototype.createCollection = deprecateOptions(
   {
     name: 'Db.createCollection',
-    deprecatedOptions: ['autoIndexId'],
+    deprecatedOptions: ['autoIndexId', 'strict'],
     optionsIndex: 1
   },
   function(name, options, callback) {
Index: node_modules/mongoose/lib/schema.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nconst EventEmitter = require('events').EventEmitter;\r\nconst Kareem = require('kareem');\r\nconst MongooseError = require('./error/mongooseError');\r\nconst SchemaType = require('./schematype');\r\nconst SchemaTypeOptions = require('./options/SchemaTypeOptions');\r\nconst VirtualOptions = require('./options/VirtualOptions');\r\nconst VirtualType = require('./virtualtype');\r\nconst addAutoId = require('./helpers/schema/addAutoId');\r\nconst applyTimestampsToChildren = require('./helpers/update/applyTimestampsToChildren');\r\nconst applyTimestampsToUpdate = require('./helpers/update/applyTimestampsToUpdate');\r\nconst arrayParentSymbol = require('./helpers/symbols').arrayParentSymbol;\r\nconst get = require('./helpers/get');\r\nconst getIndexes = require('./helpers/schema/getIndexes');\r\nconst handleTimestampOption = require('./helpers/schema/handleTimestampOption');\r\nconst merge = require('./helpers/schema/merge');\r\nconst mpath = require('mpath');\r\nconst readPref = require('./driver').get().ReadPreference;\r\nconst symbols = require('./schema/symbols');\r\nconst util = require('util');\r\nconst utils = require('./utils');\r\nconst validateRef = require('./helpers/populate/validateRef');\r\n\r\nlet MongooseTypes;\r\n\r\nconst queryHooks = require('./helpers/query/applyQueryMiddleware').\r\n  middlewareFunctions;\r\nconst documentHooks = require('./helpers/model/applyHooks').middlewareFunctions;\r\nconst hookNames = queryHooks.concat(documentHooks).\r\n  reduce((s, hook) => s.add(hook), new Set());\r\n\r\nlet id = 0;\r\n\r\n/**\r\n * Schema constructor.\r\n *\r\n * ####Example:\r\n *\r\n *     var child = new Schema({ name: String });\r\n *     var schema = new Schema({ name: String, age: Number, children: [child] });\r\n *     var Tree = mongoose.model('Tree', schema);\r\n *\r\n *     // setting schema options\r\n *     new Schema({ name: String }, { _id: false, autoIndex: false })\r\n *\r\n * ####Options:\r\n *\r\n * - [autoIndex](/docs/guide.html#autoIndex): bool - defaults to null (which means use the connection's autoIndex option)\r\n * - [autoCreate](/docs/guide.html#autoCreate): bool - defaults to null (which means use the connection's autoCreate option)\r\n * - [bufferCommands](/docs/guide.html#bufferCommands): bool - defaults to true\r\n * - [capped](/docs/guide.html#capped): bool - defaults to false\r\n * - [collection](/docs/guide.html#collection): string - no default\r\n * - [id](/docs/guide.html#id): bool - defaults to true\r\n * - [_id](/docs/guide.html#_id): bool - defaults to true\r\n * - [minimize](/docs/guide.html#minimize): bool - controls [document#toObject](#document_Document-toObject) behavior when called manually - defaults to true\r\n * - [read](/docs/guide.html#read): string\r\n * - [writeConcern](/docs/guide.html#writeConcern): object - defaults to null, use to override [the MongoDB server's default write concern settings](https://docs.mongodb.com/manual/reference/write-concern/)\r\n * - [shardKey](/docs/guide.html#shardKey): object - defaults to `null`\r\n * - [strict](/docs/guide.html#strict): bool - defaults to true\r\n * - [strictQuery](/docs/guide.html#strictQuery): bool - defaults to false\r\n * - [toJSON](/docs/guide.html#toJSON) - object - no default\r\n * - [toObject](/docs/guide.html#toObject) - object - no default\r\n * - [typeKey](/docs/guide.html#typeKey) - string - defaults to 'type'\r\n * - [typePojoToMixed](/docs/guide.html#typePojoToMixed) - boolean - defaults to true. Determines whether a type set to a POJO becomes a Mixed path or a Subdocument\r\n * - [useNestedStrict](/docs/guide.html#useNestedStrict) - boolean - defaults to false\r\n * - [validateBeforeSave](/docs/guide.html#validateBeforeSave) - bool - defaults to `true`\r\n * - [versionKey](/docs/guide.html#versionKey): string or object - defaults to \"__v\"\r\n * - [collation](/docs/guide.html#collation): object - defaults to null (which means use no collation)\r\n * - [selectPopulatedPaths](/docs/guide.html#selectPopulatedPaths): boolean - defaults to `true`\r\n * - [skipVersioning](/docs/guide.html#skipVersioning): object - paths to exclude from versioning\r\n * - [timestamps](/docs/guide.html#timestamps): object or boolean - defaults to `false`. If true, Mongoose adds `createdAt` and `updatedAt` properties to your schema and manages those properties for you.\r\n * - [storeSubdocValidationError](/docs/guide.html#storeSubdocValidationError): boolean - Defaults to true. If false, Mongoose will wrap validation errors in single nested document subpaths into a single validation error on the single nested subdoc's path.\r\n *\r\n * ####Options for Nested Schemas:\r\n * - `excludeIndexes`: bool - defaults to `false`. If `true`, skip building indexes on this schema's paths.\r\n *\r\n * ####Note:\r\n *\r\n * _When nesting schemas, (`children` in the example above), always declare the child schema first before passing it into its parent._\r\n *\r\n * @param {Object|Schema|Array} [definition] Can be one of: object describing schema paths, or schema to copy, or array of objects and schemas\r\n * @param {Object} [options]\r\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\r\n * @event `init`: Emitted after the schema is compiled into a `Model`.\r\n * @api public\r\n */\r\n\r\nfunction Schema(obj, options) {\r\n  if (!(this instanceof Schema)) {\r\n    return new Schema(obj, options);\r\n  }\r\n\r\n  this.obj = obj;\r\n  this.paths = {};\r\n  this.aliases = {};\r\n  this.subpaths = {};\r\n  this.virtuals = {};\r\n  this.singleNestedPaths = {};\r\n  this.nested = {};\r\n  this.inherits = {};\r\n  this.callQueue = [];\r\n  this._indexes = [];\r\n  this.methods = {};\r\n  this.methodOptions = {};\r\n  this.statics = {};\r\n  this.tree = {};\r\n  this.query = {};\r\n  this.childSchemas = [];\r\n  this.plugins = [];\r\n  // For internal debugging. Do not use this to try to save a schema in MDB.\r\n  this.$id = ++id;\r\n\r\n  this.s = {\r\n    hooks: new Kareem()\r\n  };\r\n\r\n  this.options = this.defaultOptions(options);\r\n\r\n  // build paths\r\n  if (Array.isArray(obj)) {\r\n    for (const definition of obj) {\r\n      this.add(definition);\r\n    }\r\n  } else if (obj) {\r\n    this.add(obj);\r\n  }\r\n\r\n  // check if _id's value is a subdocument (gh-2276)\r\n  const _idSubDoc = obj && obj._id && utils.isObject(obj._id);\r\n\r\n  // ensure the documents get an auto _id unless disabled\r\n  const auto_id = !this.paths['_id'] &&\r\n      (!this.options.noId && this.options._id) && !_idSubDoc;\r\n\r\n  if (auto_id) {\r\n    addAutoId(this);\r\n  }\r\n\r\n  this.setupTimestamp(this.options.timestamps);\r\n}\r\n\r\n/*!\r\n * Create virtual properties with alias field\r\n */\r\nfunction aliasFields(schema, paths) {\r\n  paths = paths || Object.keys(schema.paths);\r\n  for (const path of paths) {\r\n    const options = get(schema.paths[path], 'options');\r\n    if (options == null) {\r\n      continue;\r\n    }\r\n\r\n    const prop = schema.paths[path].path;\r\n    const alias = options.alias;\r\n\r\n    if (!alias) {\r\n      continue;\r\n    }\r\n\r\n    if (typeof alias !== 'string') {\r\n      throw new Error('Invalid value for alias option on ' + prop + ', got ' + alias);\r\n    }\r\n\r\n    schema.aliases[alias] = prop;\r\n\r\n    schema.\r\n      virtual(alias).\r\n      get((function(p) {\r\n        return function() {\r\n          if (typeof this.get === 'function') {\r\n            return this.get(p);\r\n          }\r\n          return this[p];\r\n        };\r\n      })(prop)).\r\n      set((function(p) {\r\n        return function(v) {\r\n          return this.set(p, v);\r\n        };\r\n      })(prop));\r\n  }\r\n}\r\n\r\n/*!\r\n * Inherit from EventEmitter.\r\n */\r\nSchema.prototype = Object.create(EventEmitter.prototype);\r\nSchema.prototype.constructor = Schema;\r\nSchema.prototype.instanceOfSchema = true;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nObject.defineProperty(Schema.prototype, '$schemaType', {\r\n  configurable: false,\r\n  enumerable: false,\r\n  writable: true\r\n});\r\n\r\n/**\r\n * Array of child schemas (from document arrays and single nested subdocs)\r\n * and their corresponding compiled models. Each element of the array is\r\n * an object with 2 properties: `schema` and `model`.\r\n *\r\n * This property is typically only useful for plugin authors and advanced users.\r\n * You do not need to interact with this property at all to use mongoose.\r\n *\r\n * @api public\r\n * @property childSchemas\r\n * @memberOf Schema\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(Schema.prototype, 'childSchemas', {\r\n  configurable: false,\r\n  enumerable: true,\r\n  writable: true\r\n});\r\n\r\n/**\r\n * The original object passed to the schema constructor\r\n *\r\n * ####Example:\r\n *\r\n *     var schema = new Schema({ a: String }).add({ b: String });\r\n *     schema.obj; // { a: String }\r\n *\r\n * @api public\r\n * @property obj\r\n * @memberOf Schema\r\n * @instance\r\n */\r\n\r\nSchema.prototype.obj;\r\n\r\n/**\r\n * The paths defined on this schema. The keys are the top-level paths\r\n * in this schema, and the values are instances of the SchemaType class.\r\n *\r\n * ####Example:\r\n *     const schema = new Schema({ name: String }, { _id: false });\r\n *     schema.paths; // { name: SchemaString { ... } }\r\n *\r\n *     schema.add({ age: Number });\r\n *     schema.paths; // { name: SchemaString { ... }, age: SchemaNumber { ... } }\r\n *\r\n * @api public\r\n * @property paths\r\n * @memberOf Schema\r\n * @instance\r\n */\r\n\r\nSchema.prototype.paths;\r\n\r\n/**\r\n * Schema as a tree\r\n *\r\n * ####Example:\r\n *     {\r\n *         '_id'     : ObjectId\r\n *       , 'nested'  : {\r\n *             'key' : String\r\n *         }\r\n *     }\r\n *\r\n * @api private\r\n * @property tree\r\n * @memberOf Schema\r\n * @instance\r\n */\r\n\r\nSchema.prototype.tree;\r\n\r\n/**\r\n * Returns a deep copy of the schema\r\n *\r\n * ####Example:\r\n *\r\n *     const schema = new Schema({ name: String });\r\n *     const clone = schema.clone();\r\n *     clone === schema; // false\r\n *     clone.path('name'); // SchemaString { ... }\r\n *\r\n * @return {Schema} the cloned schema\r\n * @api public\r\n * @memberOf Schema\r\n * @instance\r\n */\r\n\r\nSchema.prototype.clone = function() {\r\n  const s = new Schema({}, this._userProvidedOptions);\r\n  s.base = this.base;\r\n  s.obj = this.obj;\r\n  s.options = utils.clone(this.options);\r\n  s.callQueue = this.callQueue.map(function(f) { return f; });\r\n  s.methods = utils.clone(this.methods);\r\n  s.methodOptions = utils.clone(this.methodOptions);\r\n  s.statics = utils.clone(this.statics);\r\n  s.query = utils.clone(this.query);\r\n  s.plugins = Array.prototype.slice.call(this.plugins);\r\n  s._indexes = utils.clone(this._indexes);\r\n  s.s.hooks = this.s.hooks.clone();\r\n\r\n  s.tree = utils.clone(this.tree);\r\n  s.paths = utils.clone(this.paths);\r\n  s.nested = utils.clone(this.nested);\r\n  s.subpaths = utils.clone(this.subpaths);\r\n  s.singleNestedPaths = utils.clone(this.singleNestedPaths);\r\n  s.childSchemas = gatherChildSchemas(s);\r\n\r\n  s.virtuals = utils.clone(this.virtuals);\r\n  s.$globalPluginsApplied = this.$globalPluginsApplied;\r\n  s.$isRootDiscriminator = this.$isRootDiscriminator;\r\n  s.$implicitlyCreated = this.$implicitlyCreated;\r\n\r\n  if (this.discriminatorMapping != null) {\r\n    s.discriminatorMapping = Object.assign({}, this.discriminatorMapping);\r\n  }\r\n  if (this.discriminators != null) {\r\n    s.discriminators = Object.assign({}, this.discriminators);\r\n  }\r\n\r\n  s.aliases = Object.assign({}, this.aliases);\r\n\r\n  // Bubble up `init` for backwards compat\r\n  s.on('init', v => this.emit('init', v));\r\n\r\n  return s;\r\n};\r\n\r\n/**\r\n * Returns a new schema that has the picked `paths` from this schema.\r\n *\r\n * This method is analagous to [Lodash's `pick()` function](https://lodash.com/docs/4.17.15#pick) for Mongoose schemas.\r\n *\r\n * ####Example:\r\n *\r\n *     const schema = Schema({ name: String, age: Number });\r\n *     // Creates a new schema with the same `name` path as `schema`,\r\n *     // but no `age` path.\r\n *     const newSchema = schema.pick(['name']);\r\n *\r\n *     newSchema.path('name'); // SchemaString { ... }\r\n *     newSchema.path('age'); // undefined\r\n *\r\n * @param {Array} paths list of paths to pick\r\n * @param {Object} [options] options to pass to the schema constructor. Defaults to `this.options` if not set.\r\n * @return {Schema}\r\n * @api public\r\n */\r\n\r\nSchema.prototype.pick = function(paths, options) {\r\n  const newSchema = new Schema({}, options || this.options);\r\n  if (!Array.isArray(paths)) {\r\n    throw new MongooseError('Schema#pick() only accepts an array argument, ' +\r\n      'got \"' + typeof paths + '\"');\r\n  }\r\n\r\n  for (const path of paths) {\r\n    if (this.nested[path]) {\r\n      newSchema.add({ [path]: get(this.tree, path) });\r\n    } else {\r\n      const schematype = this.path(path);\r\n      if (schematype == null) {\r\n        throw new MongooseError('Path `' + path + '` is not in the schema');\r\n      }\r\n      newSchema.add({ [path]: schematype });\r\n    }\r\n  }\r\n\r\n  return newSchema;\r\n};\r\n\r\n/**\r\n * Returns default options for this schema, merged with `options`.\r\n *\r\n * @param {Object} options\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nSchema.prototype.defaultOptions = function(options) {\r\n  if (options && options.safe === false) {\r\n    options.safe = { w: 0 };\r\n  }\r\n\r\n  if (options && options.safe && options.safe.w === 0) {\r\n    // if you turn off safe writes, then versioning goes off as well\r\n    options.versionKey = false;\r\n  }\r\n\r\n  this._userProvidedOptions = options == null ? {} : utils.clone(options);\r\n\r\n  const baseOptions = get(this, 'base.options', {});\r\n  options = utils.options({\r\n    strict: 'strict' in baseOptions ? baseOptions.strict : true,\r\n    strictQuery: 'strictQuery' in baseOptions ? baseOptions.strictQuery : false,\r\n    bufferCommands: true,\r\n    capped: false, // { size, max, autoIndexId }\r\n    versionKey: '__v',\r\n    optimisticConcurrency: false,\r\n    discriminatorKey: '__t',\r\n    minimize: true,\r\n    autoIndex: null,\r\n    shardKey: null,\r\n    read: null,\r\n    validateBeforeSave: true,\r\n    // the following are only applied at construction time\r\n    noId: false, // deprecated, use { _id: false }\r\n    _id: true,\r\n    noVirtualId: false, // deprecated, use { id: false }\r\n    id: true,\r\n    typeKey: 'type',\r\n    typePojoToMixed: 'typePojoToMixed' in baseOptions ? baseOptions.typePojoToMixed : true\r\n  }, utils.clone(options));\r\n\r\n  if (options.read) {\r\n    options.read = readPref(options.read);\r\n  }\r\n\r\n  if (options.optimisticConcurrency && !options.versionKey) {\r\n    throw new MongooseError('Must set `versionKey` if using `optimisticConcurrency`');\r\n  }\r\n\r\n  return options;\r\n};\r\n\r\n/**\r\n * Adds key path / schema type pairs to this schema.\r\n *\r\n * ####Example:\r\n *\r\n *     const ToySchema = new Schema();\r\n *     ToySchema.add({ name: 'string', color: 'string', price: 'number' });\r\n *\r\n *     const TurboManSchema = new Schema();\r\n *     // You can also `add()` another schema and copy over all paths, virtuals,\r\n *     // getters, setters, indexes, methods, and statics.\r\n *     TurboManSchema.add(ToySchema).add({ year: Number });\r\n *\r\n * @param {Object|Schema} obj plain object with paths to add, or another schema\r\n * @param {String} [prefix] path to prefix the newly added paths with\r\n * @return {Schema} the Schema instance\r\n * @api public\r\n */\r\n\r\nSchema.prototype.add = function add(obj, prefix) {\r\n  if (obj instanceof Schema) {\r\n    merge(this, obj);\r\n    return this;\r\n  }\r\n\r\n  // Special case: setting top-level `_id` to false should convert to disabling\r\n  // the `_id` option. This behavior never worked before 5.4.11 but numerous\r\n  // codebases use it (see gh-7516, gh-7512).\r\n  if (obj._id === false && prefix == null) {\r\n    this.options._id = false;\r\n  }\r\n\r\n  prefix = prefix || '';\r\n  const keys = Object.keys(obj);\r\n\r\n  for (const key of keys) {\r\n    const fullPath = prefix + key;\r\n\r\n    if (obj[key] == null) {\r\n      throw new TypeError('Invalid value for schema path `' + fullPath +\r\n        '`, got value \"' + obj[key] + '\"');\r\n    }\r\n    // Retain `_id: false` but don't set it as a path, re: gh-8274.\r\n    if (key === '_id' && obj[key] === false) {\r\n      continue;\r\n    }\r\n    if (obj[key] instanceof VirtualType) {\r\n      this.virtual(obj[key]);\r\n      continue;\r\n    }\r\n\r\n    if (Array.isArray(obj[key]) && obj[key].length === 1 && obj[key][0] == null) {\r\n      throw new TypeError('Invalid value for schema Array path `' + fullPath +\r\n        '`, got value \"' + obj[key][0] + '\"');\r\n    }\r\n\r\n    if (!(utils.isPOJO(obj[key]) || obj[key] instanceof SchemaTypeOptions)) {\r\n      // Special-case: Non-options definitely a path so leaf at this node\r\n      // Examples: Schema instances, SchemaType instances\r\n      if (prefix) {\r\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\r\n      }\r\n      this.path(prefix + key, obj[key]);\r\n    } else if (Object.keys(obj[key]).length < 1) {\r\n      // Special-case: {} always interpreted as Mixed path so leaf at this node\r\n      if (prefix) {\r\n        this.nested[prefix.substr(0, prefix.length - 1)] = true;\r\n      }\r\n      this.path(fullPath, obj[key]); // mixed type\r\n    } else if (!obj[key][this.options.typeKey] || (this.options.typeKey === 'type' && obj[key].type.type)) {\r\n      // Special-case: POJO with no bona-fide type key - interpret as tree of deep paths so recurse\r\n      // nested object { last: { name: String }}\r\n      this.nested[fullPath] = true;\r\n      this.add(obj[key], fullPath + '.');\r\n    } else {\r\n      // There IS a bona-fide type key that may also be a POJO\r\n      if (!this.options.typePojoToMixed && utils.isPOJO(obj[key][this.options.typeKey])) {\r\n        // If a POJO is the value of a type key, make it a subdocument\r\n        if (prefix) {\r\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\r\n        }\r\n        // Propage `typePojoToMixed` to implicitly created schemas\r\n        const opts = { typePojoToMixed: false };\r\n        const _schema = new Schema(obj[key][this.options.typeKey], opts);\r\n        const schemaWrappedPath = Object.assign({}, obj[key], { [this.options.typeKey]: _schema });\r\n        this.path(prefix + key, schemaWrappedPath);\r\n      } else {\r\n        // Either the type is non-POJO or we interpret it as Mixed anyway\r\n        if (prefix) {\r\n          this.nested[prefix.substr(0, prefix.length - 1)] = true;\r\n        }\r\n        this.path(prefix + key, obj[key]);\r\n      }\r\n    }\r\n  }\r\n\r\n  const addedKeys = Object.keys(obj).\r\n    map(key => prefix ? prefix + key : key);\r\n  aliasFields(this, addedKeys);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Reserved document keys.\r\n *\r\n * Keys in this object are names that are rejected in schema declarations\r\n * because they conflict with Mongoose functionality. If you create a schema\r\n * using `new Schema()` with one of these property names, Mongoose will throw\r\n * an error.\r\n *\r\n * - _posts\r\n * - _pres\r\n * - collection\r\n * - emit\r\n * - errors\r\n * - get\r\n * - init\r\n * - isModified\r\n * - isNew\r\n * - listeners\r\n * - modelName\r\n * - on\r\n * - once\r\n * - populated\r\n * - prototype\r\n * - remove\r\n * - removeListener\r\n * - save\r\n * - schema\r\n * - toObject\r\n * - validate\r\n *\r\n * _NOTE:_ Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.\r\n *\r\n *      var schema = new Schema(..);\r\n *      schema.methods.init = function () {} // potentially breaking\r\n */\r\n\r\nSchema.reserved = Object.create(null);\r\nSchema.prototype.reserved = Schema.reserved;\r\nconst reserved = Schema.reserved;\r\n// Core object\r\nreserved['prototype'] =\r\n// EventEmitter\r\nreserved.emit =\r\nreserved.listeners =\r\nreserved.on =\r\nreserved.removeListener =\r\n// document properties and functions\r\nreserved.collection =\r\nreserved.errors =\r\nreserved.get =\r\nreserved.init =\r\nreserved.isModified =\r\nreserved.isNew =\r\nreserved.populated =\r\nreserved.remove =\r\nreserved.save =\r\nreserved.schema =\r\nreserved.toObject =\r\nreserved.validate = 1;\r\n\r\n/*!\r\n * Document keys to print warnings for\r\n */\r\n\r\nconst warnings = {};\r\nwarnings.increment = '`increment` should not be used as a schema path name ' +\r\n    'unless you have disabled versioning.';\r\n\r\n/**\r\n * Gets/sets schema paths.\r\n *\r\n * Sets a path (if arity 2)\r\n * Gets a path (if arity 1)\r\n *\r\n * ####Example\r\n *\r\n *     schema.path('name') // returns a SchemaType\r\n *     schema.path('name', Number) // changes the schemaType of `name` to Number\r\n *\r\n * @param {String} path\r\n * @param {Object} constructor\r\n * @api public\r\n */\r\n\r\nSchema.prototype.path = function(path, obj) {\r\n  // Convert to '.$' to check subpaths re: gh-6405\r\n  const cleanPath = _pathToPositionalSyntax(path);\r\n  if (obj === undefined) {\r\n    let schematype = _getPath(this, path, cleanPath);\r\n    if (schematype != null) {\r\n      return schematype;\r\n    }\r\n\r\n    // Look for maps\r\n    const mapPath = getMapPath(this, path);\r\n    if (mapPath != null) {\r\n      return mapPath;\r\n    }\r\n\r\n    // Look if a parent of this path is mixed\r\n    schematype = this.hasMixedParent(cleanPath);\r\n    if (schematype != null) {\r\n      return schematype;\r\n    }\r\n\r\n    // subpaths?\r\n    return /\\.\\d+\\.?.*$/.test(path)\r\n      ? getPositionalPath(this, path)\r\n      : undefined;\r\n  }\r\n\r\n  // some path names conflict with document methods\r\n  const firstPieceOfPath = path.split('.')[0];\r\n  if (reserved[firstPieceOfPath]) {\r\n    throw new Error('`' + firstPieceOfPath + '` may not be used as a schema pathname');\r\n  }\r\n\r\n  if (warnings[path]) {\r\n    console.log('WARN: ' + warnings[path]);\r\n  }\r\n\r\n  if (typeof obj === 'object' && utils.hasUserDefinedProperty(obj, 'ref')) {\r\n    validateRef(obj.ref, path);\r\n  }\r\n\r\n  // update the tree\r\n  const subpaths = path.split(/\\./);\r\n  const last = subpaths.pop();\r\n  let branch = this.tree;\r\n  let fullPath = '';\r\n\r\n  for (const sub of subpaths) {\r\n    fullPath = fullPath += (fullPath.length > 0 ? '.' : '') + sub;\r\n    if (!branch[sub]) {\r\n      this.nested[fullPath] = true;\r\n      branch[sub] = {};\r\n    }\r\n    if (typeof branch[sub] !== 'object') {\r\n      const msg = 'Cannot set nested path `' + path + '`. '\r\n          + 'Parent path `'\r\n          + fullPath\r\n          + '` already set to type ' + branch[sub].name\r\n          + '.';\r\n      throw new Error(msg);\r\n    }\r\n    branch = branch[sub];\r\n  }\r\n\r\n  branch[last] = utils.clone(obj);\r\n\r\n  this.paths[path] = this.interpretAsType(path, obj, this.options);\r\n  const schemaType = this.paths[path];\r\n\r\n  if (schemaType.$isSchemaMap) {\r\n    // Maps can have arbitrary keys, so `$*` is internal shorthand for \"any key\"\r\n    // The '$' is to imply this path should never be stored in MongoDB so we\r\n    // can easily build a regexp out of this path, and '*' to imply \"any key.\"\r\n    const mapPath = path + '.$*';\r\n    let _mapType = { type: {} };\r\n    if (utils.hasUserDefinedProperty(obj, 'of')) {\r\n      const isInlineSchema = utils.isPOJO(obj.of) &&\r\n        Object.keys(obj.of).length > 0 &&\r\n        !utils.hasUserDefinedProperty(obj.of, this.options.typeKey);\r\n      _mapType = isInlineSchema ? new Schema(obj.of) : obj.of;\r\n    }\r\n    this.paths[mapPath] = this.interpretAsType(mapPath,\r\n      _mapType, this.options);\r\n    schemaType.$__schemaType = this.paths[mapPath];\r\n  }\r\n\r\n  if (schemaType.$isSingleNested) {\r\n    for (const key in schemaType.schema.paths) {\r\n      this.singleNestedPaths[path + '.' + key] = schemaType.schema.paths[key];\r\n    }\r\n    for (const key in schemaType.schema.singleNestedPaths) {\r\n      this.singleNestedPaths[path + '.' + key] =\r\n        schemaType.schema.singleNestedPaths[key];\r\n    }\r\n    for (const key in schemaType.schema.subpaths) {\r\n      this.singleNestedPaths[path + '.' + key] =\r\n        schemaType.schema.subpaths[key];\r\n    }\r\n\r\n    Object.defineProperty(schemaType.schema, 'base', {\r\n      configurable: true,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: this.base\r\n    });\r\n\r\n    schemaType.caster.base = this.base;\r\n    this.childSchemas.push({\r\n      schema: schemaType.schema,\r\n      model: schemaType.caster\r\n    });\r\n  } else if (schemaType.$isMongooseDocumentArray) {\r\n    Object.defineProperty(schemaType.schema, 'base', {\r\n      configurable: true,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: this.base\r\n    });\r\n\r\n    schemaType.casterConstructor.base = this.base;\r\n    this.childSchemas.push({\r\n      schema: schemaType.schema,\r\n      model: schemaType.casterConstructor\r\n    });\r\n  }\r\n\r\n  if (schemaType.$isMongooseArray && schemaType.caster instanceof SchemaType) {\r\n    let arrayPath = path;\r\n    let _schemaType = schemaType;\r\n\r\n    const toAdd = [];\r\n    while (_schemaType.$isMongooseArray) {\r\n      arrayPath = arrayPath + '.$';\r\n\r\n      // Skip arrays of document arrays\r\n      if (_schemaType.$isMongooseDocumentArray) {\r\n        _schemaType.$embeddedSchemaType._arrayPath = arrayPath;\r\n        _schemaType = _schemaType.$embeddedSchemaType.clone();\r\n      } else {\r\n        _schemaType.caster._arrayPath = arrayPath;\r\n        _schemaType = _schemaType.caster.clone();\r\n      }\r\n\r\n      _schemaType.path = arrayPath;\r\n      toAdd.push(_schemaType);\r\n    }\r\n\r\n    for (const _schemaType of toAdd) {\r\n      this.subpaths[_schemaType.path] = _schemaType;\r\n    }\r\n  }\r\n\r\n  if (schemaType.$isMongooseDocumentArray) {\r\n    for (const key of Object.keys(schemaType.schema.paths)) {\r\n      this.subpaths[path + '.' + key] = schemaType.schema.paths[key];\r\n      schemaType.schema.paths[key].$isUnderneathDocArray = true;\r\n    }\r\n    for (const key of Object.keys(schemaType.schema.subpaths)) {\r\n      this.subpaths[path + '.' + key] = schemaType.schema.subpaths[key];\r\n      schemaType.schema.subpaths[key].$isUnderneathDocArray = true;\r\n    }\r\n    for (const key of Object.keys(schemaType.schema.singleNestedPaths)) {\r\n      this.subpaths[path + '.' + key] = schemaType.schema.singleNestedPaths[key];\r\n      schemaType.schema.singleNestedPaths[key].$isUnderneathDocArray = true;\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction gatherChildSchemas(schema) {\r\n  const childSchemas = [];\r\n\r\n  for (const path of Object.keys(schema.paths)) {\r\n    const schematype = schema.paths[path];\r\n    if (schematype.$isMongooseDocumentArray || schematype.$isSingleNested) {\r\n      childSchemas.push({ schema: schematype.schema, model: schematype.caster });\r\n    }\r\n  }\r\n\r\n  return childSchemas;\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _getPath(schema, path, cleanPath) {\r\n  if (schema.paths.hasOwnProperty(path)) {\r\n    return schema.paths[path];\r\n  }\r\n  if (schema.subpaths.hasOwnProperty(cleanPath)) {\r\n    return schema.subpaths[cleanPath];\r\n  }\r\n  if (schema.singleNestedPaths.hasOwnProperty(cleanPath)) {\r\n    return schema.singleNestedPaths[cleanPath];\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _pathToPositionalSyntax(path) {\r\n  if (!/\\.\\d+/.test(path)) {\r\n    return path;\r\n  }\r\n  return path.replace(/\\.\\d+\\./g, '.$.').replace(/\\.\\d+$/, '.$');\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction getMapPath(schema, path) {\r\n  for (const _path of Object.keys(schema.paths)) {\r\n    if (!_path.includes('.$*')) {\r\n      continue;\r\n    }\r\n    const re = new RegExp('^' + _path.replace(/\\.\\$\\*/g, '\\\\.[^.]+') + '$');\r\n    if (re.test(path)) {\r\n      return schema.paths[_path];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * The Mongoose instance this schema is associated with\r\n *\r\n * @property base\r\n * @api private\r\n */\r\n\r\nObject.defineProperty(Schema.prototype, 'base', {\r\n  configurable: true,\r\n  enumerable: false,\r\n  writable: true,\r\n  value: null\r\n});\r\n\r\n/**\r\n * Converts type arguments into Mongoose Types.\r\n *\r\n * @param {String} path\r\n * @param {Object} obj constructor\r\n * @api private\r\n */\r\n\r\nSchema.prototype.interpretAsType = function(path, obj, options) {\r\n  if (obj instanceof SchemaType) {\r\n    return obj;\r\n  }\r\n\r\n  // If this schema has an associated Mongoose object, use the Mongoose object's\r\n  // copy of SchemaTypes re: gh-7158 gh-6933\r\n  const MongooseTypes = this.base != null ? this.base.Schema.Types : Schema.Types;\r\n\r\n  if (!utils.isPOJO(obj) && !(obj instanceof SchemaTypeOptions)) {\r\n    const constructorName = utils.getFunctionName(obj.constructor);\r\n    if (constructorName !== 'Object') {\r\n      const oldObj = obj;\r\n      obj = {};\r\n      obj[options.typeKey] = oldObj;\r\n    }\r\n  }\r\n\r\n  // Get the type making sure to allow keys named \"type\"\r\n  // and default to mixed if not specified.\r\n  // { type: { type: String, default: 'freshcut' } }\r\n  let type = obj[options.typeKey] && (options.typeKey !== 'type' || !obj.type.type)\r\n    ? obj[options.typeKey]\r\n    : {};\r\n  let name;\r\n\r\n  if (utils.isPOJO(type) || type === 'mixed') {\r\n    return new MongooseTypes.Mixed(path, obj);\r\n  }\r\n\r\n  if (Array.isArray(type) || type === Array || type === 'array' || type === MongooseTypes.Array) {\r\n    // if it was specified through { type } look for `cast`\r\n    let cast = (type === Array || type === 'array')\r\n      ? obj.cast\r\n      : type[0];\r\n\r\n    if (cast && cast.instanceOfSchema) {\r\n      return new MongooseTypes.DocumentArray(path, cast, obj);\r\n    }\r\n    if (cast &&\r\n        cast[options.typeKey] &&\r\n        cast[options.typeKey].instanceOfSchema) {\r\n      return new MongooseTypes.DocumentArray(path, cast[options.typeKey], obj, cast);\r\n    }\r\n\r\n    if (Array.isArray(cast)) {\r\n      return new MongooseTypes.Array(path, this.interpretAsType(path, cast, options), obj);\r\n    }\r\n\r\n    if (typeof cast === 'string') {\r\n      cast = MongooseTypes[cast.charAt(0).toUpperCase() + cast.substring(1)];\r\n    } else if (cast && (!cast[options.typeKey] || (options.typeKey === 'type' && cast.type.type))\r\n        && utils.isPOJO(cast)) {\r\n      if (Object.keys(cast).length) {\r\n        // The `minimize` and `typeKey` options propagate to child schemas\r\n        // declared inline, like `{ arr: [{ val: { $type: String } }] }`.\r\n        // See gh-3560\r\n        const childSchemaOptions = { minimize: options.minimize };\r\n        if (options.typeKey) {\r\n          childSchemaOptions.typeKey = options.typeKey;\r\n        }\r\n        // propagate 'strict' option to child schema\r\n        if (options.hasOwnProperty('strict')) {\r\n          childSchemaOptions.strict = options.strict;\r\n        }\r\n        if (options.hasOwnProperty('typePojoToMixed')) {\r\n          childSchemaOptions.typePojoToMixed = options.typePojoToMixed;\r\n        }\r\n\r\n        if (this._userProvidedOptions.hasOwnProperty('_id')) {\r\n          childSchemaOptions._id = this._userProvidedOptions._id;\r\n        } else if (Schema.Types.DocumentArray.defaultOptions &&\r\n            Schema.Types.DocumentArray.defaultOptions._id != null) {\r\n          childSchemaOptions._id = Schema.Types.DocumentArray.defaultOptions._id;\r\n        }\r\n\r\n        const childSchema = new Schema(cast, childSchemaOptions);\r\n        childSchema.$implicitlyCreated = true;\r\n        return new MongooseTypes.DocumentArray(path, childSchema, obj);\r\n      } else {\r\n        // Special case: empty object becomes mixed\r\n        return new MongooseTypes.Array(path, MongooseTypes.Mixed, obj);\r\n      }\r\n    }\r\n\r\n    if (cast) {\r\n      type = cast[options.typeKey] && (options.typeKey !== 'type' || !cast.type.type)\r\n        ? cast[options.typeKey]\r\n        : cast;\r\n\r\n      name = typeof type === 'string'\r\n        ? type\r\n        : type.schemaName || utils.getFunctionName(type);\r\n\r\n      if (!MongooseTypes.hasOwnProperty(name)) {\r\n        throw new TypeError('Invalid schema configuration: ' +\r\n          `\\`${name}\\` is not a valid type within the array \\`${path}\\`.` +\r\n          'See http://bit.ly/mongoose-schematypes for a list of valid schema types.');\r\n      }\r\n    }\r\n\r\n    return new MongooseTypes.Array(path, cast || MongooseTypes.Mixed, obj, options);\r\n  }\r\n\r\n  if (type && type.instanceOfSchema) {\r\n    return new MongooseTypes.Embedded(type, path, obj);\r\n  }\r\n\r\n  if (Buffer.isBuffer(type)) {\r\n    name = 'Buffer';\r\n  } else if (typeof type === 'function' || typeof type === 'object') {\r\n    name = type.schemaName || utils.getFunctionName(type);\r\n  } else {\r\n    name = type == null ? '' + type : type.toString();\r\n  }\r\n\r\n  if (name) {\r\n    name = name.charAt(0).toUpperCase() + name.substring(1);\r\n  }\r\n  // Special case re: gh-7049 because the bson `ObjectID` class' capitalization\r\n  // doesn't line up with Mongoose's.\r\n  if (name === 'ObjectID') {\r\n    name = 'ObjectId';\r\n  }\r\n\r\n  if (MongooseTypes[name] == null) {\r\n    throw new TypeError(`Invalid schema configuration: \\`${name}\\` is not ` +\r\n      `a valid type at path \\`${path}\\`. See ` +\r\n      'http://bit.ly/mongoose-schematypes for a list of valid schema types.');\r\n  }\r\n\r\n  return new MongooseTypes[name](path, obj);\r\n};\r\n\r\n/**\r\n * Iterates the schemas paths similar to Array#forEach.\r\n *\r\n * The callback is passed the pathname and the schemaType instance.\r\n *\r\n * ####Example:\r\n *\r\n *     const userSchema = new Schema({ name: String, registeredAt: Date });\r\n *     userSchema.eachPath((pathname, schematype) => {\r\n *       // Prints twice:\r\n *       // name SchemaString { ... }\r\n *       // registeredAt SchemaDate { ... }\r\n *       console.log(pathname, schematype);\r\n *     });\r\n *\r\n * @param {Function} fn callback function\r\n * @return {Schema} this\r\n * @api public\r\n */\r\n\r\nSchema.prototype.eachPath = function(fn) {\r\n  const keys = Object.keys(this.paths);\r\n  const len = keys.length;\r\n\r\n  for (let i = 0; i < len; ++i) {\r\n    fn(keys[i], this.paths[keys[i]]);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns an Array of path strings that are required by this schema.\r\n *\r\n * ####Example:\r\n *     const s = new Schema({\r\n *       name: { type: String, required: true },\r\n *       age: { type: String, required: true },\r\n *       notes: String\r\n *     });\r\n *     s.requiredPaths(); // [ 'age', 'name' ]\r\n *\r\n * @api public\r\n * @param {Boolean} invalidate refresh the cache\r\n * @return {Array}\r\n */\r\n\r\nSchema.prototype.requiredPaths = function requiredPaths(invalidate) {\r\n  if (this._requiredpaths && !invalidate) {\r\n    return this._requiredpaths;\r\n  }\r\n\r\n  const paths = Object.keys(this.paths);\r\n  let i = paths.length;\r\n  const ret = [];\r\n\r\n  while (i--) {\r\n    const path = paths[i];\r\n    if (this.paths[path].isRequired) {\r\n      ret.push(path);\r\n    }\r\n  }\r\n  this._requiredpaths = ret;\r\n  return this._requiredpaths;\r\n};\r\n\r\n/**\r\n * Returns indexes from fields and schema-level indexes (cached).\r\n *\r\n * @api private\r\n * @return {Array}\r\n */\r\n\r\nSchema.prototype.indexedPaths = function indexedPaths() {\r\n  if (this._indexedpaths) {\r\n    return this._indexedpaths;\r\n  }\r\n  this._indexedpaths = this.indexes();\r\n  return this._indexedpaths;\r\n};\r\n\r\n/**\r\n * Returns the pathType of `path` for this schema.\r\n *\r\n * Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.\r\n *\r\n * ####Example:\r\n *     const s = new Schema({ name: String, nested: { foo: String } });\r\n *     s.virtual('foo').get(() => 42);\r\n *     s.pathType('name'); // \"real\"\r\n *     s.pathType('nested'); // \"nested\"\r\n *     s.pathType('foo'); // \"virtual\"\r\n *     s.pathType('fail'); // \"adhocOrUndefined\"\r\n *\r\n * @param {String} path\r\n * @return {String}\r\n * @api public\r\n */\r\n\r\nSchema.prototype.pathType = function(path) {\r\n  // Convert to '.$' to check subpaths re: gh-6405\r\n  const cleanPath = _pathToPositionalSyntax(path);\r\n\r\n  if (this.paths.hasOwnProperty(path)) {\r\n    return 'real';\r\n  }\r\n  if (this.virtuals.hasOwnProperty(path)) {\r\n    return 'virtual';\r\n  }\r\n  if (this.nested.hasOwnProperty(path)) {\r\n    return 'nested';\r\n  }\r\n  if (this.subpaths.hasOwnProperty(cleanPath) || this.subpaths.hasOwnProperty(path)) {\r\n    return 'real';\r\n  }\r\n  if (this.singleNestedPaths.hasOwnProperty(cleanPath) || this.singleNestedPaths.hasOwnProperty(path)) {\r\n    return 'real';\r\n  }\r\n\r\n  // Look for maps\r\n  const mapPath = getMapPath(this, path);\r\n  if (mapPath != null) {\r\n    return 'real';\r\n  }\r\n\r\n  if (/\\.\\d+\\.|\\.\\d+$/.test(path)) {\r\n    return getPositionalPathType(this, path);\r\n  }\r\n  return 'adhocOrUndefined';\r\n};\r\n\r\n/**\r\n * Returns true iff this path is a child of a mixed schema.\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api private\r\n */\r\n\r\nSchema.prototype.hasMixedParent = function(path) {\r\n  const subpaths = path.split(/\\./g);\r\n  path = '';\r\n  for (let i = 0; i < subpaths.length; ++i) {\r\n    path = i > 0 ? path + '.' + subpaths[i] : subpaths[i];\r\n    if (path in this.paths &&\r\n        this.paths[path] instanceof MongooseTypes.Mixed) {\r\n      return this.paths[path];\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Setup updatedAt and createdAt timestamps to documents if enabled\r\n *\r\n * @param {Boolean|Object} timestamps timestamps options\r\n * @api private\r\n */\r\nSchema.prototype.setupTimestamp = function(timestamps) {\r\n  const childHasTimestamp = this.childSchemas.find(withTimestamp);\r\n\r\n  function withTimestamp(s) {\r\n    const ts = s.schema.options.timestamps;\r\n    return !!ts;\r\n  }\r\n\r\n  if (!timestamps && !childHasTimestamp) {\r\n    return;\r\n  }\r\n\r\n  const createdAt = handleTimestampOption(timestamps, 'createdAt');\r\n  const updatedAt = handleTimestampOption(timestamps, 'updatedAt');\r\n  const currentTime = timestamps != null && timestamps.hasOwnProperty('currentTime') ?\r\n    timestamps.currentTime :\r\n    null;\r\n  const schemaAdditions = {};\r\n\r\n  this.$timestamps = { createdAt: createdAt, updatedAt: updatedAt };\r\n\r\n  if (updatedAt && !this.paths[updatedAt]) {\r\n    schemaAdditions[updatedAt] = Date;\r\n  }\r\n\r\n  if (createdAt && !this.paths[createdAt]) {\r\n    schemaAdditions[createdAt] = Date;\r\n  }\r\n\r\n  this.add(schemaAdditions);\r\n\r\n  this.pre('save', function(next) {\r\n    const timestampOption = get(this, '$__.saveOptions.timestamps');\r\n    if (timestampOption === false) {\r\n      return next();\r\n    }\r\n\r\n    const skipUpdatedAt = timestampOption != null && timestampOption.updatedAt === false;\r\n    const skipCreatedAt = timestampOption != null && timestampOption.createdAt === false;\r\n\r\n    const defaultTimestamp = currentTime != null ?\r\n      currentTime() :\r\n      (this.ownerDocument ? this.ownerDocument() : this).constructor.base.now();\r\n    const auto_id = this._id && this._id.auto;\r\n\r\n    if (!skipCreatedAt && createdAt && !this.get(createdAt) && this.isSelected(createdAt)) {\r\n      this.set(createdAt, auto_id ? this._id.getTimestamp() : defaultTimestamp);\r\n    }\r\n\r\n    if (!skipUpdatedAt && updatedAt && (this.isNew || this.isModified())) {\r\n      let ts = defaultTimestamp;\r\n      if (this.isNew) {\r\n        if (createdAt != null) {\r\n          ts = this.$__getValue(createdAt);\r\n        } else if (auto_id) {\r\n          ts = this._id.getTimestamp();\r\n        }\r\n      }\r\n      this.set(updatedAt, ts);\r\n    }\r\n\r\n    next();\r\n  });\r\n\r\n  this.methods.initializeTimestamps = function() {\r\n    const ts = currentTime != null ?\r\n      currentTime() :\r\n      this.constructor.base.now();\r\n    if (createdAt && !this.get(createdAt)) {\r\n      this.set(createdAt, ts);\r\n    }\r\n    if (updatedAt && !this.get(updatedAt)) {\r\n      this.set(updatedAt, ts);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  _setTimestampsOnUpdate[symbols.builtInMiddleware] = true;\r\n\r\n  const opts = { query: true, model: false };\r\n  this.pre('findOneAndUpdate', opts, _setTimestampsOnUpdate);\r\n  this.pre('replaceOne', opts, _setTimestampsOnUpdate);\r\n  this.pre('update', opts, _setTimestampsOnUpdate);\r\n  this.pre('updateOne', opts, _setTimestampsOnUpdate);\r\n  this.pre('updateMany', opts, _setTimestampsOnUpdate);\r\n\r\n  function _setTimestampsOnUpdate(next) {\r\n    const now = currentTime != null ?\r\n      currentTime() :\r\n      this.model.base.now();\r\n    applyTimestampsToUpdate(now, createdAt, updatedAt, this.getUpdate(),\r\n      this.options, this.schema);\r\n    applyTimestampsToChildren(now, this.getUpdate(), this.model.schema);\r\n    next();\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore. Deprecated re: #6405\r\n */\r\n\r\nfunction getPositionalPathType(self, path) {\r\n  const subpaths = path.split(/\\.(\\d+)\\.|\\.(\\d+)$/).filter(Boolean);\r\n  if (subpaths.length < 2) {\r\n    return self.paths.hasOwnProperty(subpaths[0]) ?\r\n      self.paths[subpaths[0]] :\r\n      'adhocOrUndefined';\r\n  }\r\n\r\n  let val = self.path(subpaths[0]);\r\n  let isNested = false;\r\n  if (!val) {\r\n    return 'adhocOrUndefined';\r\n  }\r\n\r\n  const last = subpaths.length - 1;\r\n\r\n  for (let i = 1; i < subpaths.length; ++i) {\r\n    isNested = false;\r\n    const subpath = subpaths[i];\r\n\r\n    if (i === last && val && !/\\D/.test(subpath)) {\r\n      if (val.$isMongooseDocumentArray) {\r\n        val = val.$embeddedSchemaType;\r\n      } else if (val instanceof MongooseTypes.Array) {\r\n        // StringSchema, NumberSchema, etc\r\n        val = val.caster;\r\n      } else {\r\n        val = undefined;\r\n      }\r\n      break;\r\n    }\r\n\r\n    // ignore if its just a position segment: path.0.subpath\r\n    if (!/\\D/.test(subpath)) {\r\n      // Nested array\r\n      if (val instanceof MongooseTypes.Array && i !== last) {\r\n        val = val.caster;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    if (!(val && val.schema)) {\r\n      val = undefined;\r\n      break;\r\n    }\r\n\r\n    const type = val.schema.pathType(subpath);\r\n    isNested = (type === 'nested');\r\n    val = val.schema.path(subpath);\r\n  }\r\n\r\n  self.subpaths[path] = val;\r\n  if (val) {\r\n    return 'real';\r\n  }\r\n  if (isNested) {\r\n    return 'nested';\r\n  }\r\n  return 'adhocOrUndefined';\r\n}\r\n\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction getPositionalPath(self, path) {\r\n  getPositionalPathType(self, path);\r\n  return self.subpaths[path];\r\n}\r\n\r\n/**\r\n * Adds a method call to the queue.\r\n *\r\n * ####Example:\r\n *\r\n *     schema.methods.print = function() { console.log(this); };\r\n *     schema.queue('print', []); // Print the doc every one is instantiated\r\n *\r\n *     const Model = mongoose.model('Test', schema);\r\n *     new Model({ name: 'test' }); // Prints '{\"_id\": ..., \"name\": \"test\" }'\r\n *\r\n * @param {String} name name of the document method to call later\r\n * @param {Array} args arguments to pass to the method\r\n * @api public\r\n */\r\n\r\nSchema.prototype.queue = function(name, args) {\r\n  this.callQueue.push([name, args]);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Defines a pre hook for the document.\r\n *\r\n * ####Example\r\n *\r\n *     var toySchema = new Schema({ name: String, created: Date });\r\n *\r\n *     toySchema.pre('save', function(next) {\r\n *       if (!this.created) this.created = new Date;\r\n *       next();\r\n *     });\r\n *\r\n *     toySchema.pre('validate', function(next) {\r\n *       if (this.name !== 'Woody') this.name = 'Woody';\r\n *       next();\r\n *     });\r\n *\r\n *     // Equivalent to calling `pre()` on `find`, `findOne`, `findOneAndUpdate`.\r\n *     toySchema.pre(/^find/, function(next) {\r\n *       console.log(this.getFilter());\r\n *     });\r\n *\r\n *     // Equivalent to calling `pre()` on `updateOne`, `findOneAndUpdate`.\r\n *     toySchema.pre(['updateOne', 'findOneAndUpdate'], function(next) {\r\n *       console.log(this.getFilter());\r\n *     });\r\n *\r\n *     toySchema.pre('deleteOne', function() {\r\n *       // Runs when you call `Toy.deleteOne()`\r\n *     });\r\n *\r\n *     toySchema.pre('deleteOne', { document: true }, function() {\r\n *       // Runs when you call `doc.deleteOne()`\r\n *     });\r\n *\r\n * @param {String|RegExp} The method name or regular expression to match method name\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware. For example, set `options.document` to `true` to apply this hook to `Document#deleteOne()` rather than `Query#deleteOne()`.\r\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\r\n * @param {Function} callback\r\n * @api public\r\n */\r\n\r\nSchema.prototype.pre = function(name) {\r\n  if (name instanceof RegExp) {\r\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\r\n    for (const fn of hookNames) {\r\n      if (name.test(fn)) {\r\n        this.pre.apply(this, [fn].concat(remainingArgs));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  if (Array.isArray(name)) {\r\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\r\n    for (const el of name) {\r\n      this.pre.apply(this, [el].concat(remainingArgs));\r\n    }\r\n    return this;\r\n  }\r\n  this.s.hooks.pre.apply(this.s.hooks, arguments);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Defines a post hook for the document\r\n *\r\n *     var schema = new Schema(..);\r\n *     schema.post('save', function (doc) {\r\n *       console.log('this fired after a document was saved');\r\n *     });\r\n *\r\n *     schema.post('find', function(docs) {\r\n *       console.log('this fired after you ran a find query');\r\n *     });\r\n *\r\n *     schema.post(/Many$/, function(res) {\r\n *       console.log('this fired after you ran `updateMany()` or `deleteMany()`);\r\n *     });\r\n *\r\n *     var Model = mongoose.model('Model', schema);\r\n *\r\n *     var m = new Model(..);\r\n *     m.save(function(err) {\r\n *       console.log('this fires after the `post` hook');\r\n *     });\r\n *\r\n *     m.find(function(err, docs) {\r\n *       console.log('this fires after the post find hook');\r\n *     });\r\n *\r\n * @param {String|RegExp} The method name or regular expression to match method name\r\n * @param {Object} [options]\r\n * @param {Boolean} [options.document] If `name` is a hook for both document and query middleware, set to `true` to run on document middleware.\r\n * @param {Boolean} [options.query] If `name` is a hook for both document and query middleware, set to `true` to run on query middleware.\r\n * @param {Function} fn callback\r\n * @see middleware http://mongoosejs.com/docs/middleware.html\r\n * @see kareem http://npmjs.org/package/kareem\r\n * @api public\r\n */\r\n\r\nSchema.prototype.post = function(name) {\r\n  if (name instanceof RegExp) {\r\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\r\n    for (const fn of hookNames) {\r\n      if (name.test(fn)) {\r\n        this.post.apply(this, [fn].concat(remainingArgs));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  if (Array.isArray(name)) {\r\n    const remainingArgs = Array.prototype.slice.call(arguments, 1);\r\n    for (const el of name) {\r\n      this.post.apply(this, [el].concat(remainingArgs));\r\n    }\r\n    return this;\r\n  }\r\n  this.s.hooks.post.apply(this.s.hooks, arguments);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Registers a plugin for this schema.\r\n *\r\n * ####Example:\r\n *\r\n *     const s = new Schema({ name: String });\r\n *     s.plugin(schema => console.log(schema.path('name').path));\r\n *     mongoose.model('Test', s); // Prints 'name'\r\n *\r\n * @param {Function} plugin callback\r\n * @param {Object} [opts]\r\n * @see plugins\r\n * @api public\r\n */\r\n\r\nSchema.prototype.plugin = function(fn, opts) {\r\n  if (typeof fn !== 'function') {\r\n    throw new Error('First param to `schema.plugin()` must be a function, ' +\r\n      'got \"' + (typeof fn) + '\"');\r\n  }\r\n\r\n  if (opts && opts.deduplicate) {\r\n    for (const plugin of this.plugins) {\r\n      if (plugin.fn === fn) {\r\n        return this;\r\n      }\r\n    }\r\n  }\r\n  this.plugins.push({ fn: fn, opts: opts });\r\n\r\n  fn(this, opts);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an instance method to documents constructed from Models compiled from this schema.\r\n *\r\n * ####Example\r\n *\r\n *     var schema = kittySchema = new Schema(..);\r\n *\r\n *     schema.method('meow', function () {\r\n *       console.log('meeeeeoooooooooooow');\r\n *     })\r\n *\r\n *     var Kitty = mongoose.model('Kitty', schema);\r\n *\r\n *     var fizz = new Kitty;\r\n *     fizz.meow(); // meeeeeooooooooooooow\r\n *\r\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.\r\n *\r\n *     schema.method({\r\n *         purr: function () {}\r\n *       , scratch: function () {}\r\n *     });\r\n *\r\n *     // later\r\n *     fizz.purr();\r\n *     fizz.scratch();\r\n *\r\n * NOTE: `Schema.method()` adds instance methods to the `Schema.methods` object. You can also add instance methods directly to the `Schema.methods` object as seen in the [guide](./guide.html#methods)\r\n *\r\n * @param {String|Object} method name\r\n * @param {Function} [fn]\r\n * @api public\r\n */\r\n\r\nSchema.prototype.method = function(name, fn, options) {\r\n  if (typeof name !== 'string') {\r\n    for (const i in name) {\r\n      this.methods[i] = name[i];\r\n      this.methodOptions[i] = utils.clone(options);\r\n    }\r\n  } else {\r\n    this.methods[name] = fn;\r\n    this.methodOptions[name] = utils.clone(options);\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds static \"class\" methods to Models compiled from this schema.\r\n *\r\n * ####Example\r\n *\r\n *     const schema = new Schema(..);\r\n *     // Equivalent to `schema.statics.findByName = function(name) {}`;\r\n *     schema.static('findByName', function(name) {\r\n *       return this.find({ name: name });\r\n *     });\r\n *\r\n *     const Drink = mongoose.model('Drink', schema);\r\n *     await Drink.findByName('LaCroix');\r\n *\r\n * If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.\r\n *\r\n * @param {String|Object} name\r\n * @param {Function} [fn]\r\n * @api public\r\n * @see Statics /docs/guide.html#statics\r\n */\r\n\r\nSchema.prototype.static = function(name, fn) {\r\n  if (typeof name !== 'string') {\r\n    for (const i in name) {\r\n      this.statics[i] = name[i];\r\n    }\r\n  } else {\r\n    this.statics[name] = fn;\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Defines an index (most likely compound) for this schema.\r\n *\r\n * ####Example\r\n *\r\n *     schema.index({ first: 1, last: -1 })\r\n *\r\n * @param {Object} fields\r\n * @param {Object} [options] Options to pass to [MongoDB driver's `createIndex()` function](http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex)\r\n * @param {String} [options.expires=null] Mongoose-specific syntactic sugar, uses [ms](https://www.npmjs.com/package/ms) to convert `expires` option into seconds for the `expireAfterSeconds` in the above link.\r\n * @api public\r\n */\r\n\r\nSchema.prototype.index = function(fields, options) {\r\n  fields || (fields = {});\r\n  options || (options = {});\r\n\r\n  if (options.expires) {\r\n    utils.expires(options);\r\n  }\r\n\r\n  this._indexes.push([fields, options]);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets/gets a schema option.\r\n *\r\n * ####Example\r\n *\r\n *     schema.set('strict'); // 'true' by default\r\n *     schema.set('strict', false); // Sets 'strict' to false\r\n *     schema.set('strict'); // 'false'\r\n *\r\n * @param {String} key option name\r\n * @param {Object} [value] if not passed, the current option value is returned\r\n * @see Schema ./\r\n * @api public\r\n */\r\n\r\nSchema.prototype.set = function(key, value, _tags) {\r\n  if (arguments.length === 1) {\r\n    return this.options[key];\r\n  }\r\n\r\n  switch (key) {\r\n    case 'read':\r\n      this.options[key] = readPref(value, _tags);\r\n      this._userProvidedOptions[key] = this.options[key];\r\n      break;\r\n    case 'safe':\r\n      setSafe(this.options, value);\r\n      this._userProvidedOptions[key] = this.options[key];\r\n      break;\r\n    case 'timestamps':\r\n      this.setupTimestamp(value);\r\n      this.options[key] = value;\r\n      this._userProvidedOptions[key] = this.options[key];\r\n      break;\r\n    default:\r\n      this.options[key] = value;\r\n      this._userProvidedOptions[key] = this.options[key];\r\n      break;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nconst safeDeprecationWarning = 'Mongoose: The `safe` option for schemas is ' +\r\n  'deprecated. Use the `writeConcern` option instead: ' +\r\n  'http://bit.ly/mongoose-write-concern';\r\n\r\nconst setSafe = util.deprecate(function setSafe(options, value) {\r\n  options.safe = value === false ?\r\n    { w: 0 } :\r\n    value;\r\n}, safeDeprecationWarning);\r\n\r\n/**\r\n * Gets a schema option.\r\n *\r\n * ####Example:\r\n *\r\n *     schema.get('strict'); // true\r\n *     schema.set('strict', false);\r\n *     schema.get('strict'); // false\r\n *\r\n * @param {String} key option name\r\n * @api public\r\n * @return {Any} the option's value\r\n */\r\n\r\nSchema.prototype.get = function(key) {\r\n  return this.options[key];\r\n};\r\n\r\n/**\r\n * The allowed index types\r\n *\r\n * @receiver Schema\r\n * @static indexTypes\r\n * @api public\r\n */\r\n\r\nconst indexTypes = '2d 2dsphere hashed text'.split(' ');\r\n\r\nObject.defineProperty(Schema, 'indexTypes', {\r\n  get: function() {\r\n    return indexTypes;\r\n  },\r\n  set: function() {\r\n    throw new Error('Cannot overwrite Schema.indexTypes');\r\n  }\r\n});\r\n\r\n/**\r\n * Returns a list of indexes that this schema declares, via `schema.index()`\r\n * or by `index: true` in a path's options.\r\n *\r\n * ####Example:\r\n *\r\n *     const userSchema = new Schema({\r\n *       email: { type: String, required: true, unique: true },\r\n *       registeredAt: { type: Date, index: true }\r\n *     });\r\n *\r\n *     // [ [ { email: 1 }, { unique: true, background: true } ],\r\n *     //   [ { registeredAt: 1 }, { background: true } ] ]\r\n *     userSchema.indexes();\r\n *\r\n * @api public\r\n * @return {Array} list of indexes defined in the schema\r\n */\r\n\r\nSchema.prototype.indexes = function() {\r\n  return getIndexes(this);\r\n};\r\n\r\n/**\r\n * Creates a virtual type with the given name.\r\n *\r\n * @param {String} name\r\n * @param {Object} [options]\r\n * @param {String|Model} [options.ref] model name or model instance. Marks this as a [populate virtual](populate.html#populate-virtuals).\r\n * @param {String|Function} [options.localField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\r\n * @param {String|Function} [options.foreignField] Required for populate virtuals. See [populate virtual docs](populate.html#populate-virtuals) for more information.\r\n * @param {Boolean|Function} [options.justOne=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), will be a single doc or `null`. Otherwise, the populate virtual will be an array.\r\n * @param {Boolean} [options.count=false] Only works with populate virtuals. If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), this populate virtual will contain the number of documents rather than the documents themselves when you `populate()`.\r\n * @return {VirtualType}\r\n */\r\n\r\nSchema.prototype.virtual = function(name, options) {\r\n  if (name instanceof VirtualType) {\r\n    return this.virtual(name.path, name.options);\r\n  }\r\n\r\n  options = new VirtualOptions(options);\r\n\r\n  if (utils.hasUserDefinedProperty(options, ['ref', 'refPath'])) {\r\n    if (options.localField == null) {\r\n      throw new Error('Reference virtuals require `localField` option');\r\n    }\r\n\r\n    if (options.foreignField == null) {\r\n      throw new Error('Reference virtuals require `foreignField` option');\r\n    }\r\n\r\n    this.pre('init', function(obj) {\r\n      if (mpath.has(name, obj)) {\r\n        const _v = mpath.get(name, obj);\r\n        if (!this.$$populatedVirtuals) {\r\n          this.$$populatedVirtuals = {};\r\n        }\r\n\r\n        if (options.justOne || options.count) {\r\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\r\n            _v[0] :\r\n            _v;\r\n        } else {\r\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\r\n            _v :\r\n            _v == null ? [] : [_v];\r\n        }\r\n\r\n        mpath.unset(name, obj);\r\n      }\r\n    });\r\n\r\n    const virtual = this.virtual(name);\r\n    virtual.options = options;\r\n    return virtual.\r\n      get(function(_v) {\r\n        if (this.$$populatedVirtuals &&\r\n          this.$$populatedVirtuals.hasOwnProperty(name)) {\r\n          return this.$$populatedVirtuals[name];\r\n        }\r\n        if (_v == null) return undefined;\r\n        return _v;\r\n      }).\r\n      set(function(_v) {\r\n        if (!this.$$populatedVirtuals) {\r\n          this.$$populatedVirtuals = {};\r\n        }\r\n\r\n        if (options.justOne || options.count) {\r\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\r\n            _v[0] :\r\n            _v;\r\n\r\n          if (typeof this.$$populatedVirtuals[name] !== 'object') {\r\n            this.$$populatedVirtuals[name] = options.count ? _v : null;\r\n          }\r\n        } else {\r\n          this.$$populatedVirtuals[name] = Array.isArray(_v) ?\r\n            _v :\r\n            _v == null ? [] : [_v];\r\n\r\n          this.$$populatedVirtuals[name] = this.$$populatedVirtuals[name].filter(function(doc) {\r\n            return doc && typeof doc === 'object';\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  const virtuals = this.virtuals;\r\n  const parts = name.split('.');\r\n\r\n  if (this.pathType(name) === 'real') {\r\n    throw new Error('Virtual path \"' + name + '\"' +\r\n      ' conflicts with a real path in the schema');\r\n  }\r\n\r\n  virtuals[name] = parts.reduce(function(mem, part, i) {\r\n    mem[part] || (mem[part] = (i === parts.length - 1)\r\n      ? new VirtualType(options, name)\r\n      : {});\r\n    return mem[part];\r\n  }, this.tree);\r\n\r\n  // Workaround for gh-8198: if virtual is under document array, make a fake\r\n  // virtual. See gh-8210\r\n  let cur = parts[0];\r\n  for (let i = 0; i < parts.length - 1; ++i) {\r\n    if (this.paths[cur] != null && this.paths[cur].$isMongooseDocumentArray) {\r\n      const remnant = parts.slice(i + 1).join('.');\r\n      const v = this.paths[cur].schema.virtual(remnant);\r\n      v.get((v, virtual, doc) => {\r\n        const parent = doc.__parentArray[arrayParentSymbol];\r\n        const path = cur + '.' + doc.__index + '.' + remnant;\r\n        return parent.get(path);\r\n      });\r\n      break;\r\n    }\r\n\r\n    cur += '.' + parts[i + 1];\r\n  }\r\n\r\n  return virtuals[name];\r\n};\r\n\r\n/**\r\n * Returns the virtual type with the given `name`.\r\n *\r\n * @param {String} name\r\n * @return {VirtualType}\r\n */\r\n\r\nSchema.prototype.virtualpath = function(name) {\r\n  return this.virtuals.hasOwnProperty(name) ? this.virtuals[name] : null;\r\n};\r\n\r\n/**\r\n * Removes the given `path` (or [`paths`]).\r\n *\r\n * ####Example:\r\n *\r\n *     const schema = new Schema({ name: String, age: Number });\r\n *     schema.remove('name');\r\n *     schema.path('name'); // Undefined\r\n *     schema.path('age'); // SchemaNumber { ... }\r\n *\r\n * @param {String|Array} path\r\n * @return {Schema} the Schema instance\r\n * @api public\r\n */\r\nSchema.prototype.remove = function(path) {\r\n  if (typeof path === 'string') {\r\n    path = [path];\r\n  }\r\n  if (Array.isArray(path)) {\r\n    path.forEach(function(name) {\r\n      if (this.path(name) == null && !this.nested[name]) {\r\n        return;\r\n      }\r\n      if (this.nested[name]) {\r\n        const allKeys = Object.keys(this.paths).\r\n          concat(Object.keys(this.nested));\r\n        for (const path of allKeys) {\r\n          if (path.startsWith(name + '.')) {\r\n            delete this.paths[path];\r\n            delete this.nested[path];\r\n            _deletePath(this, path);\r\n          }\r\n        }\r\n\r\n        delete this.nested[name];\r\n        _deletePath(this, name);\r\n        return;\r\n      }\r\n\r\n      delete this.paths[name];\r\n      _deletePath(this, name);\r\n    }, this);\r\n  }\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _deletePath(schema, name) {\r\n  const pieces = name.split('.');\r\n  const last = pieces.pop();\r\n\r\n  let branch = schema.tree;\r\n\r\n  for (const piece of pieces) {\r\n    branch = branch[piece];\r\n  }\r\n\r\n  delete branch[last];\r\n}\r\n\r\n/**\r\n * Loads an ES6 class into a schema. Maps [setters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set) + [getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get), [static methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static),\r\n * and [instance methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions)\r\n * to schema [virtuals](http://mongoosejs.com/docs/guide.html#virtuals),\r\n * [statics](http://mongoosejs.com/docs/guide.html#statics), and\r\n * [methods](http://mongoosejs.com/docs/guide.html#methods).\r\n *\r\n * ####Example:\r\n *\r\n * ```javascript\r\n * const md5 = require('md5');\r\n * const userSchema = new Schema({ email: String });\r\n * class UserClass {\r\n *   // `gravatarImage` becomes a virtual\r\n *   get gravatarImage() {\r\n *     const hash = md5(this.email.toLowerCase());\r\n *     return `https://www.gravatar.com/avatar/${hash}`;\r\n *   }\r\n *\r\n *   // `getProfileUrl()` becomes a document method\r\n *   getProfileUrl() {\r\n *     return `https://mysite.com/${this.email}`;\r\n *   }\r\n *\r\n *   // `findByEmail()` becomes a static\r\n *   static findByEmail(email) {\r\n *     return this.findOne({ email });\r\n *   }\r\n * }\r\n *\r\n * // `schema` will now have a `gravatarImage` virtual, a `getProfileUrl()` method,\r\n * // and a `findByEmail()` static\r\n * userSchema.loadClass(UserClass);\r\n * ```\r\n *\r\n * @param {Function} model\r\n * @param {Boolean} [virtualsOnly] if truthy, only pulls virtuals from the class, not methods or statics\r\n */\r\nSchema.prototype.loadClass = function(model, virtualsOnly) {\r\n  if (model === Object.prototype ||\r\n      model === Function.prototype ||\r\n      model.prototype.hasOwnProperty('$isMongooseModelPrototype')) {\r\n    return this;\r\n  }\r\n\r\n  this.loadClass(Object.getPrototypeOf(model));\r\n\r\n  // Add static methods\r\n  if (!virtualsOnly) {\r\n    Object.getOwnPropertyNames(model).forEach(function(name) {\r\n      if (name.match(/^(length|name|prototype)$/)) {\r\n        return;\r\n      }\r\n      const method = Object.getOwnPropertyDescriptor(model, name);\r\n      if (typeof method.value === 'function') {\r\n        this.static(name, method.value);\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  // Add methods and virtuals\r\n  Object.getOwnPropertyNames(model.prototype).forEach(function(name) {\r\n    if (name.match(/^(constructor)$/)) {\r\n      return;\r\n    }\r\n    const method = Object.getOwnPropertyDescriptor(model.prototype, name);\r\n    if (!virtualsOnly) {\r\n      if (typeof method.value === 'function') {\r\n        this.method(name, method.value);\r\n      }\r\n    }\r\n    if (typeof method.get === 'function') {\r\n      this.virtual(name).get(method.get);\r\n    }\r\n    if (typeof method.set === 'function') {\r\n      this.virtual(name).set(method.set);\r\n    }\r\n  }, this);\r\n\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchema.prototype._getSchema = function(path) {\r\n  const _this = this;\r\n  const pathschema = _this.path(path);\r\n  const resultPath = [];\r\n\r\n  if (pathschema) {\r\n    pathschema.$fullPath = path;\r\n    return pathschema;\r\n  }\r\n\r\n  function search(parts, schema) {\r\n    let p = parts.length + 1;\r\n    let foundschema;\r\n    let trypath;\r\n\r\n    while (p--) {\r\n      trypath = parts.slice(0, p).join('.');\r\n      foundschema = schema.path(trypath);\r\n      if (foundschema) {\r\n        resultPath.push(trypath);\r\n\r\n        if (foundschema.caster) {\r\n          // array of Mixed?\r\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\r\n            foundschema.caster.$fullPath = resultPath.join('.');\r\n            return foundschema.caster;\r\n          }\r\n\r\n          // Now that we found the array, we need to check if there\r\n          // are remaining document paths to look up for casting.\r\n          // Also we need to handle array.$.path since schema.path\r\n          // doesn't work for that.\r\n          // If there is no foundschema.schema we are dealing with\r\n          // a path like array.$\r\n          if (p !== parts.length && foundschema.schema) {\r\n            let ret;\r\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\r\n              if (p + 1 === parts.length) {\r\n                // comments.$\r\n                return foundschema;\r\n              }\r\n              // comments.$.comments.$.title\r\n              ret = search(parts.slice(p + 1), foundschema.schema);\r\n              if (ret) {\r\n                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\r\n                  !foundschema.schema.$isSingleNested;\r\n              }\r\n              return ret;\r\n            }\r\n            // this is the last path of the selector\r\n            ret = search(parts.slice(p), foundschema.schema);\r\n            if (ret) {\r\n              ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||\r\n                !foundschema.schema.$isSingleNested;\r\n            }\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        foundschema.$fullPath = resultPath.join('.');\r\n\r\n        return foundschema;\r\n      }\r\n    }\r\n  }\r\n\r\n  // look for arrays\r\n  const parts = path.split('.');\r\n  for (let i = 0; i < parts.length; ++i) {\r\n    if (parts[i] === '$' || isArrayFilter(parts[i])) {\r\n      // Re: gh-5628, because `schema.path()` doesn't take $ into account.\r\n      parts[i] = '0';\r\n    }\r\n  }\r\n  return search(parts, _this);\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchema.prototype._getPathType = function(path) {\r\n  const _this = this;\r\n  const pathschema = _this.path(path);\r\n\r\n  if (pathschema) {\r\n    return 'real';\r\n  }\r\n\r\n  function search(parts, schema) {\r\n    let p = parts.length + 1,\r\n        foundschema,\r\n        trypath;\r\n\r\n    while (p--) {\r\n      trypath = parts.slice(0, p).join('.');\r\n      foundschema = schema.path(trypath);\r\n      if (foundschema) {\r\n        if (foundschema.caster) {\r\n          // array of Mixed?\r\n          if (foundschema.caster instanceof MongooseTypes.Mixed) {\r\n            return { schema: foundschema, pathType: 'mixed' };\r\n          }\r\n\r\n          // Now that we found the array, we need to check if there\r\n          // are remaining document paths to look up for casting.\r\n          // Also we need to handle array.$.path since schema.path\r\n          // doesn't work for that.\r\n          // If there is no foundschema.schema we are dealing with\r\n          // a path like array.$\r\n          if (p !== parts.length && foundschema.schema) {\r\n            if (parts[p] === '$' || isArrayFilter(parts[p])) {\r\n              if (p === parts.length - 1) {\r\n                return { schema: foundschema, pathType: 'nested' };\r\n              }\r\n              // comments.$.comments.$.title\r\n              return search(parts.slice(p + 1), foundschema.schema);\r\n            }\r\n            // this is the last path of the selector\r\n            return search(parts.slice(p), foundschema.schema);\r\n          }\r\n          return {\r\n            schema: foundschema,\r\n            pathType: foundschema.$isSingleNested ? 'nested' : 'array'\r\n          };\r\n        }\r\n        return { schema: foundschema, pathType: 'real' };\r\n      } else if (p === parts.length && schema.nested[trypath]) {\r\n        return { schema: schema, pathType: 'nested' };\r\n      }\r\n    }\r\n    return { schema: foundschema || schema, pathType: 'undefined' };\r\n  }\r\n\r\n  // look for arrays\r\n  return search(path.split('.'), _this);\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction isArrayFilter(piece) {\r\n  return piece.startsWith('$[') && piece.endsWith(']');\r\n}\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = exports = Schema;\r\n\r\n// require down here because of reference issues\r\n\r\n/**\r\n * The various built-in Mongoose Schema Types.\r\n *\r\n * ####Example:\r\n *\r\n *     var mongoose = require('mongoose');\r\n *     var ObjectId = mongoose.Schema.Types.ObjectId;\r\n *\r\n * ####Types:\r\n *\r\n * - [String](#schema-string-js)\r\n * - [Number](#schema-number-js)\r\n * - [Boolean](#schema-boolean-js) | Bool\r\n * - [Array](#schema-array-js)\r\n * - [Buffer](#schema-buffer-js)\r\n * - [Date](#schema-date-js)\r\n * - [ObjectId](#schema-objectid-js) | Oid\r\n * - [Mixed](#schema-mixed-js)\r\n *\r\n * Using this exposed access to the `Mixed` SchemaType, we can use them in our schema.\r\n *\r\n *     var Mixed = mongoose.Schema.Types.Mixed;\r\n *     new mongoose.Schema({ _user: Mixed })\r\n *\r\n * @api public\r\n */\r\n\r\nSchema.Types = MongooseTypes = require('./schema/index');\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nexports.ObjectId = MongooseTypes.ObjectId;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/lib/schema.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/lib/schema.js	(date 499162500000)
@@ -875,7 +875,9 @@
 
 Schema.prototype.interpretAsType = function(path, obj, options) {
   if (obj instanceof SchemaType) {
-    return obj;
+    const clone = obj.clone();
+    clone.path = path;
+    return clone;
   }
 
   // If this schema has an associated Mongoose object, use the Mongoose object's
@@ -2053,29 +2055,37 @@
           // doesn't work for that.
           // If there is no foundschema.schema we are dealing with
           // a path like array.$
-          if (p !== parts.length && foundschema.schema) {
-            let ret;
-            if (parts[p] === '$' || isArrayFilter(parts[p])) {
-              if (p + 1 === parts.length) {
-                // comments.$
-                return foundschema;
-              }
-              // comments.$.comments.$.title
-              ret = search(parts.slice(p + 1), foundschema.schema);
-              if (ret) {
-                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||
-                  !foundschema.schema.$isSingleNested;
-              }
-              return ret;
-            }
-            // this is the last path of the selector
-            ret = search(parts.slice(p), foundschema.schema);
-            if (ret) {
-              ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||
-                !foundschema.schema.$isSingleNested;
+          if (p !== parts.length) {
+            if (foundschema.schema) {
+              let ret;
+              if (parts[p] === '$' || isArrayFilter(parts[p])) {
+                if (p + 1 === parts.length) {
+                  // comments.$
+                  return foundschema;
+                }
+                // comments.$.comments.$.title
+                ret = search(parts.slice(p + 1), foundschema.schema);
+                if (ret) {
+                  ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||
+                    !foundschema.schema.$isSingleNested;
+                }
+                return ret;
+              }
+              // this is the last path of the selector
+              ret = search(parts.slice(p), foundschema.schema);
+              if (ret) {
+                ret.$isUnderneathDocArray = ret.$isUnderneathDocArray ||
+                  !foundschema.schema.$isSingleNested;
+              }
+              return ret;
             }
-            return ret;
-          }
+          }
+        } else if (foundschema.$isSchemaMap) {
+          if (p + 1 >= parts.length) {
+            return foundschema.$__schemaType;
+          }
+          const ret = search(parts.slice(p + 1), foundschema.$__schemaType.schema);
+          return ret;
         }
 
         foundschema.$fullPath = resultPath.join('.');
Index: node_modules/mongoose/dist/browser.umd.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/dist/browser.umd.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/dist/browser.umd.js	(date 499162500000)
@@ -9,7 +9,7 @@
 /*!
  * Module dependencies.
  */
-function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s,a=r(111),u=r(46),c=r(62),l=r(63).Buffer,f=r(19),p=r(13),h=r(113),y=r(27),d=r(20),m=r(66),_=r(65),v=r(28),g=r(24),b=r(47);function w(t){if(Array.isArray(t.populate)){var r=[];t.populate.forEach((function(t){if(/[\s]/.test(t.path)){var n=Object.assign({},t);n.path.split(" ").forEach((function(t){n.path=t,r.push(e.populate(n)[0])}))}else r.push(e.populate(t)[0])})),t.populate=e.populate(r)}else null!=t.populate&&"object"===i(t.populate)&&(t.populate=e.populate(t.populate));var o=[],s=t.path.split(" ");null!=t.options&&(t.options=e.clone(t.options));var a,u=n(s);try{for(u.s();!(a=u.n()).done;){var c=a.value;o.push(new h(Object.assign({},t,{path:c})))}}catch(t){u.e(t)}finally{u.f()}return o}
+function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s,a=r(111),u=r(46),c=r(62),l=r(63).Buffer,f=r(19),p=r(13),h=r(113),y=r(28),d=r(20),m=r(66),_=r(65),v=r(29),g=r(24),b=r(47);function w(t){if(Array.isArray(t.populate)){var r=[];t.populate.forEach((function(t){if(/[\s]/.test(t.path)){var n=Object.assign({},t);n.path.split(" ").forEach((function(t){n.path=t,r.push(e.populate(n)[0])}))}else r.push(e.populate(t)[0])})),t.populate=e.populate(r)}else null!=t.populate&&"object"===i(t.populate)&&(t.populate=e.populate(t.populate));var o=[],s=t.path.split(" ");null!=t.options&&(t.options=e.clone(t.options));var a,u=n(s);try{for(u.s();!(a=u.n()).done;){var c=a.value;o.push(new h(Object.assign({},t,{path:c})))}}catch(t){u.e(t)}finally{u.f()}return o}
 /*!
  * Return the value of `obj` at the given `path`.
  *
@@ -231,11 +231,11 @@
  */function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e){return null==t?t:t instanceof Map?t.get(e):t[e]}t.exports=function(t,e,r){var o,s=e.split("."),a=e,u=t,c=n(s);try{for(c.s();!(o=c.n()).done;){var l=o.value;if(null==u)return r;if(null!=u[a])return u[a];u=i(u,l),a=a.substr(l.length+1)}}catch(t){c.e(t)}finally{c.f()}return null==u?r:u}},function(t,e,r){"use strict";var n=r(14);
 /*!
  * Module exports.
- */t.exports=n,n.messages=r(126),n.Messages=n.messages,n.DocumentNotFoundError=r(127),n.CastError=r(12),n.ValidationError=r(30),n.ValidatorError=r(71),n.VersionError=r(128),n.ParallelSaveError=r(129),n.OverwriteModelError=r(130),n.MissingSchemaError=r(131),n.DivergentArrayError=r(132),n.StrictModeError=r(31)},function(t,e,r){"use strict";(function(e,n){
+ */t.exports=n,n.messages=r(126),n.Messages=n.messages,n.DocumentNotFoundError=r(127),n.CastError=r(12),n.ValidationError=r(31),n.ValidatorError=r(71),n.VersionError=r(128),n.ParallelSaveError=r(129),n.OverwriteModelError=r(130),n.MissingSchemaError=r(131),n.DivergentArrayError=r(132),n.StrictModeError=r(32)},function(t,e,r){"use strict";(function(e,n){
 /*!
  * Module dependencies.
  */
-function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var u,c,l,f=r(18).EventEmitter,p=r(109),h=r(5),y=r(32),d=r(73),m=r(134),_=r(135),v=r(52),g=r(31),b=r(30),w=r(71),O=r(53),S=r(24),A=r(84),E=r(57).compile,j=r(57).defineKey,$=r(170).flatten,x=r(4),P=r(171),N=r(88),T=r(172),k=r(58),C=r(173),R=r(3).inspect,B=r(22).internalToObjectOptions,D=r(46),M=r(174),I=r(2),F=r(176),L=I.clone,U=I.deepEqual,V=I.isMongooseObject,q=Symbol("mongoose.Array#atomicsBackup"),W=r(0).arrayAtomicsSymbol,H=r(0).documentArrayParent,Y=r(0).documentSchemaSymbol,K=r(0).getSymbol,z=r(0).populateModelSymbol,Q=r(0).scopeSymbol,J=I.specialProperties;function G(t,e,r,n){var o=this;"object"===a(r)&&null!=r&&(r=(n=r).skipId),n=Object.assign({},n);var s=x(n,"defaults",!0);if(n.defaults=s,null==this.schema){var u=I.isObject(e)&&!e.instanceOfSchema?new v(e):e;this.$__setSchema(u),e=r,r=n,n=arguments[4]||{}}if(this.$__=new p,this.$__.emitter=new f,this.isNew=!("isNew"in n)||n.isNew,this.errors=void 0,this.$__.$options=n||{},this.$locals={},this.$op=null,null!=t&&"object"!==a(t))throw new m(t,"obj","Document");var c=this.schema;"boolean"==typeof e||"throw"===e?(this.$__.strictMode=e,e=void 0):(this.$__.strictMode=c.options.strict,this.$__.selected=e);var l,h=c.requiredPaths(!0),y=i(h);try{for(y.s();!(l=y.n()).done;){var d=l.value;this.$__.activePaths.require(d)}}catch(t){y.e(t)}finally{y.f()}this.$__.emitter.setMaxListeners(0);var _=null;I.isPOJO(e)&&(_=C(e));var g=!1===_&&e?Z(e):{};if(null==this._doc&&(this.$__buildDoc(t,e,r,_,g,!1),s&&tt(this,e,r,_,g,!0,{isNew:this.isNew})),t&&(this.$__original_set?this.$__original_set(t,void 0,!0):this.$set(t,void 0,!0),t instanceof G&&(this.isNew=t.isNew)),n.willInit&&s?f.prototype.once.call(this,"init",(function(){tt(o,e,r,_,g,!1,n.skipDefaults,o.isNew)})):s&&tt(this,e,r,_,g,!1,n.skipDefaults,this.isNew),this.$__._id=this._id,!this.$__.strictMode&&t){var b=this,w=Object.keys(this._doc);w.forEach((function(t){t in c.tree||j(t,null,b)}))}ot(this)}
+function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return s(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw i}}}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var u,c,l,f=r(18).EventEmitter,p=r(109),h=r(5),y=r(25),d=r(73),m=r(134),_=r(135),v=r(52),g=r(32),b=r(31),w=r(71),O=r(53),S=r(24),A=r(84),E=r(57).compile,j=r(57).defineKey,$=r(170).flatten,x=r(4),P=r(171),N=r(88),T=r(172),k=r(58),C=r(173),R=r(3).inspect,B=r(22).internalToObjectOptions,D=r(46),M=r(174),I=r(2),F=r(176),L=I.clone,U=I.deepEqual,V=I.isMongooseObject,q=Symbol("mongoose.Array#atomicsBackup"),W=r(0).arrayAtomicsSymbol,H=r(0).documentArrayParent,Y=r(0).documentSchemaSymbol,K=r(0).getSymbol,z=r(0).populateModelSymbol,Q=r(0).scopeSymbol,J=I.specialProperties;function G(t,e,r,n){var o=this;"object"===a(r)&&null!=r&&(r=(n=r).skipId),n=Object.assign({},n);var s=x(n,"defaults",!0);if(n.defaults=s,null==this.schema){var u=I.isObject(e)&&!e.instanceOfSchema?new v(e):e;this.$__setSchema(u),e=r,r=n,n=arguments[4]||{}}if(this.$__=new p,this.$__.emitter=new f,this.isNew=!("isNew"in n)||n.isNew,this.errors=void 0,this.$__.$options=n||{},this.$locals={},this.$op=null,null!=t&&"object"!==a(t))throw new m(t,"obj","Document");var c=this.schema;"boolean"==typeof e||"throw"===e?(this.$__.strictMode=e,e=void 0):(this.$__.strictMode=c.options.strict,this.$__.selected=e);var l,h=c.requiredPaths(!0),y=i(h);try{for(y.s();!(l=y.n()).done;){var d=l.value;this.$__.activePaths.require(d)}}catch(t){y.e(t)}finally{y.f()}this.$__.emitter.setMaxListeners(0);var _=null;I.isPOJO(e)&&(_=C(e));var g=!1===_&&e?Z(e):{};if(null==this._doc&&(this.$__buildDoc(t,e,r,_,g,!1),s&&tt(this,e,r,_,g,!0,{isNew:this.isNew})),t&&(this.$__original_set?this.$__original_set(t,void 0,!0):this.$set(t,void 0,!0),t instanceof G&&(this.isNew=t.isNew)),n.willInit&&s?f.prototype.once.call(this,"init",(function(){tt(o,e,r,_,g,!1,n.skipDefaults,o.isNew)})):s&&tt(this,e,r,_,g,!1,n.skipDefaults,this.isNew),this.$__._id=this._id,!this.$__.strictMode&&t){var b=this,w=Object.keys(this._doc);w.forEach((function(t){t in c.tree||j(t,null,b)}))}ot(this)}
 /*!
  * Document exposes the NodeJS event emitter API, so you can use
  * `on`, `once`, etc.
@@ -319,7 +319,7 @@
 /*!
  * ignore
  */
-function(t,e){if(!Array.isArray(t))return!1;if(0===t.length)return!1;var r,n=i(t);try{for(n.s();!(r=n.n()).done;){var o=r.value;if(!(o instanceof G))return!1;if(null==o.constructor.modelName)return!1;if(o.constructor.modelName!=e&&o.constructor.baseModelName!=e)return!1}}catch(t){n.e(t)}finally{n.f()}return!0}(e,j.options[this.schema.options.typeKey][0].ref)&&(this.ownerDocument?(J=o({},z,e[0].constructor),this.ownerDocument().populated(this.$__fullPath(t),e.map((function(t){return t._id})),J)):(J=o({},z,e[0].constructor),this.populated(t,e.map((function(t){return t._id})),J)),Z=!0),null==this.schema.singleNestedPaths[t]&&(e=j.applySetters(e,this,!1,W)),j.$isMongooseDocumentArray&&Array.isArray(e)&&e.length>0&&null!=e[0]&&null!=e[0].$__&&null!=e[0].$__.populated){for(var tt=Object.keys(e[0].$__.populated),et=function(){var r=nt[rt];s.populated(t+"."+r,e.map((function(t){return t.populated(r)})),e[0].$__.populated[r].options)},rt=0,nt=tt;rt<nt.length;rt++)et();Z=!0}if(!Z&&this.$__.populated){if(Array.isArray(e)&&this.$__.populated[t])for(var ot=0;ot<e.length;++ot)e[ot]instanceof G&&(e[ot]=e[ot]._id);delete this.$__.populated[t]}j.$isSingleNested&&null!=e&&function(t,e,r){var n=e.schema;if(null==n)return;for(var o=0,i=Object.keys(n.paths);o<i.length;o++){var s=i[o],a=n.paths[s];if(null!=a.$immutableSetter){var u=null==r?void 0:r.$__getValue(s);a.$immutableSetter.call(t,u)}}}(e,j,W),this.$markValid(t)}catch(r){r instanceof h.StrictModeError&&r.isImmutableError?this.invalidate(t,r):r instanceof h.CastError?(this.invalidate(r.path,r),r.$originalErrorPath&&this.invalidate(t,new h.CastError(j.instance,e,t,r.$originalErrorPath))):this.invalidate(t,new h.CastError(j.instance,e,t,r)),Q=!1}return Q&&this.$__set(L,t,_,B,j,e,W),j.$isSingleNested&&(this.isDirectModified(t)||null==e)&&A(this,t),this},G.prototype.set=G.prototype.$set,G.prototype.$__shouldModify=function(t,e,r,n,o,i,s){return!!this.isNew||null==this.schema.singleNestedPaths[e]&&(void 0===i&&!this.isSelected(e)||(void 0!==i||!(e in this.$__.activePaths.states.default))&&(!(this.populated(e)&&i instanceof G&&U(i._id,s))&&(!U(i,s||this.get(e))||!(r||null==i||!(e in this.$__.activePaths.states.default)||!U(i,o.getDefault(this,r))))))},G.prototype.$__set=function(t,e,n,o,i,s,a){l=l||r(25);var u=this.$__shouldModify(t,e,n,o,i,s,a),f=this;u&&(this.markModified(t),c||(c=r(82)),s&&s.isMongooseArray&&(s._registerAtomic("$set",s),s.isMongooseDocumentArray&&s.forEach((function(t){t&&t.__parentArray&&(t.__parentArray=s)})),this.$__.activePaths.forEach((function(t){t.startsWith(e+".")&&f.$__.activePaths.ignore(t)}))));for(var p=this._doc,h=0,y=o.length,d="";h<y;h++){var m=h+1===y;if(d+=d?"."+o[h]:o[h],J.has(o[h]))return;m?p instanceof Map?p.set(o[h],s):p[o[h]]=s:(I.isPOJO(p[o[h]])||p[o[h]]&&p[o[h]]instanceof l||p[o[h]]&&p[o[h]].$isSingleNested||p[o[h]]&&Array.isArray(p[o[h]])||(p[o[h]]=p[o[h]]||{}),p=p[o[h]])}},G.prototype.$__getValue=function(t){return I.getValue(t,this._doc)},G.prototype.$__setValue=function(t,e){return I.setValue(t,e,this._doc),this},G.prototype.get=function(t,e,r){var n;r=r||{},e&&(n=this.schema.interpretAsType(t,e,this.schema.options));var o=this.$__path(t);if(null==o&&(o=this.schema.virtualpath(t)),o instanceof y){var i=this.schema.virtualpath(t);null!=i&&(o=i)}var s=t.split("."),a=this._doc;if(o instanceof O){if(0===o.getters.length)return;return o.applyGetters(null,this)}"string"==typeof this.schema.aliases[s[0]]&&(s[0]=this.schema.aliases[s[0]]);for(var u=0,c=s.length;u<c;u++)a&&a._doc&&(a=a._doc),a=null==a?void 0:a instanceof Map?a.get(s[u],{getters:!1}):u===c-1?I.getValue(s[u],a):a[s[u]];if(n&&(a=n.cast(a)),null!=o&&!1!==r.getters)a=o.applyGetters(a,this);else if(this.schema.nested[t]&&r.virtuals)return it(this,I.clone(a)||{},{path:t});return a},
+function(t,e){if(!Array.isArray(t))return!1;if(0===t.length)return!1;var r,n=i(t);try{for(n.s();!(r=n.n()).done;){var o=r.value;if(!(o instanceof G))return!1;if(null==o.constructor.modelName)return!1;if(o.constructor.modelName!=e&&o.constructor.baseModelName!=e)return!1}}catch(t){n.e(t)}finally{n.f()}return!0}(e,j.options[this.schema.options.typeKey][0].ref)&&(this.ownerDocument?(J=o({},z,e[0].constructor),this.ownerDocument().populated(this.$__fullPath(t),e.map((function(t){return t._id})),J)):(J=o({},z,e[0].constructor),this.populated(t,e.map((function(t){return t._id})),J)),Z=!0),null==this.schema.singleNestedPaths[t]&&(e=j.applySetters(e,this,!1,W)),j.$isMongooseDocumentArray&&Array.isArray(e)&&e.length>0&&null!=e[0]&&null!=e[0].$__&&null!=e[0].$__.populated){for(var tt=Object.keys(e[0].$__.populated),et=function(){var r=nt[rt];s.populated(t+"."+r,e.map((function(t){return t.populated(r)})),e[0].$__.populated[r].options)},rt=0,nt=tt;rt<nt.length;rt++)et();Z=!0}if(!Z&&this.$__.populated){if(Array.isArray(e)&&this.$__.populated[t])for(var ot=0;ot<e.length;++ot)e[ot]instanceof G&&(e[ot]=e[ot]._id);delete this.$__.populated[t]}j.$isSingleNested&&null!=e&&function(t,e,r){var n=e.schema;if(null==n)return;for(var o=0,i=Object.keys(n.paths);o<i.length;o++){var s=i[o],a=n.paths[s];if(null!=a.$immutableSetter){var u=null==r?void 0:r.$__getValue(s);a.$immutableSetter.call(t,u)}}}(e,j,W),this.$markValid(t)}catch(r){r instanceof h.StrictModeError&&r.isImmutableError?this.invalidate(t,r):r instanceof h.CastError?(this.invalidate(r.path,r),r.$originalErrorPath&&this.invalidate(t,new h.CastError(j.instance,e,t,r.$originalErrorPath))):this.invalidate(t,new h.CastError(j.instance,e,t,r)),Q=!1}return Q&&this.$__set(L,t,_,B,j,e,W),j.$isSingleNested&&(this.isDirectModified(t)||null==e)&&A(this,t),this},G.prototype.set=G.prototype.$set,G.prototype.$__shouldModify=function(t,e,r,n,o,i,s){return!!this.isNew||null==this.schema.singleNestedPaths[e]&&(void 0===i&&!this.isSelected(e)||(void 0!==i||!(e in this.$__.activePaths.states.default))&&(!(this.populated(e)&&i instanceof G&&U(i._id,s))&&(!U(i,s||this.get(e))||!(r||null==i||!(e in this.$__.activePaths.states.default)||!U(i,o.getDefault(this,r))))))},G.prototype.$__set=function(t,e,n,o,i,s,a){l=l||r(26);var u=this.$__shouldModify(t,e,n,o,i,s,a),f=this;u&&(this.markModified(t),c||(c=r(82)),s&&s.isMongooseArray&&(s._registerAtomic("$set",s),s.isMongooseDocumentArray&&s.forEach((function(t){t&&t.__parentArray&&(t.__parentArray=s)})),this.$__.activePaths.forEach((function(t){t.startsWith(e+".")&&f.$__.activePaths.ignore(t)}))));for(var p=this._doc,h=0,y=o.length,d="";h<y;h++){var m=h+1===y;if(d+=d?"."+o[h]:o[h],J.has(o[h]))return;m?p instanceof Map?p.set(o[h],s):p[o[h]]=s:(I.isPOJO(p[o[h]])||p[o[h]]&&p[o[h]]instanceof l||p[o[h]]&&p[o[h]].$isSingleNested||p[o[h]]&&Array.isArray(p[o[h]])||(p[o[h]]=p[o[h]]||{}),p=p[o[h]])}},G.prototype.$__getValue=function(t){return I.getValue(t,this._doc)},G.prototype.$__setValue=function(t,e){return I.setValue(t,e,this._doc),this},G.prototype.get=function(t,e,r){var n;r=r||{},e&&(n=this.schema.interpretAsType(t,e,this.schema.options));var o=this.$__path(t);if(null==o&&(o=this.schema.virtualpath(t)),o instanceof y){var i=this.schema.virtualpath(t);null!=i&&(o=i)}var s=t.split("."),a=this._doc;if(o instanceof O){if(0===o.getters.length)return;return o.applyGetters(null,this)}"string"==typeof this.schema.aliases[s[0]]&&(s[0]=this.schema.aliases[s[0]]);for(var u=0,c=s.length;u<c;u++)a&&a._doc&&(a=a._doc),a=null==a?void 0:a instanceof Map?a.get(s[u],{getters:!1}):u===c-1?I.getValue(s[u],a):a[s[u]];if(n&&(a=n.cast(a)),null!=o&&!1!==r.getters)a=o.applyGetters(a,this);else if(this.schema.nested[t]&&r.virtuals)return it(this,I.clone(a)||{},{path:t});return a},
 /*!
  * ignore
  */
@@ -327,7 +327,7 @@
 /*!
  * ignore
  */
-G.prototype.$__undoReset=function(){if(null!=this.$__.backup&&null!=this.$__.backup.activePaths){this.$__.activePaths.states.modify=this.$__.backup.activePaths.modify,this.$__.activePaths.states.default=this.$__.backup.activePaths.default,this.$__.validationError=this.$__.backup.validationError,this.errors=this.$__.backup.errors;var t,e=i(this.$__dirty());try{for(e.s();!(t=e.n()).done;){var r=t.value.value;r&&r[W]&&r[q]&&(r[W]=r[q])}}catch(t){e.e(t)}finally{e.f()}var n,o=i(this.$__getAllSubdocs());try{for(o.s();!(n=o.n()).done;){n.value.$__undoReset()}}catch(t){o.e(t)}finally{o.f()}}},G.prototype.$__dirty=function(){var t=this,e=this.$__.activePaths.map("modify",(function(e){return{path:e,value:t.$__getValue(e),schema:t.$__path(e)}}));(e=e.concat(this.$__.activePaths.map("default",(function(e){if("_id"!==e&&null!=t.$__getValue(e))return{path:e,value:t.$__getValue(e),schema:t.$__path(e)}})))).sort((function(t,e){return t.path<e.path?-1:t.path>e.path?1:0}));var r,n,o=[];return e.forEach((function(t){t&&(null==r||0!==t.path.indexOf(r)?(r=t.path+".",o.push(t),n=t):null!=n&&null!=n.value&&null!=n.value[W]&&n.value.hasAtomics()&&(n.value[W]={},n.value[W].$set=n.value))})),n=r=null,o},G.prototype.$__setSchema=function(t){t.plugin(T,{deduplicate:!0}),E(t.tree,this,void 0,t.options);for(var e=0,r=Object.keys(t.virtuals);e<r.length;e++){var n=r[e];t.virtuals[n]._applyDefaultGetters()}this.schema=t,this[Y]=t},G.prototype.$__getArrayPathsToValidate=function(){return u||(u=r(17)),this.$__.activePaths.map("init","modify",function(t){return this.$__getValue(t)}.bind(this)).filter((function(t){return t&&t instanceof Array&&t.isMongooseDocumentArray&&t.length})).reduce((function(t,e){return t.concat(e)}),[]).filter((function(t){return t}))},G.prototype.$__getAllSubdocs=function(){u||(u=r(17)),l=l||r(25);var t=this;return Object.keys(this._doc).reduce((function(e,r){return function t(e,r,n){var o=e;return n&&(o=e instanceof G&&e[Y].paths[n]?e._doc[n]:e[n]),o instanceof l?r.push(o):o instanceof Map?r=Array.from(o.keys()).reduce((function(e,r){return t(o.get(r),e,null)}),r):o&&o.$isSingleNested?(r=Object.keys(o._doc).reduce((function(e,r){return t(o._doc,e,r)}),r)).push(o):o&&o.isMongooseDocumentArray?o.forEach((function(e){e&&e._doc&&(r=Object.keys(e._doc).reduce((function(r,n){return t(e._doc,r,n)}),r),e instanceof l&&r.push(e))})):o instanceof G&&o.$__isNested&&(r=Object.keys(o).reduce((function(e,r){return t(o,e,r)}),r)),r}(t,e,r)}),[])},G.prototype.$__handleReject=function(t){this.listeners("error").length?this.emit("error",t):this.constructor.listeners&&this.constructor.listeners("error").length&&this.constructor.emit("error",t)},G.prototype.$toObject=function(t,e){var r,o={transform:!0,flattenDecimals:!0},i=e?"toJSON":"toObject",s=x(this,"constructor.base.options."+i,{}),a=x(this,"schema.options",{});o=I.options(o,L(s)),o=I.options(o,L(a[i]||{})),"flattenMaps"in(t=I.isPOJO(t)?L(t):{})||(t.flattenMaps=o.flattenMaps),r=null!=t.minimize?t.minimize:null!=o.minimize?o.minimize:a.minimize;var u=Object.assign(I.clone(t),{_isNested:!0,json:e,minimize:r});if(I.hasUserDefinedProperty(t,"getters")&&(u.getters=t.getters),I.hasUserDefinedProperty(t,"virtuals")&&(u.virtuals=t.virtuals),(t.depopulate||x(t,"_parentOptions.depopulate",!1))&&t._isNested&&this.$__.wasPopulated)return L(this._id,u);(t=I.options(o,t))._isNested=!0,t.json=e,t.minimize=r,u._parentOptions=t,u._skipSingleNestedGetters=!0;var c=Object.assign({},u);c._skipSingleNestedGetters=!1;var l=t.transform,f=L(this._doc,u)||{};t.getters&&(!function(t,e,r){var n,o,i=t.schema,s=Object.keys(i.paths),a=s.length,u=t._doc;if(!u)return e;for(;a--;){var c=(n=s[a]).split("."),l=c.length,f=l-1,p=e,h=void 0;if(u=t._doc,t.isSelected(n))for(var y=0;y<l;++y){if(h=c[y],o=u[h],y===f){var d=t.get(n);p[h]=L(d,r)}else{if(null==o){h in u&&(p[h]=o);break}p=p[h]||(p[h]={})}u=o}}}
+G.prototype.$__undoReset=function(){if(null!=this.$__.backup&&null!=this.$__.backup.activePaths){this.$__.activePaths.states.modify=this.$__.backup.activePaths.modify,this.$__.activePaths.states.default=this.$__.backup.activePaths.default,this.$__.validationError=this.$__.backup.validationError,this.errors=this.$__.backup.errors;var t,e=i(this.$__dirty());try{for(e.s();!(t=e.n()).done;){var r=t.value.value;r&&r[W]&&r[q]&&(r[W]=r[q])}}catch(t){e.e(t)}finally{e.f()}var n,o=i(this.$__getAllSubdocs());try{for(o.s();!(n=o.n()).done;){n.value.$__undoReset()}}catch(t){o.e(t)}finally{o.f()}}},G.prototype.$__dirty=function(){var t=this,e=this.$__.activePaths.map("modify",(function(e){return{path:e,value:t.$__getValue(e),schema:t.$__path(e)}}));(e=e.concat(this.$__.activePaths.map("default",(function(e){if("_id"!==e&&null!=t.$__getValue(e))return{path:e,value:t.$__getValue(e),schema:t.$__path(e)}})))).sort((function(t,e){return t.path<e.path?-1:t.path>e.path?1:0}));var r,n,o=[];return e.forEach((function(t){t&&(null==r||0!==t.path.indexOf(r)?(r=t.path+".",o.push(t),n=t):null!=n&&null!=n.value&&null!=n.value[W]&&n.value.hasAtomics()&&(n.value[W]={},n.value[W].$set=n.value))})),n=r=null,o},G.prototype.$__setSchema=function(t){t.plugin(T,{deduplicate:!0}),E(t.tree,this,void 0,t.options);for(var e=0,r=Object.keys(t.virtuals);e<r.length;e++){var n=r[e];t.virtuals[n]._applyDefaultGetters()}this.schema=t,this[Y]=t},G.prototype.$__getArrayPathsToValidate=function(){return u||(u=r(17)),this.$__.activePaths.map("init","modify",function(t){return this.$__getValue(t)}.bind(this)).filter((function(t){return t&&t instanceof Array&&t.isMongooseDocumentArray&&t.length})).reduce((function(t,e){return t.concat(e)}),[]).filter((function(t){return t}))},G.prototype.$__getAllSubdocs=function(){u||(u=r(17)),l=l||r(26);var t=this;return Object.keys(this._doc).reduce((function(e,r){return function t(e,r,n){var o=e;return n&&(o=e instanceof G&&e[Y].paths[n]?e._doc[n]:e[n]),o instanceof l?r.push(o):o instanceof Map?r=Array.from(o.keys()).reduce((function(e,r){return t(o.get(r),e,null)}),r):o&&o.$isSingleNested?(r=Object.keys(o._doc).reduce((function(e,r){return t(o._doc,e,r)}),r)).push(o):o&&o.isMongooseDocumentArray?o.forEach((function(e){e&&e._doc&&(r=Object.keys(e._doc).reduce((function(r,n){return t(e._doc,r,n)}),r),e instanceof l&&r.push(e))})):o instanceof G&&o.$__isNested&&(r=Object.keys(o).reduce((function(e,r){return t(o,e,r)}),r)),r}(t,e,r)}),[])},G.prototype.$__handleReject=function(t){this.listeners("error").length?this.emit("error",t):this.constructor.listeners&&this.constructor.listeners("error").length&&this.constructor.emit("error",t)},G.prototype.$toObject=function(t,e){var r,o={transform:!0,flattenDecimals:!0},i=e?"toJSON":"toObject",s=x(this,"constructor.base.options."+i,{}),a=x(this,"schema.options",{});o=I.options(o,L(s)),o=I.options(o,L(a[i]||{})),"flattenMaps"in(t=I.isPOJO(t)?L(t):{})||(t.flattenMaps=o.flattenMaps),r=null!=t.minimize?t.minimize:null!=o.minimize?o.minimize:a.minimize;var u=Object.assign(I.clone(t),{_isNested:!0,json:e,minimize:r});if(I.hasUserDefinedProperty(t,"getters")&&(u.getters=t.getters),I.hasUserDefinedProperty(t,"virtuals")&&(u.virtuals=t.virtuals),(t.depopulate||x(t,"_parentOptions.depopulate",!1))&&t._isNested&&this.$__.wasPopulated)return L(this._id,u);(t=I.options(o,t))._isNested=!0,t.json=e,t.minimize=r,u._parentOptions=t,u._skipSingleNestedGetters=!0;var c=Object.assign({},u);c._skipSingleNestedGetters=!1;var l=t.transform,f=L(this._doc,u)||{};t.getters&&(!function(t,e,r){var n,o,i=t.schema,s=Object.keys(i.paths),a=s.length,u=t._doc;if(!u)return e;for(;a--;){var c=(n=s[a]).split("."),l=c.length,f=l-1,p=e,h=void 0;if(u=t._doc,t.isSelected(n))for(var y=0;y<l;++y){if(h=c[y],o=u[h],y===f){var d=t.get(n);p[h]=L(d,r)}else{if(null==o){h in u&&(p[h]=o);break}p=p[h]||(p[h]={})}u=o}}}
 /*!
  * Applies schema type transforms to `json`.
  *
@@ -407,7 +407,7 @@
 /*!
  * Module exports.
  */
-t.exports=e=b,e.CastError=v,e.ValidatorError=g}).call(this,r(1).Buffer)},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&h())}function h(){if(!l){var t=a(p);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function d(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new y(t,e)),1!==c.length||l||a(h)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,r){"use strict";var n=r(27),o=function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),null==e)return this;Object.assign(this,n(e))},i=r(10);Object.defineProperty(o.prototype,"type",i),Object.defineProperty(o.prototype,"validate",i),Object.defineProperty(o.prototype,"cast",i),Object.defineProperty(o.prototype,"required",i),Object.defineProperty(o.prototype,"default",i),Object.defineProperty(o.prototype,"ref",i),Object.defineProperty(o.prototype,"select",i),Object.defineProperty(o.prototype,"index",i),Object.defineProperty(o.prototype,"unique",i),Object.defineProperty(o.prototype,"immutable",i),Object.defineProperty(o.prototype,"sparse",i),Object.defineProperty(o.prototype,"text",i),Object.defineProperty(o.prototype,"transform",i),t.exports=o},function(t,e,r){"use strict";t.exports=Object.freeze({enumerable:!0,configurable:!0,writable:!0,value:void 0})},function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"===("undefined"==typeof window?"undefined":r(window))&&(n=window)}t.exports=n},function(t,e,r){"use strict";
+t.exports=e=b,e.CastError=v,e.ValidatorError=g}).call(this,r(1).Buffer)},function(t,e){var r,n,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(t){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var u,c=[],l=!1,f=-1;function p(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&h())}function h(){if(!l){var t=a(p);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function y(t,e){this.fun=t,this.array=e}function d(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new y(t,e)),1!==c.length||l||a(h)},y.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=d,o.addListener=d,o.once=d,o.off=d,o.removeListener=d,o.removeAllListeners=d,o.emit=d,o.prependListener=d,o.prependOnceListener=d,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,r){"use strict";var n=r(28),o=function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),null==e)return this;Object.assign(this,n(e))},i=r(10);Object.defineProperty(o.prototype,"type",i),Object.defineProperty(o.prototype,"validate",i),Object.defineProperty(o.prototype,"cast",i),Object.defineProperty(o.prototype,"required",i),Object.defineProperty(o.prototype,"default",i),Object.defineProperty(o.prototype,"ref",i),Object.defineProperty(o.prototype,"select",i),Object.defineProperty(o.prototype,"index",i),Object.defineProperty(o.prototype,"unique",i),Object.defineProperty(o.prototype,"immutable",i),Object.defineProperty(o.prototype,"sparse",i),Object.defineProperty(o.prototype,"text",i),Object.defineProperty(o.prototype,"transform",i),t.exports=o},function(t,e,r){"use strict";t.exports=Object.freeze({enumerable:!0,configurable:!0,writable:!0,value:void 0})},function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"===("undefined"==typeof window?"undefined":r(window))&&(n=window)}t.exports=n},function(t,e,r){"use strict";
 /*!
  * Module dependencies.
  */function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=c(t);if(e){var o=c(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return u(this,r)}}function u(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var l=r(14),f=r(4),p=r(3),h=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(l,t);var e,r,n,c=a(l);function l(t,e,r,n,i){var s;if(o(this,l),arguments.length>0){var a=y(e),f=d(i),p=m(null,t,a,r,f);(s=c.call(this,p)).init(t,e,r,n,i)}else s=c.call(this,m());return u(s)}
@@ -480,7 +480,18 @@
  */e.internalToObjectOptions={transform:!1,virtuals:!1,getters:!1,_skipDepopulateTopLevel:!0,depopulate:!0,flattenDecimals:!1}},function(t,e){function r(t,e){if(!(this instanceof r))return new r(t,e);this._bsontype="Long",this.low_=0|t,this.high_=0|e}r.prototype.toInt=function(){return this.low_},r.prototype.toNumber=function(){return this.high_*r.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()},r.prototype.toJSON=function(){return this.toString()},r.prototype.toString=function(t){var e=t||10;if(e<2||36<e)throw Error("radix out of range: "+e);if(this.isZero())return"0";if(this.isNegative()){if(this.equals(r.MIN_VALUE)){var n=r.fromNumber(e),o=this.div(n),i=o.multiply(n).subtract(this);return o.toString(e)+i.toInt().toString(e)}return"-"+this.negate().toString(e)}var s=r.fromNumber(Math.pow(e,6));i=this;for(var a="";!i.isZero();){var u=i.div(s),c=i.subtract(u.multiply(s)).toInt().toString(e);if((i=u).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},r.prototype.getHighBits=function(){return this.high_},r.prototype.getLowBits=function(){return this.low_},r.prototype.getLowBitsUnsigned=function(){return this.low_>=0?this.low_:r.TWO_PWR_32_DBL_+this.low_},r.prototype.getNumBitsAbs=function(){if(this.isNegative())return this.equals(r.MIN_VALUE)?64:this.negate().getNumBitsAbs();for(var t=0!==this.high_?this.high_:this.low_,e=31;e>0&&0==(t&1<<e);e--);return 0!==this.high_?e+33:e+1},r.prototype.isZero=function(){return 0===this.high_&&0===this.low_},r.prototype.isNegative=function(){return this.high_<0},r.prototype.isOdd=function(){return 1==(1&this.low_)},r.prototype.equals=function(t){return this.high_===t.high_&&this.low_===t.low_},r.prototype.notEquals=function(t){return this.high_!==t.high_||this.low_!==t.low_},r.prototype.lessThan=function(t){return this.compare(t)<0},r.prototype.lessThanOrEqual=function(t){return this.compare(t)<=0},r.prototype.greaterThan=function(t){return this.compare(t)>0},r.prototype.greaterThanOrEqual=function(t){return this.compare(t)>=0},r.prototype.compare=function(t){if(this.equals(t))return 0;var e=this.isNegative(),r=t.isNegative();return e&&!r?-1:!e&&r?1:this.subtract(t).isNegative()?-1:1},r.prototype.negate=function(){return this.equals(r.MIN_VALUE)?r.MIN_VALUE:this.not().add(r.ONE)},r.prototype.add=function(t){var e=this.high_>>>16,n=65535&this.high_,o=this.low_>>>16,i=65535&this.low_,s=t.high_>>>16,a=65535&t.high_,u=t.low_>>>16,c=0,l=0,f=0,p=0;return f+=(p+=i+(65535&t.low_))>>>16,p&=65535,l+=(f+=o+u)>>>16,f&=65535,c+=(l+=n+a)>>>16,l&=65535,c+=e+s,c&=65535,r.fromBits(f<<16|p,c<<16|l)},r.prototype.subtract=function(t){return this.add(t.negate())},r.prototype.multiply=function(t){if(this.isZero())return r.ZERO;if(t.isZero())return r.ZERO;if(this.equals(r.MIN_VALUE))return t.isOdd()?r.MIN_VALUE:r.ZERO;if(t.equals(r.MIN_VALUE))return this.isOdd()?r.MIN_VALUE:r.ZERO;if(this.isNegative())return t.isNegative()?this.negate().multiply(t.negate()):this.negate().multiply(t).negate();if(t.isNegative())return this.multiply(t.negate()).negate();if(this.lessThan(r.TWO_PWR_24_)&&t.lessThan(r.TWO_PWR_24_))return r.fromNumber(this.toNumber()*t.toNumber());var e=this.high_>>>16,n=65535&this.high_,o=this.low_>>>16,i=65535&this.low_,s=t.high_>>>16,a=65535&t.high_,u=t.low_>>>16,c=65535&t.low_,l=0,f=0,p=0,h=0;return p+=(h+=i*c)>>>16,h&=65535,f+=(p+=o*c)>>>16,p&=65535,f+=(p+=i*u)>>>16,p&=65535,l+=(f+=n*c)>>>16,f&=65535,l+=(f+=o*u)>>>16,f&=65535,l+=(f+=i*a)>>>16,f&=65535,l+=e*c+n*u+o*a+i*s,l&=65535,r.fromBits(p<<16|h,l<<16|f)},r.prototype.div=function(t){if(t.isZero())throw Error("division by zero");if(this.isZero())return r.ZERO;if(this.equals(r.MIN_VALUE)){if(t.equals(r.ONE)||t.equals(r.NEG_ONE))return r.MIN_VALUE;if(t.equals(r.MIN_VALUE))return r.ONE;var e=this.shiftRight(1).div(t).shiftLeft(1);if(e.equals(r.ZERO))return t.isNegative()?r.ONE:r.NEG_ONE;var n=this.subtract(t.multiply(e));return e.add(n.div(t))}if(t.equals(r.MIN_VALUE))return r.ZERO;if(this.isNegative())return t.isNegative()?this.negate().div(t.negate()):this.negate().div(t).negate();if(t.isNegative())return this.div(t.negate()).negate();var o=r.ZERO;for(n=this;n.greaterThanOrEqual(t);){e=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var i=Math.ceil(Math.log(e)/Math.LN2),s=i<=48?1:Math.pow(2,i-48),a=r.fromNumber(e),u=a.multiply(t);u.isNegative()||u.greaterThan(n);)e-=s,u=(a=r.fromNumber(e)).multiply(t);a.isZero()&&(a=r.ONE),o=o.add(a),n=n.subtract(u)}return o},r.prototype.modulo=function(t){return this.subtract(this.div(t).multiply(t))},r.prototype.not=function(){return r.fromBits(~this.low_,~this.high_)},r.prototype.and=function(t){return r.fromBits(this.low_&t.low_,this.high_&t.high_)},r.prototype.or=function(t){return r.fromBits(this.low_|t.low_,this.high_|t.high_)},r.prototype.xor=function(t){return r.fromBits(this.low_^t.low_,this.high_^t.high_)},r.prototype.shiftLeft=function(t){if(0===(t&=63))return this;var e=this.low_;if(t<32){var n=this.high_;return r.fromBits(e<<t,n<<t|e>>>32-t)}return r.fromBits(0,e<<t-32)},r.prototype.shiftRight=function(t){if(0===(t&=63))return this;var e=this.high_;if(t<32){var n=this.low_;return r.fromBits(n>>>t|e<<32-t,e>>t)}return r.fromBits(e>>t-32,e>=0?0:-1)},r.prototype.shiftRightUnsigned=function(t){if(0===(t&=63))return this;var e=this.high_;if(t<32){var n=this.low_;return r.fromBits(n>>>t|e<<32-t,e>>>t)}return 32===t?r.fromBits(e,0):r.fromBits(e>>>t-32,0)},r.fromInt=function(t){if(-128<=t&&t<128){var e=r.INT_CACHE_[t];if(e)return e}var n=new r(0|t,t<0?-1:0);return-128<=t&&t<128&&(r.INT_CACHE_[t]=n),n},r.fromNumber=function(t){return isNaN(t)||!isFinite(t)?r.ZERO:t<=-r.TWO_PWR_63_DBL_?r.MIN_VALUE:t+1>=r.TWO_PWR_63_DBL_?r.MAX_VALUE:t<0?r.fromNumber(-t).negate():new r(t%r.TWO_PWR_32_DBL_|0,t/r.TWO_PWR_32_DBL_|0)},r.fromBits=function(t,e){return new r(t,e)},r.fromString=function(t,e){if(0===t.length)throw Error("number format error: empty string");var n=e||10;if(n<2||36<n)throw Error("radix out of range: "+n);if("-"===t.charAt(0))return r.fromString(t.substring(1),n).negate();if(t.indexOf("-")>=0)throw Error('number format error: interior "-" character: '+t);for(var o=r.fromNumber(Math.pow(n,8)),i=r.ZERO,s=0;s<t.length;s+=8){var a=Math.min(8,t.length-s),u=parseInt(t.substring(s,s+a),n);if(a<8){var c=r.fromNumber(Math.pow(n,a));i=i.multiply(c).add(r.fromNumber(u))}else i=(i=i.multiply(o)).add(r.fromNumber(u))}return i},r.INT_CACHE_={},r.TWO_PWR_16_DBL_=65536,r.TWO_PWR_24_DBL_=1<<24,r.TWO_PWR_32_DBL_=r.TWO_PWR_16_DBL_*r.TWO_PWR_16_DBL_,r.TWO_PWR_31_DBL_=r.TWO_PWR_32_DBL_/2,r.TWO_PWR_48_DBL_=r.TWO_PWR_32_DBL_*r.TWO_PWR_16_DBL_,r.TWO_PWR_64_DBL_=r.TWO_PWR_32_DBL_*r.TWO_PWR_32_DBL_,r.TWO_PWR_63_DBL_=r.TWO_PWR_64_DBL_/2,r.ZERO=r.fromInt(0),r.ONE=r.fromInt(1),r.NEG_ONE=r.fromInt(-1),r.MAX_VALUE=r.fromBits(-1,2147483647),r.MIN_VALUE=r.fromBits(0,-2147483648),r.TWO_PWR_24_=r.fromInt(1<<24),t.exports=r,t.exports.Long=r},function(t,e,r){"use strict";(function(e){var n=r(67),o=Symbol.for("mongoose:emitted");t.exports=function(t,r,i){return"function"==typeof t?r((function(r){if(null==r)t.apply(this,arguments);else{null!=i&&i.listeners("error").length>0&&!r[o]&&(r[o]=!0,i.emit("error",r));try{t(r)}catch(r){return e.nextTick((function(){throw r}))}}})):new(n.get())((function(t,e){r((function(r,n){return null!=r?(null!=i&&i.listeners("error").length>0&&!r[o]&&(r[o]=!0,i.emit("error",r)),e(r)):arguments.length>2?t(Array.prototype.slice.call(arguments,1)):void t(n)}))}))}}).call(this,r(8))},function(t,e,r){"use strict";
 /*!
  * Module dependencies.
- */var n=r(61)(),o=r(18).EventEmitter,i=r(30),s=r(50),a=r(22).internalToObjectOptions,u=r(4),c=r(24),l=r(3),f=r(0).documentArrayParent,p=r(0).validatorErrorSymbol;function h(t,e,r,o,i){null!=e&&e.isMongooseDocumentArray?(this.__parentArray=e,this[f]=e.$parent()):(this.__parentArray=void 0,this[f]=void 0),this.$setIndex(i),this.$isDocumentArrayElement=!0,n.call(this,t,o,r);var s=this;this.on("isNew",(function(t){s.isNew=t})),s.on("save",(function(){s.constructor.emit("save",s)}))}
+ */var n=r(7),o=r(51),i=r(20);function s(t,e){if(e&&e.default){var r=e.default;Array.isArray(r)&&0===r.length?e.default=Array:!e.shared&&i(r)&&0===Object.keys(r).length&&(e.default=function(){return{}})}n.call(this,t,e,"Mixed"),this[o.schemaMixedSymbol]=!0}s.schemaName="Mixed",s.defaultOptions={},
+/*!
+ * Inherits from SchemaType.
+ */
+s.prototype=Object.create(n.prototype),s.prototype.constructor=s,s.get=n.get,s.set=n.set,s.prototype.cast=function(t){return t},s.prototype.castForQuery=function(t,e){return 2===arguments.length?e:t},
+/*!
+ * Module exports.
+ */
+t.exports=s},function(t,e,r){"use strict";
+/*!
+ * Module dependencies.
+ */var n=r(61)(),o=r(18).EventEmitter,i=r(31),s=r(50),a=r(22).internalToObjectOptions,u=r(4),c=r(24),l=r(3),f=r(0).documentArrayParent,p=r(0).validatorErrorSymbol;function h(t,e,r,o,i){null!=e&&e.isMongooseDocumentArray?(this.__parentArray=e,this[f]=e.$parent()):(this.__parentArray=void 0,this[f]=void 0),this.$setIndex(i),this.$isDocumentArrayElement=!0,n.call(this,t,o,r);var s=this;this.on("isNew",(function(t){s.isNew=t})),s.on("save",(function(){s.constructor.emit("save",s)}))}
 /*!
  * Inherit from Document
  */for(var y in h.prototype=Object.create(n.prototype),h.prototype.constructor=h,o.prototype)h[y]=o.prototype[y];h.prototype.toBSON=function(){return this.toObject(a)},
@@ -515,7 +526,7 @@
 /*!
  * Module exports.
  */
-t.exports=h},function(t,e,r){(function(e){if(void 0!==e)var n=r(1).Buffer;var o=r(16);function i(t,e){if(!(this instanceof i))return new i(t,e);if(!(null==t||"string"==typeof t||n.isBuffer(t)||t instanceof Uint8Array||Array.isArray(t)))throw new Error("only String, Buffer, Uint8Array or Array accepted");if(this._bsontype="Binary",t instanceof Number?(this.sub_type=t,this.position=0):(this.sub_type=null==e?s:e,this.position=0),null==t||t instanceof Number)void 0!==n?this.buffer=o.allocBuffer(i.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(i.BUFFER_SIZE)):this.buffer=new Array(i.BUFFER_SIZE),this.position=0;else{if("string"==typeof t)if(void 0!==n)this.buffer=o.toBuffer(t);else{if("undefined"==typeof Uint8Array&&"[object Array]"!==Object.prototype.toString.call(t))throw new Error("only String, Buffer, Uint8Array or Array accepted");this.buffer=a(t)}else this.buffer=t;this.position=t.length}}i.prototype.put=function(t){if(null!=t.length&&"number"!=typeof t&&1!==t.length)throw new Error("only accepts single character String, Uint8Array or Array");if("number"!=typeof t&&t<0||t>255)throw new Error("only accepts number in a valid unsigned byte range 0-255");var e=null;if(e="string"==typeof t?t.charCodeAt(0):null!=t.length?t[0]:t,this.buffer.length>this.position)this.buffer[this.position++]=e;else if(void 0!==n&&n.isBuffer(this.buffer)){var r=o.allocBuffer(i.BUFFER_SIZE+this.buffer.length);this.buffer.copy(r,0,0,this.buffer.length),this.buffer=r,this.buffer[this.position++]=e}else{r=null,r="[object Uint8Array]"===Object.prototype.toString.call(this.buffer)?new Uint8Array(new ArrayBuffer(i.BUFFER_SIZE+this.buffer.length)):new Array(i.BUFFER_SIZE+this.buffer.length);for(var s=0;s<this.buffer.length;s++)r[s]=this.buffer[s];this.buffer=r,this.buffer[this.position++]=e}},i.prototype.write=function(t,e){if(e="number"==typeof e?e:this.position,this.buffer.length<e+t.length){var r=null;if(void 0!==n&&n.isBuffer(this.buffer))r=o.allocBuffer(this.buffer.length+t.length),this.buffer.copy(r,0,0,this.buffer.length);else if("[object Uint8Array]"===Object.prototype.toString.call(this.buffer)){r=new Uint8Array(new ArrayBuffer(this.buffer.length+t.length));for(var i=0;i<this.position;i++)r[i]=this.buffer[i]}this.buffer=r}if(void 0!==n&&n.isBuffer(t)&&n.isBuffer(this.buffer))t.copy(this.buffer,e,0,t.length),this.position=e+t.length>this.position?e+t.length:this.position;else if(void 0!==n&&"string"==typeof t&&n.isBuffer(this.buffer))this.buffer.write(t,e,"binary"),this.position=e+t.length>this.position?e+t.length:this.position;else if("[object Uint8Array]"===Object.prototype.toString.call(t)||"[object Array]"===Object.prototype.toString.call(t)&&"string"!=typeof t){for(i=0;i<t.length;i++)this.buffer[e++]=t[i];this.position=e>this.position?e:this.position}else if("string"==typeof t){for(i=0;i<t.length;i++)this.buffer[e++]=t.charCodeAt(i);this.position=e>this.position?e:this.position}},i.prototype.read=function(t,e){if(e=e&&e>0?e:this.position,this.buffer.slice)return this.buffer.slice(t,t+e);for(var r="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e)):new Array(e),n=0;n<e;n++)r[n]=this.buffer[t++];return r},i.prototype.value=function(t){if((t=null!=t&&t)&&void 0!==n&&n.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==n&&n.isBuffer(this.buffer))return t?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(t){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var e="[object Uint8Array]"===Object.prototype.toString.call(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),r=0;r<this.position;r++)e[r]=this.buffer[r];return e}return u(this.buffer,0,this.position)},i.prototype.length=function(){return this.position},i.prototype.toJSON=function(){return null!=this.buffer?this.buffer.toString("base64"):""},i.prototype.toString=function(t){return null!=this.buffer?this.buffer.slice(0,this.position).toString(t):""};var s=0,a=function(t){for(var e="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t.length)):new Array(t.length),r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e},u=function(t,e,r){for(var n="",o=e;o<r;o++)n+=String.fromCharCode(t[o]);return n};i.BUFFER_SIZE=256,i.SUBTYPE_DEFAULT=0,i.SUBTYPE_FUNCTION=1,i.SUBTYPE_BYTE_ARRAY=2,i.SUBTYPE_UUID_OLD=3,i.SUBTYPE_UUID=4,i.SUBTYPE_MD5=5,i.SUBTYPE_USER_DEFINED=128,t.exports=i,t.exports.Binary=i}).call(this,r(11))},function(t,e,r){"use strict";function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i=r(64),s=r(19),a=r(13),u=r(47),c=r(28),l=r(65),f=r(66),p=r(20),h=r(0);
+t.exports=h},function(t,e,r){(function(e){if(void 0!==e)var n=r(1).Buffer;var o=r(16);function i(t,e){if(!(this instanceof i))return new i(t,e);if(!(null==t||"string"==typeof t||n.isBuffer(t)||t instanceof Uint8Array||Array.isArray(t)))throw new Error("only String, Buffer, Uint8Array or Array accepted");if(this._bsontype="Binary",t instanceof Number?(this.sub_type=t,this.position=0):(this.sub_type=null==e?s:e,this.position=0),null==t||t instanceof Number)void 0!==n?this.buffer=o.allocBuffer(i.BUFFER_SIZE):"undefined"!=typeof Uint8Array?this.buffer=new Uint8Array(new ArrayBuffer(i.BUFFER_SIZE)):this.buffer=new Array(i.BUFFER_SIZE),this.position=0;else{if("string"==typeof t)if(void 0!==n)this.buffer=o.toBuffer(t);else{if("undefined"==typeof Uint8Array&&"[object Array]"!==Object.prototype.toString.call(t))throw new Error("only String, Buffer, Uint8Array or Array accepted");this.buffer=a(t)}else this.buffer=t;this.position=t.length}}i.prototype.put=function(t){if(null!=t.length&&"number"!=typeof t&&1!==t.length)throw new Error("only accepts single character String, Uint8Array or Array");if("number"!=typeof t&&t<0||t>255)throw new Error("only accepts number in a valid unsigned byte range 0-255");var e=null;if(e="string"==typeof t?t.charCodeAt(0):null!=t.length?t[0]:t,this.buffer.length>this.position)this.buffer[this.position++]=e;else if(void 0!==n&&n.isBuffer(this.buffer)){var r=o.allocBuffer(i.BUFFER_SIZE+this.buffer.length);this.buffer.copy(r,0,0,this.buffer.length),this.buffer=r,this.buffer[this.position++]=e}else{r=null,r="[object Uint8Array]"===Object.prototype.toString.call(this.buffer)?new Uint8Array(new ArrayBuffer(i.BUFFER_SIZE+this.buffer.length)):new Array(i.BUFFER_SIZE+this.buffer.length);for(var s=0;s<this.buffer.length;s++)r[s]=this.buffer[s];this.buffer=r,this.buffer[this.position++]=e}},i.prototype.write=function(t,e){if(e="number"==typeof e?e:this.position,this.buffer.length<e+t.length){var r=null;if(void 0!==n&&n.isBuffer(this.buffer))r=o.allocBuffer(this.buffer.length+t.length),this.buffer.copy(r,0,0,this.buffer.length);else if("[object Uint8Array]"===Object.prototype.toString.call(this.buffer)){r=new Uint8Array(new ArrayBuffer(this.buffer.length+t.length));for(var i=0;i<this.position;i++)r[i]=this.buffer[i]}this.buffer=r}if(void 0!==n&&n.isBuffer(t)&&n.isBuffer(this.buffer))t.copy(this.buffer,e,0,t.length),this.position=e+t.length>this.position?e+t.length:this.position;else if(void 0!==n&&"string"==typeof t&&n.isBuffer(this.buffer))this.buffer.write(t,e,"binary"),this.position=e+t.length>this.position?e+t.length:this.position;else if("[object Uint8Array]"===Object.prototype.toString.call(t)||"[object Array]"===Object.prototype.toString.call(t)&&"string"!=typeof t){for(i=0;i<t.length;i++)this.buffer[e++]=t[i];this.position=e>this.position?e:this.position}else if("string"==typeof t){for(i=0;i<t.length;i++)this.buffer[e++]=t.charCodeAt(i);this.position=e>this.position?e:this.position}},i.prototype.read=function(t,e){if(e=e&&e>0?e:this.position,this.buffer.slice)return this.buffer.slice(t,t+e);for(var r="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(e)):new Array(e),n=0;n<e;n++)r[n]=this.buffer[t++];return r},i.prototype.value=function(t){if((t=null!=t&&t)&&void 0!==n&&n.isBuffer(this.buffer)&&this.buffer.length===this.position)return this.buffer;if(void 0!==n&&n.isBuffer(this.buffer))return t?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position);if(t){if(null!=this.buffer.slice)return this.buffer.slice(0,this.position);for(var e="[object Uint8Array]"===Object.prototype.toString.call(this.buffer)?new Uint8Array(new ArrayBuffer(this.position)):new Array(this.position),r=0;r<this.position;r++)e[r]=this.buffer[r];return e}return u(this.buffer,0,this.position)},i.prototype.length=function(){return this.position},i.prototype.toJSON=function(){return null!=this.buffer?this.buffer.toString("base64"):""},i.prototype.toString=function(t){return null!=this.buffer?this.buffer.slice(0,this.position).toString(t):""};var s=0,a=function(t){for(var e="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(t.length)):new Array(t.length),r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e},u=function(t,e,r){for(var n="",o=e;o<r;o++)n+=String.fromCharCode(t[o]);return n};i.BUFFER_SIZE=256,i.SUBTYPE_DEFAULT=0,i.SUBTYPE_FUNCTION=1,i.SUBTYPE_BYTE_ARRAY=2,i.SUBTYPE_UUID_OLD=3,i.SUBTYPE_UUID=4,i.SUBTYPE_MD5=5,i.SUBTYPE_USER_DEFINED=128,t.exports=i,t.exports.Binary=i}).call(this,r(11))},function(t,e,r){"use strict";function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i=r(64),s=r(19),a=r(13),u=r(47),c=r(29),l=r(65),f=r(66),p=r(20),h=r(0);
 /*!
  * Object clone with Mongoose natives support.
  *
@@ -569,17 +580,6 @@
  * Module dependencies.
  */function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){return(o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function i(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=a(t);if(e){var o=a(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return s(this,r)}}function s(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var u=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}(r,t);var e=i(r);function r(t,n,o){var i;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),n=n||"Field `"+t+"` is not in schema and strict mode is set to throw.",(i=e.call(this,n)).isImmutableError=!!o,i.path=t,i}return r}(r(5));Object.defineProperty(u.prototype,"name",{value:"StrictModeError"}),t.exports=u},function(t,e,r){"use strict";
 /*!
- * Module dependencies.
- */var n=r(7),o=r(51),i=r(20);function s(t,e){if(e&&e.default){var r=e.default;Array.isArray(r)&&0===r.length?e.default=Array:!e.shared&&i(r)&&0===Object.keys(r).length&&(e.default=function(){return{}})}n.call(this,t,e,"Mixed"),this[o.schemaMixedSymbol]=!0}s.schemaName="Mixed",s.defaultOptions={},
-/*!
- * Inherits from SchemaType.
- */
-s.prototype=Object.create(n.prototype),s.prototype.constructor=s,s.get=n.get,s.set=n.set,s.prototype.cast=function(t){return t},s.prototype.castForQuery=function(t,e){return 2===arguments.length?e:t},
-/*!
- * Module exports.
- */
-t.exports=s},function(t,e,r){"use strict";
-/*!
  * Module requirements.
  */var n=r(78);
 /*!
@@ -594,7 +594,7 @@
 *
 * @param {Model} model
 * @param {string} value
-*/t.exports=function(t,e){var r=null;if(!t.discriminators)return r;for(var n in t.discriminators){var o=t.discriminators[n];if(o.schema&&o.schema.discriminatorMapping&&o.schema.discriminatorMapping.value==e){r=o;break}}return r}},function(t,e,r){"use strict";var n=r(59),o=r(23),i=r(36),s=r(37),a=r(38),u=r(39),c=r(40),l=r(60),f=r(41),p=r(42),h=r(43),y=r(44),d=r(45),m=r(26),_=r(102),v=r(103),g=r(105),b=r(16),w=b.allocBuffer(17825792),O=function(){};O.prototype.serialize=function(t,e){var r="boolean"==typeof(e=e||{}).checkKeys&&e.checkKeys,n="boolean"==typeof e.serializeFunctions&&e.serializeFunctions,o="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined,i="number"==typeof e.minInternalBufferSize?e.minInternalBufferSize:17825792;w.length<i&&(w=b.allocBuffer(i));var s=v(w,t,r,0,0,n,o,[]),a=b.allocBuffer(s);return w.copy(a,0,0,a.length),a},O.prototype.serializeWithBufferAndIndex=function(t,e,r){var n="boolean"==typeof(r=r||{}).checkKeys&&r.checkKeys,o="boolean"==typeof r.serializeFunctions&&r.serializeFunctions,i="boolean"!=typeof r.ignoreUndefined||r.ignoreUndefined,s="number"==typeof r.index?r.index:0;return v(e,t,n,s||0,0,o,i)-1},O.prototype.deserialize=function(t,e){return _(t,e)},O.prototype.calculateObjectSize=function(t,e){var r="boolean"==typeof(e=e||{}).serializeFunctions&&e.serializeFunctions,n="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined;return g(t,r,n)},O.prototype.deserializeStream=function(t,e,r,n,o,i){i=null!=i?i:{};for(var s=e,a=0;a<r;a++){var u=t[s]|t[s+1]<<8|t[s+2]<<16|t[s+3]<<24;i.index=s,n[o+a]=this.deserialize(t,i),s+=u}return s},O.BSON_INT32_MAX=2147483647,O.BSON_INT32_MIN=-2147483648,O.BSON_INT64_MAX=Math.pow(2,63)-1,O.BSON_INT64_MIN=-Math.pow(2,63),O.JS_INT_MAX=9007199254740992,O.JS_INT_MIN=-9007199254740992,O.BSON_DATA_NUMBER=1,O.BSON_DATA_STRING=2,O.BSON_DATA_OBJECT=3,O.BSON_DATA_ARRAY=4,O.BSON_DATA_BINARY=5,O.BSON_DATA_OID=7,O.BSON_DATA_BOOLEAN=8,O.BSON_DATA_DATE=9,O.BSON_DATA_NULL=10,O.BSON_DATA_REGEXP=11,O.BSON_DATA_CODE=13,O.BSON_DATA_SYMBOL=14,O.BSON_DATA_CODE_W_SCOPE=15,O.BSON_DATA_INT=16,O.BSON_DATA_TIMESTAMP=17,O.BSON_DATA_LONG=18,O.BSON_DATA_MIN_KEY=255,O.BSON_DATA_MAX_KEY=127,O.BSON_BINARY_SUBTYPE_DEFAULT=0,O.BSON_BINARY_SUBTYPE_FUNCTION=1,O.BSON_BINARY_SUBTYPE_BYTE_ARRAY=2,O.BSON_BINARY_SUBTYPE_UUID=3,O.BSON_BINARY_SUBTYPE_MD5=4,O.BSON_BINARY_SUBTYPE_USER_DEFINED=128,t.exports=O,t.exports.Code=f,t.exports.Map=n,t.exports.Symbol=c,t.exports.BSON=O,t.exports.DBRef=d,t.exports.Binary=m,t.exports.ObjectID=a,t.exports.Long=o,t.exports.Timestamp=s,t.exports.Double=i,t.exports.Int32=l,t.exports.MinKey=h,t.exports.MaxKey=y,t.exports.BSONRegExp=u,t.exports.Decimal128=p},function(t,e){function r(t){if(!(this instanceof r))return new r(t);this._bsontype="Double",this.value=t}r.prototype.valueOf=function(){return this.value},r.prototype.toJSON=function(){return this.value},t.exports=r,t.exports.Double=r},function(t,e){function r(t,e){if(!(this instanceof r))return new r(t,e);this._bsontype="Timestamp",this.low_=0|t,this.high_=0|e}r.prototype.toInt=function(){return this.low_},r.prototype.toNumber=function(){return this.high_*r.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()},r.prototype.toJSON=function(){return this.toString()},r.prototype.toString=function(t){var e=t||10;if(e<2||36<e)throw Error("radix out of range: "+e);if(this.isZero())return"0";if(this.isNegative()){if(this.equals(r.MIN_VALUE)){var n=r.fromNumber(e),o=this.div(n),i=o.multiply(n).subtract(this);return o.toString(e)+i.toInt().toString(e)}return"-"+this.negate().toString(e)}var s=r.fromNumber(Math.pow(e,6));i=this;for(var a="";!i.isZero();){var u=i.div(s),c=i.subtract(u.multiply(s)).toInt().toString(e);if((i=u).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},r.prototype.getHighBits=function(){return this.high_},r.prototype.getLowBits=function(){return this.low_},r.prototype.getLowBitsUnsigned=function(){return this.low_>=0?this.low_:r.TWO_PWR_32_DBL_+this.low_},r.prototype.getNumBitsAbs=function(){if(this.isNegative())return this.equals(r.MIN_VALUE)?64:this.negate().getNumBitsAbs();for(var t=0!==this.high_?this.high_:this.low_,e=31;e>0&&0==(t&1<<e);e--);return 0!==this.high_?e+33:e+1},r.prototype.isZero=function(){return 0===this.high_&&0===this.low_},r.prototype.isNegative=function(){return this.high_<0},r.prototype.isOdd=function(){return 1==(1&this.low_)},r.prototype.equals=function(t){return this.high_===t.high_&&this.low_===t.low_},r.prototype.notEquals=function(t){return this.high_!==t.high_||this.low_!==t.low_},r.prototype.lessThan=function(t){return this.compare(t)<0},r.prototype.lessThanOrEqual=function(t){return this.compare(t)<=0},r.prototype.greaterThan=function(t){return this.compare(t)>0},r.prototype.greaterThanOrEqual=function(t){return this.compare(t)>=0},r.prototype.compare=function(t){if(this.equals(t))return 0;var e=this.isNegative(),r=t.isNegative();return e&&!r?-1:!e&&r?1:this.subtract(t).isNegative()?-1:1},r.prototype.negate=function(){return this.equals(r.MIN_VALUE)?r.MIN_VALUE:this.not().add(r.ONE)},r.prototype.add=function(t){var e=this.high_>>>16,n=65535&this.high_,o=this.low_>>>16,i=65535&this.low_,s=t.high_>>>16,a=65535&t.high_,u=t.low_>>>16,c=0,l=0,f=0,p=0;return f+=(p+=i+(65535&t.low_))>>>16,p&=65535,l+=(f+=o+u)>>>16,f&=65535,c+=(l+=n+a)>>>16,l&=65535,c+=e+s,c&=65535,r.fromBits(f<<16|p,c<<16|l)},r.prototype.subtract=function(t){return this.add(t.negate())},r.prototype.multiply=function(t){if(this.isZero())return r.ZERO;if(t.isZero())return r.ZERO;if(this.equals(r.MIN_VALUE))return t.isOdd()?r.MIN_VALUE:r.ZERO;if(t.equals(r.MIN_VALUE))return this.isOdd()?r.MIN_VALUE:r.ZERO;if(this.isNegative())return t.isNegative()?this.negate().multiply(t.negate()):this.negate().multiply(t).negate();if(t.isNegative())return this.multiply(t.negate()).negate();if(this.lessThan(r.TWO_PWR_24_)&&t.lessThan(r.TWO_PWR_24_))return r.fromNumber(this.toNumber()*t.toNumber());var e=this.high_>>>16,n=65535&this.high_,o=this.low_>>>16,i=65535&this.low_,s=t.high_>>>16,a=65535&t.high_,u=t.low_>>>16,c=65535&t.low_,l=0,f=0,p=0,h=0;return p+=(h+=i*c)>>>16,h&=65535,f+=(p+=o*c)>>>16,p&=65535,f+=(p+=i*u)>>>16,p&=65535,l+=(f+=n*c)>>>16,f&=65535,l+=(f+=o*u)>>>16,f&=65535,l+=(f+=i*a)>>>16,f&=65535,l+=e*c+n*u+o*a+i*s,l&=65535,r.fromBits(p<<16|h,l<<16|f)},r.prototype.div=function(t){if(t.isZero())throw Error("division by zero");if(this.isZero())return r.ZERO;if(this.equals(r.MIN_VALUE)){if(t.equals(r.ONE)||t.equals(r.NEG_ONE))return r.MIN_VALUE;if(t.equals(r.MIN_VALUE))return r.ONE;var e=this.shiftRight(1).div(t).shiftLeft(1);if(e.equals(r.ZERO))return t.isNegative()?r.ONE:r.NEG_ONE;var n=this.subtract(t.multiply(e));return e.add(n.div(t))}if(t.equals(r.MIN_VALUE))return r.ZERO;if(this.isNegative())return t.isNegative()?this.negate().div(t.negate()):this.negate().div(t).negate();if(t.isNegative())return this.div(t.negate()).negate();var o=r.ZERO;for(n=this;n.greaterThanOrEqual(t);){e=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var i=Math.ceil(Math.log(e)/Math.LN2),s=i<=48?1:Math.pow(2,i-48),a=r.fromNumber(e),u=a.multiply(t);u.isNegative()||u.greaterThan(n);)e-=s,u=(a=r.fromNumber(e)).multiply(t);a.isZero()&&(a=r.ONE),o=o.add(a),n=n.subtract(u)}return o},r.prototype.modulo=function(t){return this.subtract(this.div(t).multiply(t))},r.prototype.not=function(){return r.fromBits(~this.low_,~this.high_)},r.prototype.and=function(t){return r.fromBits(this.low_&t.low_,this.high_&t.high_)},r.prototype.or=function(t){return r.fromBits(this.low_|t.low_,this.high_|t.high_)},r.prototype.xor=function(t){return r.fromBits(this.low_^t.low_,this.high_^t.high_)},r.prototype.shiftLeft=function(t){if(0===(t&=63))return this;var e=this.low_;if(t<32){var n=this.high_;return r.fromBits(e<<t,n<<t|e>>>32-t)}return r.fromBits(0,e<<t-32)},r.prototype.shiftRight=function(t){if(0===(t&=63))return this;var e=this.high_;if(t<32){var n=this.low_;return r.fromBits(n>>>t|e<<32-t,e>>t)}return r.fromBits(e>>t-32,e>=0?0:-1)},r.prototype.shiftRightUnsigned=function(t){if(0===(t&=63))return this;var e=this.high_;if(t<32){var n=this.low_;return r.fromBits(n>>>t|e<<32-t,e>>>t)}return 32===t?r.fromBits(e,0):r.fromBits(e>>>t-32,0)},r.fromInt=function(t){if(-128<=t&&t<128){var e=r.INT_CACHE_[t];if(e)return e}var n=new r(0|t,t<0?-1:0);return-128<=t&&t<128&&(r.INT_CACHE_[t]=n),n},r.fromNumber=function(t){return isNaN(t)||!isFinite(t)?r.ZERO:t<=-r.TWO_PWR_63_DBL_?r.MIN_VALUE:t+1>=r.TWO_PWR_63_DBL_?r.MAX_VALUE:t<0?r.fromNumber(-t).negate():new r(t%r.TWO_PWR_32_DBL_|0,t/r.TWO_PWR_32_DBL_|0)},r.fromBits=function(t,e){return new r(t,e)},r.fromString=function(t,e){if(0===t.length)throw Error("number format error: empty string");var n=e||10;if(n<2||36<n)throw Error("radix out of range: "+n);if("-"===t.charAt(0))return r.fromString(t.substring(1),n).negate();if(t.indexOf("-")>=0)throw Error('number format error: interior "-" character: '+t);for(var o=r.fromNumber(Math.pow(n,8)),i=r.ZERO,s=0;s<t.length;s+=8){var a=Math.min(8,t.length-s),u=parseInt(t.substring(s,s+a),n);if(a<8){var c=r.fromNumber(Math.pow(n,a));i=i.multiply(c).add(r.fromNumber(u))}else i=(i=i.multiply(o)).add(r.fromNumber(u))}return i},r.INT_CACHE_={},r.TWO_PWR_16_DBL_=65536,r.TWO_PWR_24_DBL_=1<<24,r.TWO_PWR_32_DBL_=r.TWO_PWR_16_DBL_*r.TWO_PWR_16_DBL_,r.TWO_PWR_31_DBL_=r.TWO_PWR_32_DBL_/2,r.TWO_PWR_48_DBL_=r.TWO_PWR_32_DBL_*r.TWO_PWR_16_DBL_,r.TWO_PWR_64_DBL_=r.TWO_PWR_32_DBL_*r.TWO_PWR_32_DBL_,r.TWO_PWR_63_DBL_=r.TWO_PWR_64_DBL_/2,r.ZERO=r.fromInt(0),r.ONE=r.fromInt(1),r.NEG_ONE=r.fromInt(-1),r.MAX_VALUE=r.fromBits(-1,2147483647),r.MIN_VALUE=r.fromBits(0,-2147483648),r.TWO_PWR_24_=r.fromInt(1<<24),t.exports=r,t.exports.Timestamp=r},function(t,e,r){(function(e,n){var o="inspect",i=r(16),s=parseInt(16777215*Math.random(),10),a=new RegExp("^[0-9a-fA-F]{24}$");try{if(e&&e.from){var u=!0;o=r(3).inspect.custom||"inspect"}}catch(t){u=!1}for(var c=function t(e){if(e instanceof t)return e;if(!(this instanceof t))return new t(e);if(this._bsontype="ObjectID",null==e||"number"==typeof e)return this.id=this.generate(e),void(t.cacheHexString&&(this.__id=this.toString("hex")));var r=t.isValid(e);if(!r&&null!=e)throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(r&&"string"==typeof e&&24===e.length&&u)return new t(i.toBuffer(e,"hex"));if(r&&"string"==typeof e&&24===e.length)return t.createFromHexString(e);if(null==e||12!==e.length){if(null!=e&&"function"==typeof e.toHexString)return e;throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=e,t.cacheHexString&&(this.__id=this.toString("hex"))},l=[],f=0;f<256;f++)l[f]=(f<=15?"0":"")+f.toString(16);c.prototype.toHexString=function(){if(c.cacheHexString&&this.__id)return this.__id;var t="";if(!this.id||!this.id.length)throw new Error("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof h)return t=y(this.id),c.cacheHexString&&(this.__id=t),t;for(var e=0;e<this.id.length;e++)t+=l[this.id.charCodeAt(e)];return c.cacheHexString&&(this.__id=t),t},c.prototype.get_inc=function(){return c.index=(c.index+1)%16777215},c.prototype.getInc=function(){return this.get_inc()},c.prototype.generate=function(t){"number"!=typeof t&&(t=~~(Date.now()/1e3));var e=(void 0===n||1===n.pid?Math.floor(1e5*Math.random()):n.pid)%65535,r=this.get_inc(),o=i.allocBuffer(12);return o[3]=255&t,o[2]=t>>8&255,o[1]=t>>16&255,o[0]=t>>24&255,o[6]=255&s,o[5]=s>>8&255,o[4]=s>>16&255,o[8]=255&e,o[7]=e>>8&255,o[11]=255&r,o[10]=r>>8&255,o[9]=r>>16&255,o},c.prototype.toString=function(t){return this.id&&this.id.copy?this.id.toString("string"==typeof t?t:"hex"):this.toHexString()},c.prototype[o]=c.prototype.toString,c.prototype.toJSON=function(){return this.toHexString()},c.prototype.equals=function(t){return t instanceof c?this.toString()===t.toString():"string"==typeof t&&c.isValid(t)&&12===t.length&&this.id instanceof h?t===this.id.toString("binary"):"string"==typeof t&&c.isValid(t)&&24===t.length?t.toLowerCase()===this.toHexString():"string"==typeof t&&c.isValid(t)&&12===t.length?t===this.id:!(null==t||!(t instanceof c||t.toHexString))&&t.toHexString()===this.toHexString()},c.prototype.getTimestamp=function(){var t=new Date,e=this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24;return t.setTime(1e3*Math.floor(e)),t},c.index=~~(16777215*Math.random()),c.createPk=function(){return new c},c.createFromTime=function(t){var e=i.toBuffer([0,0,0,0,0,0,0,0,0,0,0,0]);return e[3]=255&t,e[2]=t>>8&255,e[1]=t>>16&255,e[0]=t>>24&255,new c(e)};var p=[];for(f=0;f<10;)p[48+f]=f++;for(;f<16;)p[55+f]=p[87+f]=f++;var h=e,y=function(t){return t.toString("hex")};c.createFromHexString=function(t){if(void 0===t||null!=t&&24!==t.length)throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(u)return new c(i.toBuffer(t,"hex"));for(var e=new h(12),r=0,n=0;n<24;)e[r++]=p[t.charCodeAt(n++)]<<4|p[t.charCodeAt(n++)];return new c(e)},c.isValid=function(t){return null!=t&&("number"==typeof t||("string"==typeof t?12===t.length||24===t.length&&a.test(t):t instanceof c||(t instanceof h||"function"==typeof t.toHexString&&(t.id instanceof h||"string"==typeof t.id)&&(12===t.id.length||24===t.id.length&&a.test(t.id)))))},Object.defineProperty(c.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(t){this.id[3]=255&t,this.id[2]=t>>8&255,this.id[1]=t>>16&255,this.id[0]=t>>24&255}}),t.exports=c,t.exports.ObjectID=c,t.exports.ObjectId=c}).call(this,r(1).Buffer,r(8))},function(t,e){function r(t,e){if(!(this instanceof r))return new r;this._bsontype="BSONRegExp",this.pattern=t||"",this.options=e||"";for(var n=0;n<this.options.length;n++)if("i"!==this.options[n]&&"m"!==this.options[n]&&"x"!==this.options[n]&&"l"!==this.options[n]&&"s"!==this.options[n]&&"u"!==this.options[n])throw new Error("the regular expression options ["+this.options[n]+"] is not supported")}t.exports=r,t.exports.BSONRegExp=r},function(t,e,r){(function(e){var n=e&&r(3).inspect.custom||"inspect";function o(t){if(!(this instanceof o))return new o(t);this._bsontype="Symbol",this.value=t}o.prototype.valueOf=function(){return this.value},o.prototype.toString=function(){return this.value},o.prototype[n]=function(){return this.value},o.prototype.toJSON=function(){return this.value},t.exports=o,t.exports.Symbol=o}).call(this,r(1).Buffer)},function(t,e){var r=function t(e,r){if(!(this instanceof t))return new t(e,r);this._bsontype="Code",this.code=e,this.scope=r};r.prototype.toJSON=function(){return{scope:this.scope,code:this.code}},t.exports=r,t.exports.Code=r},function(t,e,r){"use strict";var n=r(23),o=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,i=/^(\+|-)?(Infinity|inf)$/i,s=/^(\+|-)?NaN$/i,a=6176,u=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),c=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),l=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),f=/^([-+])?(\d+)?$/,p=r(16),h=function(t){return!isNaN(parseInt(t,10))},y=function(t){var e=n.fromNumber(1e9),r=n.fromNumber(0),o=0;if(!(t.parts[0]||t.parts[1]||t.parts[2]||t.parts[3]))return{quotient:t,rem:r};for(o=0;o<=3;o++)r=(r=r.shiftLeft(32)).add(new n(t.parts[o],0)),t.parts[o]=r.div(e).low_,r=r.modulo(e);return{quotient:t,rem:r}},d=function(t){this._bsontype="Decimal128",this.bytes=t};d.fromString=function(t){var e,r=!1,y=!1,m=!1,_=0,v=0,g=0,b=0,w=0,O=[0],S=0,A=0,E=0,j=0,$=0,x=0,P=[0,0],N=[0,0],T=0;if((t=t.trim()).length>=7e3)throw new Error(t+" not a valid Decimal128 string");var k=t.match(o),C=t.match(i),R=t.match(s);if(!k&&!C&&!R||0===t.length)throw new Error(t+" not a valid Decimal128 string");if(k&&k[4]&&void 0===k[2])throw new Error(t+" not a valid Decimal128 string");if("+"!==t[T]&&"-"!==t[T]||(r="-"===t[T++]),!h(t[T])&&"."!==t[T]){if("i"===t[T]||"I"===t[T])return new d(p.toBuffer(r?c:l));if("N"===t[T])return new d(p.toBuffer(u))}for(;h(t[T])||"."===t[T];)if("."!==t[T])S<34&&("0"!==t[T]||m)&&(m||(w=v),m=!0,O[A++]=parseInt(t[T],10),S+=1),m&&(g+=1),y&&(b+=1),v+=1,T+=1;else{if(y)return new d(p.toBuffer(u));y=!0,T+=1}if(y&&!v)throw new Error(t+" not a valid Decimal128 string");if("e"===t[T]||"E"===t[T]){var B=t.substr(++T).match(f);if(!B||!B[2])return new d(p.toBuffer(u));$=parseInt(B[0],10),T+=B[0].length}if(t[T])return new d(p.toBuffer(u));if(E=0,S){if(j=S-1,_=g,0!==$&&1!==_)for(;"0"===t[w+_-1];)_-=1}else E=0,j=0,O[0]=0,g=1,S=1,_=0;for($<=b&&b-$>16384?$=-6176:$-=b;$>6111;){if((j+=1)-E>34){var D=O.join("");if(D.match(/^0+$/)){$=6111;break}return new d(p.toBuffer(r?c:l))}$-=1}for(;$<-6176||S<g;){if(0===j){$=-6176,_=0;break}if(S<g?g-=1:j-=1,!($<6111)){if((D=O.join("")).match(/^0+$/)){$=6111;break}return new d(p.toBuffer(r?c:l))}$+=1}if(j-E+1<_&&"0"!==t[_]){var M=v;y&&-6176===$&&(w+=1,M+=1);var I=parseInt(t[w+j+1],10),F=0;if(I>=5&&(F=1,5===I))for(F=O[j]%2==1,x=w+j+2;x<M;x++)if(parseInt(t[x],10)){F=1;break}if(F)for(var L=j;L>=0&&++O[L]>9;L--)if(O[L]=0,0===L){if(!($<6111))return new d(p.toBuffer(r?c:l));$+=1,O[L]=1}}if(P=n.fromNumber(0),N=n.fromNumber(0),0===_)P=n.fromNumber(0),N=n.fromNumber(0);else if(j-E<17)for(L=E,N=n.fromNumber(O[L++]),P=new n(0,0);L<=j;L++)N=(N=N.multiply(n.fromNumber(10))).add(n.fromNumber(O[L]));else{for(L=E,P=n.fromNumber(O[L++]);L<=j-17;L++)P=(P=P.multiply(n.fromNumber(10))).add(n.fromNumber(O[L]));for(N=n.fromNumber(O[L++]);L<=j;L++)N=(N=N.multiply(n.fromNumber(10))).add(n.fromNumber(O[L]))}var U,V,q,W,H=function(t,e){if(!t&&!e)return{high:n.fromNumber(0),low:n.fromNumber(0)};var r=t.shiftRightUnsigned(32),o=new n(t.getLowBits(),0),i=e.shiftRightUnsigned(32),s=new n(e.getLowBits(),0),a=r.multiply(i),u=r.multiply(s),c=o.multiply(i),l=o.multiply(s);return a=a.add(u.shiftRightUnsigned(32)),u=new n(u.getLowBits(),0).add(c).add(l.shiftRightUnsigned(32)),{high:a=a.add(u.shiftRightUnsigned(32)),low:l=u.shiftLeft(32).add(new n(l.getLowBits(),0))}}(P,n.fromString("100000000000000000"));H.low=H.low.add(N),U=H.low,V=N,q=U.high_>>>0,W=V.high_>>>0,(q<W||q===W&&U.low_>>>0<V.low_>>>0)&&(H.high=H.high.add(n.fromNumber(1))),e=$+a;var Y={low:n.fromNumber(0),high:n.fromNumber(0)};H.high.shiftRightUnsigned(49).and(n.fromNumber(1)).equals(n.fromNumber)?(Y.high=Y.high.or(n.fromNumber(3).shiftLeft(61)),Y.high=Y.high.or(n.fromNumber(e).and(n.fromNumber(16383).shiftLeft(47))),Y.high=Y.high.or(H.high.and(n.fromNumber(0x7fffffffffff)))):(Y.high=Y.high.or(n.fromNumber(16383&e).shiftLeft(49)),Y.high=Y.high.or(H.high.and(n.fromNumber(562949953421311)))),Y.low=H.low,r&&(Y.high=Y.high.or(n.fromString("9223372036854775808")));var K=p.allocBuffer(16);return T=0,K[T++]=255&Y.low.low_,K[T++]=Y.low.low_>>8&255,K[T++]=Y.low.low_>>16&255,K[T++]=Y.low.low_>>24&255,K[T++]=255&Y.low.high_,K[T++]=Y.low.high_>>8&255,K[T++]=Y.low.high_>>16&255,K[T++]=Y.low.high_>>24&255,K[T++]=255&Y.high.low_,K[T++]=Y.high.low_>>8&255,K[T++]=Y.high.low_>>16&255,K[T++]=Y.high.low_>>24&255,K[T++]=255&Y.high.high_,K[T++]=Y.high.high_>>8&255,K[T++]=Y.high.high_>>16&255,K[T++]=Y.high.high_>>24&255,new d(K)};a=6176,d.prototype.toString=function(){for(var t,e,r,o,i,s,u=0,c=new Array(36),l=0;l<c.length;l++)c[l]=0;var f,p,h,d,m,_=0,v=!1,g={parts:new Array(4)},b=[];_=0;var w=this.bytes;if(o=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,r=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,e=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,t=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,_=0,{low:new n(o,r),high:new n(e,t)}.high.lessThan(n.ZERO)&&b.push("-"),(i=t>>26&31)>>3==3){if(30===i)return b.join("")+"Infinity";if(31===i)return"NaN";s=t>>15&16383,h=8+(t>>14&1)}else h=t>>14&7,s=t>>17&16383;if(f=s-a,g.parts[0]=(16383&t)+((15&h)<<14),g.parts[1]=e,g.parts[2]=r,g.parts[3]=o,0===g.parts[0]&&0===g.parts[1]&&0===g.parts[2]&&0===g.parts[3])v=!0;else for(m=3;m>=0;m--){var O=0,S=y(g);if(g=S.quotient,O=S.rem.low_)for(d=8;d>=0;d--)c[9*m+d]=O%10,O=Math.floor(O/10)}if(v)u=1,c[_]=0;else for(u=36,l=0;!c[_];)l++,u-=1,_+=1;if((p=u-1+f)>=34||p<=-7||f>0){for(b.push(c[_++]),(u-=1)&&b.push("."),l=0;l<u;l++)b.push(c[_++]);b.push("E"),p>0?b.push("+"+p):b.push(p)}else if(f>=0)for(l=0;l<u;l++)b.push(c[_++]);else{var A=u+f;if(A>0)for(l=0;l<A;l++)b.push(c[_++]);else b.push("0");for(b.push(".");A++<0;)b.push("0");for(l=0;l<u-Math.max(A-1,0);l++)b.push(c[_++])}return b.join("")},d.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},t.exports=d,t.exports.Decimal128=d},function(t,e){function r(){if(!(this instanceof r))return new r;this._bsontype="MinKey"}t.exports=r,t.exports.MinKey=r},function(t,e){function r(){if(!(this instanceof r))return new r;this._bsontype="MaxKey"}t.exports=r,t.exports.MaxKey=r},function(t,e){function r(t,e,n){if(!(this instanceof r))return new r(t,e,n);this._bsontype="DBRef",this.namespace=t,this.oid=e,this.db=n}r.prototype.toJSON=function(){return{$ref:this.namespace,$id:this.oid,$db:null==this.db?"":this.db}},t.exports=r,t.exports.DBRef=r},function(t,e,r){t.exports=r(112)},function(t,e,r){"use strict";t.exports=new Set(["__proto__","constructor","prototype"])},function(t,e,r){"use strict";var n=r(49);
+*/t.exports=function(t,e){var r=null;if(!t.discriminators)return r;for(var n in t.discriminators){var o=t.discriminators[n];if(o.schema&&o.schema.discriminatorMapping&&o.schema.discriminatorMapping.value==e){r=o;break}}return r}},function(t,e,r){"use strict";var n=r(59),o=r(23),i=r(36),s=r(37),a=r(38),u=r(39),c=r(40),l=r(60),f=r(41),p=r(42),h=r(43),y=r(44),d=r(45),m=r(27),_=r(102),v=r(103),g=r(105),b=r(16),w=b.allocBuffer(17825792),O=function(){};O.prototype.serialize=function(t,e){var r="boolean"==typeof(e=e||{}).checkKeys&&e.checkKeys,n="boolean"==typeof e.serializeFunctions&&e.serializeFunctions,o="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined,i="number"==typeof e.minInternalBufferSize?e.minInternalBufferSize:17825792;w.length<i&&(w=b.allocBuffer(i));var s=v(w,t,r,0,0,n,o,[]),a=b.allocBuffer(s);return w.copy(a,0,0,a.length),a},O.prototype.serializeWithBufferAndIndex=function(t,e,r){var n="boolean"==typeof(r=r||{}).checkKeys&&r.checkKeys,o="boolean"==typeof r.serializeFunctions&&r.serializeFunctions,i="boolean"!=typeof r.ignoreUndefined||r.ignoreUndefined,s="number"==typeof r.index?r.index:0;return v(e,t,n,s||0,0,o,i)-1},O.prototype.deserialize=function(t,e){return _(t,e)},O.prototype.calculateObjectSize=function(t,e){var r="boolean"==typeof(e=e||{}).serializeFunctions&&e.serializeFunctions,n="boolean"!=typeof e.ignoreUndefined||e.ignoreUndefined;return g(t,r,n)},O.prototype.deserializeStream=function(t,e,r,n,o,i){i=null!=i?i:{};for(var s=e,a=0;a<r;a++){var u=t[s]|t[s+1]<<8|t[s+2]<<16|t[s+3]<<24;i.index=s,n[o+a]=this.deserialize(t,i),s+=u}return s},O.BSON_INT32_MAX=2147483647,O.BSON_INT32_MIN=-2147483648,O.BSON_INT64_MAX=Math.pow(2,63)-1,O.BSON_INT64_MIN=-Math.pow(2,63),O.JS_INT_MAX=9007199254740992,O.JS_INT_MIN=-9007199254740992,O.BSON_DATA_NUMBER=1,O.BSON_DATA_STRING=2,O.BSON_DATA_OBJECT=3,O.BSON_DATA_ARRAY=4,O.BSON_DATA_BINARY=5,O.BSON_DATA_OID=7,O.BSON_DATA_BOOLEAN=8,O.BSON_DATA_DATE=9,O.BSON_DATA_NULL=10,O.BSON_DATA_REGEXP=11,O.BSON_DATA_CODE=13,O.BSON_DATA_SYMBOL=14,O.BSON_DATA_CODE_W_SCOPE=15,O.BSON_DATA_INT=16,O.BSON_DATA_TIMESTAMP=17,O.BSON_DATA_LONG=18,O.BSON_DATA_MIN_KEY=255,O.BSON_DATA_MAX_KEY=127,O.BSON_BINARY_SUBTYPE_DEFAULT=0,O.BSON_BINARY_SUBTYPE_FUNCTION=1,O.BSON_BINARY_SUBTYPE_BYTE_ARRAY=2,O.BSON_BINARY_SUBTYPE_UUID=3,O.BSON_BINARY_SUBTYPE_MD5=4,O.BSON_BINARY_SUBTYPE_USER_DEFINED=128,t.exports=O,t.exports.Code=f,t.exports.Map=n,t.exports.Symbol=c,t.exports.BSON=O,t.exports.DBRef=d,t.exports.Binary=m,t.exports.ObjectID=a,t.exports.Long=o,t.exports.Timestamp=s,t.exports.Double=i,t.exports.Int32=l,t.exports.MinKey=h,t.exports.MaxKey=y,t.exports.BSONRegExp=u,t.exports.Decimal128=p},function(t,e){function r(t){if(!(this instanceof r))return new r(t);this._bsontype="Double",this.value=t}r.prototype.valueOf=function(){return this.value},r.prototype.toJSON=function(){return this.value},t.exports=r,t.exports.Double=r},function(t,e){function r(t,e){if(!(this instanceof r))return new r(t,e);this._bsontype="Timestamp",this.low_=0|t,this.high_=0|e}r.prototype.toInt=function(){return this.low_},r.prototype.toNumber=function(){return this.high_*r.TWO_PWR_32_DBL_+this.getLowBitsUnsigned()},r.prototype.toJSON=function(){return this.toString()},r.prototype.toString=function(t){var e=t||10;if(e<2||36<e)throw Error("radix out of range: "+e);if(this.isZero())return"0";if(this.isNegative()){if(this.equals(r.MIN_VALUE)){var n=r.fromNumber(e),o=this.div(n),i=o.multiply(n).subtract(this);return o.toString(e)+i.toInt().toString(e)}return"-"+this.negate().toString(e)}var s=r.fromNumber(Math.pow(e,6));i=this;for(var a="";!i.isZero();){var u=i.div(s),c=i.subtract(u.multiply(s)).toInt().toString(e);if((i=u).isZero())return c+a;for(;c.length<6;)c="0"+c;a=""+c+a}},r.prototype.getHighBits=function(){return this.high_},r.prototype.getLowBits=function(){return this.low_},r.prototype.getLowBitsUnsigned=function(){return this.low_>=0?this.low_:r.TWO_PWR_32_DBL_+this.low_},r.prototype.getNumBitsAbs=function(){if(this.isNegative())return this.equals(r.MIN_VALUE)?64:this.negate().getNumBitsAbs();for(var t=0!==this.high_?this.high_:this.low_,e=31;e>0&&0==(t&1<<e);e--);return 0!==this.high_?e+33:e+1},r.prototype.isZero=function(){return 0===this.high_&&0===this.low_},r.prototype.isNegative=function(){return this.high_<0},r.prototype.isOdd=function(){return 1==(1&this.low_)},r.prototype.equals=function(t){return this.high_===t.high_&&this.low_===t.low_},r.prototype.notEquals=function(t){return this.high_!==t.high_||this.low_!==t.low_},r.prototype.lessThan=function(t){return this.compare(t)<0},r.prototype.lessThanOrEqual=function(t){return this.compare(t)<=0},r.prototype.greaterThan=function(t){return this.compare(t)>0},r.prototype.greaterThanOrEqual=function(t){return this.compare(t)>=0},r.prototype.compare=function(t){if(this.equals(t))return 0;var e=this.isNegative(),r=t.isNegative();return e&&!r?-1:!e&&r?1:this.subtract(t).isNegative()?-1:1},r.prototype.negate=function(){return this.equals(r.MIN_VALUE)?r.MIN_VALUE:this.not().add(r.ONE)},r.prototype.add=function(t){var e=this.high_>>>16,n=65535&this.high_,o=this.low_>>>16,i=65535&this.low_,s=t.high_>>>16,a=65535&t.high_,u=t.low_>>>16,c=0,l=0,f=0,p=0;return f+=(p+=i+(65535&t.low_))>>>16,p&=65535,l+=(f+=o+u)>>>16,f&=65535,c+=(l+=n+a)>>>16,l&=65535,c+=e+s,c&=65535,r.fromBits(f<<16|p,c<<16|l)},r.prototype.subtract=function(t){return this.add(t.negate())},r.prototype.multiply=function(t){if(this.isZero())return r.ZERO;if(t.isZero())return r.ZERO;if(this.equals(r.MIN_VALUE))return t.isOdd()?r.MIN_VALUE:r.ZERO;if(t.equals(r.MIN_VALUE))return this.isOdd()?r.MIN_VALUE:r.ZERO;if(this.isNegative())return t.isNegative()?this.negate().multiply(t.negate()):this.negate().multiply(t).negate();if(t.isNegative())return this.multiply(t.negate()).negate();if(this.lessThan(r.TWO_PWR_24_)&&t.lessThan(r.TWO_PWR_24_))return r.fromNumber(this.toNumber()*t.toNumber());var e=this.high_>>>16,n=65535&this.high_,o=this.low_>>>16,i=65535&this.low_,s=t.high_>>>16,a=65535&t.high_,u=t.low_>>>16,c=65535&t.low_,l=0,f=0,p=0,h=0;return p+=(h+=i*c)>>>16,h&=65535,f+=(p+=o*c)>>>16,p&=65535,f+=(p+=i*u)>>>16,p&=65535,l+=(f+=n*c)>>>16,f&=65535,l+=(f+=o*u)>>>16,f&=65535,l+=(f+=i*a)>>>16,f&=65535,l+=e*c+n*u+o*a+i*s,l&=65535,r.fromBits(p<<16|h,l<<16|f)},r.prototype.div=function(t){if(t.isZero())throw Error("division by zero");if(this.isZero())return r.ZERO;if(this.equals(r.MIN_VALUE)){if(t.equals(r.ONE)||t.equals(r.NEG_ONE))return r.MIN_VALUE;if(t.equals(r.MIN_VALUE))return r.ONE;var e=this.shiftRight(1).div(t).shiftLeft(1);if(e.equals(r.ZERO))return t.isNegative()?r.ONE:r.NEG_ONE;var n=this.subtract(t.multiply(e));return e.add(n.div(t))}if(t.equals(r.MIN_VALUE))return r.ZERO;if(this.isNegative())return t.isNegative()?this.negate().div(t.negate()):this.negate().div(t).negate();if(t.isNegative())return this.div(t.negate()).negate();var o=r.ZERO;for(n=this;n.greaterThanOrEqual(t);){e=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var i=Math.ceil(Math.log(e)/Math.LN2),s=i<=48?1:Math.pow(2,i-48),a=r.fromNumber(e),u=a.multiply(t);u.isNegative()||u.greaterThan(n);)e-=s,u=(a=r.fromNumber(e)).multiply(t);a.isZero()&&(a=r.ONE),o=o.add(a),n=n.subtract(u)}return o},r.prototype.modulo=function(t){return this.subtract(this.div(t).multiply(t))},r.prototype.not=function(){return r.fromBits(~this.low_,~this.high_)},r.prototype.and=function(t){return r.fromBits(this.low_&t.low_,this.high_&t.high_)},r.prototype.or=function(t){return r.fromBits(this.low_|t.low_,this.high_|t.high_)},r.prototype.xor=function(t){return r.fromBits(this.low_^t.low_,this.high_^t.high_)},r.prototype.shiftLeft=function(t){if(0===(t&=63))return this;var e=this.low_;if(t<32){var n=this.high_;return r.fromBits(e<<t,n<<t|e>>>32-t)}return r.fromBits(0,e<<t-32)},r.prototype.shiftRight=function(t){if(0===(t&=63))return this;var e=this.high_;if(t<32){var n=this.low_;return r.fromBits(n>>>t|e<<32-t,e>>t)}return r.fromBits(e>>t-32,e>=0?0:-1)},r.prototype.shiftRightUnsigned=function(t){if(0===(t&=63))return this;var e=this.high_;if(t<32){var n=this.low_;return r.fromBits(n>>>t|e<<32-t,e>>>t)}return 32===t?r.fromBits(e,0):r.fromBits(e>>>t-32,0)},r.fromInt=function(t){if(-128<=t&&t<128){var e=r.INT_CACHE_[t];if(e)return e}var n=new r(0|t,t<0?-1:0);return-128<=t&&t<128&&(r.INT_CACHE_[t]=n),n},r.fromNumber=function(t){return isNaN(t)||!isFinite(t)?r.ZERO:t<=-r.TWO_PWR_63_DBL_?r.MIN_VALUE:t+1>=r.TWO_PWR_63_DBL_?r.MAX_VALUE:t<0?r.fromNumber(-t).negate():new r(t%r.TWO_PWR_32_DBL_|0,t/r.TWO_PWR_32_DBL_|0)},r.fromBits=function(t,e){return new r(t,e)},r.fromString=function(t,e){if(0===t.length)throw Error("number format error: empty string");var n=e||10;if(n<2||36<n)throw Error("radix out of range: "+n);if("-"===t.charAt(0))return r.fromString(t.substring(1),n).negate();if(t.indexOf("-")>=0)throw Error('number format error: interior "-" character: '+t);for(var o=r.fromNumber(Math.pow(n,8)),i=r.ZERO,s=0;s<t.length;s+=8){var a=Math.min(8,t.length-s),u=parseInt(t.substring(s,s+a),n);if(a<8){var c=r.fromNumber(Math.pow(n,a));i=i.multiply(c).add(r.fromNumber(u))}else i=(i=i.multiply(o)).add(r.fromNumber(u))}return i},r.INT_CACHE_={},r.TWO_PWR_16_DBL_=65536,r.TWO_PWR_24_DBL_=1<<24,r.TWO_PWR_32_DBL_=r.TWO_PWR_16_DBL_*r.TWO_PWR_16_DBL_,r.TWO_PWR_31_DBL_=r.TWO_PWR_32_DBL_/2,r.TWO_PWR_48_DBL_=r.TWO_PWR_32_DBL_*r.TWO_PWR_16_DBL_,r.TWO_PWR_64_DBL_=r.TWO_PWR_32_DBL_*r.TWO_PWR_32_DBL_,r.TWO_PWR_63_DBL_=r.TWO_PWR_64_DBL_/2,r.ZERO=r.fromInt(0),r.ONE=r.fromInt(1),r.NEG_ONE=r.fromInt(-1),r.MAX_VALUE=r.fromBits(-1,2147483647),r.MIN_VALUE=r.fromBits(0,-2147483648),r.TWO_PWR_24_=r.fromInt(1<<24),t.exports=r,t.exports.Timestamp=r},function(t,e,r){(function(e,n){var o="inspect",i=r(16),s=parseInt(16777215*Math.random(),10),a=new RegExp("^[0-9a-fA-F]{24}$");try{if(e&&e.from){var u=!0;o=r(3).inspect.custom||"inspect"}}catch(t){u=!1}for(var c=function t(e){if(e instanceof t)return e;if(!(this instanceof t))return new t(e);if(this._bsontype="ObjectID",null==e||"number"==typeof e)return this.id=this.generate(e),void(t.cacheHexString&&(this.__id=this.toString("hex")));var r=t.isValid(e);if(!r&&null!=e)throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(r&&"string"==typeof e&&24===e.length&&u)return new t(i.toBuffer(e,"hex"));if(r&&"string"==typeof e&&24===e.length)return t.createFromHexString(e);if(null==e||12!==e.length){if(null!=e&&"function"==typeof e.toHexString)return e;throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}this.id=e,t.cacheHexString&&(this.__id=this.toString("hex"))},l=[],f=0;f<256;f++)l[f]=(f<=15?"0":"")+f.toString(16);c.prototype.toHexString=function(){if(c.cacheHexString&&this.__id)return this.__id;var t="";if(!this.id||!this.id.length)throw new Error("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]");if(this.id instanceof h)return t=y(this.id),c.cacheHexString&&(this.__id=t),t;for(var e=0;e<this.id.length;e++)t+=l[this.id.charCodeAt(e)];return c.cacheHexString&&(this.__id=t),t},c.prototype.get_inc=function(){return c.index=(c.index+1)%16777215},c.prototype.getInc=function(){return this.get_inc()},c.prototype.generate=function(t){"number"!=typeof t&&(t=~~(Date.now()/1e3));var e=(void 0===n||1===n.pid?Math.floor(1e5*Math.random()):n.pid)%65535,r=this.get_inc(),o=i.allocBuffer(12);return o[3]=255&t,o[2]=t>>8&255,o[1]=t>>16&255,o[0]=t>>24&255,o[6]=255&s,o[5]=s>>8&255,o[4]=s>>16&255,o[8]=255&e,o[7]=e>>8&255,o[11]=255&r,o[10]=r>>8&255,o[9]=r>>16&255,o},c.prototype.toString=function(t){return this.id&&this.id.copy?this.id.toString("string"==typeof t?t:"hex"):this.toHexString()},c.prototype[o]=c.prototype.toString,c.prototype.toJSON=function(){return this.toHexString()},c.prototype.equals=function(t){return t instanceof c?this.toString()===t.toString():"string"==typeof t&&c.isValid(t)&&12===t.length&&this.id instanceof h?t===this.id.toString("binary"):"string"==typeof t&&c.isValid(t)&&24===t.length?t.toLowerCase()===this.toHexString():"string"==typeof t&&c.isValid(t)&&12===t.length?t===this.id:!(null==t||!(t instanceof c||t.toHexString))&&t.toHexString()===this.toHexString()},c.prototype.getTimestamp=function(){var t=new Date,e=this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24;return t.setTime(1e3*Math.floor(e)),t},c.index=~~(16777215*Math.random()),c.createPk=function(){return new c},c.createFromTime=function(t){var e=i.toBuffer([0,0,0,0,0,0,0,0,0,0,0,0]);return e[3]=255&t,e[2]=t>>8&255,e[1]=t>>16&255,e[0]=t>>24&255,new c(e)};var p=[];for(f=0;f<10;)p[48+f]=f++;for(;f<16;)p[55+f]=p[87+f]=f++;var h=e,y=function(t){return t.toString("hex")};c.createFromHexString=function(t){if(void 0===t||null!=t&&24!==t.length)throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");if(u)return new c(i.toBuffer(t,"hex"));for(var e=new h(12),r=0,n=0;n<24;)e[r++]=p[t.charCodeAt(n++)]<<4|p[t.charCodeAt(n++)];return new c(e)},c.isValid=function(t){return null!=t&&("number"==typeof t||("string"==typeof t?12===t.length||24===t.length&&a.test(t):t instanceof c||(t instanceof h||"function"==typeof t.toHexString&&(t.id instanceof h||"string"==typeof t.id)&&(12===t.id.length||24===t.id.length&&a.test(t.id)))))},Object.defineProperty(c.prototype,"generationTime",{enumerable:!0,get:function(){return this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24},set:function(t){this.id[3]=255&t,this.id[2]=t>>8&255,this.id[1]=t>>16&255,this.id[0]=t>>24&255}}),t.exports=c,t.exports.ObjectID=c,t.exports.ObjectId=c}).call(this,r(1).Buffer,r(8))},function(t,e){function r(t,e){if(!(this instanceof r))return new r;this._bsontype="BSONRegExp",this.pattern=t||"",this.options=e||"";for(var n=0;n<this.options.length;n++)if("i"!==this.options[n]&&"m"!==this.options[n]&&"x"!==this.options[n]&&"l"!==this.options[n]&&"s"!==this.options[n]&&"u"!==this.options[n])throw new Error("the regular expression options ["+this.options[n]+"] is not supported")}t.exports=r,t.exports.BSONRegExp=r},function(t,e,r){(function(e){var n=e&&r(3).inspect.custom||"inspect";function o(t){if(!(this instanceof o))return new o(t);this._bsontype="Symbol",this.value=t}o.prototype.valueOf=function(){return this.value},o.prototype.toString=function(){return this.value},o.prototype[n]=function(){return this.value},o.prototype.toJSON=function(){return this.value},t.exports=o,t.exports.Symbol=o}).call(this,r(1).Buffer)},function(t,e){var r=function t(e,r){if(!(this instanceof t))return new t(e,r);this._bsontype="Code",this.code=e,this.scope=r};r.prototype.toJSON=function(){return{scope:this.scope,code:this.code}},t.exports=r,t.exports.Code=r},function(t,e,r){"use strict";var n=r(23),o=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,i=/^(\+|-)?(Infinity|inf)$/i,s=/^(\+|-)?NaN$/i,a=6176,u=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),c=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),l=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),f=/^([-+])?(\d+)?$/,p=r(16),h=function(t){return!isNaN(parseInt(t,10))},y=function(t){var e=n.fromNumber(1e9),r=n.fromNumber(0),o=0;if(!(t.parts[0]||t.parts[1]||t.parts[2]||t.parts[3]))return{quotient:t,rem:r};for(o=0;o<=3;o++)r=(r=r.shiftLeft(32)).add(new n(t.parts[o],0)),t.parts[o]=r.div(e).low_,r=r.modulo(e);return{quotient:t,rem:r}},d=function(t){this._bsontype="Decimal128",this.bytes=t};d.fromString=function(t){var e,r=!1,y=!1,m=!1,_=0,v=0,g=0,b=0,w=0,O=[0],S=0,A=0,E=0,j=0,$=0,x=0,P=[0,0],N=[0,0],T=0;if((t=t.trim()).length>=7e3)throw new Error(t+" not a valid Decimal128 string");var k=t.match(o),C=t.match(i),R=t.match(s);if(!k&&!C&&!R||0===t.length)throw new Error(t+" not a valid Decimal128 string");if(k&&k[4]&&void 0===k[2])throw new Error(t+" not a valid Decimal128 string");if("+"!==t[T]&&"-"!==t[T]||(r="-"===t[T++]),!h(t[T])&&"."!==t[T]){if("i"===t[T]||"I"===t[T])return new d(p.toBuffer(r?c:l));if("N"===t[T])return new d(p.toBuffer(u))}for(;h(t[T])||"."===t[T];)if("."!==t[T])S<34&&("0"!==t[T]||m)&&(m||(w=v),m=!0,O[A++]=parseInt(t[T],10),S+=1),m&&(g+=1),y&&(b+=1),v+=1,T+=1;else{if(y)return new d(p.toBuffer(u));y=!0,T+=1}if(y&&!v)throw new Error(t+" not a valid Decimal128 string");if("e"===t[T]||"E"===t[T]){var B=t.substr(++T).match(f);if(!B||!B[2])return new d(p.toBuffer(u));$=parseInt(B[0],10),T+=B[0].length}if(t[T])return new d(p.toBuffer(u));if(E=0,S){if(j=S-1,_=g,0!==$&&1!==_)for(;"0"===t[w+_-1];)_-=1}else E=0,j=0,O[0]=0,g=1,S=1,_=0;for($<=b&&b-$>16384?$=-6176:$-=b;$>6111;){if((j+=1)-E>34){var D=O.join("");if(D.match(/^0+$/)){$=6111;break}return new d(p.toBuffer(r?c:l))}$-=1}for(;$<-6176||S<g;){if(0===j){$=-6176,_=0;break}if(S<g?g-=1:j-=1,!($<6111)){if((D=O.join("")).match(/^0+$/)){$=6111;break}return new d(p.toBuffer(r?c:l))}$+=1}if(j-E+1<_&&"0"!==t[_]){var M=v;y&&-6176===$&&(w+=1,M+=1);var I=parseInt(t[w+j+1],10),F=0;if(I>=5&&(F=1,5===I))for(F=O[j]%2==1,x=w+j+2;x<M;x++)if(parseInt(t[x],10)){F=1;break}if(F)for(var L=j;L>=0&&++O[L]>9;L--)if(O[L]=0,0===L){if(!($<6111))return new d(p.toBuffer(r?c:l));$+=1,O[L]=1}}if(P=n.fromNumber(0),N=n.fromNumber(0),0===_)P=n.fromNumber(0),N=n.fromNumber(0);else if(j-E<17)for(L=E,N=n.fromNumber(O[L++]),P=new n(0,0);L<=j;L++)N=(N=N.multiply(n.fromNumber(10))).add(n.fromNumber(O[L]));else{for(L=E,P=n.fromNumber(O[L++]);L<=j-17;L++)P=(P=P.multiply(n.fromNumber(10))).add(n.fromNumber(O[L]));for(N=n.fromNumber(O[L++]);L<=j;L++)N=(N=N.multiply(n.fromNumber(10))).add(n.fromNumber(O[L]))}var U,V,q,W,H=function(t,e){if(!t&&!e)return{high:n.fromNumber(0),low:n.fromNumber(0)};var r=t.shiftRightUnsigned(32),o=new n(t.getLowBits(),0),i=e.shiftRightUnsigned(32),s=new n(e.getLowBits(),0),a=r.multiply(i),u=r.multiply(s),c=o.multiply(i),l=o.multiply(s);return a=a.add(u.shiftRightUnsigned(32)),u=new n(u.getLowBits(),0).add(c).add(l.shiftRightUnsigned(32)),{high:a=a.add(u.shiftRightUnsigned(32)),low:l=u.shiftLeft(32).add(new n(l.getLowBits(),0))}}(P,n.fromString("100000000000000000"));H.low=H.low.add(N),U=H.low,V=N,q=U.high_>>>0,W=V.high_>>>0,(q<W||q===W&&U.low_>>>0<V.low_>>>0)&&(H.high=H.high.add(n.fromNumber(1))),e=$+a;var Y={low:n.fromNumber(0),high:n.fromNumber(0)};H.high.shiftRightUnsigned(49).and(n.fromNumber(1)).equals(n.fromNumber)?(Y.high=Y.high.or(n.fromNumber(3).shiftLeft(61)),Y.high=Y.high.or(n.fromNumber(e).and(n.fromNumber(16383).shiftLeft(47))),Y.high=Y.high.or(H.high.and(n.fromNumber(0x7fffffffffff)))):(Y.high=Y.high.or(n.fromNumber(16383&e).shiftLeft(49)),Y.high=Y.high.or(H.high.and(n.fromNumber(562949953421311)))),Y.low=H.low,r&&(Y.high=Y.high.or(n.fromString("9223372036854775808")));var K=p.allocBuffer(16);return T=0,K[T++]=255&Y.low.low_,K[T++]=Y.low.low_>>8&255,K[T++]=Y.low.low_>>16&255,K[T++]=Y.low.low_>>24&255,K[T++]=255&Y.low.high_,K[T++]=Y.low.high_>>8&255,K[T++]=Y.low.high_>>16&255,K[T++]=Y.low.high_>>24&255,K[T++]=255&Y.high.low_,K[T++]=Y.high.low_>>8&255,K[T++]=Y.high.low_>>16&255,K[T++]=Y.high.low_>>24&255,K[T++]=255&Y.high.high_,K[T++]=Y.high.high_>>8&255,K[T++]=Y.high.high_>>16&255,K[T++]=Y.high.high_>>24&255,new d(K)};a=6176,d.prototype.toString=function(){for(var t,e,r,o,i,s,u=0,c=new Array(36),l=0;l<c.length;l++)c[l]=0;var f,p,h,d,m,_=0,v=!1,g={parts:new Array(4)},b=[];_=0;var w=this.bytes;if(o=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,r=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,e=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,t=w[_++]|w[_++]<<8|w[_++]<<16|w[_++]<<24,_=0,{low:new n(o,r),high:new n(e,t)}.high.lessThan(n.ZERO)&&b.push("-"),(i=t>>26&31)>>3==3){if(30===i)return b.join("")+"Infinity";if(31===i)return"NaN";s=t>>15&16383,h=8+(t>>14&1)}else h=t>>14&7,s=t>>17&16383;if(f=s-a,g.parts[0]=(16383&t)+((15&h)<<14),g.parts[1]=e,g.parts[2]=r,g.parts[3]=o,0===g.parts[0]&&0===g.parts[1]&&0===g.parts[2]&&0===g.parts[3])v=!0;else for(m=3;m>=0;m--){var O=0,S=y(g);if(g=S.quotient,O=S.rem.low_)for(d=8;d>=0;d--)c[9*m+d]=O%10,O=Math.floor(O/10)}if(v)u=1,c[_]=0;else for(u=36,l=0;!c[_];)l++,u-=1,_+=1;if((p=u-1+f)>=34||p<=-7||f>0){for(b.push(c[_++]),(u-=1)&&b.push("."),l=0;l<u;l++)b.push(c[_++]);b.push("E"),p>0?b.push("+"+p):b.push(p)}else if(f>=0)for(l=0;l<u;l++)b.push(c[_++]);else{var A=u+f;if(A>0)for(l=0;l<A;l++)b.push(c[_++]);else b.push("0");for(b.push(".");A++<0;)b.push("0");for(l=0;l<u-Math.max(A-1,0);l++)b.push(c[_++])}return b.join("")},d.prototype.toJSON=function(){return{$numberDecimal:this.toString()}},t.exports=d,t.exports.Decimal128=d},function(t,e){function r(){if(!(this instanceof r))return new r;this._bsontype="MinKey"}t.exports=r,t.exports.MinKey=r},function(t,e){function r(){if(!(this instanceof r))return new r;this._bsontype="MaxKey"}t.exports=r,t.exports.MaxKey=r},function(t,e){function r(t,e,n){if(!(this instanceof r))return new r(t,e,n);this._bsontype="DBRef",this.namespace=t,this.oid=e,this.db=n}r.prototype.toJSON=function(){return{$ref:this.namespace,$id:this.oid,$db:null==this.db?"":this.db}},t.exports=r,t.exports.DBRef=r},function(t,e,r){t.exports=r(112)},function(t,e,r){"use strict";t.exports=new Set(["__proto__","constructor","prototype"])},function(t,e,r){"use strict";var n=r(49);
 /*!
  * ignore
  */t.exports=function(t){var e=null!=this?this.path:null;return n(t,e)}},function(t,e,r){"use strict";var n=r(12);
@@ -654,7 +654,7 @@
 function F(t,e){var r=e.split(/\.(\d+)\.|\.(\d+)$/).filter(Boolean);if(r.length<2)return t.paths.hasOwnProperty(r[0])?t.paths[r[0]]:"adhocOrUndefined";var n=t.path(r[0]),o=!1;if(!n)return"adhocOrUndefined";for(var i=r.length-1,s=1;s<r.length;++s){o=!1;var a=r[s];if(s===i&&n&&!/\D/.test(a)){n=n.$isMongooseDocumentArray?n.$embeddedSchemaType:n instanceof u.Array?n.caster:void 0;break}if(/\D/.test(a)){if(!n||!n.schema){n=void 0;break}o="nested"===n.schema.pathType(a),n=n.schema.path(a)}else n instanceof u.Array&&s!==i&&(n=n.caster)}return t.subpaths[e]=n,n?"real":o?"nested":"adhocOrUndefined"}
 /*!
  * ignore
- */D.increment="`increment` should not be used as a schema path name unless you have disabled versioning.",R.prototype.path=function(t,e){var r=M(t);if(void 0===e){var n=function(t,e,r){if(t.paths.hasOwnProperty(e))return t.paths[e];if(t.subpaths.hasOwnProperty(r))return t.subpaths[r];if(t.singleNestedPaths.hasOwnProperty(r))return t.singleNestedPaths[r];return null}(this,t,r);if(null!=n)return n;var o=I(this,t);return null!=o?o:null!=(n=this.hasMixedParent(r))?n:/\.\d+\.?.*$/.test(t)?function(t,e){return F(t,e),t.subpaths[e]}(this,t):void 0}var a=t.split(".")[0];if(B[a])throw new Error("`"+a+"` may not be used as a schema pathname");D[t]&&console.log("WARN: "+D[t]),"object"===i(e)&&x.hasUserDefinedProperty(e,"ref")&&P(e.ref,t);var u,c=t.split(/\./),l=c.pop(),f=this.tree,h="",y=s(c);try{for(y.s();!(u=y.n()).done;){var d=u.value;if(h=h+=(h.length>0?".":"")+d,f[d]||(this.nested[h]=!0,f[d]={}),"object"!==i(f[d])){var m="Cannot set nested path `"+t+"`. Parent path `"+h+"` already set to type "+f[d].name+".";throw new Error(m)}f=f[d]}}catch(t){y.e(t)}finally{y.f()}f[l]=x.clone(e),this.paths[t]=this.interpretAsType(t,e,this.options);var _=this.paths[t];if(_.$isSchemaMap){var v=t+".$*",g={type:{}};if(x.hasUserDefinedProperty(e,"of"))g=x.isPOJO(e.of)&&Object.keys(e.of).length>0&&!x.hasUserDefinedProperty(e.of,this.options.typeKey)?new R(e.of):e.of;this.paths[v]=this.interpretAsType(v,g,this.options),_.$__schemaType=this.paths[v]}if(_.$isSingleNested){for(var b in _.schema.paths)this.singleNestedPaths[t+"."+b]=_.schema.paths[b];for(var w in _.schema.singleNestedPaths)this.singleNestedPaths[t+"."+w]=_.schema.singleNestedPaths[w];for(var O in _.schema.subpaths)this.singleNestedPaths[t+"."+O]=_.schema.subpaths[O];Object.defineProperty(_.schema,"base",{configurable:!0,enumerable:!1,writable:!1,value:this.base}),_.caster.base=this.base,this.childSchemas.push({schema:_.schema,model:_.caster})}else _.$isMongooseDocumentArray&&(Object.defineProperty(_.schema,"base",{configurable:!0,enumerable:!1,writable:!1,value:this.base}),_.casterConstructor.base=this.base,this.childSchemas.push({schema:_.schema,model:_.casterConstructor}));if(_.$isMongooseArray&&_.caster instanceof p){for(var S=t,A=_,E=[];A.$isMongooseArray;)S+=".$",A.$isMongooseDocumentArray?(A.$embeddedSchemaType._arrayPath=S,A=A.$embeddedSchemaType.clone()):(A.caster._arrayPath=S,A=A.caster.clone()),A.path=S,E.push(A);for(var j=0,$=E;j<$.length;j++){var N=$[j];this.subpaths[N.path]=N}}if(_.$isMongooseDocumentArray){for(var T=0,k=Object.keys(_.schema.paths);T<k.length;T++){var C=k[T];this.subpaths[t+"."+C]=_.schema.paths[C],_.schema.paths[C].$isUnderneathDocArray=!0}for(var L=0,U=Object.keys(_.schema.subpaths);L<U.length;L++){var V=U[L];this.subpaths[t+"."+V]=_.schema.subpaths[V],_.schema.subpaths[V].$isUnderneathDocArray=!0}for(var q=0,W=Object.keys(_.schema.singleNestedPaths);q<W.length;q++){var H=W[q];this.subpaths[t+"."+H]=_.schema.singleNestedPaths[H],_.schema.singleNestedPaths[H].$isUnderneathDocArray=!0}}return this},Object.defineProperty(R.prototype,"base",{configurable:!0,enumerable:!1,writable:!0,value:null}),R.prototype.interpretAsType=function(t,e,r){if(e instanceof p)return e;var o=null!=this.base?this.base.Schema.Types:R.Types;if(!(x.isPOJO(e)||e instanceof h)&&"Object"!==x.getFunctionName(e.constructor)){var s=e;(e={})[r.typeKey]=s}var a,u=!e[r.typeKey]||"type"===r.typeKey&&e.type.type?{}:e[r.typeKey];if(x.isPOJO(u)||"mixed"===u)return new o.Mixed(t,e);if(Array.isArray(u)||u===Array||"array"===u||u===o.Array){var c=u===Array||"array"===u?e.cast:u[0];if(c&&c.instanceOfSchema)return new o.DocumentArray(t,c,e);if(c&&c[r.typeKey]&&c[r.typeKey].instanceOfSchema)return new o.DocumentArray(t,c[r.typeKey],e,c);if(Array.isArray(c))return new o.Array(t,this.interpretAsType(t,c,r),e);if("string"==typeof c)c=o[c.charAt(0).toUpperCase()+c.substring(1)];else if(c&&(!c[r.typeKey]||"type"===r.typeKey&&c.type.type)&&x.isPOJO(c)){if(Object.keys(c).length){var l={minimize:r.minimize};r.typeKey&&(l.typeKey=r.typeKey),r.hasOwnProperty("strict")&&(l.strict=r.strict),r.hasOwnProperty("typePojoToMixed")&&(l.typePojoToMixed=r.typePojoToMixed),this._userProvidedOptions.hasOwnProperty("_id")?l._id=this._userProvidedOptions._id:R.Types.DocumentArray.defaultOptions&&null!=R.Types.DocumentArray.defaultOptions._id&&(l._id=R.Types.DocumentArray.defaultOptions._id);var f=new R(c,l);return f.$implicitlyCreated=!0,new o.DocumentArray(t,f,e)}return new o.Array(t,o.Mixed,e)}if(c&&(a="string"==typeof(u=!c[r.typeKey]||"type"===r.typeKey&&c.type.type?c:c[r.typeKey])?u:u.schemaName||x.getFunctionName(u),!o.hasOwnProperty(a)))throw new TypeError("Invalid schema configuration: "+"`".concat(a,"` is not a valid type within the array `").concat(t,"`.")+"See http://bit.ly/mongoose-schematypes for a list of valid schema types.");return new o.Array(t,c||o.Mixed,e,r)}if(u&&u.instanceOfSchema)return new o.Embedded(u,t,e);if((a=n.isBuffer(u)?"Buffer":"function"==typeof u||"object"===i(u)?u.schemaName||x.getFunctionName(u):null==u?""+u:u.toString())&&(a=a.charAt(0).toUpperCase()+a.substring(1)),"ObjectID"===a&&(a="ObjectId"),null==o[a])throw new TypeError("Invalid schema configuration: `".concat(a,"` is not ")+"a valid type at path `".concat(t,"`. See ")+"http://bit.ly/mongoose-schematypes for a list of valid schema types.");return new o[a](t,e)},R.prototype.eachPath=function(t){for(var e=Object.keys(this.paths),r=e.length,n=0;n<r;++n)t(e[n],this.paths[e[n]]);return this},R.prototype.requiredPaths=function(t){if(this._requiredpaths&&!t)return this._requiredpaths;for(var e=Object.keys(this.paths),r=e.length,n=[];r--;){var o=e[r];this.paths[o].isRequired&&n.push(o)}return this._requiredpaths=n,this._requiredpaths},R.prototype.indexedPaths=function(){return this._indexedpaths||(this._indexedpaths=this.indexes()),this._indexedpaths},R.prototype.pathType=function(t){var e=M(t);return this.paths.hasOwnProperty(t)?"real":this.virtuals.hasOwnProperty(t)?"virtual":this.nested.hasOwnProperty(t)?"nested":this.subpaths.hasOwnProperty(e)||this.subpaths.hasOwnProperty(t)||this.singleNestedPaths.hasOwnProperty(e)||this.singleNestedPaths.hasOwnProperty(t)||null!=I(this,t)?"real":/\.\d+\.|\.\d+$/.test(t)?F(this,t):"adhocOrUndefined"},R.prototype.hasMixedParent=function(t){var e=t.split(/\./g);t="";for(var r=0;r<e.length;++r)if((t=r>0?t+"."+e[r]:e[r])in this.paths&&this.paths[t]instanceof u.Mixed)return this.paths[t];return null},R.prototype.setupTimestamp=function(t){var e=this.childSchemas.find((function(t){return!!t.schema.options.timestamps}));if(t||e){var r=O(t,"createdAt"),n=O(t,"updatedAt"),o=null!=t&&t.hasOwnProperty("currentTime")?t.currentTime:null,i={};this.$timestamps={createdAt:r,updatedAt:n},n&&!this.paths[n]&&(i[n]=Date),r&&!this.paths[r]&&(i[r]=Date),this.add(i),this.pre("save",(function(t){var e=b(this,"$__.saveOptions.timestamps");if(!1===e)return t();var i=null!=e&&!1===e.updatedAt,s=null!=e&&!1===e.createdAt,a=null!=o?o():(this.ownerDocument?this.ownerDocument():this).constructor.base.now(),u=this._id&&this._id.auto;if(!s&&r&&!this.get(r)&&this.isSelected(r)&&this.set(r,u?this._id.getTimestamp():a),!i&&n&&(this.isNew||this.isModified())){var c=a;this.isNew&&(null!=r?c=this.$__getValue(r):u&&(c=this._id.getTimestamp())),this.set(n,c)}t()})),this.methods.initializeTimestamps=function(){var t=null!=o?o():this.constructor.base.now();return r&&!this.get(r)&&this.set(r,t),n&&!this.get(n)&&this.set(n,t),this},a[j.builtInMiddleware]=!0;var s={query:!0,model:!1};this.pre("findOneAndUpdate",s,a),this.pre("replaceOne",s,a),this.pre("update",s,a),this.pre("updateOne",s,a),this.pre("updateMany",s,a)}function a(t){var e=null!=o?o():this.model.base.now();v(e,r,n,this.getUpdate(),this.options,this.schema),_(e,this.getUpdate(),this.model.schema),t()}},R.prototype.queue=function(t,e){return this.callQueue.push([t,e]),this},R.prototype.pre=function(t){if(t instanceof RegExp){var e,r=Array.prototype.slice.call(arguments,1),n=s(k);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.test(o)&&this.pre.apply(this,[o].concat(r))}}catch(t){n.e(t)}finally{n.f()}return this}if(Array.isArray(t)){var i,a=Array.prototype.slice.call(arguments,1),u=s(t);try{for(u.s();!(i=u.n()).done;){var c=i.value;this.pre.apply(this,[c].concat(a))}}catch(t){u.e(t)}finally{u.f()}return this}return this.s.hooks.pre.apply(this.s.hooks,arguments),this},R.prototype.post=function(t){if(t instanceof RegExp){var e,r=Array.prototype.slice.call(arguments,1),n=s(k);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.test(o)&&this.post.apply(this,[o].concat(r))}}catch(t){n.e(t)}finally{n.f()}return this}if(Array.isArray(t)){var i,a=Array.prototype.slice.call(arguments,1),u=s(t);try{for(u.s();!(i=u.n()).done;){var c=i.value;this.post.apply(this,[c].concat(a))}}catch(t){u.e(t)}finally{u.f()}return this}return this.s.hooks.post.apply(this.s.hooks,arguments),this},R.prototype.plugin=function(t,e){if("function"!=typeof t)throw new Error('First param to `schema.plugin()` must be a function, got "'+i(t)+'"');if(e&&e.deduplicate){var r,n=s(this.plugins);try{for(n.s();!(r=n.n()).done;){if(r.value.fn===t)return this}}catch(t){n.e(t)}finally{n.f()}}return this.plugins.push({fn:t,opts:e}),t(this,e),this},R.prototype.method=function(t,e,r){if("string"!=typeof t)for(var n in t)this.methods[n]=t[n],this.methodOptions[n]=x.clone(r);else this.methods[t]=e,this.methodOptions[t]=x.clone(r);return this},R.prototype.static=function(t,e){if("string"!=typeof t)for(var r in t)this.statics[r]=t[r];else this.statics[t]=e;return this},R.prototype.index=function(t,e){return t||(t={}),e||(e={}),e.expires&&x.expires(e),this._indexes.push([t,e]),this},R.prototype.set=function(t,e,r){if(1===arguments.length)return this.options[t];switch(t){case"read":this.options[t]=E(e,r),this._userProvidedOptions[t]=this.options[t];break;case"safe":L(this.options,e),this._userProvidedOptions[t]=this.options[t];break;case"timestamps":this.setupTimestamp(e),this.options[t]=e,this._userProvidedOptions[t]=this.options[t];break;default:this.options[t]=e,this._userProvidedOptions[t]=this.options[t]}return this};
+ */D.increment="`increment` should not be used as a schema path name unless you have disabled versioning.",R.prototype.path=function(t,e){var r=M(t);if(void 0===e){var n=function(t,e,r){if(t.paths.hasOwnProperty(e))return t.paths[e];if(t.subpaths.hasOwnProperty(r))return t.subpaths[r];if(t.singleNestedPaths.hasOwnProperty(r))return t.singleNestedPaths[r];return null}(this,t,r);if(null!=n)return n;var o=I(this,t);return null!=o?o:null!=(n=this.hasMixedParent(r))?n:/\.\d+\.?.*$/.test(t)?function(t,e){return F(t,e),t.subpaths[e]}(this,t):void 0}var a=t.split(".")[0];if(B[a])throw new Error("`"+a+"` may not be used as a schema pathname");D[t]&&console.log("WARN: "+D[t]),"object"===i(e)&&x.hasUserDefinedProperty(e,"ref")&&P(e.ref,t);var u,c=t.split(/\./),l=c.pop(),f=this.tree,h="",y=s(c);try{for(y.s();!(u=y.n()).done;){var d=u.value;if(h=h+=(h.length>0?".":"")+d,f[d]||(this.nested[h]=!0,f[d]={}),"object"!==i(f[d])){var m="Cannot set nested path `"+t+"`. Parent path `"+h+"` already set to type "+f[d].name+".";throw new Error(m)}f=f[d]}}catch(t){y.e(t)}finally{y.f()}f[l]=x.clone(e),this.paths[t]=this.interpretAsType(t,e,this.options);var _=this.paths[t];if(_.$isSchemaMap){var v=t+".$*",g={type:{}};if(x.hasUserDefinedProperty(e,"of"))g=x.isPOJO(e.of)&&Object.keys(e.of).length>0&&!x.hasUserDefinedProperty(e.of,this.options.typeKey)?new R(e.of):e.of;this.paths[v]=this.interpretAsType(v,g,this.options),_.$__schemaType=this.paths[v]}if(_.$isSingleNested){for(var b in _.schema.paths)this.singleNestedPaths[t+"."+b]=_.schema.paths[b];for(var w in _.schema.singleNestedPaths)this.singleNestedPaths[t+"."+w]=_.schema.singleNestedPaths[w];for(var O in _.schema.subpaths)this.singleNestedPaths[t+"."+O]=_.schema.subpaths[O];Object.defineProperty(_.schema,"base",{configurable:!0,enumerable:!1,writable:!1,value:this.base}),_.caster.base=this.base,this.childSchemas.push({schema:_.schema,model:_.caster})}else _.$isMongooseDocumentArray&&(Object.defineProperty(_.schema,"base",{configurable:!0,enumerable:!1,writable:!1,value:this.base}),_.casterConstructor.base=this.base,this.childSchemas.push({schema:_.schema,model:_.casterConstructor}));if(_.$isMongooseArray&&_.caster instanceof p){for(var S=t,A=_,E=[];A.$isMongooseArray;)S+=".$",A.$isMongooseDocumentArray?(A.$embeddedSchemaType._arrayPath=S,A=A.$embeddedSchemaType.clone()):(A.caster._arrayPath=S,A=A.caster.clone()),A.path=S,E.push(A);for(var j=0,$=E;j<$.length;j++){var N=$[j];this.subpaths[N.path]=N}}if(_.$isMongooseDocumentArray){for(var T=0,k=Object.keys(_.schema.paths);T<k.length;T++){var C=k[T];this.subpaths[t+"."+C]=_.schema.paths[C],_.schema.paths[C].$isUnderneathDocArray=!0}for(var L=0,U=Object.keys(_.schema.subpaths);L<U.length;L++){var V=U[L];this.subpaths[t+"."+V]=_.schema.subpaths[V],_.schema.subpaths[V].$isUnderneathDocArray=!0}for(var q=0,W=Object.keys(_.schema.singleNestedPaths);q<W.length;q++){var H=W[q];this.subpaths[t+"."+H]=_.schema.singleNestedPaths[H],_.schema.singleNestedPaths[H].$isUnderneathDocArray=!0}}return this},Object.defineProperty(R.prototype,"base",{configurable:!0,enumerable:!1,writable:!0,value:null}),R.prototype.interpretAsType=function(t,e,r){if(e instanceof p){var o=e.clone();return o.path=t,o}var s=null!=this.base?this.base.Schema.Types:R.Types;if(!(x.isPOJO(e)||e instanceof h)&&"Object"!==x.getFunctionName(e.constructor)){var a=e;(e={})[r.typeKey]=a}var u,c=!e[r.typeKey]||"type"===r.typeKey&&e.type.type?{}:e[r.typeKey];if(x.isPOJO(c)||"mixed"===c)return new s.Mixed(t,e);if(Array.isArray(c)||c===Array||"array"===c||c===s.Array){var l=c===Array||"array"===c?e.cast:c[0];if(l&&l.instanceOfSchema)return new s.DocumentArray(t,l,e);if(l&&l[r.typeKey]&&l[r.typeKey].instanceOfSchema)return new s.DocumentArray(t,l[r.typeKey],e,l);if(Array.isArray(l))return new s.Array(t,this.interpretAsType(t,l,r),e);if("string"==typeof l)l=s[l.charAt(0).toUpperCase()+l.substring(1)];else if(l&&(!l[r.typeKey]||"type"===r.typeKey&&l.type.type)&&x.isPOJO(l)){if(Object.keys(l).length){var f={minimize:r.minimize};r.typeKey&&(f.typeKey=r.typeKey),r.hasOwnProperty("strict")&&(f.strict=r.strict),r.hasOwnProperty("typePojoToMixed")&&(f.typePojoToMixed=r.typePojoToMixed),this._userProvidedOptions.hasOwnProperty("_id")?f._id=this._userProvidedOptions._id:R.Types.DocumentArray.defaultOptions&&null!=R.Types.DocumentArray.defaultOptions._id&&(f._id=R.Types.DocumentArray.defaultOptions._id);var y=new R(l,f);return y.$implicitlyCreated=!0,new s.DocumentArray(t,y,e)}return new s.Array(t,s.Mixed,e)}if(l&&(u="string"==typeof(c=!l[r.typeKey]||"type"===r.typeKey&&l.type.type?l:l[r.typeKey])?c:c.schemaName||x.getFunctionName(c),!s.hasOwnProperty(u)))throw new TypeError("Invalid schema configuration: "+"`".concat(u,"` is not a valid type within the array `").concat(t,"`.")+"See http://bit.ly/mongoose-schematypes for a list of valid schema types.");return new s.Array(t,l||s.Mixed,e,r)}if(c&&c.instanceOfSchema)return new s.Embedded(c,t,e);if((u=n.isBuffer(c)?"Buffer":"function"==typeof c||"object"===i(c)?c.schemaName||x.getFunctionName(c):null==c?""+c:c.toString())&&(u=u.charAt(0).toUpperCase()+u.substring(1)),"ObjectID"===u&&(u="ObjectId"),null==s[u])throw new TypeError("Invalid schema configuration: `".concat(u,"` is not ")+"a valid type at path `".concat(t,"`. See ")+"http://bit.ly/mongoose-schematypes for a list of valid schema types.");return new s[u](t,e)},R.prototype.eachPath=function(t){for(var e=Object.keys(this.paths),r=e.length,n=0;n<r;++n)t(e[n],this.paths[e[n]]);return this},R.prototype.requiredPaths=function(t){if(this._requiredpaths&&!t)return this._requiredpaths;for(var e=Object.keys(this.paths),r=e.length,n=[];r--;){var o=e[r];this.paths[o].isRequired&&n.push(o)}return this._requiredpaths=n,this._requiredpaths},R.prototype.indexedPaths=function(){return this._indexedpaths||(this._indexedpaths=this.indexes()),this._indexedpaths},R.prototype.pathType=function(t){var e=M(t);return this.paths.hasOwnProperty(t)?"real":this.virtuals.hasOwnProperty(t)?"virtual":this.nested.hasOwnProperty(t)?"nested":this.subpaths.hasOwnProperty(e)||this.subpaths.hasOwnProperty(t)||this.singleNestedPaths.hasOwnProperty(e)||this.singleNestedPaths.hasOwnProperty(t)||null!=I(this,t)?"real":/\.\d+\.|\.\d+$/.test(t)?F(this,t):"adhocOrUndefined"},R.prototype.hasMixedParent=function(t){var e=t.split(/\./g);t="";for(var r=0;r<e.length;++r)if((t=r>0?t+"."+e[r]:e[r])in this.paths&&this.paths[t]instanceof u.Mixed)return this.paths[t];return null},R.prototype.setupTimestamp=function(t){var e=this.childSchemas.find((function(t){return!!t.schema.options.timestamps}));if(t||e){var r=O(t,"createdAt"),n=O(t,"updatedAt"),o=null!=t&&t.hasOwnProperty("currentTime")?t.currentTime:null,i={};this.$timestamps={createdAt:r,updatedAt:n},n&&!this.paths[n]&&(i[n]=Date),r&&!this.paths[r]&&(i[r]=Date),this.add(i),this.pre("save",(function(t){var e=b(this,"$__.saveOptions.timestamps");if(!1===e)return t();var i=null!=e&&!1===e.updatedAt,s=null!=e&&!1===e.createdAt,a=null!=o?o():(this.ownerDocument?this.ownerDocument():this).constructor.base.now(),u=this._id&&this._id.auto;if(!s&&r&&!this.get(r)&&this.isSelected(r)&&this.set(r,u?this._id.getTimestamp():a),!i&&n&&(this.isNew||this.isModified())){var c=a;this.isNew&&(null!=r?c=this.$__getValue(r):u&&(c=this._id.getTimestamp())),this.set(n,c)}t()})),this.methods.initializeTimestamps=function(){var t=null!=o?o():this.constructor.base.now();return r&&!this.get(r)&&this.set(r,t),n&&!this.get(n)&&this.set(n,t),this},a[j.builtInMiddleware]=!0;var s={query:!0,model:!1};this.pre("findOneAndUpdate",s,a),this.pre("replaceOne",s,a),this.pre("update",s,a),this.pre("updateOne",s,a),this.pre("updateMany",s,a)}function a(t){var e=null!=o?o():this.model.base.now();v(e,r,n,this.getUpdate(),this.options,this.schema),_(e,this.getUpdate(),this.model.schema),t()}},R.prototype.queue=function(t,e){return this.callQueue.push([t,e]),this},R.prototype.pre=function(t){if(t instanceof RegExp){var e,r=Array.prototype.slice.call(arguments,1),n=s(k);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.test(o)&&this.pre.apply(this,[o].concat(r))}}catch(t){n.e(t)}finally{n.f()}return this}if(Array.isArray(t)){var i,a=Array.prototype.slice.call(arguments,1),u=s(t);try{for(u.s();!(i=u.n()).done;){var c=i.value;this.pre.apply(this,[c].concat(a))}}catch(t){u.e(t)}finally{u.f()}return this}return this.s.hooks.pre.apply(this.s.hooks,arguments),this},R.prototype.post=function(t){if(t instanceof RegExp){var e,r=Array.prototype.slice.call(arguments,1),n=s(k);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.test(o)&&this.post.apply(this,[o].concat(r))}}catch(t){n.e(t)}finally{n.f()}return this}if(Array.isArray(t)){var i,a=Array.prototype.slice.call(arguments,1),u=s(t);try{for(u.s();!(i=u.n()).done;){var c=i.value;this.post.apply(this,[c].concat(a))}}catch(t){u.e(t)}finally{u.f()}return this}return this.s.hooks.post.apply(this.s.hooks,arguments),this},R.prototype.plugin=function(t,e){if("function"!=typeof t)throw new Error('First param to `schema.plugin()` must be a function, got "'+i(t)+'"');if(e&&e.deduplicate){var r,n=s(this.plugins);try{for(n.s();!(r=n.n()).done;){if(r.value.fn===t)return this}}catch(t){n.e(t)}finally{n.f()}}return this.plugins.push({fn:t,opts:e}),t(this,e),this},R.prototype.method=function(t,e,r){if("string"!=typeof t)for(var n in t)this.methods[n]=t[n],this.methodOptions[n]=x.clone(r);else this.methods[t]=e,this.methodOptions[t]=x.clone(r);return this},R.prototype.static=function(t,e){if("string"!=typeof t)for(var r in t)this.statics[r]=t[r];else this.statics[t]=e;return this},R.prototype.index=function(t,e){return t||(t={}),e||(e={}),e.expires&&x.expires(e),this._indexes.push([t,e]),this},R.prototype.set=function(t,e,r){if(1===arguments.length)return this.options[t];switch(t){case"read":this.options[t]=E(e,r),this._userProvidedOptions[t]=this.options[t];break;case"safe":L(this.options,e),this._userProvidedOptions[t]=this.options[t];break;case"timestamps":this.setupTimestamp(e),this.options[t]=e,this._userProvidedOptions[t]=this.options[t];break;default:this.options[t]=e,this._userProvidedOptions[t]=this.options[t]}return this};
 /*!
  * ignore
  */
@@ -673,7 +673,7 @@
 /*!
  * ignore
  */
-R.prototype._getSchema=function(t){var e=this.path(t),r=[];if(e)return e.$fullPath=t,e;for(var n=t.split("."),o=0;o<n.length;++o)("$"===n[o]||q(n[o]))&&(n[o]="0");return function t(e,n){for(var o,i,s=e.length+1;s--;)if(i=e.slice(0,s).join("."),o=n.path(i)){if(r.push(i),o.caster){if(o.caster instanceof u.Mixed)return o.caster.$fullPath=r.join("."),o.caster;if(s!==e.length&&o.schema){var a=void 0;return"$"===e[s]||q(e[s])?s+1===e.length?o:((a=t(e.slice(s+1),o.schema))&&(a.$isUnderneathDocArray=a.$isUnderneathDocArray||!o.schema.$isSingleNested),a):((a=t(e.slice(s),o.schema))&&(a.$isUnderneathDocArray=a.$isUnderneathDocArray||!o.schema.$isSingleNested),a)}}return o.$fullPath=r.join("."),o}}(n,this)},
+R.prototype._getSchema=function(t){var e=this.path(t),r=[];if(e)return e.$fullPath=t,e;for(var n=t.split("."),o=0;o<n.length;++o)("$"===n[o]||q(n[o]))&&(n[o]="0");return function t(e,n){for(var o,i,s=e.length+1;s--;)if(i=e.slice(0,s).join("."),o=n.path(i)){if(r.push(i),o.caster){if(o.caster instanceof u.Mixed)return o.caster.$fullPath=r.join("."),o.caster;if(s!==e.length&&o.schema){var a=void 0;return"$"===e[s]||q(e[s])?s+1===e.length?o:((a=t(e.slice(s+1),o.schema))&&(a.$isUnderneathDocArray=a.$isUnderneathDocArray||!o.schema.$isSingleNested),a):((a=t(e.slice(s),o.schema))&&(a.$isUnderneathDocArray=a.$isUnderneathDocArray||!o.schema.$isSingleNested),a)}}else if(o.$isSchemaMap){return s+1>=e.length?o.$__schemaType:t(e.slice(s+1),o.$__schemaType.schema)}return o.$fullPath=r.join("."),o}}(n,this)},
 /*!
  * ignore
  */
@@ -692,10 +692,10 @@
 t.exports=n},function(t,e,r){"use strict";
 /*!
  * Module exports.
- */e.String=r(145),e.Number=r(78),e.Boolean=r(149),e.DocumentArray=r(150),e.Embedded=r(157),e.Array=r(55),e.Buffer=r(159),e.Date=r(161),e.ObjectId=r(164),e.Mixed=r(32),e.Decimal128=e.Decimal=r(166),e.Map=r(168),e.Oid=e.ObjectId,e.Object=e.Mixed,e.Bool=e.Boolean,e.ObjectID=e.ObjectId},function(t,e,r){"use strict";
+ */e.String=r(145),e.Number=r(78),e.Boolean=r(149),e.DocumentArray=r(150),e.Embedded=r(157),e.Array=r(55),e.Buffer=r(159),e.Date=r(161),e.ObjectId=r(164),e.Mixed=r(25),e.Decimal128=e.Decimal=r(166),e.Map=r(168),e.Oid=e.ObjectId,e.Object=e.Mixed,e.Bool=e.Boolean,e.ObjectID=e.ObjectId},function(t,e,r){"use strict";
 /*!
  * Module dependencies.
- */function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i,s,a=r(48),u=r(72),c=r(14),l=r(151),f=r(7),p=f.CastError,h=r(32),y=r(152),d=r(153),m=r(4),_=r(80),v=r(3),g=r(2),b=r(33).castToNumber,w=r(81),O=r(34),S=Symbol("mongoose#isNestedArray");function A(t,e,n,o){s||(s=r(56).Embedded);var i,a,u="type";if(o&&o.typeKey&&(u=o.typeKey),this.schemaOptions=o,e){var c={};g.isPOJO(e)&&(e[u]?(delete(c=g.clone(e))[u],e=e[u]):e=h),e===Object&&(e=h);var l="string"==typeof e?e:g.getFunctionName(e),p=r(54),y=p.hasOwnProperty(l)?p[l]:e;this.casterConstructor=y,this.casterConstructor instanceof A&&(this.casterConstructor[S]=!0),"function"!=typeof y||y.$isArraySubdocument||y.$isSchemaMap?this.caster=y:this.caster=new y(null,c),this.$embeddedSchemaType=this.caster,this.caster instanceof s||(this.caster.path=t)}if(this.$isMongooseArray=!0,f.call(this,t,n,"Array"),null!=this.defaultValue&&(i=this.defaultValue,a="function"==typeof i),!("defaultValue"in this)||void 0!==this.defaultValue){var d=function(){var t=[];return a?t=i.call(this):null!=i&&(t=t.concat(i)),t};d.$runBeforeSetters=!a,this.default(d)}}A.schemaName="Array",A.options={castNonArrays:!0},A.defaultOptions={},A.set=f.set,
+ */function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i,s,a=r(48),u=r(72),c=r(14),l=r(151),f=r(7),p=f.CastError,h=r(25),y=r(152),d=r(153),m=r(4),_=r(80),v=r(3),g=r(2),b=r(33).castToNumber,w=r(81),O=r(34),S=Symbol("mongoose#isNestedArray");function A(t,e,n,o){s||(s=r(56).Embedded);var i,a,u="type";if(o&&o.typeKey&&(u=o.typeKey),this.schemaOptions=o,e){var c={};g.isPOJO(e)&&(e[u]?(delete(c=g.clone(e))[u],e=e[u]):e=h),e===Object&&(e=h);var l="string"==typeof e?e:g.getFunctionName(e),p=r(54),y=p.hasOwnProperty(l)?p[l]:e;this.casterConstructor=y,this.casterConstructor instanceof A&&(this.casterConstructor[S]=!0),"function"!=typeof y||y.$isArraySubdocument||y.$isSchemaMap?this.caster=y:this.caster=new y(null,c),this.$embeddedSchemaType=this.caster,this.caster instanceof s||(this.caster.path=t)}if(this.$isMongooseArray=!0,f.call(this,t,n,"Array"),null!=this.defaultValue&&(i=this.defaultValue,a="function"==typeof i),!("defaultValue"in this)||void 0!==this.defaultValue){var d=function(){var t=[];return a?t=i.call(this):null!=i&&(t=t.concat(i)),t};d.$runBeforeSetters=!a,this.default(d)}}A.schemaName="Array",A.options={castNonArrays:!0},A.defaultOptions={},A.set=f.set,
 /*!
  * Inherits from SchemaType.
  */
@@ -718,7 +718,7 @@
 t.exports=A},function(t,e,r){"use strict";
 /*!
  * Module exports.
- */e.Array=r(82),e.Buffer=r(85),e.Document=e.Embedded=r(25),e.DocumentArray=r(17),e.Decimal128=r(19),e.ObjectId=r(13),e.Map=r(87),e.Subdocument=r(89)},function(t,e,r){"use strict";var n,o=r(0).documentSchemaSymbol,i=r(4),s=r(2),a=r(0).getSymbol,u=r(0).scopeSymbol;
+ */e.Array=r(82),e.Buffer=r(85),e.Document=e.Embedded=r(26),e.DocumentArray=r(17),e.Decimal128=r(19),e.ObjectId=r(13),e.Map=r(87),e.Subdocument=r(89)},function(t,e,r){"use strict";var n,o=r(0).documentSchemaSymbol,i=r(4),s=r(2),a=r(0).getSymbol,u=r(0).scopeSymbol;
 /*!
  * Compiles schemas.
  */
@@ -866,7 +866,7 @@
 /*!
  * Module exports.
  */
-t.exports=function(t,e,r){var l=new n;if(l[i]={},Array.isArray(t)){for(var f=t.length,p=0;p<f;++p)c.call(l,t[p]);l[i]=t[i]||{}}return l[a]=e,l[u]=void 0,r&&r instanceof o&&(l[s]=r,l[u]=r.schema.path(e)),l}},function(t,e,r){"use strict";(function(e){function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,r){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=y(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(r):o.value}})(t,e,r||t)}function c(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function l(t){var e="function"==typeof Map?new Map:void 0;return(l=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return f(t,arguments,y(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),h(n,t)})(t)}function f(t,e,r){return(f=p()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&h(o,r.prototype),o}).apply(null,arguments)}function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var d=r(6),m=r(25),_=r(14),v=r(13),g=r(84),b=r(4),w=r(22).internalToObjectOptions,O=r(2),S=r(3),A=r(0).arrayAtomicsSymbol,E=r(0).arrayParentSymbol,j=r(0).arrayPathSymbol,$=r(0).arraySchemaSymbol,x=r(0).populateModelSymbol,P=Symbol("mongoose#Array#sliced"),N=Array.prototype.push,T=Symbol("mongoose#MongooseCoreArray#validators"),k=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}(S,t);var r,n,o,i,l,f=(r=S,n=p(),function(){var t,e=y(r);if(n){var o=y(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return c(this,t)});function S(){return s(this,S),f.apply(this,arguments)}return o=S,(i=[{key:"$__getAtomics",value:function(){var t=[],e=Object.keys(this[A]),r=e.length,n=Object.assign({},w,{_isNested:!0});if(0===r)return t[0]=["$set",this.toObject(n)],t;for(;r--;){var o=e[r],i=this[A][o];O.isMongooseObject(i)?i=i.toObject(n):Array.isArray(i)?i=this.toObject.call(i,n):null!=i&&Array.isArray(i.$each)?i.$each=this.toObject.call(i.$each,n):null!=i&&"function"==typeof i.valueOf&&(i=i.valueOf()),"$addToSet"===o&&(i={$each:i}),t.push([o,i])}return t}
+t.exports=function(t,e,r){var l=new n;if(l[i]={},Array.isArray(t)){for(var f=t.length,p=0;p<f;++p)c.call(l,t[p]);l[i]=t[i]||{}}return l[a]=e,l[u]=void 0,r&&r instanceof o&&(l[s]=r,l[u]=r.schema.path(e)),l}},function(t,e,r){"use strict";(function(e){function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function u(t,e,r){return(u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=y(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(r):o.value}})(t,e,r||t)}function c(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function l(t){var e="function"==typeof Map?new Map:void 0;return(l=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return f(t,arguments,y(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),h(n,t)})(t)}function f(t,e,r){return(f=p()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&h(o,r.prototype),o}).apply(null,arguments)}function p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function y(t){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var d=r(6),m=r(26),_=r(14),v=r(13),g=r(84),b=r(4),w=r(22).internalToObjectOptions,O=r(2),S=r(3),A=r(0).arrayAtomicsSymbol,E=r(0).arrayParentSymbol,j=r(0).arrayPathSymbol,$=r(0).arraySchemaSymbol,x=r(0).populateModelSymbol,P=Symbol("mongoose#Array#sliced"),N=Array.prototype.push,T=Symbol("mongoose#MongooseCoreArray#validators"),k=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}(S,t);var r,n,o,i,l,f=(r=S,n=p(),function(){var t,e=y(r);if(n){var o=y(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return c(this,t)});function S(){return s(this,S),f.apply(this,arguments)}return o=S,(i=[{key:"$__getAtomics",value:function(){var t=[],e=Object.keys(this[A]),r=e.length,n=Object.assign({},w,{_isNested:!0});if(0===r)return t[0]=["$set",this.toObject(n)],t;for(;r--;){var o=e[r],i=this[A][o];O.isMongooseObject(i)?i=i.toObject(n):Array.isArray(i)?i=this.toObject.call(i,n):null!=i&&Array.isArray(i.$each)?i.$each=this.toObject.call(i.$each,n):null!=i&&"function"==typeof i.valueOf&&(i=i.valueOf()),"$addToSet"===o&&(i={$each:i}),t.push([o,i])}return t}
 /*!
      * ignore
      */},{key:"$atomics",value:function(){return this[A]}
@@ -910,12 +910,12 @@
 /*!
  * Module exports.
  */
-s.Binary=n,t.exports=s},function(t,e,r){"use strict";var n=r(15).get().ObjectId,o=r(21);t.exports=function(t){if(null==t)return t;if(t instanceof n)return t;if(t._id){if(t._id instanceof n)return t._id;if(t._id.toString instanceof Function)return new n(t._id.toString())}if(t.toString instanceof Function)return new n(t.toString());o.ok(!1)}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e,r){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(r):o.value}})(t,e,r||t)}function u(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){var e="function"==typeof Map?new Map:void 0;return(c=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return l(t,arguments,h(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),p(n,t)})(t)}function l(t,e,r){return(l=f()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&p(o,r.prototype),o}).apply(null,arguments)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var y=r(32),d=r(2).deepEqual,m=r(4),_=r(88),v=r(3),g=r(47),b=r(0).populateModelSymbol,w=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(v,t);var e,r,n,i,c,l=(e=v,r=f(),function(){var t,n=h(e);if(r){var o=h(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return u(this,t)});function v(t,e,r,n){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,v),null!=t&&"Object"===t.constructor.name&&(t=Object.keys(t).reduce((function(e,r){return e.concat([[r,t[r]]])}),[])),(o=l.call(this,t)).$__parent=null!=r&&null!=r.$__?r:null,o.$__path=e,o.$__schemaType=null==n?new y(e):n,o.$__runDeferred(),o}return n=v,(i=[{key:"$init",value:function(t,e){O(t),a(h(v.prototype),"set",this).call(this,t,e),null!=e&&e.$isSingleNested&&(e.$basePath=this.$__path+"."+t)}},{key:"$__set",value:function(t,e){a(h(v.prototype),"set",this).call(this,t,e)}},{key:"get",value:function(t,e){return!1===(e=e||{}).getters?a(h(v.prototype),"get",this).call(this,t):this.$__schemaType.applyGetters(a(h(v.prototype),"get",this).call(this,t),this.$__parent)}},{key:"set",value:function(t,e){if(O(t),e=_(e),null==this.$__schemaType)return this.$__deferred=this.$__deferred||[],void this.$__deferred.push({key:t,value:e});var r=this.$__path+"."+t,n=null!=this.$__parent&&this.$__parent.$__?this.$__parent.populated(r)||this.$__parent.populated(this.$__path):null,o=this.get(t);if(null!=n)null==e.$__&&(e=new n.options[b](e)),e.$__.wasPopulated=!0;else try{e=this.$__schemaType.applySetters(e,this.$__parent,!1,this.get(t))}catch(t){if(null!=this.$__parent&&null!=this.$__parent.$__)return void this.$__parent.invalidate(r,t);throw t}a(h(v.prototype),"set",this).call(this,t,e),null!=e&&e.$isSingleNested&&(e.$basePath=this.$__path+"."+t);var i=this.$__parent;null==i||null==i.$__||d(e,o)||i.markModified(this.$__path+"."+t)}},{key:"delete",value:function(t){this.set(t,void 0),a(h(v.prototype),"delete",this).call(this,t)}},{key:"toBSON",value:function(){return new Map(this)}},{key:"toObject",value:function(t){if(m(t,"flattenMaps")){var e,r={},n=o(this.keys());try{for(n.s();!(e=n.n()).done;){var i=e.value;r[i]=this.get(i)}}catch(t){n.e(t)}finally{n.f()}return r}return new Map(this)}},{key:"toJSON",value:function(){var t,e={},r=o(this.keys());try{for(r.s();!(t=r.n()).done;){var n=t.value;e[n]=this.get(n)}}catch(t){r.e(t)}finally{r.f()}return e}},{key:"inspect",value:function(){return new Map(this)}},{key:"$__runDeferred",value:function(){if(this.$__deferred){var t,e=o(this.$__deferred);try{for(e.s();!(t=e.n()).done;){var r=t.value;this.set(r.key,r.value)}}catch(t){e.e(t)}finally{e.f()}this.$__deferred=null}}}])&&s(n.prototype,i),c&&s(n,c),v}(c(Map));
+s.Binary=n,t.exports=s},function(t,e,r){"use strict";var n=r(15).get().ObjectId,o=r(21);t.exports=function(t){if(null==t)return t;if(t instanceof n)return t;if(t._id){if(t._id instanceof n)return t._id;if(t._id.toString instanceof Function)return new n(t._id.toString())}if(t.toString instanceof Function)return new n(t.toString());o.ok(!1)}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e,r){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=h(t)););return t}(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(r):o.value}})(t,e,r||t)}function u(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t){var e="function"==typeof Map?new Map:void 0;return(c=function(t){if(null===t||(r=t,-1===Function.toString.call(r).indexOf("[native code]")))return t;var r;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return l(t,arguments,h(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),p(n,t)})(t)}function l(t,e,r){return(l=f()?Reflect.construct:function(t,e,r){var n=[null];n.push.apply(n,e);var o=new(Function.bind.apply(t,n));return r&&p(o,r.prototype),o}).apply(null,arguments)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function h(t){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var y=r(25),d=r(2).deepEqual,m=r(4),_=r(88),v=r(3),g=r(47),b=r(0).populateModelSymbol,w=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(v,t);var e,r,n,i,c,l=(e=v,r=f(),function(){var t,n=h(e);if(r){var o=h(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return u(this,t)});function v(t,e,r,n){var o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,v),null!=t&&"Object"===t.constructor.name&&(t=Object.keys(t).reduce((function(e,r){return e.concat([[r,t[r]]])}),[])),(o=l.call(this,t)).$__parent=null!=r&&null!=r.$__?r:null,o.$__path=e,o.$__schemaType=null==n?new y(e):n,o.$__runDeferred(),o}return n=v,(i=[{key:"$init",value:function(t,e){O(t),a(h(v.prototype),"set",this).call(this,t,e),null!=e&&e.$isSingleNested&&(e.$basePath=this.$__path+"."+t)}},{key:"$__set",value:function(t,e){a(h(v.prototype),"set",this).call(this,t,e)}},{key:"get",value:function(t,e){return!1===(e=e||{}).getters?a(h(v.prototype),"get",this).call(this,t):this.$__schemaType.applyGetters(a(h(v.prototype),"get",this).call(this,t),this.$__parent)}},{key:"set",value:function(t,e){if(O(t),e=_(e),null==this.$__schemaType)return this.$__deferred=this.$__deferred||[],void this.$__deferred.push({key:t,value:e});var r=this.$__path+"."+t,n=null!=this.$__parent&&this.$__parent.$__?this.$__parent.populated(r)||this.$__parent.populated(this.$__path):null,o=this.get(t);if(null!=n)null==e.$__&&(e=new n.options[b](e)),e.$__.wasPopulated=!0;else try{e=this.$__schemaType.applySetters(e,this.$__parent,!1,this.get(t))}catch(t){if(null!=this.$__parent&&null!=this.$__parent.$__)return void this.$__parent.invalidate(r,t);throw t}a(h(v.prototype),"set",this).call(this,t,e),null!=e&&e.$isSingleNested&&(e.$basePath=this.$__path+"."+t);var i=this.$__parent;null==i||null==i.$__||d(e,o)||i.markModified(this.$__path+"."+t)}},{key:"delete",value:function(t){this.set(t,void 0),a(h(v.prototype),"delete",this).call(this,t)}},{key:"toBSON",value:function(){return new Map(this)}},{key:"toObject",value:function(t){if(m(t,"flattenMaps")){var e,r={},n=o(this.keys());try{for(n.s();!(e=n.n()).done;){var i=e.value;r[i]=this.get(i)}}catch(t){n.e(t)}finally{n.f()}return r}return new Map(this)}},{key:"toJSON",value:function(){var t,e={},r=o(this.keys());try{for(r.s();!(t=r.n()).done;){var n=t.value;e[n]=this.get(n)}}catch(t){r.e(t)}finally{r.f()}return e}},{key:"inspect",value:function(){return new Map(this)}},{key:"$__runDeferred",value:function(){if(this.$__deferred){var t,e=o(this.$__deferred);try{for(e.s();!(t=e.n()).done;){var r=t.value;this.set(r.key,r.value)}}catch(t){e.e(t)}finally{e.f()}this.$__deferred=null}}}])&&s(n.prototype,i),c&&s(n,c),v}(c(Map));
 /*!
  * Since maps are stored as objects under the hood, keys must be strings
  * and can't contain any invalid characters
  */
-function O(t){var e=n(t);if("string"!==e)throw new TypeError("Mongoose maps only support string keys, got ".concat(e));if(t.startsWith("$"))throw new Error('Mongoose maps do not support keys that start with "$", got "'.concat(t,'"'));if(t.includes("."))throw new Error('Mongoose maps do not support keys that contain ".", got "'.concat(t,'"'));if(g.has(t))throw new Error('Mongoose maps do not support reserved key name "'.concat(t,'"'))}v.inspect.custom&&Object.defineProperty(w.prototype,v.inspect.custom,{enumerable:!1,writable:!1,configurable:!1,value:w.prototype.inspect}),Object.defineProperty(w.prototype,"$__set",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$__parent",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$__path",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$__schemaType",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$isMongooseMap",{enumerable:!1,writable:!1,configurable:!1,value:!0}),Object.defineProperty(w.prototype,"$__deferredCalls",{enumerable:!1,writable:!1,configurable:!1,value:!0}),t.exports=w},function(t,e,r){"use strict";var n=r(2);t.exports=function(t){return n.isPOJO(t)&&null!=t.$__&&null!=t._doc?t._doc:t}},function(t,e,r){"use strict";function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i=r(6),s=r(50),a=r(22).internalToObjectOptions,u=r(24),c=r(0).documentArrayParent;function l(t,e,r,o,s){var a=this;this.$isSingleNested=!0;var u=null!=s&&s.priorDoc,c=null;if(u&&(this._doc=Object.assign({},s.priorDoc._doc),delete this._doc[this.schema.options.discriminatorKey],c=Object.keys(s.priorDoc._doc||{}).filter((function(t){return t!==a.schema.options.discriminatorKey}))),null!=r&&(s=Object.assign({},s,{isNew:r.isNew,defaults:r.$__.$options.defaults})),i.call(this,t,e,o,s),u){var l,f=n(c);try{for(f.s();!(l=f.n()).done;){var p=l.value;if(!this.$__.activePaths.states.modify[p]&&!this.$__.activePaths.states.default[p]&&!this.$__.$setCalled.has(p)){var h=this.schema.path(p),y=null==h?void 0:h.getDefault(this);void 0===y?delete this._doc[p]:(this._doc[p]=y,this.$__.activePaths.default(p))}}}catch(t){f.e(t)}finally{f.f()}delete s.priorDoc,delete this.$__.$options.priorDoc}}t.exports=l,l.prototype=Object.create(i.prototype),l.prototype.toBSON=function(){return this.toObject(a)},l.prototype.save=function(t,e){var r=this;return"function"==typeof t&&(e=t,t={}),(t=t||{}).suppressWarning||console.warn("mongoose: calling `save()` on a subdoc does **not** save the document to MongoDB, it only runs save middleware. Use `subdoc.save({ suppressWarning: true })` to hide this warning if you're sure this behavior is right for your app."),u(e,(function(t){r.$__save(t)}))},l.prototype.$__save=function(t){var e=this;return s((function(){return t(null,e)}))},l.prototype.$isValid=function(t){return this.$parent&&this.$basePath?this.$parent.$isValid([this.$basePath,t].join(".")):i.prototype.$isValid.call(this,t)},l.prototype.markModified=function(t){if(i.prototype.markModified.call(this,t),this.$parent&&this.$basePath){if(this.$parent.isDirectModified(this.$basePath))return;this.$parent.markModified([this.$basePath,t].join("."),this)}},l.prototype.isModified=function(t,e){var r=this;return this.$parent&&this.$basePath?((Array.isArray(t)||"string"==typeof t)&&(t=(t=Array.isArray(t)?t:t.split(" ")).map((function(t){return[r.$basePath,t].join(".")}))),this.$parent.isModified(t,e)):i.prototype.isModified.call(this,t,e)},l.prototype.$markValid=function(t){i.prototype.$markValid.call(this,t),this.$parent&&this.$basePath&&this.$parent.$markValid([this.$basePath,t].join("."))},
+function O(t){var e=n(t);if("string"!==e)throw new TypeError("Mongoose maps only support string keys, got ".concat(e));if(t.startsWith("$"))throw new Error('Mongoose maps do not support keys that start with "$", got "'.concat(t,'"'));if(t.includes("."))throw new Error('Mongoose maps do not support keys that contain ".", got "'.concat(t,'"'));if(g.has(t))throw new Error('Mongoose maps do not support reserved key name "'.concat(t,'"'))}v.inspect.custom&&Object.defineProperty(w.prototype,v.inspect.custom,{enumerable:!1,writable:!1,configurable:!1,value:w.prototype.inspect}),Object.defineProperty(w.prototype,"$__set",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$__parent",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$__path",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$__schemaType",{enumerable:!1,writable:!0,configurable:!1}),Object.defineProperty(w.prototype,"$isMongooseMap",{enumerable:!1,writable:!1,configurable:!1,value:!0}),Object.defineProperty(w.prototype,"$__deferredCalls",{enumerable:!1,writable:!1,configurable:!1,value:!0}),t.exports=w},function(t,e,r){"use strict";var n=r(2);t.exports=function(t){return n.isPOJO(t)&&null!=t.$__&&null!=t._doc?t._doc:t}},function(t,e,r){"use strict";function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i=r(6),s=r(50),a=r(22).internalToObjectOptions,u=r(24),c=r(0).documentArrayParent;function l(t,e,r,o,s){var a=this;this.$isSingleNested=!0;var u=null!=s&&s.priorDoc,c=null;if(u&&(this._doc=Object.assign({},s.priorDoc._doc),delete this._doc[this.schema.options.discriminatorKey],c=Object.keys(s.priorDoc._doc||{}).filter((function(t){return t!==a.schema.options.discriminatorKey}))),null!=r&&(s=Object.assign({},s,{isNew:r.isNew,defaults:r.$__.$options.defaults})),i.call(this,t,e,o,s),u){var l,f=n(c);try{for(f.s();!(l=f.n()).done;){var p=l.value;if(!this.$__.activePaths.states.modify[p]&&!this.$__.activePaths.states.default[p]&&!this.$__.$setCalled.has(p)){var h=this.schema.path(p),y=null==h?void 0:h.getDefault(this);void 0===y?delete this._doc[p]:(this._doc[p]=y,this.$__.activePaths.default(p))}}}catch(t){f.e(t)}finally{f.f()}delete s.priorDoc,delete this.$__.$options.priorDoc}}t.exports=l,l.prototype=Object.create(i.prototype),l.prototype.toBSON=function(){return this.toObject(a)},l.prototype.save=function(t,e){var r=this;return"function"==typeof t&&(e=t,t={}),(t=t||{}).suppressWarning||console.warn("mongoose: calling `save()` on a subdoc does **not** save the document to MongoDB, it only runs save middleware. Use `subdoc.save({ suppressWarning: true })` to hide this warning if you're sure this behavior is right for your app."),u(e,(function(t){r.$__save(t)}))},l.prototype.$__save=function(t){var e=this;return s((function(){return t(null,e)}))},l.prototype.$isValid=function(t){return this.$parent&&this.$basePath?this.$parent.$isValid([this.$basePath,t].join(".")):i.prototype.$isValid.call(this,t)},l.prototype.markModified=function(t){if(i.prototype.markModified.call(this,t),this.$parent&&this.$basePath){if(this.$parent.isDirectModified(this.$basePath))return;this.$parent.markModified([this.$basePath,t].join("."),this)}},l.prototype.isModified=function(t,e){var r=this;return this.$parent&&this.$basePath?Array.isArray(t)||"string"==typeof t?(t=(t=Array.isArray(t)?t:t.split(" ")).map((function(t){return[r.$basePath,t].join(".")})),this.$parent.isModified(t,e)):this.$parent.isModified(this.$basePath):i.prototype.isModified.call(this,t,e)},l.prototype.$markValid=function(t){i.prototype.$markValid.call(this,t),this.$parent&&this.$basePath&&this.$parent.$markValid([this.$basePath,t].join("."))},
 /*!
  * ignore
  */
@@ -939,11 +939,11 @@
 /*!
  * ignore
  */
-l.prototype.populate=function(){throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.nested.populate("path")`, use `doc.populate("nested.path")`')}},function(t,e,r){"use strict";function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i=r(57).defineKey,s=r(4),a=r(2),u={toJSON:!0,toObject:!0,_id:!0,id:!0};
+l.prototype.populate=function(){throw new Error('Mongoose does not support calling populate() on nested docs. Instead of `doc.nested.populate("path")`, use `doc.populate("nested.path")`')}},function(t,e,r){"use strict";function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var i=r(25),s=r(57).defineKey,a=r(4),u=r(2),c={toJSON:!0,toObject:!0,_id:!0,id:!0};
 /*!
  * ignore
  */
-t.exports=function(t,e,r,o,c){if(!r||!r.instanceOfSchema)throw new Error("You must pass a valid discriminator Schema");if(t.schema.discriminatorMapping&&!t.schema.discriminatorMapping.isRoot)throw new Error('Discriminator "'+e+'" can only be a discriminator of the root model');if(c){var l=s(t.base,"options.applyPluginsToDiscriminators",!1);t.base._applyPlugins(r,{skipTopLevel:!l})}var f=t.schema.options.discriminatorKey,p=t.schema.path(f);if(null!=p)a.hasUserDefinedProperty(p.options,"select")||(p.options.select=!0),p.options.$skipDiscriminatorCheck=!0;else{var h={};h[f]={default:void 0,select:!0,$skipDiscriminatorCheck:!0},h[f][t.schema.options.typeKey]=String,t.schema.add(h),i(f,null,t.prototype,null,[f],t.schema.options)}if(r.path(f)&&!0!==r.path(f).options.$skipDiscriminatorCheck)throw new Error('Discriminator "'+e+'" cannot have field with name "'+f+'"');var y=e;if("string"==typeof o&&o.length&&(y=o),function(e,r){e._baseSchema=r,r.paths._id&&r.paths._id.options&&!r.paths._id.options.auto&&e.remove("_id");for(var o=[],i=0,s=Object.keys(r.paths);i<s.length;i++){var c=s[i];if(e.nested[c]&&o.push(c),-1!==c.indexOf(".")){var l,h="",d=n(c.split("."));try{for(d.s();!(l=d.n()).done;){var m=l.value;h+=(h.length?".":"")+m,(e.paths[h]||e.singleNestedPaths[h])&&o.push(c)}}catch(t){d.e(t)}finally{d.f()}}}a.merge(e,r,{omit:{discriminators:!0,base:!0},omitNested:o.reduce((function(t,e){return t["tree."+e]=!0,t}),{})});for(var _=0,v=o;_<v.length;_++){var g=v[_];delete e.paths[g]}e.childSchemas.forEach((function(t){t.model.prototype.$__setSchema(t.schema)}));var b={};b[f]={default:y,select:!0,set:function(t){if(t===y)return y;throw new Error("Can't set discriminator key \""+f+'"')},$skipDiscriminatorCheck:!0},b[f][e.options.typeKey]=p?p.instance:String,e.add(b),e.discriminatorMapping={key:f,value:y,isRoot:!1},r.options.collection&&(e.options.collection=r.options.collection);var w=e.options.toJSON,O=e.options.toObject,S=e.options._id,A=e.options.id,E=Object.keys(e.options);e.options.discriminatorKey=r.options.discriminatorKey;for(var j=0,$=E;j<$.length;j++){var x=$[j];if(!u[x]){if("pluralization"===x&&1==e.options[x]&&null==r.options[x])continue;if(!a.deepEqual(e.options[x],r.options[x]))throw new Error("Can't customize discriminator option "+x+" (can only modify "+Object.keys(u).join(", ")+")")}}e.options=a.clone(r.options),w&&(e.options.toJSON=w),O&&(e.options.toObject=O),void 0!==S&&(e.options._id=S),e.options.id=A,e.s.hooks=t.schema.s.hooks.merge(e.s.hooks),e.plugins=Array.prototype.slice.call(r.plugins),e.callQueue=r.callQueue.concat(e.callQueue),delete e._requiredpaths}(r,t.schema),t.discriminators||(t.discriminators={}),t.schema.discriminatorMapping||(t.schema.discriminatorMapping={key:f,value:null,isRoot:!0}),t.schema.discriminators||(t.schema.discriminators={}),t.schema.discriminators[e]=r,t.discriminators[e])throw new Error('Discriminator with name "'+e+'" already exists');return r}},function(t,e,r){"use strict";var n=r(74);t.exports=function(t,e){return null==e||null==e._id||(t=t.clone(),e._id?t.paths._id||(n(t),t.options._id=!0):(t.remove("_id"),t.options._id=!1)),t}},function(t,e,r){"use strict";var n=r(34);
+t.exports=function(t,e,r,o,l){if(!r||!r.instanceOfSchema)throw new Error("You must pass a valid discriminator Schema");if(t.schema.discriminatorMapping&&!t.schema.discriminatorMapping.isRoot)throw new Error('Discriminator "'+e+'" can only be a discriminator of the root model');if(l){var f=a(t.base,"options.applyPluginsToDiscriminators",!1);t.base._applyPlugins(r,{skipTopLevel:!f})}var p=t.schema.options.discriminatorKey,h=t.schema.path(p);if(null!=h)u.hasUserDefinedProperty(h.options,"select")||(h.options.select=!0),h.options.$skipDiscriminatorCheck=!0;else{var y={};y[p]={default:void 0,select:!0,$skipDiscriminatorCheck:!0},y[p][t.schema.options.typeKey]=String,t.schema.add(y),s(p,null,t.prototype,null,[p],t.schema.options)}if(r.path(p)&&!0!==r.path(p).options.$skipDiscriminatorCheck)throw new Error('Discriminator "'+e+'" cannot have field with name "'+p+'"');var d=e;if("string"==typeof o&&o.length&&(d=o),function(e,r){e._baseSchema=r,r.paths._id&&r.paths._id.options&&!r.paths._id.options.auto&&e.remove("_id");for(var o=[],s=0,a=Object.keys(r.paths);s<a.length;s++){var l=a[s];if(e.nested[l]&&o.push(l),-1!==l.indexOf(".")){var f,y="",m=n(l.split(".").slice(0,-1));try{for(m.s();!(f=m.n()).done;){var _=f.value;y+=(y.length?".":"")+_,(e.paths[y]instanceof i||e.singleNestedPaths[y]instanceof i)&&o.push(l)}}catch(t){m.e(t)}finally{m.f()}}}u.merge(e,r,{omit:{discriminators:!0,base:!0},omitNested:o.reduce((function(t,e){return t["tree."+e]=!0,t}),{})});for(var v=0,g=o;v<g.length;v++){var b=g[v];delete e.paths[b]}e.childSchemas.forEach((function(t){t.model.prototype.$__setSchema(t.schema)}));var w={};w[p]={default:d,select:!0,set:function(t){if(t===d)return d;throw new Error("Can't set discriminator key \""+p+'"')},$skipDiscriminatorCheck:!0},w[p][e.options.typeKey]=h?h.instance:String,e.add(w),e.discriminatorMapping={key:p,value:d,isRoot:!1},r.options.collection&&(e.options.collection=r.options.collection);var O=e.options.toJSON,S=e.options.toObject,A=e.options._id,E=e.options.id,j=Object.keys(e.options);e.options.discriminatorKey=r.options.discriminatorKey;for(var $=0,x=j;$<x.length;$++){var P=x[$];if(!c[P]){if("pluralization"===P&&1==e.options[P]&&null==r.options[P])continue;if(!u.deepEqual(e.options[P],r.options[P]))throw new Error("Can't customize discriminator option "+P+" (can only modify "+Object.keys(c).join(", ")+")")}}e.options=u.clone(r.options),O&&(e.options.toJSON=O),S&&(e.options.toObject=S),void 0!==A&&(e.options._id=A),e.options.id=E,e.s.hooks=t.schema.s.hooks.merge(e.s.hooks),e.plugins=Array.prototype.slice.call(r.plugins),e.callQueue=r.callQueue.concat(e.callQueue),delete e._requiredpaths}(r,t.schema),t.discriminators||(t.discriminators={}),t.schema.discriminatorMapping||(t.schema.discriminatorMapping={key:p,value:null,isRoot:!0}),t.schema.discriminators||(t.schema.discriminators={}),t.schema.discriminators[e]=r,t.discriminators[e])throw new Error('Discriminator with name "'+e+'" already exists');return r}},function(t,e,r){"use strict";var n=r(74);t.exports=function(t,e){return null==e||null==e._id||(t=t.clone(),e._id?t.paths._id||(n(t),t.options._id=!0):(t.remove("_id"),t.options._id=!1)),t}},function(t,e,r){"use strict";var n=r(34);
 /*!
  * Find the correct constructor, taking into account discriminators
  */t.exports=function(t,e){var r=t.schema.options.discriminatorKey;if(null!=e&&t.discriminators&&null!=e[r])if(t.discriminators[e[r]])t=t.discriminators[e[r]];else{var o=n(t,e[r]);o&&(t=o)}return t}},function(t,e,r){"use strict";t.exports=r(94)},function(t,e,r){"use strict";(function(n){function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,n=u(t);if(e){var o=u(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return a(this,r)}}function a(t,e){return!e||"object"!==o(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function u(t){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}r(15).set(r(98));var c=r(61),l=r(67);c.setBrowser(!0),Object.defineProperty(e,"Promise",{get:function(){return l.get()},set:function(t){l.set(t)}}),e.PromiseProvider=l,e.Error=r(5),e.Schema=r(52),e.Types=r(56),e.VirtualType=r(53),e.SchemaType=r(7),e.utils=r(2),e.Document=c(),e.model=function(t,r){var n=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}(n,t);var e=s(n);function n(t,o){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),e.call(this,t,r,o)}return n}(e.Document);return n.modelName=t,n},
@@ -959,7 +959,7 @@
  */var n=r(35).Binary;
 /*!
  * Module exports.
- */t.exports=n},function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}t.exports=function(t){return t&&"object"===r(t)&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(module,exports,__webpack_require__){"use strict";var Long=__webpack_require__(23).Long,Double=__webpack_require__(36).Double,Timestamp=__webpack_require__(37).Timestamp,ObjectID=__webpack_require__(38).ObjectID,_Symbol=__webpack_require__(40).Symbol,Code=__webpack_require__(41).Code,MinKey=__webpack_require__(43).MinKey,MaxKey=__webpack_require__(44).MaxKey,Decimal128=__webpack_require__(42),Int32=__webpack_require__(60),DBRef=__webpack_require__(45).DBRef,BSONRegExp=__webpack_require__(39).BSONRegExp,Binary=__webpack_require__(26).Binary,utils=__webpack_require__(16),deserialize=function(t,e,r){var n=(e=null==e?{}:e)&&e.index?e.index:0,o=t[n]|t[n+1]<<8|t[n+2]<<16|t[n+3]<<24;if(o<5||t.length<o||o+n>t.length)throw new Error("corrupt bson message");if(0!==t[n+o-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(t,n,e,r)},deserializeObject=function t(e,r,n,o){var i=null!=n.evalFunctions&&n.evalFunctions,s=null!=n.cacheFunctions&&n.cacheFunctions,a=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!a)var u=null;var c=null==n.fieldsAsRaw?null:n.fieldsAsRaw,l=null!=n.raw&&n.raw,f="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,p=null!=n.promoteBuffers&&n.promoteBuffers,h=null==n.promoteLongs||n.promoteLongs,y=null==n.promoteValues||n.promoteValues,d=r;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");var m=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;if(m<5||m>e.length)throw new Error("corrupt bson message");for(var _=o?[]:{},v=0;;){var g=e[r++];if(0===g)break;for(var b=r;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");var w=o?v++:e.toString("utf8",r,b);if(r=b+1,g===BSON.BSON_DATA_STRING){var O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;if(O<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");_[w]=e.toString("utf8",r,r+O-1),r+=O}else if(g===BSON.BSON_DATA_OID){var S=utils.allocBuffer(12);e.copy(S,0,r,r+12),_[w]=new ObjectID(S),r+=12}else if(g===BSON.BSON_DATA_INT&&!1===y)_[w]=new Int32(e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24);else if(g===BSON.BSON_DATA_INT)_[w]=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;else if(g===BSON.BSON_DATA_NUMBER&&!1===y)_[w]=new Double(e.readDoubleLE(r)),r+=8;else if(g===BSON.BSON_DATA_NUMBER)_[w]=e.readDoubleLE(r),r+=8;else if(g===BSON.BSON_DATA_DATE){var A=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,E=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;_[w]=new Date(new Long(A,E).toNumber())}else if(g===BSON.BSON_DATA_BOOLEAN){if(0!==e[r]&&1!==e[r])throw new Error("illegal boolean type value");_[w]=1===e[r++]}else if(g===BSON.BSON_DATA_OBJECT){var j=r,$=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if($<=0||$>e.length-r)throw new Error("bad embedded document length in bson");_[w]=l?e.slice(r,r+$):t(e,j,n,!1),r+=$}else if(g===BSON.BSON_DATA_ARRAY){j=r;var x=n,P=r+($=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24);if(c&&c[w]){for(var N in x={},n)x[N]=n[N];x.raw=!0}if(_[w]=t(e,j,x,!0),0!==e[(r+=$)-1])throw new Error("invalid array terminator byte");if(r!==P)throw new Error("corrupted array bson")}else if(g===BSON.BSON_DATA_UNDEFINED)_[w]=void 0;else if(g===BSON.BSON_DATA_NULL)_[w]=null;else if(g===BSON.BSON_DATA_LONG){A=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,E=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;var T=new Long(A,E);_[w]=h&&!0===y&&T.lessThanOrEqual(JS_INT_MAX_LONG)&&T.greaterThanOrEqual(JS_INT_MIN_LONG)?T.toNumber():T}else if(g===BSON.BSON_DATA_DECIMAL128){var k=utils.allocBuffer(16);e.copy(k,0,r,r+16),r+=16;var C=new Decimal128(k);_[w]=C.toObject?C.toObject():C}else if(g===BSON.BSON_DATA_BINARY){var R=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,B=R,D=e[r++];if(R<0)throw new Error("Negative binary type element size found");if(R>e.length)throw new Error("Binary type size larger than document size");if(null!=e.slice){if(D===Binary.SUBTYPE_BYTE_ARRAY){if((R=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(R>B-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(R<B-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}_[w]=p&&y?e.slice(r,r+R):new Binary(e.slice(r,r+R),D)}else{var M="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(R)):new Array(R);if(D===Binary.SUBTYPE_BYTE_ARRAY){if((R=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(R>B-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(R<B-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(b=0;b<R;b++)M[b]=e[r+b];_[w]=p&&y?M:new Binary(M,D)}r+=R}else if(g===BSON.BSON_DATA_REGEXP&&!1===f){for(b=r;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");var I=e.toString("utf8",r,b);for(b=r=b+1;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");var F=e.toString("utf8",r,b);r=b+1;var L=new Array(F.length);for(b=0;b<F.length;b++)switch(F[b]){case"m":L[b]="m";break;case"s":L[b]="g";break;case"i":L[b]="i"}_[w]=new RegExp(I,L.join(""))}else if(g===BSON.BSON_DATA_REGEXP&&!0===f){for(b=r;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");for(I=e.toString("utf8",r,b),b=r=b+1;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");F=e.toString("utf8",r,b),r=b+1,_[w]=new BSONRegExp(I,F)}else if(g===BSON.BSON_DATA_SYMBOL){if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");_[w]=new _Symbol(e.toString("utf8",r,r+O-1)),r+=O}else if(g===BSON.BSON_DATA_TIMESTAMP)A=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,E=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,_[w]=new Timestamp(A,E);else if(g===BSON.BSON_DATA_MIN_KEY)_[w]=new MinKey;else if(g===BSON.BSON_DATA_MAX_KEY)_[w]=new MaxKey;else if(g===BSON.BSON_DATA_CODE){if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");var U=e.toString("utf8",r,r+O-1);if(i)if(s){var V=a?u(U):U;_[w]=isolateEvalWithHash(functionCache,V,U,_)}else _[w]=isolateEval(U);else _[w]=new Code(U);r+=O}else if(g===BSON.BSON_DATA_CODE_W_SCOPE){var q=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;if(q<13)throw new Error("code_w_scope total size shorter minimum expected length");if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");U=e.toString("utf8",r,r+O-1),j=r+=O,$=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;var W=t(e,j,n,!1);if(r+=$,q<8+$+O)throw new Error("code_w_scope total size is to short, truncating scope");if(q>8+$+O)throw new Error("code_w_scope total size is to long, clips outer document");i?(s?(V=a?u(U):U,_[w]=isolateEvalWithHash(functionCache,V,U,_)):_[w]=isolateEval(U),_[w].scope=W):_[w]=new Code(U,W)}else{if(g!==BSON.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+g.toString(16)+' for fieldname "'+w+'", are you using the latest BSON parser');if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");var H=e.toString("utf8",r,r+O-1);r+=O;var Y=utils.allocBuffer(12);e.copy(Y,0,r,r+12),S=new ObjectID(Y),r+=12;var K=H.split("."),z=K.shift(),Q=K.join(".");_[w]=new DBRef(Q,S,z)}}if(m!==r-d){if(o)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}return null!=_.$id&&(_=new DBRef(_.$ref,_.$id,_.$db)),_},isolateEvalWithHash=function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)},isolateEval=function isolateEval(functionString){var value=null;return eval("value = "+functionString),value},BSON={},functionCache=BSON.functionCache={};BSON.BSON_DATA_NUMBER=1,BSON.BSON_DATA_STRING=2,BSON.BSON_DATA_OBJECT=3,BSON.BSON_DATA_ARRAY=4,BSON.BSON_DATA_BINARY=5,BSON.BSON_DATA_UNDEFINED=6,BSON.BSON_DATA_OID=7,BSON.BSON_DATA_BOOLEAN=8,BSON.BSON_DATA_DATE=9,BSON.BSON_DATA_NULL=10,BSON.BSON_DATA_REGEXP=11,BSON.BSON_DATA_DBPOINTER=12,BSON.BSON_DATA_CODE=13,BSON.BSON_DATA_SYMBOL=14,BSON.BSON_DATA_CODE_W_SCOPE=15,BSON.BSON_DATA_INT=16,BSON.BSON_DATA_TIMESTAMP=17,BSON.BSON_DATA_LONG=18,BSON.BSON_DATA_DECIMAL128=19,BSON.BSON_DATA_MIN_KEY=255,BSON.BSON_DATA_MAX_KEY=127,BSON.BSON_BINARY_SUBTYPE_DEFAULT=0,BSON.BSON_BINARY_SUBTYPE_FUNCTION=1,BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY=2,BSON.BSON_BINARY_SUBTYPE_UUID=3,BSON.BSON_BINARY_SUBTYPE_MD5=4,BSON.BSON_BINARY_SUBTYPE_USER_DEFINED=128,BSON.BSON_INT32_MAX=2147483647,BSON.BSON_INT32_MIN=-2147483648,BSON.BSON_INT64_MAX=Math.pow(2,63)-1,BSON.BSON_INT64_MIN=-Math.pow(2,63),BSON.JS_INT_MAX=9007199254740992,BSON.JS_INT_MIN=-9007199254740992;var JS_INT_MAX_LONG=Long.fromNumber(9007199254740992),JS_INT_MIN_LONG=Long.fromNumber(-9007199254740992);module.exports=deserialize},function(t,e,r){"use strict";(function(e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(104).writeIEEE754,i=r(23).Long,s=r(59),a=r(26).Binary,u=r(16).normalizedFunctionString,c=/\x00/,l=["$db","$ref","$id","$clusterTime"],f=function(t){return"object"===n(t)&&"[object Date]"===Object.prototype.toString.call(t)},p=function(t){return"[object RegExp]"===Object.prototype.toString.call(t)},h=function(t,e,r,n,o){t[n++]=R.BSON_DATA_STRING;var i=o?t.write(e,n,"ascii"):t.write(e,n,"utf8");t[(n=n+i+1)-1]=0;var s=t.write(r,n+4,"utf8");return t[n+3]=s+1>>24&255,t[n+2]=s+1>>16&255,t[n+1]=s+1>>8&255,t[n]=s+1&255,n=n+4+s,t[n++]=0,n},y=function(t,e,r,n,s){if(Math.floor(r)===r&&r>=R.JS_INT_MIN&&r<=R.JS_INT_MAX)if(r>=R.BSON_INT32_MIN&&r<=R.BSON_INT32_MAX){t[n++]=R.BSON_DATA_INT;var a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8");n+=a,t[n++]=0,t[n++]=255&r,t[n++]=r>>8&255,t[n++]=r>>16&255,t[n++]=r>>24&255}else if(r>=R.JS_INT_MIN&&r<=R.JS_INT_MAX)t[n++]=R.BSON_DATA_NUMBER,n+=a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,o(t,r,n,"little",52,8),n+=8;else{t[n++]=R.BSON_DATA_LONG,n+=a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var u=i.fromNumber(r),c=u.getLowBits(),l=u.getHighBits();t[n++]=255&c,t[n++]=c>>8&255,t[n++]=c>>16&255,t[n++]=c>>24&255,t[n++]=255&l,t[n++]=l>>8&255,t[n++]=l>>16&255,t[n++]=l>>24&255}else t[n++]=R.BSON_DATA_NUMBER,n+=a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,o(t,r,n,"little",52,8),n+=8;return n},d=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_NULL,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,n},m=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_BOOLEAN,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,t[n++]=r?1:0,n},_=function(t,e,r,n,o){t[n++]=R.BSON_DATA_DATE,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var s=i.fromNumber(r.getTime()),a=s.getLowBits(),u=s.getHighBits();return t[n++]=255&a,t[n++]=a>>8&255,t[n++]=a>>16&255,t[n++]=a>>24&255,t[n++]=255&u,t[n++]=u>>8&255,t[n++]=u>>16&255,t[n++]=u>>24&255,n},v=function(t,e,r,n,o){if(t[n++]=R.BSON_DATA_REGEXP,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,r.source&&null!=r.source.match(c))throw Error("value "+r.source+" must not contain null bytes");return n+=t.write(r.source,n,"utf8"),t[n++]=0,r.global&&(t[n++]=115),r.ignoreCase&&(t[n++]=105),r.multiline&&(t[n++]=109),t[n++]=0,n},g=function(t,e,r,n,o){if(t[n++]=R.BSON_DATA_REGEXP,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,null!=r.pattern.match(c))throw Error("pattern "+r.pattern+" must not contain null bytes");return n+=t.write(r.pattern,n,"utf8"),t[n++]=0,n+=t.write(r.options.split("").sort().join(""),n,"utf8"),t[n++]=0,n},b=function(t,e,r,n,o){return null===r?t[n++]=R.BSON_DATA_NULL:"MinKey"===r._bsontype?t[n++]=R.BSON_DATA_MIN_KEY:t[n++]=R.BSON_DATA_MAX_KEY,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,n},w=function(t,e,r,n,o){if(t[n++]=R.BSON_DATA_OID,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,"string"==typeof r.id)t.write(r.id,n,"binary");else{if(!r.id||!r.id.copy)throw new Error("object ["+JSON.stringify(r)+"] is not a valid ObjectId");r.id.copy(t,n,0,12)}return n+12},O=function(t,e,r,n,o){t[n++]=R.BSON_DATA_BINARY,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=r.length;return t[n++]=255&i,t[n++]=i>>8&255,t[n++]=i>>16&255,t[n++]=i>>24&255,t[n++]=R.BSON_BINARY_SUBTYPE_DEFAULT,r.copy(t,n,0,i),n+=i},S=function(t,e,r,n,o,i,s,a,u,c){for(var l=0;l<c.length;l++)if(c[l]===r)throw new Error("cyclic dependency detected");c.push(r),t[n++]=Array.isArray(r)?R.BSON_DATA_ARRAY:R.BSON_DATA_OBJECT,n+=u?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var f=C(t,r,o,n,i+1,s,a,c);return c.pop(),f},A=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_DECIMAL128,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,r.bytes.copy(t,n,0,16),n+16},E=function(t,e,r,n,o){t[n++]="Long"===r._bsontype?R.BSON_DATA_LONG:R.BSON_DATA_TIMESTAMP,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=r.getLowBits(),s=r.getHighBits();return t[n++]=255&i,t[n++]=i>>8&255,t[n++]=i>>16&255,t[n++]=i>>24&255,t[n++]=255&s,t[n++]=s>>8&255,t[n++]=s>>16&255,t[n++]=s>>24&255,n},j=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_INT,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,t[n++]=255&r,t[n++]=r>>8&255,t[n++]=r>>16&255,t[n++]=r>>24&255,n},$=function(t,e,r,n,i){return t[n++]=R.BSON_DATA_NUMBER,n+=i?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,o(t,r,n,"little",52,8),n+=8},x=function(t,e,r,n,o,i,s){t[n++]=R.BSON_DATA_CODE,n+=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var a=u(r),c=t.write(a,n+4,"utf8")+1;return t[n]=255&c,t[n+1]=c>>8&255,t[n+2]=c>>16&255,t[n+3]=c>>24&255,n=n+4+c-1,t[n++]=0,n},P=function(t,e,r,o,i,s,a,u,c){if(r.scope&&"object"===n(r.scope)){t[o++]=R.BSON_DATA_CODE_W_SCOPE;var l=c?t.write(e,o,"ascii"):t.write(e,o,"utf8");o+=l,t[o++]=0;var f=o,p="string"==typeof r.code?r.code:r.code.toString();o+=4;var h=t.write(p,o+4,"utf8")+1;t[o]=255&h,t[o+1]=h>>8&255,t[o+2]=h>>16&255,t[o+3]=h>>24&255,t[o+4+h-1]=0,o=o+h+4;var y=C(t,r.scope,i,o,s+1,a,u);o=y-1;var d=y-f;t[f++]=255&d,t[f++]=d>>8&255,t[f++]=d>>16&255,t[f++]=d>>24&255,t[o++]=0}else{t[o++]=R.BSON_DATA_CODE,o+=l=c?t.write(e,o,"ascii"):t.write(e,o,"utf8"),t[o++]=0,p=r.code.toString();var m=t.write(p,o+4,"utf8")+1;t[o]=255&m,t[o+1]=m>>8&255,t[o+2]=m>>16&255,t[o+3]=m>>24&255,o=o+4+m-1,t[o++]=0}return o},N=function(t,e,r,n,o){t[n++]=R.BSON_DATA_BINARY,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=r.value(!0),s=r.position;return r.sub_type===a.SUBTYPE_BYTE_ARRAY&&(s+=4),t[n++]=255&s,t[n++]=s>>8&255,t[n++]=s>>16&255,t[n++]=s>>24&255,t[n++]=r.sub_type,r.sub_type===a.SUBTYPE_BYTE_ARRAY&&(s-=4,t[n++]=255&s,t[n++]=s>>8&255,t[n++]=s>>16&255,t[n++]=s>>24&255),i.copy(t,n,0,r.position),n+=r.position},T=function(t,e,r,n,o){t[n++]=R.BSON_DATA_SYMBOL,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=t.write(r.value,n+4,"utf8")+1;return t[n]=255&i,t[n+1]=i>>8&255,t[n+2]=i>>16&255,t[n+3]=i>>24&255,n=n+4+i-1,t[n++]=0,n},k=function(t,e,r,n,o,i,s){t[n++]=R.BSON_DATA_OBJECT,n+=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var a,u=n,c=(a=null!=r.db?C(t,{$ref:r.namespace,$id:r.oid,$db:r.db},!1,n,o+1,i):C(t,{$ref:r.namespace,$id:r.oid},!1,n,o+1,i))-u;return t[u++]=255&c,t[u++]=c>>8&255,t[u++]=c>>16&255,t[u++]=c>>24&255,a},C=function(t,r,o,i,a,u,C,R){i=i||0,(R=R||[]).push(r);var B=i+4;if(Array.isArray(r))for(var D=0;D<r.length;D++){var M=""+D,I=r[D];if(I&&I.toBSON){if("function"!=typeof I.toBSON)throw new Error("toBSON is not a function");I=I.toBSON()}var F=n(I);if("string"===F)B=h(t,M,I,B,!0);else if("number"===F)B=y(t,M,I,B,!0);else if("boolean"===F)B=m(t,M,I,B,!0);else if(I instanceof Date||f(I))B=_(t,M,I,B,!0);else if(void 0===I)B=d(t,M,0,B,!0);else if(null===I)B=d(t,M,0,B,!0);else if("ObjectID"===I._bsontype||"ObjectId"===I._bsontype)B=w(t,M,I,B,!0);else if(e.isBuffer(I))B=O(t,M,I,B,!0);else if(I instanceof RegExp||p(I))B=v(t,M,I,B,!0);else if("object"===F&&null==I._bsontype)B=S(t,M,I,B,o,a,u,C,!0,R);else if("object"===F&&"Decimal128"===I._bsontype)B=A(t,M,I,B,!0);else if("Long"===I._bsontype||"Timestamp"===I._bsontype)B=E(t,M,I,B,!0);else if("Double"===I._bsontype)B=$(t,M,I,B,!0);else if("function"==typeof I&&u)B=x(t,M,I,B,0,0,u);else if("Code"===I._bsontype)B=P(t,M,I,B,o,a,u,C,!0);else if("Binary"===I._bsontype)B=N(t,M,I,B,!0);else if("Symbol"===I._bsontype)B=T(t,M,I,B,!0);else if("DBRef"===I._bsontype)B=k(t,M,I,B,a,u,!0);else if("BSONRegExp"===I._bsontype)B=g(t,M,I,B,!0);else if("Int32"===I._bsontype)B=j(t,M,I,B,!0);else if("MinKey"===I._bsontype||"MaxKey"===I._bsontype)B=b(t,M,I,B,!0);else if(void 0!==I._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+I._bsontype)}else if(r instanceof s)for(var L=r.entries(),U=!1;!U;){var V=L.next();if(!(U=V.done)){if(M=V.value[0],F=n(I=V.value[1]),"string"==typeof M&&-1===l.indexOf(M)){if(null!=M.match(c))throw Error("key "+M+" must not contain null bytes");if(o){if("$"===M[0])throw Error("key "+M+" must not start with '$'");if(~M.indexOf("."))throw Error("key "+M+" must not contain '.'")}}if("string"===F)B=h(t,M,I,B);else if("number"===F)B=y(t,M,I,B);else if("boolean"===F)B=m(t,M,I,B);else if(I instanceof Date||f(I))B=_(t,M,I,B);else if(null===I||void 0===I&&!1===C)B=d(t,M,0,B);else if("ObjectID"===I._bsontype||"ObjectId"===I._bsontype)B=w(t,M,I,B);else if(e.isBuffer(I))B=O(t,M,I,B);else if(I instanceof RegExp||p(I))B=v(t,M,I,B);else if("object"===F&&null==I._bsontype)B=S(t,M,I,B,o,a,u,C,!1,R);else if("object"===F&&"Decimal128"===I._bsontype)B=A(t,M,I,B);else if("Long"===I._bsontype||"Timestamp"===I._bsontype)B=E(t,M,I,B);else if("Double"===I._bsontype)B=$(t,M,I,B);else if("Code"===I._bsontype)B=P(t,M,I,B,o,a,u,C);else if("function"==typeof I&&u)B=x(t,M,I,B,0,0,u);else if("Binary"===I._bsontype)B=N(t,M,I,B);else if("Symbol"===I._bsontype)B=T(t,M,I,B);else if("DBRef"===I._bsontype)B=k(t,M,I,B,a,u);else if("BSONRegExp"===I._bsontype)B=g(t,M,I,B);else if("Int32"===I._bsontype)B=j(t,M,I,B);else if("MinKey"===I._bsontype||"MaxKey"===I._bsontype)B=b(t,M,I,B);else if(void 0!==I._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+I._bsontype)}}else{if(r.toBSON){if("function"!=typeof r.toBSON)throw new Error("toBSON is not a function");if(null!=(r=r.toBSON())&&"object"!==n(r))throw new Error("toBSON function did not return an object")}for(M in r){if((I=r[M])&&I.toBSON){if("function"!=typeof I.toBSON)throw new Error("toBSON is not a function");I=I.toBSON()}if(F=n(I),"string"==typeof M&&-1===l.indexOf(M)){if(null!=M.match(c))throw Error("key "+M+" must not contain null bytes");if(o){if("$"===M[0])throw Error("key "+M+" must not start with '$'");if(~M.indexOf("."))throw Error("key "+M+" must not contain '.'")}}if("string"===F)B=h(t,M,I,B);else if("number"===F)B=y(t,M,I,B);else if("boolean"===F)B=m(t,M,I,B);else if(I instanceof Date||f(I))B=_(t,M,I,B);else if(void 0===I)!1===C&&(B=d(t,M,0,B));else if(null===I)B=d(t,M,0,B);else if("ObjectID"===I._bsontype||"ObjectId"===I._bsontype)B=w(t,M,I,B);else if(e.isBuffer(I))B=O(t,M,I,B);else if(I instanceof RegExp||p(I))B=v(t,M,I,B);else if("object"===F&&null==I._bsontype)B=S(t,M,I,B,o,a,u,C,!1,R);else if("object"===F&&"Decimal128"===I._bsontype)B=A(t,M,I,B);else if("Long"===I._bsontype||"Timestamp"===I._bsontype)B=E(t,M,I,B);else if("Double"===I._bsontype)B=$(t,M,I,B);else if("Code"===I._bsontype)B=P(t,M,I,B,o,a,u,C);else if("function"==typeof I&&u)B=x(t,M,I,B,0,0,u);else if("Binary"===I._bsontype)B=N(t,M,I,B);else if("Symbol"===I._bsontype)B=T(t,M,I,B);else if("DBRef"===I._bsontype)B=k(t,M,I,B,a,u);else if("BSONRegExp"===I._bsontype)B=g(t,M,I,B);else if("Int32"===I._bsontype)B=j(t,M,I,B);else if("MinKey"===I._bsontype||"MaxKey"===I._bsontype)B=b(t,M,I,B);else if(void 0!==I._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+I._bsontype)}}R.pop(),t[B++]=0;var q=B-i;return t[i++]=255&q,t[i++]=q>>8&255,t[i++]=q>>16&255,t[i++]=q>>24&255,B},R={BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128,BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648};R.BSON_INT64_MAX=Math.pow(2,63)-1,R.BSON_INT64_MIN=-Math.pow(2,63),R.JS_INT_MAX=9007199254740992,R.JS_INT_MIN=-9007199254740992,t.exports=C}).call(this,r(1).Buffer)},function(t,e){e.readIEEE754=function(t,e,r,n,o){var i,s,a="big"===r,u=8*o-n-1,c=(1<<u)-1,l=c>>1,f=-7,p=a?0:o-1,h=a?1:-1,y=t[e+p];for(p+=h,i=y&(1<<-f)-1,y>>=-f,f+=u;f>0;i=256*i+t[e+p],p+=h,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=n;f>0;s=256*s+t[e+p],p+=h,f-=8);if(0===i)i=1-l;else{if(i===c)return s?NaN:1/0*(y?-1:1);s+=Math.pow(2,n),i-=l}return(y?-1:1)*s*Math.pow(2,i-n)},e.writeIEEE754=function(t,e,r,n,o,i){var s,a,u,c="big"===n,l=8*i-o-1,f=(1<<l)-1,p=f>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,y=c?i-1:0,d=c?-1:1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(s++,u/=2),s+p>=f?(a=0,s=f):s+p>=1?(a=(e*u-1)*Math.pow(2,o),s+=p):(a=e*Math.pow(2,p-1)*Math.pow(2,o),s=0));o>=8;t[r+y]=255&a,y+=d,a/=256,o-=8);for(s=s<<o|a,l+=o;l>0;t[r+y]=255&s,y+=d,s/=256,l-=8);t[r+y-d]|=128*m}},function(t,e,r){"use strict";(function(e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(23).Long,i=r(36).Double,s=r(37).Timestamp,a=r(38).ObjectID,u=r(40).Symbol,c=r(39).BSONRegExp,l=r(41).Code,f=r(42),p=r(43).MinKey,h=r(44).MaxKey,y=r(45).DBRef,d=r(26).Binary,m=r(16).normalizedFunctionString,_=function(t,e,r){var n=5;if(Array.isArray(t))for(var o=0;o<t.length;o++)n+=v(o.toString(),t[o],e,!0,r);else for(var i in t.toBSON&&(t=t.toBSON()),t)n+=v(i,t[i],e,!1,r);return n};function v(t,r,v,b,w){switch(r&&r.toBSON&&(r=r.toBSON()),n(r)){case"string":return 1+e.byteLength(t,"utf8")+1+4+e.byteLength(r,"utf8")+1;case"number":return Math.floor(r)===r&&r>=g.JS_INT_MIN&&r<=g.JS_INT_MAX&&r>=g.BSON_INT32_MIN&&r<=g.BSON_INT32_MAX?(null!=t?e.byteLength(t,"utf8")+1:0)+5:(null!=t?e.byteLength(t,"utf8")+1:0)+9;case"undefined":return b||!w?(null!=t?e.byteLength(t,"utf8")+1:0)+1:0;case"boolean":return(null!=t?e.byteLength(t,"utf8")+1:0)+2;case"object":if(null==r||r instanceof p||r instanceof h||"MinKey"===r._bsontype||"MaxKey"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+1;if(r instanceof a||"ObjectID"===r._bsontype||"ObjectId"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+13;if(r instanceof Date||"object"===n(S=r)&&"[object Date]"===Object.prototype.toString.call(S))return(null!=t?e.byteLength(t,"utf8")+1:0)+9;if(void 0!==e&&e.isBuffer(r))return(null!=t?e.byteLength(t,"utf8")+1:0)+6+r.length;if(r instanceof o||r instanceof i||r instanceof s||"Long"===r._bsontype||"Double"===r._bsontype||"Timestamp"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+9;if(r instanceof f||"Decimal128"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+17;if(r instanceof l||"Code"===r._bsontype)return null!=r.scope&&Object.keys(r.scope).length>0?(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+4+e.byteLength(r.code.toString(),"utf8")+1+_(r.scope,v,w):(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+e.byteLength(r.code.toString(),"utf8")+1;if(r instanceof d||"Binary"===r._bsontype)return r.sub_type===d.SUBTYPE_BYTE_ARRAY?(null!=t?e.byteLength(t,"utf8")+1:0)+(r.position+1+4+1+4):(null!=t?e.byteLength(t,"utf8")+1:0)+(r.position+1+4+1);if(r instanceof u||"Symbol"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+e.byteLength(r.value,"utf8")+4+1+1;if(r instanceof y||"DBRef"===r._bsontype){var O={$ref:r.namespace,$id:r.oid};return null!=r.db&&(O.$db=r.db),(null!=t?e.byteLength(t,"utf8")+1:0)+1+_(O,v,w)}return r instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(r)?(null!=t?e.byteLength(t,"utf8")+1:0)+1+e.byteLength(r.source,"utf8")+1+(r.global?1:0)+(r.ignoreCase?1:0)+(r.multiline?1:0)+1:r instanceof c||"BSONRegExp"===r._bsontype?(null!=t?e.byteLength(t,"utf8")+1:0)+1+e.byteLength(r.pattern,"utf8")+1+e.byteLength(r.options,"utf8")+1:(null!=t?e.byteLength(t,"utf8")+1:0)+_(r,v,w)+1;case"function":if(r instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(r)||"[object RegExp]"===String.call(r))return(null!=t?e.byteLength(t,"utf8")+1:0)+1+e.byteLength(r.source,"utf8")+1+(r.global?1:0)+(r.ignoreCase?1:0)+(r.multiline?1:0)+1;if(v&&null!=r.scope&&Object.keys(r.scope).length>0)return(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+4+e.byteLength(m(r),"utf8")+1+_(r.scope,v,w);if(v)return(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+e.byteLength(m(r),"utf8")+1}var S;return 0}var g={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992};t.exports=_}).call(this,r(1).Buffer)},function(t,e,r){"use strict";
+ */t.exports=n},function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}t.exports=function(t){return t&&"object"===r(t)&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(module,exports,__webpack_require__){"use strict";var Long=__webpack_require__(23).Long,Double=__webpack_require__(36).Double,Timestamp=__webpack_require__(37).Timestamp,ObjectID=__webpack_require__(38).ObjectID,_Symbol=__webpack_require__(40).Symbol,Code=__webpack_require__(41).Code,MinKey=__webpack_require__(43).MinKey,MaxKey=__webpack_require__(44).MaxKey,Decimal128=__webpack_require__(42),Int32=__webpack_require__(60),DBRef=__webpack_require__(45).DBRef,BSONRegExp=__webpack_require__(39).BSONRegExp,Binary=__webpack_require__(27).Binary,utils=__webpack_require__(16),deserialize=function(t,e,r){var n=(e=null==e?{}:e)&&e.index?e.index:0,o=t[n]|t[n+1]<<8|t[n+2]<<16|t[n+3]<<24;if(o<5||t.length<o||o+n>t.length)throw new Error("corrupt bson message");if(0!==t[n+o-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return deserializeObject(t,n,e,r)},deserializeObject=function t(e,r,n,o){var i=null!=n.evalFunctions&&n.evalFunctions,s=null!=n.cacheFunctions&&n.cacheFunctions,a=null!=n.cacheFunctionsCrc32&&n.cacheFunctionsCrc32;if(!a)var u=null;var c=null==n.fieldsAsRaw?null:n.fieldsAsRaw,l=null!=n.raw&&n.raw,f="boolean"==typeof n.bsonRegExp&&n.bsonRegExp,p=null!=n.promoteBuffers&&n.promoteBuffers,h=null==n.promoteLongs||n.promoteLongs,y=null==n.promoteValues||n.promoteValues,d=r;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");var m=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;if(m<5||m>e.length)throw new Error("corrupt bson message");for(var _=o?[]:{},v=0;;){var g=e[r++];if(0===g)break;for(var b=r;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");var w=o?v++:e.toString("utf8",r,b);if(r=b+1,g===BSON.BSON_DATA_STRING){var O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;if(O<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");_[w]=e.toString("utf8",r,r+O-1),r+=O}else if(g===BSON.BSON_DATA_OID){var S=utils.allocBuffer(12);e.copy(S,0,r,r+12),_[w]=new ObjectID(S),r+=12}else if(g===BSON.BSON_DATA_INT&&!1===y)_[w]=new Int32(e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24);else if(g===BSON.BSON_DATA_INT)_[w]=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;else if(g===BSON.BSON_DATA_NUMBER&&!1===y)_[w]=new Double(e.readDoubleLE(r)),r+=8;else if(g===BSON.BSON_DATA_NUMBER)_[w]=e.readDoubleLE(r),r+=8;else if(g===BSON.BSON_DATA_DATE){var A=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,E=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;_[w]=new Date(new Long(A,E).toNumber())}else if(g===BSON.BSON_DATA_BOOLEAN){if(0!==e[r]&&1!==e[r])throw new Error("illegal boolean type value");_[w]=1===e[r++]}else if(g===BSON.BSON_DATA_OBJECT){var j=r,$=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if($<=0||$>e.length-r)throw new Error("bad embedded document length in bson");_[w]=l?e.slice(r,r+$):t(e,j,n,!1),r+=$}else if(g===BSON.BSON_DATA_ARRAY){j=r;var x=n,P=r+($=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24);if(c&&c[w]){for(var N in x={},n)x[N]=n[N];x.raw=!0}if(_[w]=t(e,j,x,!0),0!==e[(r+=$)-1])throw new Error("invalid array terminator byte");if(r!==P)throw new Error("corrupted array bson")}else if(g===BSON.BSON_DATA_UNDEFINED)_[w]=void 0;else if(g===BSON.BSON_DATA_NULL)_[w]=null;else if(g===BSON.BSON_DATA_LONG){A=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,E=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;var T=new Long(A,E);_[w]=h&&!0===y&&T.lessThanOrEqual(JS_INT_MAX_LONG)&&T.greaterThanOrEqual(JS_INT_MIN_LONG)?T.toNumber():T}else if(g===BSON.BSON_DATA_DECIMAL128){var k=utils.allocBuffer(16);e.copy(k,0,r,r+16),r+=16;var C=new Decimal128(k);_[w]=C.toObject?C.toObject():C}else if(g===BSON.BSON_DATA_BINARY){var R=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,B=R,D=e[r++];if(R<0)throw new Error("Negative binary type element size found");if(R>e.length)throw new Error("Binary type size larger than document size");if(null!=e.slice){if(D===Binary.SUBTYPE_BYTE_ARRAY){if((R=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(R>B-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(R<B-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}_[w]=p&&y?e.slice(r,r+R):new Binary(e.slice(r,r+R),D)}else{var M="undefined"!=typeof Uint8Array?new Uint8Array(new ArrayBuffer(R)):new Array(R);if(D===Binary.SUBTYPE_BYTE_ARRAY){if((R=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<0)throw new Error("Negative binary type element size found for subtype 0x02");if(R>B-4)throw new Error("Binary type with subtype 0x02 contains to long binary size");if(R<B-4)throw new Error("Binary type with subtype 0x02 contains to short binary size")}for(b=0;b<R;b++)M[b]=e[r+b];_[w]=p&&y?M:new Binary(M,D)}r+=R}else if(g===BSON.BSON_DATA_REGEXP&&!1===f){for(b=r;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");var I=e.toString("utf8",r,b);for(b=r=b+1;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");var F=e.toString("utf8",r,b);r=b+1;var L=new Array(F.length);for(b=0;b<F.length;b++)switch(F[b]){case"m":L[b]="m";break;case"s":L[b]="g";break;case"i":L[b]="i"}_[w]=new RegExp(I,L.join(""))}else if(g===BSON.BSON_DATA_REGEXP&&!0===f){for(b=r;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");for(I=e.toString("utf8",r,b),b=r=b+1;0!==e[b]&&b<e.length;)b++;if(b>=e.length)throw new Error("Bad BSON Document: illegal CString");F=e.toString("utf8",r,b),r=b+1,_[w]=new BSONRegExp(I,F)}else if(g===BSON.BSON_DATA_SYMBOL){if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");_[w]=new _Symbol(e.toString("utf8",r,r+O-1)),r+=O}else if(g===BSON.BSON_DATA_TIMESTAMP)A=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,E=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24,_[w]=new Timestamp(A,E);else if(g===BSON.BSON_DATA_MIN_KEY)_[w]=new MinKey;else if(g===BSON.BSON_DATA_MAX_KEY)_[w]=new MaxKey;else if(g===BSON.BSON_DATA_CODE){if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");var U=e.toString("utf8",r,r+O-1);if(i)if(s){var V=a?u(U):U;_[w]=isolateEvalWithHash(functionCache,V,U,_)}else _[w]=isolateEval(U);else _[w]=new Code(U);r+=O}else if(g===BSON.BSON_DATA_CODE_W_SCOPE){var q=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24;if(q<13)throw new Error("code_w_scope total size shorter minimum expected length");if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");U=e.toString("utf8",r,r+O-1),j=r+=O,$=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;var W=t(e,j,n,!1);if(r+=$,q<8+$+O)throw new Error("code_w_scope total size is to short, truncating scope");if(q>8+$+O)throw new Error("code_w_scope total size is to long, clips outer document");i?(s?(V=a?u(U):U,_[w]=isolateEvalWithHash(functionCache,V,U,_)):_[w]=isolateEval(U),_[w].scope=W):_[w]=new Code(U,W)}else{if(g!==BSON.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+g.toString(16)+' for fieldname "'+w+'", are you using the latest BSON parser');if((O=e[r++]|e[r++]<<8|e[r++]<<16|e[r++]<<24)<=0||O>e.length-r||0!==e[r+O-1])throw new Error("bad string length in bson");var H=e.toString("utf8",r,r+O-1);r+=O;var Y=utils.allocBuffer(12);e.copy(Y,0,r,r+12),S=new ObjectID(Y),r+=12;var K=H.split("."),z=K.shift(),Q=K.join(".");_[w]=new DBRef(Q,S,z)}}if(m!==r-d){if(o)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}return null!=_.$id&&(_=new DBRef(_.$ref,_.$id,_.$db)),_},isolateEvalWithHash=function isolateEvalWithHash(functionCache,hash,functionString,object){var value=null;return null==functionCache[hash]&&(eval("value = "+functionString),functionCache[hash]=value),functionCache[hash].bind(object)},isolateEval=function isolateEval(functionString){var value=null;return eval("value = "+functionString),value},BSON={},functionCache=BSON.functionCache={};BSON.BSON_DATA_NUMBER=1,BSON.BSON_DATA_STRING=2,BSON.BSON_DATA_OBJECT=3,BSON.BSON_DATA_ARRAY=4,BSON.BSON_DATA_BINARY=5,BSON.BSON_DATA_UNDEFINED=6,BSON.BSON_DATA_OID=7,BSON.BSON_DATA_BOOLEAN=8,BSON.BSON_DATA_DATE=9,BSON.BSON_DATA_NULL=10,BSON.BSON_DATA_REGEXP=11,BSON.BSON_DATA_DBPOINTER=12,BSON.BSON_DATA_CODE=13,BSON.BSON_DATA_SYMBOL=14,BSON.BSON_DATA_CODE_W_SCOPE=15,BSON.BSON_DATA_INT=16,BSON.BSON_DATA_TIMESTAMP=17,BSON.BSON_DATA_LONG=18,BSON.BSON_DATA_DECIMAL128=19,BSON.BSON_DATA_MIN_KEY=255,BSON.BSON_DATA_MAX_KEY=127,BSON.BSON_BINARY_SUBTYPE_DEFAULT=0,BSON.BSON_BINARY_SUBTYPE_FUNCTION=1,BSON.BSON_BINARY_SUBTYPE_BYTE_ARRAY=2,BSON.BSON_BINARY_SUBTYPE_UUID=3,BSON.BSON_BINARY_SUBTYPE_MD5=4,BSON.BSON_BINARY_SUBTYPE_USER_DEFINED=128,BSON.BSON_INT32_MAX=2147483647,BSON.BSON_INT32_MIN=-2147483648,BSON.BSON_INT64_MAX=Math.pow(2,63)-1,BSON.BSON_INT64_MIN=-Math.pow(2,63),BSON.JS_INT_MAX=9007199254740992,BSON.JS_INT_MIN=-9007199254740992;var JS_INT_MAX_LONG=Long.fromNumber(9007199254740992),JS_INT_MIN_LONG=Long.fromNumber(-9007199254740992);module.exports=deserialize},function(t,e,r){"use strict";(function(e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(104).writeIEEE754,i=r(23).Long,s=r(59),a=r(27).Binary,u=r(16).normalizedFunctionString,c=/\x00/,l=["$db","$ref","$id","$clusterTime"],f=function(t){return"object"===n(t)&&"[object Date]"===Object.prototype.toString.call(t)},p=function(t){return"[object RegExp]"===Object.prototype.toString.call(t)},h=function(t,e,r,n,o){t[n++]=R.BSON_DATA_STRING;var i=o?t.write(e,n,"ascii"):t.write(e,n,"utf8");t[(n=n+i+1)-1]=0;var s=t.write(r,n+4,"utf8");return t[n+3]=s+1>>24&255,t[n+2]=s+1>>16&255,t[n+1]=s+1>>8&255,t[n]=s+1&255,n=n+4+s,t[n++]=0,n},y=function(t,e,r,n,s){if(Math.floor(r)===r&&r>=R.JS_INT_MIN&&r<=R.JS_INT_MAX)if(r>=R.BSON_INT32_MIN&&r<=R.BSON_INT32_MAX){t[n++]=R.BSON_DATA_INT;var a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8");n+=a,t[n++]=0,t[n++]=255&r,t[n++]=r>>8&255,t[n++]=r>>16&255,t[n++]=r>>24&255}else if(r>=R.JS_INT_MIN&&r<=R.JS_INT_MAX)t[n++]=R.BSON_DATA_NUMBER,n+=a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,o(t,r,n,"little",52,8),n+=8;else{t[n++]=R.BSON_DATA_LONG,n+=a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var u=i.fromNumber(r),c=u.getLowBits(),l=u.getHighBits();t[n++]=255&c,t[n++]=c>>8&255,t[n++]=c>>16&255,t[n++]=c>>24&255,t[n++]=255&l,t[n++]=l>>8&255,t[n++]=l>>16&255,t[n++]=l>>24&255}else t[n++]=R.BSON_DATA_NUMBER,n+=a=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,o(t,r,n,"little",52,8),n+=8;return n},d=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_NULL,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,n},m=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_BOOLEAN,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,t[n++]=r?1:0,n},_=function(t,e,r,n,o){t[n++]=R.BSON_DATA_DATE,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var s=i.fromNumber(r.getTime()),a=s.getLowBits(),u=s.getHighBits();return t[n++]=255&a,t[n++]=a>>8&255,t[n++]=a>>16&255,t[n++]=a>>24&255,t[n++]=255&u,t[n++]=u>>8&255,t[n++]=u>>16&255,t[n++]=u>>24&255,n},v=function(t,e,r,n,o){if(t[n++]=R.BSON_DATA_REGEXP,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,r.source&&null!=r.source.match(c))throw Error("value "+r.source+" must not contain null bytes");return n+=t.write(r.source,n,"utf8"),t[n++]=0,r.global&&(t[n++]=115),r.ignoreCase&&(t[n++]=105),r.multiline&&(t[n++]=109),t[n++]=0,n},g=function(t,e,r,n,o){if(t[n++]=R.BSON_DATA_REGEXP,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,null!=r.pattern.match(c))throw Error("pattern "+r.pattern+" must not contain null bytes");return n+=t.write(r.pattern,n,"utf8"),t[n++]=0,n+=t.write(r.options.split("").sort().join(""),n,"utf8"),t[n++]=0,n},b=function(t,e,r,n,o){return null===r?t[n++]=R.BSON_DATA_NULL:"MinKey"===r._bsontype?t[n++]=R.BSON_DATA_MIN_KEY:t[n++]=R.BSON_DATA_MAX_KEY,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,n},w=function(t,e,r,n,o){if(t[n++]=R.BSON_DATA_OID,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,"string"==typeof r.id)t.write(r.id,n,"binary");else{if(!r.id||!r.id.copy)throw new Error("object ["+JSON.stringify(r)+"] is not a valid ObjectId");r.id.copy(t,n,0,12)}return n+12},O=function(t,e,r,n,o){t[n++]=R.BSON_DATA_BINARY,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=r.length;return t[n++]=255&i,t[n++]=i>>8&255,t[n++]=i>>16&255,t[n++]=i>>24&255,t[n++]=R.BSON_BINARY_SUBTYPE_DEFAULT,r.copy(t,n,0,i),n+=i},S=function(t,e,r,n,o,i,s,a,u,c){for(var l=0;l<c.length;l++)if(c[l]===r)throw new Error("cyclic dependency detected");c.push(r),t[n++]=Array.isArray(r)?R.BSON_DATA_ARRAY:R.BSON_DATA_OBJECT,n+=u?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var f=C(t,r,o,n,i+1,s,a,c);return c.pop(),f},A=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_DECIMAL128,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,r.bytes.copy(t,n,0,16),n+16},E=function(t,e,r,n,o){t[n++]="Long"===r._bsontype?R.BSON_DATA_LONG:R.BSON_DATA_TIMESTAMP,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=r.getLowBits(),s=r.getHighBits();return t[n++]=255&i,t[n++]=i>>8&255,t[n++]=i>>16&255,t[n++]=i>>24&255,t[n++]=255&s,t[n++]=s>>8&255,t[n++]=s>>16&255,t[n++]=s>>24&255,n},j=function(t,e,r,n,o){return t[n++]=R.BSON_DATA_INT,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,t[n++]=255&r,t[n++]=r>>8&255,t[n++]=r>>16&255,t[n++]=r>>24&255,n},$=function(t,e,r,n,i){return t[n++]=R.BSON_DATA_NUMBER,n+=i?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0,o(t,r,n,"little",52,8),n+=8},x=function(t,e,r,n,o,i,s){t[n++]=R.BSON_DATA_CODE,n+=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var a=u(r),c=t.write(a,n+4,"utf8")+1;return t[n]=255&c,t[n+1]=c>>8&255,t[n+2]=c>>16&255,t[n+3]=c>>24&255,n=n+4+c-1,t[n++]=0,n},P=function(t,e,r,o,i,s,a,u,c){if(r.scope&&"object"===n(r.scope)){t[o++]=R.BSON_DATA_CODE_W_SCOPE;var l=c?t.write(e,o,"ascii"):t.write(e,o,"utf8");o+=l,t[o++]=0;var f=o,p="string"==typeof r.code?r.code:r.code.toString();o+=4;var h=t.write(p,o+4,"utf8")+1;t[o]=255&h,t[o+1]=h>>8&255,t[o+2]=h>>16&255,t[o+3]=h>>24&255,t[o+4+h-1]=0,o=o+h+4;var y=C(t,r.scope,i,o,s+1,a,u);o=y-1;var d=y-f;t[f++]=255&d,t[f++]=d>>8&255,t[f++]=d>>16&255,t[f++]=d>>24&255,t[o++]=0}else{t[o++]=R.BSON_DATA_CODE,o+=l=c?t.write(e,o,"ascii"):t.write(e,o,"utf8"),t[o++]=0,p=r.code.toString();var m=t.write(p,o+4,"utf8")+1;t[o]=255&m,t[o+1]=m>>8&255,t[o+2]=m>>16&255,t[o+3]=m>>24&255,o=o+4+m-1,t[o++]=0}return o},N=function(t,e,r,n,o){t[n++]=R.BSON_DATA_BINARY,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=r.value(!0),s=r.position;return r.sub_type===a.SUBTYPE_BYTE_ARRAY&&(s+=4),t[n++]=255&s,t[n++]=s>>8&255,t[n++]=s>>16&255,t[n++]=s>>24&255,t[n++]=r.sub_type,r.sub_type===a.SUBTYPE_BYTE_ARRAY&&(s-=4,t[n++]=255&s,t[n++]=s>>8&255,t[n++]=s>>16&255,t[n++]=s>>24&255),i.copy(t,n,0,r.position),n+=r.position},T=function(t,e,r,n,o){t[n++]=R.BSON_DATA_SYMBOL,n+=o?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var i=t.write(r.value,n+4,"utf8")+1;return t[n]=255&i,t[n+1]=i>>8&255,t[n+2]=i>>16&255,t[n+3]=i>>24&255,n=n+4+i-1,t[n++]=0,n},k=function(t,e,r,n,o,i,s){t[n++]=R.BSON_DATA_OBJECT,n+=s?t.write(e,n,"ascii"):t.write(e,n,"utf8"),t[n++]=0;var a,u=n,c=(a=null!=r.db?C(t,{$ref:r.namespace,$id:r.oid,$db:r.db},!1,n,o+1,i):C(t,{$ref:r.namespace,$id:r.oid},!1,n,o+1,i))-u;return t[u++]=255&c,t[u++]=c>>8&255,t[u++]=c>>16&255,t[u++]=c>>24&255,a},C=function(t,r,o,i,a,u,C,R){i=i||0,(R=R||[]).push(r);var B=i+4;if(Array.isArray(r))for(var D=0;D<r.length;D++){var M=""+D,I=r[D];if(I&&I.toBSON){if("function"!=typeof I.toBSON)throw new Error("toBSON is not a function");I=I.toBSON()}var F=n(I);if("string"===F)B=h(t,M,I,B,!0);else if("number"===F)B=y(t,M,I,B,!0);else if("boolean"===F)B=m(t,M,I,B,!0);else if(I instanceof Date||f(I))B=_(t,M,I,B,!0);else if(void 0===I)B=d(t,M,0,B,!0);else if(null===I)B=d(t,M,0,B,!0);else if("ObjectID"===I._bsontype||"ObjectId"===I._bsontype)B=w(t,M,I,B,!0);else if(e.isBuffer(I))B=O(t,M,I,B,!0);else if(I instanceof RegExp||p(I))B=v(t,M,I,B,!0);else if("object"===F&&null==I._bsontype)B=S(t,M,I,B,o,a,u,C,!0,R);else if("object"===F&&"Decimal128"===I._bsontype)B=A(t,M,I,B,!0);else if("Long"===I._bsontype||"Timestamp"===I._bsontype)B=E(t,M,I,B,!0);else if("Double"===I._bsontype)B=$(t,M,I,B,!0);else if("function"==typeof I&&u)B=x(t,M,I,B,0,0,u);else if("Code"===I._bsontype)B=P(t,M,I,B,o,a,u,C,!0);else if("Binary"===I._bsontype)B=N(t,M,I,B,!0);else if("Symbol"===I._bsontype)B=T(t,M,I,B,!0);else if("DBRef"===I._bsontype)B=k(t,M,I,B,a,u,!0);else if("BSONRegExp"===I._bsontype)B=g(t,M,I,B,!0);else if("Int32"===I._bsontype)B=j(t,M,I,B,!0);else if("MinKey"===I._bsontype||"MaxKey"===I._bsontype)B=b(t,M,I,B,!0);else if(void 0!==I._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+I._bsontype)}else if(r instanceof s)for(var L=r.entries(),U=!1;!U;){var V=L.next();if(!(U=V.done)){if(M=V.value[0],F=n(I=V.value[1]),"string"==typeof M&&-1===l.indexOf(M)){if(null!=M.match(c))throw Error("key "+M+" must not contain null bytes");if(o){if("$"===M[0])throw Error("key "+M+" must not start with '$'");if(~M.indexOf("."))throw Error("key "+M+" must not contain '.'")}}if("string"===F)B=h(t,M,I,B);else if("number"===F)B=y(t,M,I,B);else if("boolean"===F)B=m(t,M,I,B);else if(I instanceof Date||f(I))B=_(t,M,I,B);else if(null===I||void 0===I&&!1===C)B=d(t,M,0,B);else if("ObjectID"===I._bsontype||"ObjectId"===I._bsontype)B=w(t,M,I,B);else if(e.isBuffer(I))B=O(t,M,I,B);else if(I instanceof RegExp||p(I))B=v(t,M,I,B);else if("object"===F&&null==I._bsontype)B=S(t,M,I,B,o,a,u,C,!1,R);else if("object"===F&&"Decimal128"===I._bsontype)B=A(t,M,I,B);else if("Long"===I._bsontype||"Timestamp"===I._bsontype)B=E(t,M,I,B);else if("Double"===I._bsontype)B=$(t,M,I,B);else if("Code"===I._bsontype)B=P(t,M,I,B,o,a,u,C);else if("function"==typeof I&&u)B=x(t,M,I,B,0,0,u);else if("Binary"===I._bsontype)B=N(t,M,I,B);else if("Symbol"===I._bsontype)B=T(t,M,I,B);else if("DBRef"===I._bsontype)B=k(t,M,I,B,a,u);else if("BSONRegExp"===I._bsontype)B=g(t,M,I,B);else if("Int32"===I._bsontype)B=j(t,M,I,B);else if("MinKey"===I._bsontype||"MaxKey"===I._bsontype)B=b(t,M,I,B);else if(void 0!==I._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+I._bsontype)}}else{if(r.toBSON){if("function"!=typeof r.toBSON)throw new Error("toBSON is not a function");if(null!=(r=r.toBSON())&&"object"!==n(r))throw new Error("toBSON function did not return an object")}for(M in r){if((I=r[M])&&I.toBSON){if("function"!=typeof I.toBSON)throw new Error("toBSON is not a function");I=I.toBSON()}if(F=n(I),"string"==typeof M&&-1===l.indexOf(M)){if(null!=M.match(c))throw Error("key "+M+" must not contain null bytes");if(o){if("$"===M[0])throw Error("key "+M+" must not start with '$'");if(~M.indexOf("."))throw Error("key "+M+" must not contain '.'")}}if("string"===F)B=h(t,M,I,B);else if("number"===F)B=y(t,M,I,B);else if("boolean"===F)B=m(t,M,I,B);else if(I instanceof Date||f(I))B=_(t,M,I,B);else if(void 0===I)!1===C&&(B=d(t,M,0,B));else if(null===I)B=d(t,M,0,B);else if("ObjectID"===I._bsontype||"ObjectId"===I._bsontype)B=w(t,M,I,B);else if(e.isBuffer(I))B=O(t,M,I,B);else if(I instanceof RegExp||p(I))B=v(t,M,I,B);else if("object"===F&&null==I._bsontype)B=S(t,M,I,B,o,a,u,C,!1,R);else if("object"===F&&"Decimal128"===I._bsontype)B=A(t,M,I,B);else if("Long"===I._bsontype||"Timestamp"===I._bsontype)B=E(t,M,I,B);else if("Double"===I._bsontype)B=$(t,M,I,B);else if("Code"===I._bsontype)B=P(t,M,I,B,o,a,u,C);else if("function"==typeof I&&u)B=x(t,M,I,B,0,0,u);else if("Binary"===I._bsontype)B=N(t,M,I,B);else if("Symbol"===I._bsontype)B=T(t,M,I,B);else if("DBRef"===I._bsontype)B=k(t,M,I,B,a,u);else if("BSONRegExp"===I._bsontype)B=g(t,M,I,B);else if("Int32"===I._bsontype)B=j(t,M,I,B);else if("MinKey"===I._bsontype||"MaxKey"===I._bsontype)B=b(t,M,I,B);else if(void 0!==I._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+I._bsontype)}}R.pop(),t[B++]=0;var q=B-i;return t[i++]=255&q,t[i++]=q>>8&255,t[i++]=q>>16&255,t[i++]=q>>24&255,B},R={BSON_DATA_NUMBER:1,BSON_DATA_STRING:2,BSON_DATA_OBJECT:3,BSON_DATA_ARRAY:4,BSON_DATA_BINARY:5,BSON_DATA_UNDEFINED:6,BSON_DATA_OID:7,BSON_DATA_BOOLEAN:8,BSON_DATA_DATE:9,BSON_DATA_NULL:10,BSON_DATA_REGEXP:11,BSON_DATA_CODE:13,BSON_DATA_SYMBOL:14,BSON_DATA_CODE_W_SCOPE:15,BSON_DATA_INT:16,BSON_DATA_TIMESTAMP:17,BSON_DATA_LONG:18,BSON_DATA_DECIMAL128:19,BSON_DATA_MIN_KEY:255,BSON_DATA_MAX_KEY:127,BSON_BINARY_SUBTYPE_DEFAULT:0,BSON_BINARY_SUBTYPE_FUNCTION:1,BSON_BINARY_SUBTYPE_BYTE_ARRAY:2,BSON_BINARY_SUBTYPE_UUID:3,BSON_BINARY_SUBTYPE_MD5:4,BSON_BINARY_SUBTYPE_USER_DEFINED:128,BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648};R.BSON_INT64_MAX=Math.pow(2,63)-1,R.BSON_INT64_MIN=-Math.pow(2,63),R.JS_INT_MAX=9007199254740992,R.JS_INT_MIN=-9007199254740992,t.exports=C}).call(this,r(1).Buffer)},function(t,e){e.readIEEE754=function(t,e,r,n,o){var i,s,a="big"===r,u=8*o-n-1,c=(1<<u)-1,l=c>>1,f=-7,p=a?0:o-1,h=a?1:-1,y=t[e+p];for(p+=h,i=y&(1<<-f)-1,y>>=-f,f+=u;f>0;i=256*i+t[e+p],p+=h,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=n;f>0;s=256*s+t[e+p],p+=h,f-=8);if(0===i)i=1-l;else{if(i===c)return s?NaN:1/0*(y?-1:1);s+=Math.pow(2,n),i-=l}return(y?-1:1)*s*Math.pow(2,i-n)},e.writeIEEE754=function(t,e,r,n,o,i){var s,a,u,c="big"===n,l=8*i-o-1,f=(1<<l)-1,p=f>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,y=c?i-1:0,d=c?-1:1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=f):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(s++,u/=2),s+p>=f?(a=0,s=f):s+p>=1?(a=(e*u-1)*Math.pow(2,o),s+=p):(a=e*Math.pow(2,p-1)*Math.pow(2,o),s=0));o>=8;t[r+y]=255&a,y+=d,a/=256,o-=8);for(s=s<<o|a,l+=o;l>0;t[r+y]=255&s,y+=d,s/=256,l-=8);t[r+y-d]|=128*m}},function(t,e,r){"use strict";(function(e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(23).Long,i=r(36).Double,s=r(37).Timestamp,a=r(38).ObjectID,u=r(40).Symbol,c=r(39).BSONRegExp,l=r(41).Code,f=r(42),p=r(43).MinKey,h=r(44).MaxKey,y=r(45).DBRef,d=r(27).Binary,m=r(16).normalizedFunctionString,_=function(t,e,r){var n=5;if(Array.isArray(t))for(var o=0;o<t.length;o++)n+=v(o.toString(),t[o],e,!0,r);else for(var i in t.toBSON&&(t=t.toBSON()),t)n+=v(i,t[i],e,!1,r);return n};function v(t,r,v,b,w){switch(r&&r.toBSON&&(r=r.toBSON()),n(r)){case"string":return 1+e.byteLength(t,"utf8")+1+4+e.byteLength(r,"utf8")+1;case"number":return Math.floor(r)===r&&r>=g.JS_INT_MIN&&r<=g.JS_INT_MAX&&r>=g.BSON_INT32_MIN&&r<=g.BSON_INT32_MAX?(null!=t?e.byteLength(t,"utf8")+1:0)+5:(null!=t?e.byteLength(t,"utf8")+1:0)+9;case"undefined":return b||!w?(null!=t?e.byteLength(t,"utf8")+1:0)+1:0;case"boolean":return(null!=t?e.byteLength(t,"utf8")+1:0)+2;case"object":if(null==r||r instanceof p||r instanceof h||"MinKey"===r._bsontype||"MaxKey"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+1;if(r instanceof a||"ObjectID"===r._bsontype||"ObjectId"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+13;if(r instanceof Date||"object"===n(S=r)&&"[object Date]"===Object.prototype.toString.call(S))return(null!=t?e.byteLength(t,"utf8")+1:0)+9;if(void 0!==e&&e.isBuffer(r))return(null!=t?e.byteLength(t,"utf8")+1:0)+6+r.length;if(r instanceof o||r instanceof i||r instanceof s||"Long"===r._bsontype||"Double"===r._bsontype||"Timestamp"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+9;if(r instanceof f||"Decimal128"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+17;if(r instanceof l||"Code"===r._bsontype)return null!=r.scope&&Object.keys(r.scope).length>0?(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+4+e.byteLength(r.code.toString(),"utf8")+1+_(r.scope,v,w):(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+e.byteLength(r.code.toString(),"utf8")+1;if(r instanceof d||"Binary"===r._bsontype)return r.sub_type===d.SUBTYPE_BYTE_ARRAY?(null!=t?e.byteLength(t,"utf8")+1:0)+(r.position+1+4+1+4):(null!=t?e.byteLength(t,"utf8")+1:0)+(r.position+1+4+1);if(r instanceof u||"Symbol"===r._bsontype)return(null!=t?e.byteLength(t,"utf8")+1:0)+e.byteLength(r.value,"utf8")+4+1+1;if(r instanceof y||"DBRef"===r._bsontype){var O={$ref:r.namespace,$id:r.oid};return null!=r.db&&(O.$db=r.db),(null!=t?e.byteLength(t,"utf8")+1:0)+1+_(O,v,w)}return r instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(r)?(null!=t?e.byteLength(t,"utf8")+1:0)+1+e.byteLength(r.source,"utf8")+1+(r.global?1:0)+(r.ignoreCase?1:0)+(r.multiline?1:0)+1:r instanceof c||"BSONRegExp"===r._bsontype?(null!=t?e.byteLength(t,"utf8")+1:0)+1+e.byteLength(r.pattern,"utf8")+1+e.byteLength(r.options,"utf8")+1:(null!=t?e.byteLength(t,"utf8")+1:0)+_(r,v,w)+1;case"function":if(r instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(r)||"[object RegExp]"===String.call(r))return(null!=t?e.byteLength(t,"utf8")+1:0)+1+e.byteLength(r.source,"utf8")+1+(r.global?1:0)+(r.ignoreCase?1:0)+(r.multiline?1:0)+1;if(v&&null!=r.scope&&Object.keys(r.scope).length>0)return(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+4+e.byteLength(m(r),"utf8")+1+_(r.scope,v,w);if(v)return(null!=t?e.byteLength(t,"utf8")+1:0)+1+4+e.byteLength(m(r),"utf8")+1}var S;return 0}var g={BSON_INT32_MAX:2147483647,BSON_INT32_MIN:-2147483648,JS_INT_MAX:9007199254740992,JS_INT_MIN:-9007199254740992};t.exports=_}).call(this,r(1).Buffer)},function(t,e,r){"use strict";
 /*!
  * ignore
  */t.exports=r(35).Decimal128},function(t,e,r){"use strict";
@@ -1071,7 +1071,7 @@
 /*!
  * Recursively set nested arrays
  */
-function t(e,r,n,o,i,s){for(var a,u=0;u<e.length&&u<r.length;++u)a=e[u],Array.isArray(a)&&Array.isArray(r[u])?t(a,r[u],n,o,i,s):a&&(o?o(a,n,s(r[u])):(a[i]&&(a=a[i]),a[n]=s(r[u])))}(y,r,p,c,s,a);else for(_=0;_<y.length;++_)item=y[_],item&&(c?c(item,p,a(r)):(item[s]&&(item=item[s]),item[p]=a(r)));else c?c(y,p,a(r)):y instanceof Map?y.set(p,a(r)):y[p]=a(r)}}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(27);t.exports=function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._docs={},this._childDocs=[],null!=e&&(e=o(e),Object.assign(this,e),"object"===n(e.subPopulate)&&(this.populate=e.subPopulate),null!=e.perDocumentLimit&&null!=e.limit))throw new Error("Can not use `limit` and `perDocumentLimit` at the same time. Path: `"+e.path+"`.")}},function(t,e,r){"use strict";
+function t(e,r,n,o,i,s){for(var a,u=0;u<e.length&&u<r.length;++u)a=e[u],Array.isArray(a)&&Array.isArray(r[u])?t(a,r[u],n,o,i,s):a&&(o?o(a,n,s(r[u])):(a[i]&&(a=a[i]),a[n]=s(r[u])))}(y,r,p,c,s,a);else for(_=0;_<y.length;++_)item=y[_],item&&(c?c(item,p,a(r)):(item[s]&&(item=item[s]),item[p]=a(r)));else c?c(y,p,a(r)):y instanceof Map?y.set(p,a(r)):y[p]=a(r)}}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(28);t.exports=function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._docs={},this._childDocs=[],null!=e&&(e=o(e),Object.assign(this,e),"object"===n(e.subPopulate)&&(this.populate=e.subPopulate),null!=e.perDocumentLimit&&null!=e.limit))throw new Error("Can not use `limit` and `perDocumentLimit` at the same time. Path: `"+e.path+"`.")}},function(t,e,r){"use strict";
 /*
 object-assign
 (c) Sindre Sorhus
@@ -1105,7 +1105,7 @@
 /*!
  * Exports.
  */
-c.utils=a,c.env=r(70),c.Collection=r(123),c.BaseCollection=r(29),c.Promise=r(125),t.exports=c},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,o,i,s,a,u=1,c={},l=!1,f=t.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(t);p=p&&p.setTimeout?p:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick((function(){y(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){y(t.data)},n=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,n=function(t){var e=f.createElement("script");e.onreadystatechange=function(){y(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):n=function(t){setTimeout(y,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&y(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),n=function(e){t.postMessage(s+e,"*")}),p.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var o={callback:t,args:e};return c[u]=o,n(u),u++},p.clearImmediate=h}function h(t){delete c[t]}function y(t){if(l)setTimeout(y,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(void 0,r)}}(e)}finally{h(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(11),r(8))},function(t,e,r){var n=r(1),o=n.Buffer;function i(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return o(t,e,r)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?t.exports=n:(i(n,e),e.Buffer=s),i(o,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return o(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=o(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return o(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e,r){(function(n){function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG),t}(e=t.exports=r(119)).log=function(){return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))})),t.splice(i,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,r(8))},function(t,e,r){function n(t){var r;function n(){if(n.enabled){var t=n,o=+new Date,i=o-(r||o);t.diff=i,t.prev=r,t.curr=o,r=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var o=e.formatters[n];if("function"==typeof o){var i=s[u];r=o.call(t,i),s.splice(u,1),u--}return r})),e.formatArgs.call(t,s);var c=n.log||e.log||console.log.bind(console);c.apply(t,s)}}return n.namespace=t,n.enabled=e.enabled(t),n.useColors=e.useColors(),n.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),n.destroy=o,"function"==typeof e.init&&e.init(n),e.instances.push(n),n}function o(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=n.debug=n.default=n).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var i=e.instances[r];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(120),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var n=1e3,o=6e4,i=60*o,s=24*i;function a(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}t.exports=function(t,e){e=e||{};var u,c=r(t);if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*r;case"days":case"day":case"d":return r*s;case"hours":case"hour":case"hrs":case"hr":case"h":return r*i;case"minutes":case"minute":case"mins":case"min":case"m":return r*o;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(u=t,s,"day")||a(u,i,"hour")||a(u,o,"minute")||a(u,n,"second")||u+" ms":function(t){if(t>=s)return Math.round(t/s)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=o)return Math.round(t/o)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){"use strict";var n=e;n.distinct=function(t){return t._fields&&Object.keys(t._fields).length>0?"field selection and slice":(Object.keys(n.distinct).every((function(r){return!t.options[r]||(e=r,!1)})),e);var e},n.distinct.select=n.distinct.slice=n.distinct.sort=n.distinct.limit=n.distinct.skip=n.distinct.batchSize=n.distinct.comment=n.distinct.maxScan=n.distinct.snapshot=n.distinct.hint=n.distinct.tailable=!0,n.findOneAndUpdate=n.findOneAndRemove=function(t){var e;return Object.keys(n.findOneAndUpdate).every((function(r){return!t.options[r]||(e=r,!1)})),e},n.findOneAndUpdate.limit=n.findOneAndUpdate.skip=n.findOneAndUpdate.batchSize=n.findOneAndUpdate.maxScan=n.findOneAndUpdate.snapshot=n.findOneAndUpdate.hint=n.findOneAndUpdate.tailable=n.findOneAndUpdate.comment=!0,n.count=function(t){return t._fields&&Object.keys(t._fields).length>0?"field selection and slice":(Object.keys(n.count).every((function(r){return!t.options[r]||(e=r,!1)})),e);var e},n.count.slice=n.count.batchSize=n.count.comment=n.count.maxScan=n.count.snapshot=n.count.tailable=!0},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){"use strict";var n=r(70);if("unknown"==n.type)throw new Error("Unknown environment");t.exports=n.isNode?r(124):(n.isMongo,r(29))},function(t,e,r){"use strict";var n=r(29);function o(t){this.collection=t,this.collectionName=t.collectionName}r(68).inherits(o,n),o.prototype.find=function(t,e,r){this.collection.find(t,e,(function(t,e){if(t)return r(t);try{e.toArray(r)}catch(t){r(t)}}))},o.prototype.findOne=function(t,e,r){this.collection.findOne(t,e,r)},o.prototype.count=function(t,e,r){this.collection.count(t,e,r)},o.prototype.distinct=function(t,e,r,n){this.collection.distinct(t,e,r,n)},o.prototype.update=function(t,e,r,n){this.collection.update(t,e,r,n)},o.prototype.updateMany=function(t,e,r,n){this.collection.updateMany(t,e,r,n)},o.prototype.updateOne=function(t,e,r,n){this.collection.updateOne(t,e,r,n)},o.prototype.replaceOne=function(t,e,r,n){this.collection.replaceOne(t,e,r,n)},o.prototype.deleteOne=function(t,e,r){this.collection.deleteOne(t,e,r)},o.prototype.deleteMany=function(t,e,r){this.collection.deleteMany(t,e,r)},o.prototype.remove=function(t,e,r){this.collection.remove(t,e,r)},o.prototype.findAndModify=function(t,e,r,n){var o=Array.isArray(r.sort)?r.sort:[];this.collection.findAndModify(t,o,e,r,n)},o.prototype.findStream=function(t,e,r){return this.collection.find(t,e).stream(r)},o.prototype.findCursor=function(t,e){return this.collection.find(t,e)},t.exports=o},function(t,e,r){(function(r,n,o){var i,s,a,u;function c(t){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
+c.utils=a,c.env=r(70),c.Collection=r(123),c.BaseCollection=r(30),c.Promise=r(125),t.exports=c},function(t,e,r){(function(t,e){!function(t,r){"use strict";if(!t.setImmediate){var n,o,i,s,a,u=1,c={},l=!1,f=t.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(t);p=p&&p.setTimeout?p:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick((function(){y(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,r=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=r,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){y(t.data)},n=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,n=function(t){var e=f.createElement("script");e.onreadystatechange=function(){y(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):n=function(t){setTimeout(y,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&y(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),n=function(e){t.postMessage(s+e,"*")}),p.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),r=0;r<e.length;r++)e[r]=arguments[r+1];var o={callback:t,args:e};return c[u]=o,n(u),u++},p.clearImmediate=h}function h(t){delete c[t]}function y(t){if(l)setTimeout(y,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(void 0,r)}}(e)}finally{h(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,r(11),r(8))},function(t,e,r){var n=r(1),o=n.Buffer;function i(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return o(t,e,r)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?t.exports=n:(i(n,e),e.Buffer=s),i(o,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return o(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var n=o(t);return void 0!==e?"string"==typeof r?n.fill(e,r):n.fill(e):n.fill(0),n},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return o(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n.SlowBuffer(t)}},function(t,e,r){(function(n){function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==n&&"env"in n&&(t=n.env.DEBUG),t}(e=t.exports=r(119)).log=function(){return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var n="color: "+this.color;t.splice(1,0,n,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))})),t.splice(i,0,n)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,r(8))},function(t,e,r){function n(t){var r;function n(){if(n.enabled){var t=n,o=+new Date,i=o-(r||o);t.diff=i,t.prev=r,t.curr=o,r=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,(function(r,n){if("%%"===r)return r;u++;var o=e.formatters[n];if("function"==typeof o){var i=s[u];r=o.call(t,i),s.splice(u,1),u--}return r})),e.formatArgs.call(t,s);var c=n.log||e.log||console.log.bind(console);c.apply(t,s)}}return n.namespace=t,n.enabled=e.enabled(t),n.useColors=e.useColors(),n.color=function(t){var r,n=0;for(r in t)n=(n<<5)-n+t.charCodeAt(r),n|=0;return e.colors[Math.abs(n)%e.colors.length]}(t),n.destroy=o,"function"==typeof e.init&&e.init(n),e.instances.push(n),n}function o(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=n.debug=n.default=n).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var i=e.instances[r];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(120),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var n=1e3,o=6e4,i=60*o,s=24*i;function a(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}t.exports=function(t,e){e=e||{};var u,c=r(t);if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var r=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*r;case"days":case"day":case"d":return r*s;case"hours":case"hour":case"hrs":case"hr":case"h":return r*i;case"minutes":case"minute":case"mins":case"min":case"m":return r*o;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(u=t,s,"day")||a(u,i,"hour")||a(u,o,"minute")||a(u,n,"second")||u+" ms":function(t){if(t>=s)return Math.round(t/s)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=o)return Math.round(t/o)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){"use strict";var n=e;n.distinct=function(t){return t._fields&&Object.keys(t._fields).length>0?"field selection and slice":(Object.keys(n.distinct).every((function(r){return!t.options[r]||(e=r,!1)})),e);var e},n.distinct.select=n.distinct.slice=n.distinct.sort=n.distinct.limit=n.distinct.skip=n.distinct.batchSize=n.distinct.comment=n.distinct.maxScan=n.distinct.snapshot=n.distinct.hint=n.distinct.tailable=!0,n.findOneAndUpdate=n.findOneAndRemove=function(t){var e;return Object.keys(n.findOneAndUpdate).every((function(r){return!t.options[r]||(e=r,!1)})),e},n.findOneAndUpdate.limit=n.findOneAndUpdate.skip=n.findOneAndUpdate.batchSize=n.findOneAndUpdate.maxScan=n.findOneAndUpdate.snapshot=n.findOneAndUpdate.hint=n.findOneAndUpdate.tailable=n.findOneAndUpdate.comment=!0,n.count=function(t){return t._fields&&Object.keys(t._fields).length>0?"field selection and slice":(Object.keys(n.count).every((function(r){return!t.options[r]||(e=r,!1)})),e);var e},n.count.slice=n.count.batchSize=n.count.comment=n.count.maxScan=n.count.snapshot=n.count.tailable=!0},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){"use strict";var n=r(70);if("unknown"==n.type)throw new Error("Unknown environment");t.exports=n.isNode?r(124):(n.isMongo,r(30))},function(t,e,r){"use strict";var n=r(30);function o(t){this.collection=t,this.collectionName=t.collectionName}r(68).inherits(o,n),o.prototype.find=function(t,e,r){this.collection.find(t,e,(function(t,e){if(t)return r(t);try{e.toArray(r)}catch(t){r(t)}}))},o.prototype.findOne=function(t,e,r){this.collection.findOne(t,e,r)},o.prototype.count=function(t,e,r){this.collection.count(t,e,r)},o.prototype.distinct=function(t,e,r,n){this.collection.distinct(t,e,r,n)},o.prototype.update=function(t,e,r,n){this.collection.update(t,e,r,n)},o.prototype.updateMany=function(t,e,r,n){this.collection.updateMany(t,e,r,n)},o.prototype.updateOne=function(t,e,r,n){this.collection.updateOne(t,e,r,n)},o.prototype.replaceOne=function(t,e,r,n){this.collection.replaceOne(t,e,r,n)},o.prototype.deleteOne=function(t,e,r){this.collection.deleteOne(t,e,r)},o.prototype.deleteMany=function(t,e,r){this.collection.deleteMany(t,e,r)},o.prototype.remove=function(t,e,r){this.collection.remove(t,e,r)},o.prototype.findAndModify=function(t,e,r,n){var o=Array.isArray(r.sort)?r.sort:[];this.collection.findAndModify(t,o,e,r,n)},o.prototype.findStream=function(t,e,r){return this.collection.find(t,e).stream(r)},o.prototype.findCursor=function(t,e){return this.collection.find(t,e)},t.exports=o},function(t,e,r){(function(r,n,o){var i,s,a,u;function c(t){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}
 /* @preserve
  * The MIT License (MIT)
  * 
@@ -1186,7 +1186,7 @@
 /*!
  * exports
  */
-t.exports=u},function(t,e,r){"use strict";var n=r(31);
+t.exports=u},function(t,e,r){"use strict";var n=r(32);
 /*!
  * ignore
  */t.exports=function(t){var e,r;t.$immutable?(t.$immutableSetter=(e=t.path,r=t.options.immutable,function(t){if(null==this||null==this.$__)return t;if(this.isNew)return t;if(!("function"==typeof r?r.call(this,this):r))return t;var o=this.$__getValue(e);if("throw"===this.$__.strictMode&&t!==o)throw new n(e,"Path `"+e+"` is immutable and strict mode is set to throw.",!0);return o}),t.set(t.$immutableSetter)):t.$immutableSetter&&(t.setters=t.setters.filter((function(e){return e!==t.$immutableSetter})),delete t.$immutableSetter)}},function(t,e,r){"use strict";
@@ -1203,7 +1203,7 @@
 /*!
  * ignore
  */
-function a(t,e,r){if(null!=e){var o=Object.keys(e);if(o.length&&o[0].startsWith("$")){if(e.$push)for(var i=0,a=Object.keys(e.$push);i<a.length;i++){var c=a[i],l=r.path(c);e.$push[c]&&l&&l.$isMongooseDocumentArray&&l.schema.options.timestamps&&function(){var r=l.schema.options.timestamps,n=s(r,"createdAt"),o=s(r,"updatedAt");e.$push[c].$each?e.$push[c].$each.forEach((function(e){null!=o&&(e[o]=t),null!=n&&(e[n]=t)})):(null!=o&&(e.$push[c][o]=t),null!=n&&(e.$push[c][n]=t))}()}if(null!=e.$set)for(var f=0,p=Object.keys(e.$set);f<p.length;f++){u(r,p[f],e.$set,t)}}else{var h,y=n(Object.keys(e).filter((function(t){return!t.startsWith("$")})));try{for(y.s();!(h=y.n()).done;){u(r,h.value,e,t)}}catch(t){y.e(t)}finally{y.f()}}}}function u(t,e,r,o){var u=i(e),c=t.path(u);if(c){for(var l=[],f=u.split("."),p=f.length-1;p>0;--p){var h=t.path(f.slice(0,p).join("."));null!=h&&(h.$isMongooseDocumentArray||h.$isSingleNested)&&l.push({parentPath:e.split(".").slice(0,p).join("."),parentSchemaType:h})}if(Array.isArray(r[e])&&c.$isMongooseDocumentArray)!function(t,e,r){var n=e.schema.options.timestamps;if(n)for(var o=t.length,i=s(n,"createdAt"),u=s(n,"updatedAt"),c=0;c<o;++c)null!=u&&(t[c][u]=r),null!=i&&(t[c][i]=r),a(r,t[c],e.schema)}(r[e],c,o);else if(r[e]&&c.$isSingleNested)!function(t,e,r){var n=e.schema.options.timestamps;if(n){var o=s(n,"createdAt"),i=s(n,"updatedAt");null!=i&&(t[i]=r),null!=o&&(t[o]=r),a(r,t,e.schema)}}(r[e],c,o);else if(l.length>0){var y,d=n(l);try{for(d.s();!(y=d.n()).done;){var m=y.value,_=m.parentPath,v=m.parentSchemaType,g=v.schema.options.timestamps,b=s(g,"updatedAt");if(g&&null!=b)if(v.$isSingleNested)r[_+"."+b]=o;else if(v.$isMongooseDocumentArray){var w=e.substr(_.length+1);if(/^\d+$/.test(w)){r[_+"."+w][b]=o;continue}var O=w.indexOf(".");r[_+"."+(w=-1!==O?w.substr(0,O):w)+"."+b]=o}}}catch(t){d.e(t)}finally{d.f()}}else if(null!=c.schema&&c.schema!=t&&r[e]){var S=c.schema.options.timestamps,A=s(S,"createdAt"),E=s(S,"updatedAt");if(!S)return;null!=E&&(r[e][E]=o),null!=A&&(r[e][A]=o)}}}t.exports=a},function(t,e,r){"use strict";t.exports=function(t){return t.replace(/\.\$(\[[^\]]*\])?\./g,".0.").replace(/\.(\[[^\]]*\])?\$$/g,".0")}},function(t,e,r){"use strict";
+function a(t,e,r){if(null!=e){if(Object.keys(e).some((function(t){return t.startsWith("$")}))){if(e.$push)for(var o=0,i=Object.keys(e.$push);o<i.length;o++){var a=i[o],c=r.path(a);e.$push[a]&&c&&c.$isMongooseDocumentArray&&c.schema.options.timestamps&&function(){var r=c.schema.options.timestamps,n=s(r,"createdAt"),o=s(r,"updatedAt");e.$push[a].$each?e.$push[a].$each.forEach((function(e){null!=o&&(e[o]=t),null!=n&&(e[n]=t)})):(null!=o&&(e.$push[a][o]=t),null!=n&&(e.$push[a][n]=t))}()}if(null!=e.$set)for(var l=0,f=Object.keys(e.$set);l<f.length;l++){u(r,f[l],e.$set,t)}}var p,h=n(Object.keys(e).filter((function(t){return!t.startsWith("$")})));try{for(h.s();!(p=h.n()).done;){u(r,p.value,e,t)}}catch(t){h.e(t)}finally{h.f()}}}function u(t,e,r,o){var u=i(e),c=t.path(u);if(c){for(var l=[],f=u.split("."),p=f.length-1;p>0;--p){var h=t.path(f.slice(0,p).join("."));null!=h&&(h.$isMongooseDocumentArray||h.$isSingleNested)&&l.push({parentPath:e.split(".").slice(0,p).join("."),parentSchemaType:h})}if(Array.isArray(r[e])&&c.$isMongooseDocumentArray)!function(t,e,r){var n=e.schema.options.timestamps;if(n)for(var o=t.length,i=s(n,"createdAt"),u=s(n,"updatedAt"),c=0;c<o;++c)null!=u&&(t[c][u]=r),null!=i&&(t[c][i]=r),a(r,t[c],e.schema)}(r[e],c,o);else if(r[e]&&c.$isSingleNested)!function(t,e,r){var n=e.schema.options.timestamps;if(n){var o=s(n,"createdAt"),i=s(n,"updatedAt");null!=i&&(t[i]=r),null!=o&&(t[o]=r),a(r,t,e.schema)}}(r[e],c,o);else if(l.length>0){var y,d=n(l);try{for(d.s();!(y=d.n()).done;){var m=y.value,_=m.parentPath,v=m.parentSchemaType,g=v.schema.options.timestamps,b=s(g,"updatedAt");if(g&&null!=b)if(v.$isSingleNested)r[_+"."+b]=o;else if(v.$isMongooseDocumentArray){var w=e.substr(_.length+1);if(/^\d+$/.test(w)){r[_+"."+w][b]=o;continue}var O=w.indexOf(".");r[_+"."+(w=-1!==O?w.substr(0,O):w)+"."+b]=o}}}catch(t){d.e(t)}finally{d.f()}}else if(null!=c.schema&&c.schema!=t&&r[e]){var S=c.schema.options.timestamps,A=s(S,"createdAt"),E=s(S,"updatedAt");if(!S)return;null!=E&&(r[e][E]=o),null!=A&&(r[e][A]=o)}}}t.exports=a},function(t,e,r){"use strict";t.exports=function(t){return t.replace(/\.\$(\[[^\]]*\])?\./g,".0.").replace(/\.(\[[^\]]*\])?\$$/g,".0")}},function(t,e,r){"use strict";
 /*!
  * ignore
  */var n=r(4);t.exports=
@@ -1300,11 +1300,11 @@
 t.exports=a},function(t,e,r){"use strict";
 /*!
  * Module dependencies.
- */var n,o,i=r(55),s=r(12),a=r(18).EventEmitter,u=r(156),c=r(7),l=r(30),f=r(90),p=r(4),h=r(91),y=r(3),d=r(2),m=r(92),_=r(0).arrayPathSymbol,v=r(0).documentArrayParent;function g(t,e,r,n){null!=n&&null!=n._id?e=h(e,n):null!=r&&null!=r._id&&(e=h(e,r));var o=b(e,r);o.prototype.$basePath=t,i.call(this,t,o,r),this.schema=e,this.schemaOptions=n||{},this.$isMongooseDocumentArray=!0,this.Constructor=o,o.base=e.base;var s=this.defaultValue;"defaultValue"in this&&void 0===s||this.default((function(){var t=s.call(this);return Array.isArray(t)||(t=[t]),t}));var a=this;this.$embeddedSchemaType=new c(t+".$",{required:p(this,"schemaOptions.required",!1)}),this.$embeddedSchemaType.cast=function(t,e,r){return a.cast(t,e,r)[0]},this.$embeddedSchemaType.$isMongooseDocumentArrayElement=!0,this.$embeddedSchemaType.caster=this.Constructor,this.$embeddedSchemaType.schema=this.schema}
+ */var n,o,i=r(55),s=r(12),a=r(18).EventEmitter,u=r(156),c=r(7),l=r(31),f=r(90),p=r(4),h=r(91),y=r(3),d=r(2),m=r(92),_=r(0).arrayPathSymbol,v=r(0).documentArrayParent;function g(t,e,r,n){null!=n&&null!=n._id?e=h(e,n):null!=r&&null!=r._id&&(e=h(e,r));var o=b(e,r);o.prototype.$basePath=t,i.call(this,t,o,r),this.schema=e,this.schemaOptions=n||{},this.$isMongooseDocumentArray=!0,this.Constructor=o,o.base=e.base;var s=this.defaultValue;"defaultValue"in this&&void 0===s||this.default((function(){var t=s.call(this);return Array.isArray(t)||(t=[t]),t}));var a=this;this.$embeddedSchemaType=new c(t+".$",{required:p(this,"schemaOptions.required",!1)}),this.$embeddedSchemaType.cast=function(t,e,r){return a.cast(t,e,r)[0]},this.$embeddedSchemaType.$isMongooseDocumentArrayElement=!0,this.$embeddedSchemaType.caster=this.Constructor,this.$embeddedSchemaType.schema=this.schema}
 /*!
  * Ignore
  */
-function b(t,e,n){function i(){o.apply(this,arguments),this.$session(this.ownerDocument().$session())}o||(o=r(25));var s=null!=n?n.prototype:o.prototype;for(var u in i.prototype=Object.create(s),i.prototype.$__setSchema(t),i.schema=t,i.prototype.constructor=i,i.$isArraySubdocument=!0,i.events=new a,t.methods)i.prototype[u]=t.methods[u];for(var c in t.statics)i[c]=t.statics[c];for(var l in a.prototype)i[l]=a.prototype[l];return i.options=e,i}
+function b(t,e,n){function i(){o.apply(this,arguments),this.$session(this.ownerDocument().$session())}o||(o=r(26));var s=null!=n?n.prototype:o.prototype;for(var u in i.prototype=Object.create(s),i.prototype.$__setSchema(t),i.schema=t,i.prototype.constructor=i,i.$isArraySubdocument=!0,i.events=new a,t.methods)i.prototype[u]=t.methods[u];for(var c in t.statics)i[c]=t.statics[c];for(var l in a.prototype)i[l]=a.prototype[l];return i.options=e,i}
 /*!
  * Scopes paths selected in a query to this array.
  * Necessary for proper default application of subdocument values.
@@ -1336,7 +1336,7 @@
 t.exports=c},function(t,e,r){"use strict";t.exports=function t(e){if(!Array.isArray(e))return{min:0,max:0,containsNonArrayItem:!0};if(0===e.length)return{min:1,max:1,containsNonArrayItem:!1};for(var r=t(e[0]),n=1;n<e.length;++n){var o=t(e[n]);o.min<r.min&&(r.min=o.min),o.max>r.max&&(r.max=o.max),r.containsNonArrayItem=r.containsNonArrayItem||o.containsNonArrayItem}return r.min=r.min+1,r.max=r.max+1,r}},function(t,e,r){"use strict";
 /*!
  * Module dependencies.
- */function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s=r(12),a=r(31),u=r(54),c=r(154),l=r(4),f=r(155),p=r(80),h=r(3),y=r(20),d=r(28),m=["Polygon","MultiPolygon"];function _(t,e,r){if(Array.isArray(t))t.forEach((function(n,o){if(Array.isArray(n)||y(n))return _(n,e,r);t[o]=e.castForQueryWrapper({val:n,context:r})}));else for(var n=Object.keys(t),o=n.length;o--;){var i=n[o],s=t[i];Array.isArray(s)||y(s)?(_(s,e,r),t[i]=s):t[i]=e.castForQuery({val:s,context:r})}}t.exports=function t(e,r,o,v){if(Array.isArray(r))throw new Error("Query filter must be an object, got an array ",h.inspect(r));if(null==r)return r;r.hasOwnProperty("_bsontype")&&"ObjectID"!==r._bsontype&&delete r._bsontype,null!=e&&null!=e.discriminators&&null!=r[e.options.discriminatorKey]&&(e=f(e,r[e.options.discriminatorKey])||e);var g,b,w,O,S,A,E=Object.keys(r),j=E.length;for(o=o||{};j--;)if(A=r[O=E[j]],"$or"===O||"$nor"===O||"$and"===O){if(!Array.isArray(A))throw new s("Array",A,O);for(var $=0;$<A.length;++$){if(null==A[$]||"object"!==i(A[$]))throw new s("Object",A[$],O+"."+$);A[$]=t(e,A[$],o,v)}}else{if("$where"===O){if("string"!==(S=i(A))&&"function"!==S)throw new Error("Must have a string or function for $where");"function"===S&&(r[O]=A.toString());continue}if("$elemMatch"===O)A=t(e,A,o,v);else if("$text"===O)A=c(A,O);else{if(!e)continue;if(!(b=e.path(O)))for(var x=O.split("."),P=x.length;P--;){var N=x.slice(0,P).join("."),T=x.slice(P).join("."),k=e.path(N),C=l(k,"schema.options.discriminatorKey");if(null!=k&&null!=l(k,"schema.discriminators")&&null!=C&&T!==C){var R=l(r,N+"."+C);null!=R&&(b=k.schema.discriminators[R].path(T))}}if(b){if(null==A)continue;if("Object"===A.constructor.name)if(Object.keys(A).some(p))for(var B=Object.keys(A),D=void 0,M=B.length;M--;)if(w=A[D=B[M]],"$not"===D){if(w&&b&&!b.caster){if((g=Object.keys(w)).length&&p(g[0]))for(var I in w)w[I]=b.castForQueryWrapper({$conditional:I,val:w[I],context:v});else A[D]=b.castForQueryWrapper({$conditional:D,val:w,context:v});continue}t(b.caster?b.caster.schema:e,w,o,v)}else A[D]=b.castForQueryWrapper({$conditional:D,val:w,context:v});else r[O]=b.castForQueryWrapper({val:A,context:v});else if(Array.isArray(A)&&-1===["Buffer","Array"].indexOf(b.instance)){var F,L=[],U=n(A);try{for(U.s();!(F=U.n()).done;){var V=F.value;L.push(b.castForQueryWrapper({val:V,context:v}))}}catch(t){U.e(t)}finally{U.f()}r[O]={$in:L}}else r[O]=b.castForQueryWrapper({val:A,context:v})}else{for(var q=O.split("."),W=q.length,H=void 0,Y=void 0,K=void 0;W--&&(H=q.slice(0,W).join("."),!(b=e.path(H))););if(b){b.caster&&b.caster.schema?((K={})[Y=q.slice(W).join(".")]=A,r[O]=t(b.caster.schema,K,o,v)[Y]):r[O]=A;continue}if(y(A)){var z="";if(A.$near?z="$near":A.$nearSphere?z="$nearSphere":A.$within?z="$within":A.$geoIntersects?z="$geoIntersects":A.$geoWithin&&(z="$geoWithin"),z){var Q=new u.Number("__QueryCasting__"),J=A[z];if(null!=A.$maxDistance&&(A.$maxDistance=Q.castForQueryWrapper({val:A.$maxDistance,context:v})),null!=A.$minDistance&&(A.$minDistance=Q.castForQueryWrapper({val:A.$minDistance,context:v})),"$within"===z){var G=J.$center||J.$centerSphere||J.$box||J.$polygon;if(!G)throw new Error("Bad $within parameter: "+JSON.stringify(A));J=G}else if("$near"===z&&"string"==typeof J.type&&Array.isArray(J.coordinates))J=J.coordinates;else if(("$near"===z||"$nearSphere"===z||"$geoIntersects"===z)&&J.$geometry&&"string"==typeof J.$geometry.type&&Array.isArray(J.$geometry.coordinates))null!=J.$maxDistance&&(J.$maxDistance=Q.castForQueryWrapper({val:J.$maxDistance,context:v})),null!=J.$minDistance&&(J.$minDistance=Q.castForQueryWrapper({val:J.$minDistance,context:v})),d(J.$geometry)&&(J.$geometry=J.$geometry.toObject({transform:!1,virtuals:!1})),J=J.$geometry.coordinates;else if("$geoWithin"===z)if(J.$geometry){d(J.$geometry)&&(J.$geometry=J.$geometry.toObject({virtuals:!1}));var X=J.$geometry.type;if(-1===m.indexOf(X))throw new Error('Invalid geoJSON type for $geoWithin "'+X+'", must be "Polygon" or "MultiPolygon"');J=J.$geometry.coordinates}else J=J.$box||J.$polygon||J.$center||J.$centerSphere,d(J)&&(J=J.toObject({virtuals:!1}));_(J,Q,v);continue}}if(e.nested[O])continue;if(o.upsert&&o.strict){if("throw"===o.strict)throw new a(O);throw new a(O,'Path "'+O+'" is not in schema, strict mode is `true`, and upsert is `true`.')}if("throw"===o.strictQuery)throw new a(O,'Path "'+O+"\" is not in schema and strictQuery is 'throw'.");o.strictQuery&&delete r[O]}}}return r}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(12),i=r(49),s=r(77);
+ */function n(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,i=function(){};return{s:i,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var s=r(12),a=r(32),u=r(54),c=r(154),l=r(4),f=r(155),p=r(80),h=r(3),y=r(20),d=r(29),m=["Polygon","MultiPolygon"];function _(t,e,r){if(Array.isArray(t))t.forEach((function(n,o){if(Array.isArray(n)||y(n))return _(n,e,r);t[o]=e.castForQueryWrapper({val:n,context:r})}));else for(var n=Object.keys(t),o=n.length;o--;){var i=n[o],s=t[i];Array.isArray(s)||y(s)?(_(s,e,r),t[i]=s):t[i]=e.castForQuery({val:s,context:r})}}t.exports=function t(e,r,o,v){if(Array.isArray(r))throw new Error("Query filter must be an object, got an array ",h.inspect(r));if(null==r)return r;r.hasOwnProperty("_bsontype")&&"ObjectID"!==r._bsontype&&delete r._bsontype,null!=e&&null!=e.discriminators&&null!=r[e.options.discriminatorKey]&&(e=f(e,r[e.options.discriminatorKey])||e);var g,b,w,O,S,A,E=Object.keys(r),j=E.length;for(o=o||{};j--;)if(A=r[O=E[j]],"$or"===O||"$nor"===O||"$and"===O){if(!Array.isArray(A))throw new s("Array",A,O);for(var $=0;$<A.length;++$){if(null==A[$]||"object"!==i(A[$]))throw new s("Object",A[$],O+"."+$);A[$]=t(e,A[$],o,v)}}else{if("$where"===O){if("string"!==(S=i(A))&&"function"!==S)throw new Error("Must have a string or function for $where");"function"===S&&(r[O]=A.toString());continue}if("$elemMatch"===O)A=t(e,A,o,v);else if("$text"===O)A=c(A,O);else{if(!e)continue;if(!(b=e.path(O)))for(var x=O.split("."),P=x.length;P--;){var N=x.slice(0,P).join("."),T=x.slice(P).join("."),k=e.path(N),C=l(k,"schema.options.discriminatorKey");if(null!=k&&null!=l(k,"schema.discriminators")&&null!=C&&T!==C){var R=l(r,N+"."+C);null!=R&&(b=k.schema.discriminators[R].path(T))}}if(b){if(null==A)continue;if("Object"===A.constructor.name)if(Object.keys(A).some(p))for(var B=Object.keys(A),D=void 0,M=B.length;M--;)if(w=A[D=B[M]],"$not"===D){if(w&&b&&!b.caster){if((g=Object.keys(w)).length&&p(g[0]))for(var I in w)w[I]=b.castForQueryWrapper({$conditional:I,val:w[I],context:v});else A[D]=b.castForQueryWrapper({$conditional:D,val:w,context:v});continue}t(b.caster?b.caster.schema:e,w,o,v)}else A[D]=b.castForQueryWrapper({$conditional:D,val:w,context:v});else r[O]=b.castForQueryWrapper({val:A,context:v});else if(Array.isArray(A)&&-1===["Buffer","Array"].indexOf(b.instance)){var F,L=[],U=n(A);try{for(U.s();!(F=U.n()).done;){var V=F.value;L.push(b.castForQueryWrapper({val:V,context:v}))}}catch(t){U.e(t)}finally{U.f()}r[O]={$in:L}}else r[O]=b.castForQueryWrapper({val:A,context:v})}else{for(var q=O.split("."),W=q.length,H=void 0,Y=void 0,K=void 0;W--&&(H=q.slice(0,W).join("."),!(b=e.path(H))););if(b){b.caster&&b.caster.schema?((K={})[Y=q.slice(W).join(".")]=A,r[O]=t(b.caster.schema,K,o,v)[Y]):r[O]=A;continue}if(y(A)){var z="";if(A.$near?z="$near":A.$nearSphere?z="$nearSphere":A.$within?z="$within":A.$geoIntersects?z="$geoIntersects":A.$geoWithin&&(z="$geoWithin"),z){var Q=new u.Number("__QueryCasting__"),J=A[z];if(null!=A.$maxDistance&&(A.$maxDistance=Q.castForQueryWrapper({val:A.$maxDistance,context:v})),null!=A.$minDistance&&(A.$minDistance=Q.castForQueryWrapper({val:A.$minDistance,context:v})),"$within"===z){var G=J.$center||J.$centerSphere||J.$box||J.$polygon;if(!G)throw new Error("Bad $within parameter: "+JSON.stringify(A));J=G}else if("$near"===z&&"string"==typeof J.type&&Array.isArray(J.coordinates))J=J.coordinates;else if(("$near"===z||"$nearSphere"===z||"$geoIntersects"===z)&&J.$geometry&&"string"==typeof J.$geometry.type&&Array.isArray(J.$geometry.coordinates))null!=J.$maxDistance&&(J.$maxDistance=Q.castForQueryWrapper({val:J.$maxDistance,context:v})),null!=J.$minDistance&&(J.$minDistance=Q.castForQueryWrapper({val:J.$minDistance,context:v})),d(J.$geometry)&&(J.$geometry=J.$geometry.toObject({transform:!1,virtuals:!1})),J=J.$geometry.coordinates;else if("$geoWithin"===z)if(J.$geometry){d(J.$geometry)&&(J.$geometry=J.$geometry.toObject({virtuals:!1}));var X=J.$geometry.type;if(-1===m.indexOf(X))throw new Error('Invalid geoJSON type for $geoWithin "'+X+'", must be "Polygon" or "MultiPolygon"');J=J.$geometry.coordinates}else J=J.$box||J.$polygon||J.$center||J.$centerSphere,d(J)&&(J=J.toObject({virtuals:!1}));_(J,Q,v);continue}}if(e.nested[O])continue;if(o.upsert&&o.strict){if("throw"===o.strict)throw new a(O);throw new a(O,'Path "'+O+'" is not in schema, strict mode is `true`, and upsert is `true`.')}if("throw"===o.strictQuery)throw new a(O,'Path "'+O+"\" is not in schema and strictQuery is 'throw'.");o.strictQuery&&delete r[O]}}}return r}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(12),i=r(49),s=r(77);
 /*!
  * Casts val to an object suitable for `$text`. Throws an error if the object
  * can't be casted.
@@ -1499,7 +1499,7 @@
 /*!
  * Module dependencies.
  */
-function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(15).get().Binary,i=r(19),s=r(13),a=r(28);
+function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var o=r(15).get().Binary,i=r(19),s=r(13),a=r(29);
 /*!
  * ignore
  */
@@ -1527,7 +1527,7 @@
  */t.exports=function(t){var e=Object.keys(t),r=e.length,o=null;if(1===r&&"_id"===e[0])o=!!t[e[r]];else for(;r--;)if("_id"!==e[r]&&n(t[e[r]])){o=!t[e[r]];break}return o}},function(t,e,r){"use strict";
 /*!
  * Module dependencies
- */function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var s=r(175),a=r(4),u=r(34),c=r(58),l=r(27);
+ */function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t,e){var r;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(r=function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(t,e)}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,a=!0,u=!1;return{s:function(){r=t[Symbol.iterator]()},n:function(){var t=r.next();return a=t.done,t},e:function(t){u=!0,s=t},f:function(){try{a||null==r.return||r.return()}finally{if(u)throw s}}}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var s=r(175),a=r(4),u=r(34),c=r(58),l=r(28);
 /*!
  * Set each path query option to lean
  *
Index: backend/templates/quince/assets/js/files/files.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>$(document).on('click', '.table_home_btn', function(){\r\n\r\n    redirect(`${backend_url}files`);\r\n\r\n})\r\n\r\n\r\n$(document).on('click', '.content_row,.table_backward_btn', function(){\r\n\r\n    let path = $(this).attr('path');\r\n\r\n    if($(this).attr('is-file') != 'true'){\r\n\r\n        $.ajax({\r\n            url : `${backend_url}api/file-manager/content-load`,\r\n            type : 'POST',\r\n            data : {\r\n                path : path\r\n            },\r\n\r\n        })\r\n            .done((data)=>{\r\n\r\n                console.log(data)\r\n                loadNewContent(data);\r\n\r\n            })\r\n\r\n    }\r\n    else{\r\n\r\n        redirect(`${backend_url}api/file-manager/download/?path=${path}`);\r\n\r\n    }\r\n\r\n})\r\n\r\nfunction loadNewContent(data_list){\r\n\r\n    let image_type = ['.png', '.jpeg', '.jpg', '.gif', '.PNG', '.JPG', '.JPEG', '.GIF'];\r\n\r\n    $('.content_row').remove();\r\n    $('.table_backward_btn').attr('path', data_list.parent_directory);\r\n    $('.table_backward_btn').attr('is-file', 'false');\r\n    $('.Breadcrumb_field').text(data_list.breadcrumb);\r\n    console.log(data_list.breadcrumb)\r\n\r\n    for(let data of data_list.content){\r\n\r\n        let icon = ``;\r\n        data.size = data.isFile ? data.size : '';\r\n\r\n        if(!data.isFile){\r\n\r\n            icon = `<i class=\"fas fa-folder\"></i>`;\r\n\r\n        }\r\n        else{\r\n\r\n            if(image_type.includes(data.type)){\r\n                icon = `<i class=\"fad fa-file-image\"></i>`\r\n            }\r\n            else{\r\n                icon = `<i class=\"fad fa-file\"></i>`\r\n            }\r\n\r\n        }\r\n\r\n        let new_content_row = `\r\n        \r\n            <tr class=\"content_row\" path=\"${data.path}\" is-file=\"${data.isFile}\">\r\n                <td class=\"FM_check_box\">\r\n                    <label class=\"checkbox_of_category\">\r\n                        <input type=\"checkbox\" name=\"delete_checkbox[]\" class=\"table_checkbox option-input checkbox\"\r\n                               value=\"${data.path}\">\r\n                    </label>\r\n                </td>\r\n                <td class=\"FM_icons\">\r\n                    ${icon}\r\n                </td>\r\n                <td class=\"text-right pr-0\">\r\n                    ${data.name}\r\n                </td>\r\n                <td class=\"FM_info\">\r\n                    ${data.modified}\r\n                </td>\r\n                <td class=\"FM_info\">\r\n                    ${data.size}\r\n                </td>\r\n\r\n                <td class=\"table_option FM_info\">\r\n                    <div class=\"dropdown\">\r\n                        <button class=\"btn  dropdown-toggle\" type=\"button\" id=\"table_option\" data-toggle=\"dropdown\"\r\n                                aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            <i class=\"fas fa-ellipsis-v\"></i>\r\n                        </button>\r\n                        <div class=\"dropdown-menu\" aria-labelledby=\"table_option\">\r\n                            <a class=\"dropdown-item\" href=\"#\">\r\n                                <i class=\"fal fa-align-slash\"></i>\r\n                                غیر فعال کردن\r\n                            </a>\r\n                            <a class=\"dropdown-item\" href=\"#\">\r\n                                <i class=\"fal fa-asterisk\"></i>\r\n                                افزودن وی ای پی\r\n                            </a>\r\n                            <a class=\"dropdown-item\" href=\"#\">\r\n                                <i class=\"fal fa-assistive-listening-systems\"></i>\r\n                                افزودن گوش و چشم\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        \r\n        `;\r\n\r\n        $('.Q_table').append(new_content_row);\r\n\r\n    }\r\n\r\n}\r\n\r\nfunction redirect(url) {\r\n    location.href = url\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- backend/templates/quince/assets/js/files/files.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ backend/templates/quince/assets/js/files/files.js	(date 1599625186998)
@@ -42,8 +42,7 @@
     $('.content_row').remove();
     $('.table_backward_btn').attr('path', data_list.parent_directory);
     $('.table_backward_btn').attr('is-file', 'false');
-    $('.Breadcrumb_field').text(data_list.breadcrumb);
-    console.log(data_list.breadcrumb)
+    $('.Breadcrumb_field').text('شاخه اصلی/' + data_list.breadcrumb);
 
     for(let data of data_list.content){
 
Index: node_modules/mongoose/node_modules/mongodb/lib/operations/create_indexes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'use strict';\r\n\r\nconst Aspect = require('./operation').Aspect;\r\nconst defineAspects = require('./operation').defineAspects;\r\nconst CommandOperationV2 = require('./command_v2');\r\nconst MongoError = require('../core').MongoError;\r\nconst parseIndexOptions = require('../utils').parseIndexOptions;\r\nconst maxWireVersion = require('../core/utils').maxWireVersion;\r\n\r\nconst validIndexOptions = new Set([\r\n  'unique',\r\n  'partialFilterExpression',\r\n  'sparse',\r\n  'background',\r\n  'expireAfterSeconds',\r\n  'storageEngine',\r\n  'collation',\r\n  'bucketSize'\r\n]);\r\n\r\nclass CreateIndexesOperation extends CommandOperationV2 {\r\n  /**\r\n   * @ignore\r\n   */\r\n  constructor(parent, collection, indexes, options) {\r\n    super(parent, options);\r\n    this.collection = collection;\r\n\r\n    // createIndex can be called with a variety of styles:\r\n    //   coll.createIndex('a');\r\n    //   coll.createIndex({ a: 1 });\r\n    //   coll.createIndex([['a', 1]]);\r\n    // createIndexes is always called with an array of index spec objects\r\n    if (!Array.isArray(indexes) || Array.isArray(indexes[0])) {\r\n      this.onlyReturnNameOfCreatedIndex = true;\r\n      // TODO: remove in v4 (breaking change); make createIndex return full response as createIndexes does\r\n\r\n      const indexParameters = parseIndexOptions(indexes);\r\n      // Generate the index name\r\n      const name = typeof options.name === 'string' ? options.name : indexParameters.name;\r\n      // Set up the index\r\n      const indexSpec = { name, key: indexParameters.fieldHash };\r\n      // merge valid index options into the index spec\r\n      for (let optionName in options) {\r\n        if (validIndexOptions.has(optionName)) {\r\n          indexSpec[optionName] = options[optionName];\r\n        }\r\n      }\r\n      this.indexes = [indexSpec];\r\n      return;\r\n    }\r\n\r\n    this.indexes = indexes;\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  execute(server, callback) {\r\n    const options = this.options;\r\n    const indexes = this.indexes;\r\n\r\n    const serverWireVersion = maxWireVersion(server);\r\n\r\n    // Ensure we generate the correct name if the parameter is not set\r\n    for (let i = 0; i < indexes.length; i++) {\r\n      // Did the user pass in a collation, check if our write server supports it\r\n      if (indexes[i].collation && serverWireVersion < 5) {\r\n        callback(\r\n          new MongoError(\r\n            `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\r\n          )\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (indexes[i].name == null) {\r\n        const keys = [];\r\n\r\n        for (let name in indexes[i].key) {\r\n          keys.push(`${name}_${indexes[i].key[name]}`);\r\n        }\r\n\r\n        // Set the name\r\n        indexes[i].name = keys.join('_');\r\n      }\r\n    }\r\n\r\n    const cmd = { createIndexes: this.collection, indexes };\r\n\r\n    if (options.commitQuorum != null) {\r\n      if (serverWireVersion < 9) {\r\n        callback(\r\n          new MongoError('`commitQuorum` option for `createIndexes` not supported on servers < 4.4')\r\n        );\r\n        return;\r\n      }\r\n      cmd.commitQuorum = options.commitQuorum;\r\n    }\r\n\r\n    // collation is set on each index, it should not be defined at the root\r\n    this.options.collation = undefined;\r\n\r\n    super.executeCommand(server, cmd, (err, result) => {\r\n      if (err) {\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      callback(null, this.onlyReturnNameOfCreatedIndex ? indexes[0].name : result);\r\n    });\r\n  }\r\n}\r\n\r\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION, Aspect.EXECUTE_WITH_SELECTION]);\r\n\r\nmodule.exports = CreateIndexesOperation;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- node_modules/mongoose/node_modules/mongodb/lib/operations/create_indexes.js	(revision 457aa6f4a57d80c2c388646fadd5e3132ba45763)
+++ node_modules/mongoose/node_modules/mongodb/lib/operations/create_indexes.js	(date 499162500000)
@@ -7,15 +7,35 @@
 const parseIndexOptions = require('../utils').parseIndexOptions;
 const maxWireVersion = require('../core/utils').maxWireVersion;
 
-const validIndexOptions = new Set([
+const VALID_INDEX_OPTIONS = new Set([
+  'background',
   'unique',
+  'name',
   'partialFilterExpression',
   'sparse',
-  'background',
   'expireAfterSeconds',
   'storageEngine',
   'collation',
-  'bucketSize'
+
+  // text indexes
+  'weights',
+  'default_language',
+  'language_override',
+  'textIndexVersion',
+
+  // 2d-sphere indexes
+  '2dsphereIndexVersion',
+
+  // 2d indexes
+  'bits',
+  'min',
+  'max',
+
+  // geoHaystack Indexes
+  'bucketSize',
+
+  // wildcard indexes
+  'wildcardProjection'
 ]);
 
 class CreateIndexesOperation extends CommandOperationV2 {
@@ -42,7 +62,7 @@
       const indexSpec = { name, key: indexParameters.fieldHash };
       // merge valid index options into the index spec
       for (let optionName in options) {
-        if (validIndexOptions.has(optionName)) {
+        if (VALID_INDEX_OPTIONS.has(optionName)) {
           indexSpec[optionName] = options[optionName];
         }
       }
diff --git node_modules/bl/.travis.yml node_modules/bl/.travis.yml
diff --git node_modules/bl/README.md node_modules/bl/README.md
diff --git node_modules/bl/LICENSE.md node_modules/bl/LICENSE.md
diff --git node_modules/bl/.jshintrc node_modules/bl/.jshintrc
diff --git node_modules/bl/test/indexOf.js node_modules/bl/test/indexOf.js
